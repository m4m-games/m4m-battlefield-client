/// <reference types="../../../lib/node_modules/@types/gameUtil" />
/// <reference types="../../../lib/node_modules/@types/engine" />
/// <reference types="../../../lib/node_modules/@types/gameMain" />
declare module "gaming" {
    import { newUiBase } from "PSDUI/newUiBase";
    export class gaming extends newUiBase {
        static Instance: gaming;
        onInit(): void;
        private arrowbtn1_btn_event;
        /**this.leftbg.arrowbtn1_btn.button 的按钮事件*/
        arrowbtn1_btn_btnEvent: () => any;
        private listbutton_btn_event;
        /**this.leftbg.leftbg1.listbutton_btn.button 的按钮事件*/
        listbutton_btn_btnEvent: () => any;
        /**修改label 名字修改label文字方法*/
        name_lab_text(text: string): void;
        /**修改label  this.leftbg.leftbg1.leftblack1_img.downbg_img.downlab1_lab.label 修改label文字方法*/
        downlab1_lab_text(text: string): void;
        /**修改label  this.leftbg.leftbg1.leftblack1_img.downbg_img.leftdownblack_img.leftdownlab_lab.label 修改label文字方法*/
        leftdownlab_lab_text(text: string): void;
        /**修改label  this.leftbg.leftbg1.leftblack1_img.downbg_img.downlabbg.downlab2_lab.label 修改label文字方法*/
        downlab2_lab_text(text: string): void;
        /**修改label  this.leftbg.leftbg1.leftblack1_img.downbg_img.downlabbg.downlab3_lab.label 修改label文字方法*/
        downlab3_lab_text(text: string): void;
        /**修改label  this.leftbg.leftbg1.leftblack1_img.downbg_img.downlabbg.downlab4_lab.label 修改label文字方法*/
        downlab4_lab_text(text: string): void;
        /**修改label 玩家名单修改label文字方法*/
        lefttoplab_lab_text(text: string): void;
        /**修改label 存活修改label文字方法*/
        lefttoplab1_lab_text(text: string): void;
        /**修改label 死亡修改label文字方法*/
        lefttoplab2_lab_text(text: string): void;
        /**修改label 死亡编号修改label文字方法*/
        deathnumber_lab_text(text: string): void;
        /**修改label 存活编号修改label文字方法*/
        alivenumber_lab_text(text: string): void;
        /**修改label  this.rightbg1.ms_lab.label 修改label文字方法*/
        ms_lab_text(text: string): void;
        /**修改label 修改label文字方法*/
        toplab1_lab_text(text: string): void;
        /**修改label 修改label文字方法*/
        time_lab_text(text: string): void;
        uiName: string;
        gamingbg: gamingbg;
        redmask_img: redmask_img;
        /***/
        statebg: statebg;
        leftbg: leftbg;
        rightbg1: rightbg1;
        topbg: topbg;
        slideareabg: slideareabg;
    }
    export class gamingbg {
        transform: m4m.framework.transform2D;
    }
    export class redmask_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
    }
    export class statebg {
        transform: m4m.framework.transform2D;
        /***/
        blood5_bar: blood5_bar;
        bloodbg_img: bloodbg_img;
        blood3_img: blood3_img;
        blood2_img: blood2_img;
        blood1_img: blood1_img;
        /**名字*/
        name_lab: name_lab;
    }
    export class blood5_bar {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
        progressbar: m4m.framework.progressbar;
        blood5cut: blood5cut;
    }
    export class blood5cut {
        transform: m4m.framework.transform2D;
        /***/
        blood4_img: blood4_img;
    }
    export class blood4_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
    }
    export class bloodbg_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
    }
    export class blood3_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
    }
    export class blood2_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
    }
    export class blood1_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
    }
    export class name_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
    }
    export class leftbg {
        transform: m4m.framework.transform2D;
        arrowbtn1_btn: arrowbtn1_btn;
        leftbg1: leftbg1;
    }
    export class arrowbtn1_btn {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
        button: m4m.framework.button;
        arrowbtn_img: arrowbtn_img;
    }
    export class arrowbtn_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
    }
    export class leftbg1 {
        transform: m4m.framework.transform2D;
        leftblack1_img: leftblack1_img;
        leftblack2_img: leftblack2_img;
        listbutton_btn: listbutton_btn;
    }
    export class leftblack1_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
        downbg_img: downbg_img;
    }
    export class downbg_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
        downlab1_lab: downlab1_lab;
        leftdownblack_img: leftdownblack_img;
        downlabbg: downlabbg;
    }
    export class downlab1_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
    }
    export class leftdownblack_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
        leftdownlab_lab: leftdownlab_lab;
    }
    export class leftdownlab_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
    }
    export class downlabbg {
        transform: m4m.framework.transform2D;
        downlab2_lab: downlab2_lab;
        downlab3_lab: downlab3_lab;
        downlab4_lab: downlab4_lab;
        downcup_img: downcup_img;
    }
    export class downlab2_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
    }
    export class downlab3_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
    }
    export class downlab4_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
    }
    export class downcup_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
    }
    export class leftblack2_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
        lefttopbg: lefttopbg;
        /**名单滑动区域*/
        slide_scr: slide_scr;
    }
    export class lefttopbg {
        transform: m4m.framework.transform2D;
        leftblack_img: leftblack_img;
        /**玩家名单*/
        lefttoplab_lab: lefttoplab_lab;
        lefttoprgbg: lefttoprgbg;
    }
    export class leftblack_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
    }
    export class lefttoplab_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
    }
    export class lefttoprgbg {
        transform: m4m.framework.transform2D;
        /**存活*/
        lefttoplab1_lab: lefttoplab1_lab;
        /**死亡*/
        lefttoplab2_lab: lefttoplab2_lab;
        lefttopr_img: lefttopr_img;
        lefttopg_img: lefttopg_img;
    }
    export class lefttoplab1_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
    }
    export class lefttoplab2_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
    }
    export class lefttopr_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
    }
    export class lefttopg_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
    }
    export class slide_scr {
        transform: m4m.framework.transform2D;
        scrollRect: m4m.framework.scrollRect;
        slidecontent: slidecontent;
    }
    export class slidecontent {
        transform: m4m.framework.transform2D;
        numberbg: numberbg;
    }
    export class numberbg {
        transform: m4m.framework.transform2D;
        /**死亡编号*/
        deathnumber_lab: deathnumber_lab;
    }
    export class deathnumber_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
        /**存活编号*/
        alivenumber_lab: alivenumber_lab;
    }
    export class alivenumber_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
    }
    export class listbutton_btn {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
        button: m4m.framework.button;
    }
    export class rightbg1 {
        transform: m4m.framework.transform2D;
        signal_img: signal_img;
        ms_lab: ms_lab;
    }
    export class signal_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
    }
    export class ms_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
    }
    export class topbg {
        transform: m4m.framework.transform2D;
        topradbg_img: topradbg_img;
        /***/
        toplab1_lab: toplab1_lab;
    }
    export class topradbg_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
    }
    export class toplab1_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
    }
    export class slideareabg {
        transform: m4m.framework.transform2D;
        /***/
        slideunit_scr: slideunit_scr;
    }
    export class slideunit_scr {
        transform: m4m.framework.transform2D;
        scrollRect: m4m.framework.scrollRect;
        slideunitcontent: slideunitcontent;
    }
    export class slideunitcontent {
        transform: m4m.framework.transform2D;
        jianbianbg_img: jianbianbg_img;
    }
    export class jianbianbg_img {
        transform: m4m.framework.transform2D;
        image: m4m.framework.image2D;
        /***/
        time_lab: time_lab;
    }
    export class time_lab {
        transform: m4m.framework.transform2D;
        label: m4m.framework.label;
    }
}
declare module "TopBar" {
    import { IDispose } from "Tools/engineParallel/spInterface";
    import { statebg } from "gaming";
    export class TopBar implements IDispose {
        bar: statebg;
        barTrans: m4m.framework.transform2D;
        barMaxWidth: number;
        constructor(bar: statebg);
        private topRoot;
        /** 设置根节点 */
        setRoot(topRoot: m4m.framework.transform2D): void;
        /** 设置坐标 */
        setPos(pos: m4m.math.vector2): void;
        /** 设置是否显示 */
        setVisible(v: boolean): void;
        /** 设置名称 */
        setPlayerName(str: string): void;
        /**
         * 设置 HP 进度条
         * @param normal 单位进度百分比值 （0 - 1）
         */
        setHP(normal: number): void;
        dispose(): void;
    }
}
declare module "TopBarCtr" {
    import { statebg } from "gaming";
    import { TopBar } from "TopBar";
    type transform2D = m4m.framework.transform2D;
    /** 头顶状态条 控制 */
    export class TopBarCtr {
        static get instance(): TopBarCtr;
        private static _instance;
        private topRoot;
        private templete;
        init(templete: statebg): void;
        onShow(uiRoot: transform2D): void;
        onHide(): void;
        /** 获取 一个bar */
        newBar(): TopBar;
    }
}
declare module "gamingCell" {
    import { CommonCell } from "Common/CommonCell";
    export class gamingCell extends CommonCell {
        private nowClass;
        setCellClass(value: any): void;
        onPlay(): void;
        selectFun(selectbool: boolean): void;
        setData(value: any): void;
    }
}
declare module "gamingrnCell" {
    import { CommonCell } from "Common/CommonCell";
    export class gamingrnCell extends CommonCell {
        private nowClass;
        setCellClass(value: any): void;
        onPlay(): void;
        selectFun(selectbool: boolean): void;
        setData(value: any): void;
    }
}
declare module "gamingViewData" {
    import { ViewBaseData } from "Data/ViewBaseData";
    export class gamingViewData implements ViewBaseData {
        private list;
        private listekas;
        private main;
        private NetworkBindFun;
        private max;
        data: any;
        playeData: any;
        datatype: any;
        lists: any[];
        youlist: any[];
        obj: any[];
        objset: any[];
        blone: boolean;
        private playerDeath;
        private GlassFun;
        dataType: any[];
        WoodFun: any;
        listeat: number;
        woodate: any[];
        tiems: any;
        tygoFun: any;
        listdata: any;
        hoodleFun: any;
        EyeVerifyBindFun: any;
        listEye: any;
        dataEye: any;
        maxEye: any;
        store: boolean;
        gamingdataFun: any;
        ScenarioBindFun: any;
        rolegminaBindFun: any;
        constructor();
        EyeVerifyFun(listte: any): void;
        newMethod(listte: any): void;
        private newMethods;
        playeDataFun(list: any): void;
        private Guimanletdata;
        private roleDeathFun;
        GlassIntegralFun(data: any): void;
        WoodIntegralFun(data: any): void;
        tugOfWarProFun(data: any): void;
        hoodleItegralFun(data: any): void;
        dispose(): void;
        NetworkFun(data: any): void;
        showlist(list: any): void;
        listeka(list: any): void;
        carousel(): void;
        showdata(data: any): void;
    }
    export class Integrlse {
        count: string;
        num: string;
        timeintegr: string;
        time: string;
    }
}
declare module "gamingView" {
    import { Grid } from "Data/Grid";
    import { ListModel } from "Data/ListModel";
    import { uiLayerType } from "PSDUI/UiManager";
    import { gaming } from "gaming";
    import { gamingViewData } from "gamingViewData";
    /**游戏中的倒计时界面*/
    export class gamingView extends gaming {
        static Instance: gamingView;
        noAffected: boolean;
        /** 当前UI是否会影响场景玩家操作 */
        influenceSceneAction: boolean;
        uiLayer: uiLayerType;
        /** 状态条模板 */
        private slotRoleBarMap;
        private isReadyBol;
        private zoomNum;
        private topBarVisible;
        private viewToucherPad;
        private readonly defaultColor;
        private startTimeCDFunBind;
        private runningTimeCDFunBind;
        private onBattleRoleTopBind;
        private onPlayerDeadBind;
        private readyTimeCDFunBind;
        private setTopBarVisibleBind;
        private enableGamingToucherBind;
        private clearTopBarBind;
        private leftbgFun;
        ViewData: gamingViewData;
        mygrid: Grid;
        mygListModel: ListModel<any>;
        private Textlaber;
        rnygrid: Grid;
        rnygrListModel: ListModel<any>;
        bgRealH: number;
        tiemat: number;
        onInit(): void;
        Text(data: any): void;
        onShowFunc(): void;
        onDisposeFunc(): void;
        onHideFunc(): void;
        oninfogamingGrid(): void;
        oninforankinglist(): void;
        private onBattleRoleTop;
        private setTopBarVisibleFun;
        private clearTopBar;
        private startTimeCDFun;
        private runningTimeCDFun;
        bool: boolean;
        private readyTimeCDFun;
        private onUpdateFun;
        private getBar;
        private updateHpBarFun;
        private updateHpBarVisible;
        private onPlayerDead;
        arrowbtn(): void;
        leftbgBtnDown(): void;
        private enableGamingToucherFun;
        private onPointDown;
        private onPointUp;
        private onPointMove;
        leftblack(): void;
    }
}
//# sourceMappingURL=gaming.d.ts.map