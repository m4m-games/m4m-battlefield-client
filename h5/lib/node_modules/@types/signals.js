var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
System.register("signals", ["PSDUI/newUiBase"], function (exports_1, context_1) {
    "use strict";
    var newUiBase_1, signals, gamebg, jianbianbg_img, time_lab, signalbg, signal_img, number_img, ms_img;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (newUiBase_1_1) {
                newUiBase_1 = newUiBase_1_1;
            }
        ],
        execute: function () {
            signals = /** @class */ (function (_super) {
                __extends(signals, _super);
                function signals() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.uiName = "signals";
                    /***/
                    _this.gamebg = new gamebg();
                    _this.jianbianbg_img = new jianbianbg_img();
                    /**倒计时*/
                    _this.time_lab = new time_lab();
                    _this.signalbg = new signalbg();
                    return _this;
                }
                signals.prototype.onInit = function () {
                    if (this.onInite) {
                        this.onInite();
                    }
                    //添加按钮事件
                };
                //按钮事件
                //文字修改方法
                /**修改label 倒计时修改label文字方法*/
                signals.prototype.time_lab_text = function (text) { this.time_lab.label.text = text; };
                return signals;
            }(newUiBase_1.newUiBase));
            exports_1("signals", signals);
            gamebg = /** @class */ (function () {
                function gamebg() {
                }
                return gamebg;
            }());
            exports_1("gamebg", gamebg);
            jianbianbg_img = /** @class */ (function () {
                function jianbianbg_img() {
                }
                return jianbianbg_img;
            }());
            exports_1("jianbianbg_img", jianbianbg_img);
            time_lab = /** @class */ (function () {
                function time_lab() {
                }
                return time_lab;
            }());
            exports_1("time_lab", time_lab);
            signalbg = /** @class */ (function () {
                function signalbg() {
                    this.signal_img = new signal_img();
                    this.number_img = new number_img();
                    this.ms_img = new ms_img();
                }
                return signalbg;
            }());
            exports_1("signalbg", signalbg);
            signal_img = /** @class */ (function () {
                function signal_img() {
                }
                return signal_img;
            }());
            exports_1("signal_img", signal_img);
            number_img = /** @class */ (function () {
                function number_img() {
                }
                return number_img;
            }());
            exports_1("number_img", number_img);
            ms_img = /** @class */ (function () {
                function ms_img() {
                }
                return ms_img;
            }());
            exports_1("ms_img", ms_img);
        }
    };
});
System.register("signalsView", ["Data/BindKeyName", "Data/CommonUIUtils", "Net/PingTimeManager", "PSDUI/UiDataManager", "PSDUI/UiManager", "Tools/FrameMgr", "signals"], function (exports_2, context_2) {
    "use strict";
    var BindKeyName_1, CommonUIUtils_1, PingTimeManager_1, UiDataManager_1, UiManager_1, FrameMgr_1, signals_1, signalsView;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [
            function (BindKeyName_1_1) {
                BindKeyName_1 = BindKeyName_1_1;
            },
            function (CommonUIUtils_1_1) {
                CommonUIUtils_1 = CommonUIUtils_1_1;
            },
            function (PingTimeManager_1_1) {
                PingTimeManager_1 = PingTimeManager_1_1;
            },
            function (UiDataManager_1_1) {
                UiDataManager_1 = UiDataManager_1_1;
            },
            function (UiManager_1_1) {
                UiManager_1 = UiManager_1_1;
            },
            function (FrameMgr_1_1) {
                FrameMgr_1 = FrameMgr_1_1;
            },
            function (signals_1_1) {
                signals_1 = signals_1_1;
            }
        ],
        execute: function () {
            /*信号界面*/
            signalsView = /** @class */ (function (_super) {
                __extends(signalsView, _super);
                function signalsView() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.uiLayer = UiManager_1.uiLayerType.poplayer;
                    _this.listekas = true;
                    _this.manxse = 0;
                    /** 当前UI是否会影响场景玩家操作 */
                    _this.influenceSceneAction = false;
                    return _this;
                }
                signalsView.prototype.onInit = function () {
                    _super.prototype.onInit.call(this);
                    this.NetworkBindFun = this.NetworkFun.bind(this);
                    UiDataManager_1.UiDataManager.bindFunctionData(BindKeyName_1.BindKeyName.Network, this.NetworkBindFun);
                    this.signalbg.number_img.transform.visible = false;
                    this.proNumImg = CommonUIUtils_1.CommonUIUtils.getImgSpriteArrange(this.signalbg.number_img.image, m4m.framework.layoutOption.LEFT, m4m.framework.layoutOption.V_CENTER);
                    this.time_lab.label.text = "Your network quality is poor and the game is performing abnormally, please switch to a better network.";
                    this.time_lab.label.color = new m4m.math.color(1, 0, 0);
                    this.time_lab.transform.visible = false;
                    this.jianbianbg_img.transform.visible = false;
                };
                signalsView.prototype.NetworkFun = function (data) {
                    this.list = PingTimeManager_1.PingTimeManager.Instance.getNetworkQuality();
                    this.showlist(this.list);
                    this.showdata(data);
                };
                signalsView.prototype.showlist = function (list) {
                    if (list == 1) {
                        var iconType = signalsView.Instance.uiName + ".atlas.json_signalg";
                        this.signalbg.signal_img.image.sprite = CommonUIUtils_1.CommonUIUtils.getSprite(iconType);
                    }
                    else if (list == 2) {
                        var iconType = signalsView.Instance.uiName + ".atlas.json_signalo";
                        this.signalbg.signal_img.image.sprite = CommonUIUtils_1.CommonUIUtils.getSprite(iconType);
                    }
                    else {
                        var iconType = signalsView.Instance.uiName + ".atlas.json_signalr";
                        this.signalbg.signal_img.image.sprite = CommonUIUtils_1.CommonUIUtils.getSprite(iconType);
                        this.listeka(list);
                    }
                };
                signalsView.prototype.showdata = function (data) {
                    if (data <= 100) {
                        this.proNumImg.setNum(data);
                        var list = new m4m.math.color(0, 1, 0, 1);
                        this.proNumImg.setColor(list);
                        this.signalbg.ms_img.image.color = new m4m.math.color(0, 1, 0);
                    }
                    else if (data <= 200 && data > 100) {
                        this.proNumImg.setNum(data);
                        var list = new m4m.math.color(1, 1, 0, 1);
                        this.proNumImg.setColor(list);
                        this.signalbg.ms_img.image.color = new m4m.math.color(1, 1, 0);
                    }
                    else {
                        this.proNumImg.setNum(data);
                        var list = new m4m.math.color(1, 0, 0, 1);
                        this.proNumImg.setColor(list);
                        this.signalbg.ms_img.image.color = new m4m.math.color(1, 0, 0);
                    }
                    this.signalbg.ms_img.transform.setLayoutValue(m4m.framework.layoutOption.LEFT, this.proNumImg.transform.width + 3);
                    this.signalbg.ms_img.transform.markDirty();
                };
                signalsView.prototype.carousel = function () {
                    var listes = this.gamebg.transform.width + 300;
                    var late;
                    var listt;
                    listt = Math.floor(listes);
                    if (listt % 2 != 0) {
                        late = listt + 1;
                    }
                    else {
                        late = Math.floor(listes);
                    }
                    var count;
                    var main;
                    var manxse = 0;
                    if (this.liste == 1) {
                        manxse = 1;
                    }
                    else if (this.liste == 2) {
                        manxse = 2;
                    }
                    if (this.main == null) {
                        count = late - 2;
                        this.main = count;
                    }
                    else {
                        if (this.main != -600) {
                            count = this.main - 2;
                            this.main = count;
                        }
                        else {
                            this.main = late;
                            main = manxse + 1;
                            this.liste = main;
                        }
                    }
                    if (this.liste == 3) {
                        FrameMgr_1.FrameMgr.Remove(this.carousel, this);
                        this.jianbianbg_img.transform.visible = false;
                        this.time_lab.transform.visible = false;
                        this.listekas = true;
                        this.liste = 0;
                    }
                    else if (this.liste == 1) {
                        this.jianbianbg_img.transform.visible = true;
                        this.time_lab.transform.visible = true;
                        this.listekas = false;
                    }
                    this.time_lab.transform.setLayoutValue(m4m.framework.layoutOption.LEFT, count);
                    this.time_lab.transform.markDirty();
                };
                signalsView.prototype.listeka = function (list) {
                    if (list == 3) {
                        if (this.listekas == true) {
                            this.jianbianbg_img.transform.visible = true;
                            this.time_lab.transform.visible = true;
                            FrameMgr_1.FrameMgr.Add(this.carousel, this);
                        }
                    }
                };
                return signalsView;
            }(signals_1.signals));
            exports_2("signalsView", signalsView);
        }
    };
});
//# sourceMappingURL=signals.js.map