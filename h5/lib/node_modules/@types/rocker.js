var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
System.register("rocker", ["PSDUI/newUiBase"], function (exports_1, context_1) {
    "use strict";
    var newUiBase_1, rocker, buttonb2_img, buttona1_btn, knifeb_img, knifea_btn, barb_img, bara_btn, barcd_img, cd_lab, buttonb_img, buttona_btn, rockbg_img, rock_btn;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (newUiBase_1_1) {
                newUiBase_1 = newUiBase_1_1;
            }
        ],
        execute: function () {
            rocker = /** @class */ (function (_super) {
                __extends(rocker, _super);
                function rocker() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.uiName = "rocker";
                    _this.buttonb2_img = new buttonb2_img();
                    _this.buttonb_img = new buttonb_img();
                    _this.rockbg_img = new rockbg_img();
                    return _this;
                }
                rocker.prototype.onInit = function () {
                    if (this.onInite) {
                        this.onInite();
                    }
                    //添加按钮事件
                    this.buttonb2_img.buttona1_btn.button.addListener(m4m.event.UIEventEnum.PointerClick, this.buttona1_btn_event, this);
                    this.buttonb2_img.knifea_btn.button.addListener(m4m.event.UIEventEnum.PointerClick, this.knifea_btn_event, this);
                    this.buttonb2_img.bara_btn.button.addListener(m4m.event.UIEventEnum.PointerClick, this.bara_btn_event, this);
                    this.buttonb_img.buttona_btn.button.addListener(m4m.event.UIEventEnum.PointerClick, this.buttona_btn_event, this);
                    this.rockbg_img.rock_btn.button.addListener(m4m.event.UIEventEnum.PointerClick, this.rock_btn_event, this);
                };
                //按钮事件
                rocker.prototype.buttona1_btn_event = function () { if (this.buttona1_btn_btnEvent)
                    this.buttona1_btn_btnEvent(); };
                ;
                rocker.prototype.knifea_btn_event = function () { if (this.knifea_btn_btnEvent)
                    this.knifea_btn_btnEvent(); };
                ;
                rocker.prototype.bara_btn_event = function () { if (this.bara_btn_btnEvent)
                    this.bara_btn_btnEvent(); };
                ;
                rocker.prototype.buttona_btn_event = function () { if (this.buttona_btn_btnEvent)
                    this.buttona_btn_btnEvent(); };
                ;
                rocker.prototype.rock_btn_event = function () { if (this.rock_btn_btnEvent)
                    this.rock_btn_btnEvent(); };
                ;
                //文字修改方法
                /**修改label  this.buttonb2_img.cd_lab.label 修改label文字方法*/
                rocker.prototype.cd_lab_text = function (text) { this.buttonb2_img.cd_lab.label.text = text; };
                return rocker;
            }(newUiBase_1.newUiBase));
            exports_1("rocker", rocker);
            buttonb2_img = /** @class */ (function () {
                function buttonb2_img() {
                    this.buttona1_btn = new buttona1_btn();
                    this.knifeb_img = new knifeb_img();
                    this.knifea_btn = new knifea_btn();
                    this.barb_img = new barb_img();
                    this.bara_btn = new bara_btn();
                    /***/
                    this.barcd_img = new barcd_img();
                    this.cd_lab = new cd_lab();
                }
                return buttonb2_img;
            }());
            exports_1("buttonb2_img", buttonb2_img);
            buttona1_btn = /** @class */ (function () {
                function buttona1_btn() {
                }
                return buttona1_btn;
            }());
            exports_1("buttona1_btn", buttona1_btn);
            knifeb_img = /** @class */ (function () {
                function knifeb_img() {
                }
                return knifeb_img;
            }());
            exports_1("knifeb_img", knifeb_img);
            knifea_btn = /** @class */ (function () {
                function knifea_btn() {
                }
                return knifea_btn;
            }());
            exports_1("knifea_btn", knifea_btn);
            barb_img = /** @class */ (function () {
                function barb_img() {
                }
                return barb_img;
            }());
            exports_1("barb_img", barb_img);
            bara_btn = /** @class */ (function () {
                function bara_btn() {
                }
                return bara_btn;
            }());
            exports_1("bara_btn", bara_btn);
            barcd_img = /** @class */ (function () {
                function barcd_img() {
                }
                return barcd_img;
            }());
            exports_1("barcd_img", barcd_img);
            cd_lab = /** @class */ (function () {
                function cd_lab() {
                }
                return cd_lab;
            }());
            exports_1("cd_lab", cd_lab);
            buttonb_img = /** @class */ (function () {
                function buttonb_img() {
                    this.buttona_btn = new buttona_btn();
                }
                return buttonb_img;
            }());
            exports_1("buttonb_img", buttonb_img);
            buttona_btn = /** @class */ (function () {
                function buttona_btn() {
                }
                return buttona_btn;
            }());
            exports_1("buttona_btn", buttona_btn);
            rockbg_img = /** @class */ (function () {
                function rockbg_img() {
                    this.rock_btn = new rock_btn();
                }
                return rockbg_img;
            }());
            exports_1("rockbg_img", rockbg_img);
            rock_btn = /** @class */ (function () {
                function rock_btn() {
                }
                return rock_btn;
            }());
            exports_1("rock_btn", rock_btn);
        }
    };
});
System.register("rockerView", ["Data/BindKeyName", "eventMgr", "Manager/ShowAttackManager", "PSDUI/UiDataManager", "Tools/PlatformUtil", "rocker"], function (exports_2, context_2) {
    "use strict";
    var BindKeyName_1, eventMgr_1, ShowAttackManager_1, UiDataManager_1, PlatformUtil_1, rocker_1, rockerView;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [
            function (BindKeyName_1_1) {
                BindKeyName_1 = BindKeyName_1_1;
            },
            function (eventMgr_1_1) {
                eventMgr_1 = eventMgr_1_1;
            },
            function (ShowAttackManager_1_1) {
                ShowAttackManager_1 = ShowAttackManager_1_1;
            },
            function (UiDataManager_1_1) {
                UiDataManager_1 = UiDataManager_1_1;
            },
            function (PlatformUtil_1_1) {
                PlatformUtil_1 = PlatformUtil_1_1;
            },
            function (rocker_1_1) {
                rocker_1 = rocker_1_1;
            }
        ],
        execute: function () {
            /**
             * 摇杆 按钮 操控 界面
             */
            // tslint:disable-next-line: class-name
            rockerView = /** @class */ (function (_super) {
                __extends(rockerView, _super);
                function rockerView() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    // tslint:disable-next-line: jsdoc-format
                    /**其他面板show 时 不隐藏 */
                    _this.notHideOnOtherShow = true;
                    _this.noAffected = true;
                    /** 当前UI是否会影响场景玩家操作 */
                    _this.influenceSceneAction = false;
                    _this.showAttack = false;
                    _this._evJoy = new eventMgr_1.EventGeneric(new m4m.math.vector2());
                    _this._evJoyRelease = new eventMgr_1.EventGeneric();
                    _this._evA = new eventMgr_1.EventGeneric();
                    _this._evB = new eventMgr_1.EventGeneric();
                    _this._evView = new eventMgr_1.EventGeneric(new m4m.math.vector2());
                    _this._evViewDown = new eventMgr_1.EventGeneric();
                    _this._viewDownPoint = new m4m.math.vector2();
                    //private setRockerVisibleBinder: FunctionBinder;
                    _this._touchEnable = true;
                    return _this;
                }
                rockerView.prototype.onInit = function () {
                    _super.prototype.onInit.call(this);
                    this.initJoyStick();
                    this.initBtns();
                    this.onShow = this.onShowFunc.bind(this);
                    this.onHide = this.onHideFunc.bind(this);
                    this.onDispose = this.distroy.bind(this);
                    //PC 平台设置
                    this.bType = PlatformUtil_1.PlatformUtil.getTypeByBrowser();
                    this.setViewTouch(this.bType == PlatformUtil_1.PlatformType.PC);
                    // 监听摇杆显示隐藏
                    //this.setRockerVisibleBinder = UiDataManager.bindFunctionData(BindKeyName.showOrHideRocker, this.setRockerVisible.bind(this));
                    if (this.bType == PlatformUtil_1.PlatformType.PC) {
                        this.joyRoot.visible = false;
                        this.jumpBtn1.transform.visible = false;
                        this.jumpBtn2.transform.visible = false;
                        // this.attackBtn.transform.visible = false;
                        this.rockbg.transform.visible = false;
                    }
                    else {
                        //ios 滑动 和 移动影响问题
                        var opt = m4m.framework.layoutOption;
                        this.viewRoot.setLayoutValue(opt.LEFT, 400);
                    }
                    this.cd_lab_text("");
                    this.buttonb2_img.barcd_img.transform.visible = false;
                    this.showAttackBtnFunc(false);
                    this.showAttackBtnBind = UiDataManager_1.UiDataManager.bindFunctionData(BindKeyName_1.BindKeyName.showAttackBtn, this.showAttackBtnFunc.bind(this));
                    //event reg
                    eventMgr_1.EventMgr.addListener("rocker_View_TouchEnable", this.onRockerViewEnable, this);
                    eventMgr_1.EventMgr.addListener("rocker_View_FocusResetState", this.onFocusResetState, this);
                };
                rockerView.prototype.showAttackBtnFunc = function (v) {
                    this.showAttack = v;
                    if (this.bType != PlatformUtil_1.PlatformType.PC) {
                        this.buttonb2_img.transform.visible = v;
                        //this.buttonb2_img.barb_img.transform.visible = v;
                        this.buttonb_img.transform.visible = !v;
                    }
                    console.error("攻击按钮状态", ShowAttackManager_1.ShowAttackManager.Instance.Attackstate);
                    if (ShowAttackManager_1.ShowAttackManager.Instance.Attackstate == 0) {
                        // 黑夜
                        this.buttonb2_img.bara_btn.transform.visible = !v;
                        this.buttonb2_img.barb_img.transform.visible = !v;
                        this.buttonb2_img.knifea_btn.transform.visible = v;
                        this.buttonb2_img.knifeb_img.transform.visible = v;
                    }
                };
                rockerView.prototype.onRockerViewEnable = function (ev) {
                    console.error("onRockerViewEnable 0 :".concat(ev.data, "  "));
                    if (ev.data == this._touchEnable)
                        return;
                    this.setRockerVisible(ev.data);
                    this.setTouchsEnable(ev.data);
                };
                rockerView.prototype.setTouchsEnable = function (enable) {
                    if (this._touchEnable == enable)
                        return;
                    this._touchEnable = enable;
                    console.error("onRockerViewEnable 1 :".concat(enable, "  "));
                    if (this.jumpBtn1) {
                        this.jumpBtn1.enabled = enable;
                    }
                    if (this.jumpBtn2) {
                        this.jumpBtn2.enabled = enable;
                    }
                    if (this.attackBtn) {
                        this.attackBtn.enabled = enable;
                    }
                    if (this.viewToucher) {
                        this.viewToucher.enabled = enable;
                    }
                    if (this.joy) {
                        this.joy.enabled = enable;
                    }
                    if (this.viewToucherPad) {
                        this.viewToucherPad.enabled = enable;
                    }
                    if (this.knifeBtn) {
                        this.knifeBtn.enabled = enable;
                    }
                    this.setFocusResetState();
                };
                rockerView.prototype.onFocusResetState = function (ev) {
                    this.setFocusResetState();
                };
                rockerView.prototype.setFocusResetState = function () {
                    if (this.jumpBtn1) {
                        this.jumpBtn1.resetSate();
                    }
                    if (this.jumpBtn2) {
                        this.jumpBtn2.resetSate();
                    }
                    if (this.attackBtn) {
                        this.attackBtn.resetSate();
                    }
                    if (this.viewToucher) {
                        this.viewToucher.resetSate();
                    }
                    if (this.joy) {
                        this.joy.resetJoy();
                    }
                    if (this.knifeBtn) {
                        this.knifeBtn.resetSate();
                    }
                };
                //设置摇杆ui隐藏/显示
                rockerView.prototype.setRockerVisible = function (flag) {
                    if (this.bType != PlatformUtil_1.PlatformType.PC) {
                        this.joyRoot.visible = flag;
                        if (this.showAttack) {
                            this.jumpBtn2.transform.visible = flag;
                        }
                        else {
                            this.jumpBtn1.transform.visible = flag;
                        }
                        this.rockbg.transform.visible = flag;
                    }
                };
                //初始化摇杆
                rockerView.prototype.initJoyStick = function () {
                    this.rockbg = this.rockbg_img;
                    var opt = m4m.framework.layoutOption;
                    var viewRoot = this.viewRoot = new m4m.framework.transform2D();
                    this.transform.addChildAt(viewRoot, 0);
                    viewRoot.layoutState = opt.LEFT | opt.TOP | opt.RIGHT | opt.BOTTOM;
                    viewRoot.name = "viewRoot";
                    // this.viewToucher = viewRoot.addComponent("multiToucher") as multiToucher;
                    // this.viewToucher.addPointListener(m4m.event.PointEventEnum.PointMove, this.onViewTouch, this);
                    // this.viewToucher.addPointListener(m4m.event.PointEventEnum.PointDown, this.onViewDown, this);
                    //摇杆
                    this.joyRoot = new m4m.framework.transform2D();
                    this.joyRoot.pivot = new m4m.math.vector2(0.5, 0.5);
                    // //test 显示区域
                    // let img = this.joyRoot.addComponent("image2D") as m4m.framework.image2D;
                    // img.sprite = m4m.framework.sceneMgr.app.getAssetMgr().getDefaultSprite("white_sprite");
                    // //-------------
                    this.joyRoot.width = 400;
                    this.joyRoot.height = 400;
                    this.joyRoot.name = "joyRoot";
                    //this.joyRoot.layoutState = opt.LEFT | opt.BOTTOM;
                    //this.transform.addChild(this.joyRoot);
                    this.rockbg.transform.addChild(this.joyRoot);
                    this.rockbg.transform.pivot.x = 0.5;
                    this.rockbg.transform.pivot.y = 0.5;
                    this.rockbg.transform.markDirty();
                    // this.joyRoot.transform.addChild(this.rockbg.transform);
                    //test-----
                    // let ttt = new m4m.framework.transform2D();
                    // ttt.width = ttt.height = 200;
                    // let tttImg = ttt.addComponent("image2D") as m4m.framework.image2D;
                    // tttImg.sprite = m4m.framework.sceneMgr.app.getAssetMgr().getDefaultSprite("grid_sprite");
                    //----------
                    // let joyImg = tttImg;
                    var joyImg = this.rockbg.rock_btn.image;
                    this.rockbg.rock_btn.transform.removeComponentByTypeName("button");
                    //commTool.makeUIEventDiscard(joyImg.transform);
                    this.joyRoot.addChild(joyImg.transform);
                    joyImg.transform.pivot.x = 0.5;
                    joyImg.transform.pivot.y = 0.5;
                    joyImg.transform.localTranslate = new m4m.math.vector2();
                    joyImg.transform.layoutState = 0;
                    joyImg.transform.layoutPercentState = 0;
                    joyImg.transform.markDirty();
                    //摇杆
                    var _joy = this.joy = joyImg.transform.addComponent("joyStick");
                    _joy.moveRange = 70;
                    _joy.overImg = joyImg;
                    _joy.onShake = this.onJoyShake.bind(this);
                    _joy.onRelease = this.onJoyRelease.bind(this);
                    this.joyResetFunBind = this.joyResetFun.bind(this);
                    //摇杆 复位
                    UiDataManager_1.UiDataManager.bindFunctionData(BindKeyName_1.BindKeyName.joyReset, this.joyResetFunBind);
                };
                //摇杆 复位
                rockerView.prototype.joyResetFun = function () {
                    // console.error("摇杆 复位");
                    //复位
                    this.joy.resetJoy();
                };
                rockerView.prototype.setViewTouch = function (isPC) {
                    var _this = this;
                    if (isPC) {
                        this.viewToucherPad = this.viewRoot.addComponent("touchPad");
                        this.viewToucherPad.onValueChange = this.onViewTouchValCg.bind(this);
                        this.viewToucherPad.onPointDown = function (x, y) {
                            _this.onViewDown([x, y]);
                        };
                    }
                    else {
                        this.viewToucher = this.viewRoot.addComponent("multiToucher");
                        this.viewToucher.addPointListener(m4m.event.PointEventEnum.PointMove, this.onViewTouch, this);
                        this.viewToucher.addPointListener(m4m.event.PointEventEnum.PointDown, this.onViewDown, this);
                    }
                };
                rockerView.prototype.onSetViewTouch = function (e) {
                    this.setViewTouch(e.data);
                };
                //初始化 按钮
                rockerView.prototype.initBtns = function () {
                    this.buttonb_img.buttona_btn.transform.removeComponentByTypeName("button");
                    var btna = this.buttonb_img.transform;
                    var mtA = this.jumpBtn1 = btna.addComponent("multiToucher");
                    mtA.addPointListener(m4m.event.PointEventEnum.PointDown, this.onBtnAClick, this);
                    mtA.addPointListener(m4m.event.PointEventEnum.PointUp, this.onBtnAUPClick, this);
                    this.buttonb2_img.buttona1_btn.transform.removeComponentByTypeName("button");
                    var btna1 = this.buttonb2_img.transform;
                    var mtA1 = this.jumpBtn2 = btna1.addComponent("multiToucher");
                    mtA1.addPointListener(m4m.event.PointEventEnum.PointDown, this.onMtaClick, this);
                    mtA1.addPointListener(m4m.event.PointEventEnum.PointUp, this.onMtaAUPClick, this);
                    this.buttonb2_img.bara_btn.transform.removeComponentByTypeName("button");
                    var baral = this.buttonb2_img.barb_img.transform;
                    var matbarl = this.attackBtn = baral.addComponent("multiToucher");
                    matbarl.addPointListener(m4m.event.PointEventEnum.PointDown, this.onMatbaAClick, this);
                    matbarl.addPointListener(m4m.event.PointEventEnum.PointUp, this.onMatbaAUp, this);
                    this.buttonb2_img.knifea_btn.transform.removeComponentByTypeName("button");
                    var knifeal = this.buttonb2_img.knifeb_img.transform;
                    var matknifl = this.knifeBtn = knifeal.addComponent("multiToucher");
                    matknifl.addPointListener(m4m.event.PointEventEnum.PointDown, this.onKnifeAClick, this);
                    matknifl.addPointListener(m4m.event.PointEventEnum.PointUp, this.onKnifeAUp, this);
                    //跑的按钮隐藏 功能加入到摇杆中
                    // btnb.transform.visible = false;
                    // let mtB = this.attackBtn = btnb.addComponent("multiToucher") as multiToucher;
                    // mtB.addPointListener(m4m.event.PointEventEnum.PointDown, this.onBtnBDown, this);
                    // mtB.addPointListener(m4m.event.PointEventEnum.PointUp, this.onBtnBUp, this);
                    // this.attackBtn.transform.visible = false;
                    // CTimer.Instance.loopTimeUpdate(1000, this.updateFun.bind(this));
                };
                //测试
                rockerView.prototype.updateFun = function () {
                    this.onBtnAClick();
                };
                rockerView.prototype.onJoyShake = function (x, y, currdis) {
                    // console.log(`${x}_${y}`);
                    // console.error("范围 ", currdis);
                    if (currdis >= 30) { //因用的取目标点作位移 刚按下的小范围输入会不准确 暂时用大于30以上的范围值才派发
                        var v2 = this._evJoy.data;
                        v2.x = x;
                        v2.y = -y;
                        var needFixedLength = true;
                        ;
                        if (needFixedLength) {
                            m4m.math.vec2Normalize(v2, v2);
                        }
                        eventMgr_1.EventMgr.dispatchEvent("rocker_Direction", this._evJoy);
                        if (currdis >= 60) {
                            this.onBtnBDown();
                        }
                        else {
                            this.onBtnBUp();
                        }
                    }
                };
                rockerView.prototype.onKnifeAClick = function () {
                    this.buttonb2_img.knifea_btn.transform.visible = false;
                    eventMgr_1.EventMgr.dispatchEvent("rocker_AttackBtn_click", this._evA);
                };
                rockerView.prototype.onKnifeAUp = function () {
                    this.buttonb2_img.knifea_btn.transform.visible = true;
                };
                rockerView.prototype.onJoyRelease = function () {
                    eventMgr_1.EventMgr.dispatchEvent("rocker_Release", this._evJoyRelease);
                };
                rockerView.prototype.onBtnAUPClick = function () {
                    this.buttonb_img.buttona_btn.transform.visible = true;
                };
                rockerView.prototype.onBtnAClick = function () {
                    // console.error("点了跳按钮！！",TimeUtil.realtimeSinceStartup);
                    this.buttonb_img.buttona_btn.transform.visible = false;
                    eventMgr_1.EventMgr.dispatchEvent("rocker_JumpBtn_click", this._evA);
                };
                rockerView.prototype.onMtaAUPClick = function () {
                    this.buttonb2_img.buttona1_btn.transform.visible = true;
                };
                rockerView.prototype.onMtaClick = function () {
                    this.buttonb2_img.buttona1_btn.transform.visible = false;
                    eventMgr_1.EventMgr.dispatchEvent("rocker_JumpBtn_click", this._evA);
                };
                rockerView.prototype.onMatbaAClick = function () {
                    this.buttonb2_img.bara_btn.transform.visible = false;
                    eventMgr_1.EventMgr.dispatchEvent("rocker_AttackBtn_click", this._evA);
                };
                rockerView.prototype.onMatbaAUp = function () {
                    this.buttonb2_img.bara_btn.transform.visible = true;
                };
                rockerView.prototype.onBtnBDown = function () {
                    // EventMgr.dispatchEvent("rocker_AttackBtn_click", this._evAttack);
                    eventMgr_1.EventMgr.dispatchEvent("rocker_RunBtn_Down", this._evB);
                };
                rockerView.prototype.onBtnBUp = function () {
                    // EventMgr.dispatchEvent("rocker_AttackBtn_click", this._evAttack);
                    eventMgr_1.EventMgr.dispatchEvent("rocker_RunBtn_Up", this._evB);
                };
                rockerView.prototype.onViewDown = function (_a) {
                    var x = _a[0], y = _a[1];
                    // console.error(`onViewDown `);
                    this._viewDownPoint.x = x;
                    this._viewDownPoint.y = y;
                    eventMgr_1.EventMgr.dispatchEvent("rocker_View_down", this._evViewDown);
                };
                rockerView.prototype.onViewTouch = function (_a) {
                    var x = _a[0], y = _a[1];
                    var _oldP = this._viewDownPoint;
                    this.onViewTouchValCg(x - _oldP.x, y - _oldP.y);
                    // console.log(`${this._evView.data.x} _ ${this._evView.data.y}`);
                };
                rockerView.prototype.onViewTouchValCg = function (x, y) {
                    this._evView.data.x = x;
                    this._evView.data.y = y;
                    eventMgr_1.EventMgr.dispatchEvent("rocker_View_move", this._evView);
                };
                rockerView.prototype.onShowFunc = function () {
                };
                rockerView.prototype.onHideFunc = function () {
                };
                rockerView.prototype.distroy = function () {
                    eventMgr_1.EventMgr.removeListener("rocker_View_FocusResetState", this.onFocusResetState, this);
                    //UiDataManager.unBindFunctionDataByBinder(this.setRockerVisibleBinder);
                    //摇杆 复位
                    UiDataManager_1.UiDataManager.unBindFunctionData(BindKeyName_1.BindKeyName.joyReset, this.joyResetFunBind);
                    UiDataManager_1.UiDataManager.unBindFunctionDataByBinder(this.showAttackBtnBind);
                    this.joy.onRelease = null;
                    this.joy.onShake = null;
                    this.jumpBtn1.removePointListener(m4m.event.PointEventEnum.PointClick, this.onBtnAClick, this);
                    this.jumpBtn2.removePointListener(m4m.event.PointEventEnum.PointClick, this.onMtaClick, this);
                    this.attackBtn.removePointListener(m4m.event.PointEventEnum.PointClick, this.onMatbaAClick, this);
                    this.attackBtn.removePointListener(m4m.event.PointEventEnum.PointClick, this.onMatbaAUp, this);
                    this.knifeBtn.removePointListener(m4m.event.PointEventEnum.PointClick, this.onKnifeAClick, this);
                    this.knifeBtn.removePointListener(m4m.event.PointEventEnum.PointClick, this.onKnifeAUp, this);
                    if (this.viewToucher) {
                        this.viewToucher.removePointListener(m4m.event.PointEventEnum.PointMove, this.onViewTouch, this);
                        this.viewToucher.removePointListener(m4m.event.PointEventEnum.PointDown, this.onViewDown, this);
                    }
                    if (this.viewToucherPad) {
                        this.viewToucherPad.onValueChange = null;
                        this.viewToucherPad.onPointDown = null;
                        this.viewToucherPad.onPointUp = null;
                    }
                    this.viewToucherPad = null;
                    this.joyRoot = null;
                    this.joy = null;
                    this.jumpBtn1 = null;
                    this.jumpBtn2 = null;
                    // this.attackBtn = null;
                };
                return rockerView;
            }(rocker_1.rocker));
            exports_2("rockerView", rockerView);
        }
    };
});
//# sourceMappingURL=rocker.js.map