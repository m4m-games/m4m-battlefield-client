var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
System.register("gaming", ["PSDUI/newUiBase"], function (exports_1, context_1) {
    "use strict";
    var newUiBase_1, gaming, gamingbg, redmask_img, statebg, blood5_bar, blood5cut, blood4_img, bloodbg_img, blood3_img, blood2_img, blood1_img, name_lab, leftbg, arrowbtn1_btn, arrowbtn_img, leftbg1, leftblack1_img, downbg_img, downlab1_lab, leftdownblack_img, leftdownlab_lab, downlabbg, downlab2_lab, downlab3_lab, downlab4_lab, downcup_img, leftblack2_img, lefttopbg, leftblack_img, lefttoplab_lab, lefttoprgbg, lefttoplab1_lab, lefttoplab2_lab, lefttopr_img, lefttopg_img, slide_scr, slidecontent, numberbg, deathnumber_lab, alivenumber_lab, listbutton_btn, rightbg1, signal_img, ms_lab, topbg, topradbg_img, toplab1_lab, slideareabg, slideunit_scr, slideunitcontent, jianbianbg_img, time_lab;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (newUiBase_1_1) {
                newUiBase_1 = newUiBase_1_1;
            }
        ],
        execute: function () {
            gaming = /** @class */ (function (_super) {
                __extends(gaming, _super);
                function gaming() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.uiName = "gaming";
                    _this.gamingbg = new gamingbg();
                    _this.redmask_img = new redmask_img();
                    /***/
                    _this.statebg = new statebg();
                    _this.leftbg = new leftbg();
                    _this.rightbg1 = new rightbg1();
                    _this.topbg = new topbg();
                    _this.slideareabg = new slideareabg();
                    return _this;
                }
                gaming.prototype.onInit = function () {
                    if (this.onInite) {
                        this.onInite();
                    }
                    //添加按钮事件
                    this.leftbg.arrowbtn1_btn.button.addListener(m4m.event.UIEventEnum.PointerClick, this.arrowbtn1_btn_event, this);
                    this.leftbg.leftbg1.listbutton_btn.button.addListener(m4m.event.UIEventEnum.PointerClick, this.listbutton_btn_event, this);
                };
                //按钮事件
                gaming.prototype.arrowbtn1_btn_event = function () { if (this.arrowbtn1_btn_btnEvent)
                    this.arrowbtn1_btn_btnEvent(); };
                ;
                gaming.prototype.listbutton_btn_event = function () { if (this.listbutton_btn_btnEvent)
                    this.listbutton_btn_btnEvent(); };
                ;
                //文字修改方法
                /**修改label 名字修改label文字方法*/
                gaming.prototype.name_lab_text = function (text) { this.statebg.name_lab.label.text = text; };
                /**修改label  this.leftbg.leftbg1.leftblack1_img.downbg_img.downlab1_lab.label 修改label文字方法*/
                gaming.prototype.downlab1_lab_text = function (text) { this.leftbg.leftbg1.leftblack1_img.downbg_img.downlab1_lab.label.text = text; };
                /**修改label  this.leftbg.leftbg1.leftblack1_img.downbg_img.leftdownblack_img.leftdownlab_lab.label 修改label文字方法*/
                gaming.prototype.leftdownlab_lab_text = function (text) { this.leftbg.leftbg1.leftblack1_img.downbg_img.leftdownblack_img.leftdownlab_lab.label.text = text; };
                /**修改label  this.leftbg.leftbg1.leftblack1_img.downbg_img.downlabbg.downlab2_lab.label 修改label文字方法*/
                gaming.prototype.downlab2_lab_text = function (text) { this.leftbg.leftbg1.leftblack1_img.downbg_img.downlabbg.downlab2_lab.label.text = text; };
                /**修改label  this.leftbg.leftbg1.leftblack1_img.downbg_img.downlabbg.downlab3_lab.label 修改label文字方法*/
                gaming.prototype.downlab3_lab_text = function (text) { this.leftbg.leftbg1.leftblack1_img.downbg_img.downlabbg.downlab3_lab.label.text = text; };
                /**修改label  this.leftbg.leftbg1.leftblack1_img.downbg_img.downlabbg.downlab4_lab.label 修改label文字方法*/
                gaming.prototype.downlab4_lab_text = function (text) { this.leftbg.leftbg1.leftblack1_img.downbg_img.downlabbg.downlab4_lab.label.text = text; };
                /**修改label 玩家名单修改label文字方法*/
                gaming.prototype.lefttoplab_lab_text = function (text) { this.leftbg.leftbg1.leftblack2_img.lefttopbg.lefttoplab_lab.label.text = text; };
                /**修改label 存活修改label文字方法*/
                gaming.prototype.lefttoplab1_lab_text = function (text) { this.leftbg.leftbg1.leftblack2_img.lefttopbg.lefttoprgbg.lefttoplab1_lab.label.text = text; };
                /**修改label 死亡修改label文字方法*/
                gaming.prototype.lefttoplab2_lab_text = function (text) { this.leftbg.leftbg1.leftblack2_img.lefttopbg.lefttoprgbg.lefttoplab2_lab.label.text = text; };
                /**修改label 死亡编号修改label文字方法*/
                gaming.prototype.deathnumber_lab_text = function (text) { this.leftbg.leftbg1.leftblack2_img.slide_scr.slidecontent.numberbg.deathnumber_lab.label.text = text; };
                /**修改label 存活编号修改label文字方法*/
                gaming.prototype.alivenumber_lab_text = function (text) { this.leftbg.leftbg1.leftblack2_img.slide_scr.slidecontent.numberbg.deathnumber_lab.alivenumber_lab.label.text = text; };
                /**修改label  this.rightbg1.ms_lab.label 修改label文字方法*/
                gaming.prototype.ms_lab_text = function (text) { this.rightbg1.ms_lab.label.text = text; };
                /**修改label 修改label文字方法*/
                gaming.prototype.toplab1_lab_text = function (text) { this.topbg.toplab1_lab.label.text = text; };
                /**修改label 修改label文字方法*/
                gaming.prototype.time_lab_text = function (text) { this.slideareabg.slideunit_scr.slideunitcontent.jianbianbg_img.time_lab.label.text = text; };
                return gaming;
            }(newUiBase_1.newUiBase));
            exports_1("gaming", gaming);
            gamingbg = /** @class */ (function () {
                function gamingbg() {
                }
                return gamingbg;
            }());
            exports_1("gamingbg", gamingbg);
            redmask_img = /** @class */ (function () {
                function redmask_img() {
                }
                return redmask_img;
            }());
            exports_1("redmask_img", redmask_img);
            statebg = /** @class */ (function () {
                function statebg() {
                    /***/
                    this.blood5_bar = new blood5_bar();
                    this.bloodbg_img = new bloodbg_img();
                    this.blood3_img = new blood3_img();
                    this.blood2_img = new blood2_img();
                    this.blood1_img = new blood1_img();
                    /**名字*/
                    this.name_lab = new name_lab();
                }
                return statebg;
            }());
            exports_1("statebg", statebg);
            blood5_bar = /** @class */ (function () {
                function blood5_bar() {
                    this.blood5cut = new blood5cut();
                }
                return blood5_bar;
            }());
            exports_1("blood5_bar", blood5_bar);
            blood5cut = /** @class */ (function () {
                function blood5cut() {
                    /***/
                    this.blood4_img = new blood4_img();
                }
                return blood5cut;
            }());
            exports_1("blood5cut", blood5cut);
            blood4_img = /** @class */ (function () {
                function blood4_img() {
                }
                return blood4_img;
            }());
            exports_1("blood4_img", blood4_img);
            bloodbg_img = /** @class */ (function () {
                function bloodbg_img() {
                }
                return bloodbg_img;
            }());
            exports_1("bloodbg_img", bloodbg_img);
            blood3_img = /** @class */ (function () {
                function blood3_img() {
                }
                return blood3_img;
            }());
            exports_1("blood3_img", blood3_img);
            blood2_img = /** @class */ (function () {
                function blood2_img() {
                }
                return blood2_img;
            }());
            exports_1("blood2_img", blood2_img);
            blood1_img = /** @class */ (function () {
                function blood1_img() {
                }
                return blood1_img;
            }());
            exports_1("blood1_img", blood1_img);
            name_lab = /** @class */ (function () {
                function name_lab() {
                }
                return name_lab;
            }());
            exports_1("name_lab", name_lab);
            leftbg = /** @class */ (function () {
                function leftbg() {
                    this.arrowbtn1_btn = new arrowbtn1_btn();
                    this.leftbg1 = new leftbg1();
                }
                return leftbg;
            }());
            exports_1("leftbg", leftbg);
            arrowbtn1_btn = /** @class */ (function () {
                function arrowbtn1_btn() {
                    this.arrowbtn_img = new arrowbtn_img();
                }
                return arrowbtn1_btn;
            }());
            exports_1("arrowbtn1_btn", arrowbtn1_btn);
            arrowbtn_img = /** @class */ (function () {
                function arrowbtn_img() {
                }
                return arrowbtn_img;
            }());
            exports_1("arrowbtn_img", arrowbtn_img);
            leftbg1 = /** @class */ (function () {
                function leftbg1() {
                    this.leftblack1_img = new leftblack1_img();
                    this.leftblack2_img = new leftblack2_img();
                    this.listbutton_btn = new listbutton_btn();
                }
                return leftbg1;
            }());
            exports_1("leftbg1", leftbg1);
            leftblack1_img = /** @class */ (function () {
                function leftblack1_img() {
                    this.downbg_img = new downbg_img();
                }
                return leftblack1_img;
            }());
            exports_1("leftblack1_img", leftblack1_img);
            downbg_img = /** @class */ (function () {
                function downbg_img() {
                    this.downlab1_lab = new downlab1_lab();
                    this.leftdownblack_img = new leftdownblack_img();
                    this.downlabbg = new downlabbg();
                }
                return downbg_img;
            }());
            exports_1("downbg_img", downbg_img);
            downlab1_lab = /** @class */ (function () {
                function downlab1_lab() {
                }
                return downlab1_lab;
            }());
            exports_1("downlab1_lab", downlab1_lab);
            leftdownblack_img = /** @class */ (function () {
                function leftdownblack_img() {
                    this.leftdownlab_lab = new leftdownlab_lab();
                }
                return leftdownblack_img;
            }());
            exports_1("leftdownblack_img", leftdownblack_img);
            leftdownlab_lab = /** @class */ (function () {
                function leftdownlab_lab() {
                }
                return leftdownlab_lab;
            }());
            exports_1("leftdownlab_lab", leftdownlab_lab);
            downlabbg = /** @class */ (function () {
                function downlabbg() {
                    this.downlab2_lab = new downlab2_lab();
                    this.downlab3_lab = new downlab3_lab();
                    this.downlab4_lab = new downlab4_lab();
                    this.downcup_img = new downcup_img();
                }
                return downlabbg;
            }());
            exports_1("downlabbg", downlabbg);
            downlab2_lab = /** @class */ (function () {
                function downlab2_lab() {
                }
                return downlab2_lab;
            }());
            exports_1("downlab2_lab", downlab2_lab);
            downlab3_lab = /** @class */ (function () {
                function downlab3_lab() {
                }
                return downlab3_lab;
            }());
            exports_1("downlab3_lab", downlab3_lab);
            downlab4_lab = /** @class */ (function () {
                function downlab4_lab() {
                }
                return downlab4_lab;
            }());
            exports_1("downlab4_lab", downlab4_lab);
            downcup_img = /** @class */ (function () {
                function downcup_img() {
                }
                return downcup_img;
            }());
            exports_1("downcup_img", downcup_img);
            leftblack2_img = /** @class */ (function () {
                function leftblack2_img() {
                    this.lefttopbg = new lefttopbg();
                    /**名单滑动区域*/
                    this.slide_scr = new slide_scr();
                }
                return leftblack2_img;
            }());
            exports_1("leftblack2_img", leftblack2_img);
            lefttopbg = /** @class */ (function () {
                function lefttopbg() {
                    this.leftblack_img = new leftblack_img();
                    /**玩家名单*/
                    this.lefttoplab_lab = new lefttoplab_lab();
                    this.lefttoprgbg = new lefttoprgbg();
                }
                return lefttopbg;
            }());
            exports_1("lefttopbg", lefttopbg);
            leftblack_img = /** @class */ (function () {
                function leftblack_img() {
                }
                return leftblack_img;
            }());
            exports_1("leftblack_img", leftblack_img);
            lefttoplab_lab = /** @class */ (function () {
                function lefttoplab_lab() {
                }
                return lefttoplab_lab;
            }());
            exports_1("lefttoplab_lab", lefttoplab_lab);
            lefttoprgbg = /** @class */ (function () {
                function lefttoprgbg() {
                    /**存活*/
                    this.lefttoplab1_lab = new lefttoplab1_lab();
                    /**死亡*/
                    this.lefttoplab2_lab = new lefttoplab2_lab();
                    this.lefttopr_img = new lefttopr_img();
                    this.lefttopg_img = new lefttopg_img();
                }
                return lefttoprgbg;
            }());
            exports_1("lefttoprgbg", lefttoprgbg);
            lefttoplab1_lab = /** @class */ (function () {
                function lefttoplab1_lab() {
                }
                return lefttoplab1_lab;
            }());
            exports_1("lefttoplab1_lab", lefttoplab1_lab);
            lefttoplab2_lab = /** @class */ (function () {
                function lefttoplab2_lab() {
                }
                return lefttoplab2_lab;
            }());
            exports_1("lefttoplab2_lab", lefttoplab2_lab);
            lefttopr_img = /** @class */ (function () {
                function lefttopr_img() {
                }
                return lefttopr_img;
            }());
            exports_1("lefttopr_img", lefttopr_img);
            lefttopg_img = /** @class */ (function () {
                function lefttopg_img() {
                }
                return lefttopg_img;
            }());
            exports_1("lefttopg_img", lefttopg_img);
            slide_scr = /** @class */ (function () {
                function slide_scr() {
                    this.slidecontent = new slidecontent();
                }
                return slide_scr;
            }());
            exports_1("slide_scr", slide_scr);
            slidecontent = /** @class */ (function () {
                function slidecontent() {
                    this.numberbg = new numberbg();
                }
                return slidecontent;
            }());
            exports_1("slidecontent", slidecontent);
            numberbg = /** @class */ (function () {
                function numberbg() {
                    /**死亡编号*/
                    this.deathnumber_lab = new deathnumber_lab();
                }
                return numberbg;
            }());
            exports_1("numberbg", numberbg);
            deathnumber_lab = /** @class */ (function () {
                function deathnumber_lab() {
                    /**存活编号*/
                    this.alivenumber_lab = new alivenumber_lab();
                }
                return deathnumber_lab;
            }());
            exports_1("deathnumber_lab", deathnumber_lab);
            alivenumber_lab = /** @class */ (function () {
                function alivenumber_lab() {
                }
                return alivenumber_lab;
            }());
            exports_1("alivenumber_lab", alivenumber_lab);
            listbutton_btn = /** @class */ (function () {
                function listbutton_btn() {
                }
                return listbutton_btn;
            }());
            exports_1("listbutton_btn", listbutton_btn);
            rightbg1 = /** @class */ (function () {
                function rightbg1() {
                    this.signal_img = new signal_img();
                    this.ms_lab = new ms_lab();
                }
                return rightbg1;
            }());
            exports_1("rightbg1", rightbg1);
            signal_img = /** @class */ (function () {
                function signal_img() {
                }
                return signal_img;
            }());
            exports_1("signal_img", signal_img);
            ms_lab = /** @class */ (function () {
                function ms_lab() {
                }
                return ms_lab;
            }());
            exports_1("ms_lab", ms_lab);
            topbg = /** @class */ (function () {
                function topbg() {
                    this.topradbg_img = new topradbg_img();
                    /***/
                    this.toplab1_lab = new toplab1_lab();
                }
                return topbg;
            }());
            exports_1("topbg", topbg);
            topradbg_img = /** @class */ (function () {
                function topradbg_img() {
                }
                return topradbg_img;
            }());
            exports_1("topradbg_img", topradbg_img);
            toplab1_lab = /** @class */ (function () {
                function toplab1_lab() {
                }
                return toplab1_lab;
            }());
            exports_1("toplab1_lab", toplab1_lab);
            slideareabg = /** @class */ (function () {
                function slideareabg() {
                    /***/
                    this.slideunit_scr = new slideunit_scr();
                }
                return slideareabg;
            }());
            exports_1("slideareabg", slideareabg);
            slideunit_scr = /** @class */ (function () {
                function slideunit_scr() {
                    this.slideunitcontent = new slideunitcontent();
                }
                return slideunit_scr;
            }());
            exports_1("slideunit_scr", slideunit_scr);
            slideunitcontent = /** @class */ (function () {
                function slideunitcontent() {
                    this.jianbianbg_img = new jianbianbg_img();
                }
                return slideunitcontent;
            }());
            exports_1("slideunitcontent", slideunitcontent);
            jianbianbg_img = /** @class */ (function () {
                function jianbianbg_img() {
                    /***/
                    this.time_lab = new time_lab();
                }
                return jianbianbg_img;
            }());
            exports_1("jianbianbg_img", jianbianbg_img);
            time_lab = /** @class */ (function () {
                function time_lab() {
                }
                return time_lab;
            }());
            exports_1("time_lab", time_lab);
        }
    };
});
System.register("TopBar", [], function (exports_2, context_2) {
    "use strict";
    var TopBar;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [],
        execute: function () {
            TopBar = /** @class */ (function () {
                function TopBar(bar) {
                    this.barMaxWidth = 100;
                    this.bar = bar;
                    this.barTrans = bar.transform;
                    bar.blood5_bar.transform.visible = false;
                    bar.blood1_img.transform.visible = true;
                    bar.blood1_img.transform.height = 8;
                    bar.blood1_img.transform.width = this.barMaxWidth;
                    bar.blood1_img.transform.layoutState = m4m.framework.layoutOption.LEFT | m4m.framework.layoutOption.TOP;
                    bar.blood1_img.transform.setLayoutValue(m4m.framework.layoutOption.LEFT, -bar.blood1_img.transform.width / 2);
                    bar.blood1_img.transform.setLayoutValue(m4m.framework.layoutOption.TOP, 10);
                    bar.blood1_img.transform.markDirty();
                    bar.blood2_img.transform.visible = true;
                    bar.blood2_img.transform.height = 8;
                    bar.blood2_img.transform.width = this.barMaxWidth;
                    bar.blood2_img.transform.layoutState = m4m.framework.layoutOption.LEFT | m4m.framework.layoutOption.TOP;
                    bar.blood2_img.transform.setLayoutValue(m4m.framework.layoutOption.LEFT, -bar.blood1_img.transform.width / 2);
                    bar.blood2_img.transform.setLayoutValue(m4m.framework.layoutOption.TOP, 10);
                    bar.blood2_img.transform.markDirty();
                }
                /** 设置根节点 */
                TopBar.prototype.setRoot = function (topRoot) {
                    this.topRoot = topRoot;
                    topRoot.addChild(this.barTrans);
                };
                /** 设置坐标 */
                TopBar.prototype.setPos = function (pos) {
                    m4m.math.vec2Clone(pos, this.barTrans.localTranslate);
                    this.barTrans.markDirty();
                };
                /** 设置是否显示 */
                TopBar.prototype.setVisible = function (v) {
                    this.barTrans.visible = v;
                };
                /** 设置名称 */
                TopBar.prototype.setPlayerName = function (str) {
                    this.bar.name_lab.label.text = str;
                };
                /**
                 * 设置 HP 进度条
                 * @param normal 单位进度百分比值 （0 - 1）
                 */
                TopBar.prototype.setHP = function (normal) {
                    this.bar.blood1_img.transform.width = this.barMaxWidth * normal;
                };
                TopBar.prototype.dispose = function () {
                    if (this.topRoot) {
                        this.topRoot.removeChild(this.barTrans);
                        this.barTrans.dispose();
                    }
                };
                return TopBar;
            }());
            exports_2("TopBar", TopBar);
        }
    };
});
System.register("TopBarCtr", ["PSDUI/UiTools", "TopBar"], function (exports_3, context_3) {
    "use strict";
    var UiTools_1, TopBar_1, TopBarCtr;
    var __moduleName = context_3 && context_3.id;
    return {
        setters: [
            function (UiTools_1_1) {
                UiTools_1 = UiTools_1_1;
            },
            function (TopBar_1_1) {
                TopBar_1 = TopBar_1_1;
            }
        ],
        execute: function () {
            /** 头顶状态条 控制 */
            TopBarCtr = /** @class */ (function () {
                function TopBarCtr() {
                }
                Object.defineProperty(TopBarCtr, "instance", {
                    get: function () {
                        if (!this._instance) {
                            this._instance = new TopBarCtr();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                TopBarCtr.prototype.init = function (templete) {
                    this.templete = templete;
                    this.topRoot = new m4m.framework.transform2D();
                    this.topRoot.name = "TopRoot";
                    var lp = m4m.framework.layoutOption;
                    this.topRoot.layoutState = lp.TOP | lp.RIGHT | lp.BOTTOM | lp.LEFT;
                };
                TopBarCtr.prototype.onShow = function (uiRoot) {
                    //this.topRoot = uiRoot;
                    uiRoot.addChild(this.topRoot);
                };
                TopBarCtr.prototype.onHide = function () {
                    var p = this.topRoot.parent;
                    if (p) {
                        p.removeChild(this.topRoot);
                    }
                };
                /** 获取 一个bar */
                TopBarCtr.prototype.newBar = function () {
                    var t = UiTools_1.UiTools.cloneUi(this.templete);
                    var result = new TopBar_1.TopBar(t);
                    result.setRoot(this.topRoot);
                    return result;
                };
                return TopBarCtr;
            }());
            exports_3("TopBarCtr", TopBarCtr);
        }
    };
});
System.register("gamingCell", ["Common/CommonCell"], function (exports_4, context_4) {
    "use strict";
    var CommonCell_1, gamingCell;
    var __moduleName = context_4 && context_4.id;
    return {
        setters: [
            function (CommonCell_1_1) {
                CommonCell_1 = CommonCell_1_1;
            }
        ],
        execute: function () {
            gamingCell = /** @class */ (function (_super) {
                __extends(gamingCell, _super);
                function gamingCell() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                gamingCell.prototype.setCellClass = function (value) {
                    this.nowClass = value;
                };
                gamingCell.prototype.onPlay = function () {
                };
                //选中当前cell 时的fun
                gamingCell.prototype.selectFun = function (selectbool) {
                    _super.prototype.selectFun.call(this, selectbool);
                };
                gamingCell.prototype.setData = function (value) {
                    this.cellData.data = value;
                    if (value) {
                        if (value.name.num.toString().length == 1) {
                            value.name.num = "0" + value.name.num;
                        }
                        this.nowClass.deathnumber_lab.alivenumber_lab.label.text = value.name.num.toString();
                        this.nowClass.deathnumber_lab.label.text = value.name.num.toString();
                        if (value.type == true) {
                            this.nowClass.deathnumber_lab.alivenumber_lab.transform.visible = false;
                            this.nowClass.deathnumber_lab.transform.visible = true;
                        }
                        else {
                            this.nowClass.deathnumber_lab.alivenumber_lab.transform.visible = true;
                            this.nowClass.deathnumber_lab.transform.visible = true;
                        }
                        this.nowClass.transform.visible = true;
                    }
                    else {
                        this.nowClass.transform.visible = false;
                    }
                };
                gamingCell = __decorate([
                    m4m.reflect.node2DComponent
                ], gamingCell);
                return gamingCell;
            }(CommonCell_1.CommonCell));
            exports_4("gamingCell", gamingCell);
        }
    };
});
System.register("gamingrnCell", ["Common/CommonCell", "Data/CommonUIUtils", "gamingView"], function (exports_5, context_5) {
    "use strict";
    var CommonCell_2, CommonUIUtils_1, gamingView_1, gamingrnCell;
    var __moduleName = context_5 && context_5.id;
    return {
        setters: [
            function (CommonCell_2_1) {
                CommonCell_2 = CommonCell_2_1;
            },
            function (CommonUIUtils_1_1) {
                CommonUIUtils_1 = CommonUIUtils_1_1;
            },
            function (gamingView_1_1) {
                gamingView_1 = gamingView_1_1;
            }
        ],
        execute: function () {
            gamingrnCell = /** @class */ (function (_super) {
                __extends(gamingrnCell, _super);
                function gamingrnCell() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                gamingrnCell.prototype.setCellClass = function (value) {
                    this.nowClass = value;
                    this.nowClass.downcup_img.transform.visible = false;
                };
                gamingrnCell.prototype.onPlay = function () {
                };
                //选中当前cell 时的fun
                gamingrnCell.prototype.selectFun = function (selectbool) {
                    _super.prototype.selectFun.call(this, selectbool);
                };
                gamingrnCell.prototype.setData = function (value) {
                    this.cellData.data = value;
                    if (value) {
                        if (typeof value.num == "string") {
                            if (value.index == 0) {
                                var iconType = gamingView_1.gamingView.Instance.uiName + ".atlas.json_downcup1";
                                this.nowClass.downcup_img.image.sprite = CommonUIUtils_1.CommonUIUtils.getSprite(iconType);
                                this.nowClass.downlab2_lab.label.text = "Player" + value.num;
                                this.nowClass.downlab3_lab.label.text = value.timeintegr.toString();
                                this.nowClass.downlab4_lab.label.text = "1ST:";
                                this.nowClass.downcup_img.transform.visible = true;
                            }
                            else if (value.index == 1) {
                                var iconType = gamingView_1.gamingView.Instance.uiName + ".atlas.json_downcup2";
                                this.nowClass.downcup_img.image.sprite = CommonUIUtils_1.CommonUIUtils.getSprite(iconType);
                                this.nowClass.downlab2_lab.label.text = "Player" + value.num;
                                this.nowClass.downlab3_lab.label.text = value.timeintegr.toString();
                                this.nowClass.downlab4_lab.label.text = "2ND:";
                                this.nowClass.downcup_img.transform.visible = true;
                            }
                            else if (value.index == 2) {
                                var iconType = gamingView_1.gamingView.Instance.uiName + ".atlas.json_downcup3";
                                this.nowClass.downcup_img.image.sprite = CommonUIUtils_1.CommonUIUtils.getSprite(iconType);
                                this.nowClass.downlab2_lab.label.text = "Player" + value.num;
                                this.nowClass.downlab3_lab.label.text = value.timeintegr.toString();
                                this.nowClass.downlab4_lab.label.text = "3RD:";
                                this.nowClass.downcup_img.transform.visible = true;
                            }
                            else if (value.count) {
                                this.nowClass.downlab4_lab.label.text = "";
                                this.nowClass.downlab2_lab.label.text = value.num;
                                this.nowClass.downlab3_lab.label.text = value.timeintegr.toString();
                            }
                        }
                        else {
                            if (value.index == 0) {
                                var iconType = gamingView_1.gamingView.Instance.uiName + ".atlas.json_downcup1";
                                this.nowClass.downcup_img.image.sprite = CommonUIUtils_1.CommonUIUtils.getSprite(iconType);
                                this.nowClass.downlab2_lab.label.text = "Player" + value.num;
                                this.nowClass.downlab3_lab.label.text = value.timeintegr.toString();
                                this.nowClass.downlab4_lab.label.text = "1ST:";
                                this.nowClass.downcup_img.transform.visible = true;
                            }
                            else if (value.index == 1) {
                                var iconType = gamingView_1.gamingView.Instance.uiName + ".atlas.json_downcup2";
                                this.nowClass.downcup_img.image.sprite = CommonUIUtils_1.CommonUIUtils.getSprite(iconType);
                                this.nowClass.downlab2_lab.label.text = "Player" + value.num;
                                this.nowClass.downlab3_lab.label.text = value.timeintegr.toString();
                                this.nowClass.downlab4_lab.label.text = "2ND:";
                                this.nowClass.downcup_img.transform.visible = true;
                            }
                            else if (value.index == 2) {
                                var iconType = gamingView_1.gamingView.Instance.uiName + ".atlas.json_downcup3";
                                this.nowClass.downcup_img.image.sprite = CommonUIUtils_1.CommonUIUtils.getSprite(iconType);
                                this.nowClass.downlab2_lab.label.text = "Player" + value.num;
                                this.nowClass.downlab3_lab.label.text = value.timeintegr.toString();
                                this.nowClass.downlab4_lab.label.text = "3RD:";
                                this.nowClass.downcup_img.transform.visible = true;
                            }
                            else if (value.count) {
                                this.nowClass.downlab4_lab.label.text = "";
                                this.nowClass.downlab2_lab.label.text = value.num.toString();
                                this.nowClass.downlab3_lab.label.text = value.timeintegr.toString();
                            }
                        }
                        this.nowClass.transform.visible = true;
                    }
                    else {
                        this.nowClass.transform.visible = false;
                    }
                };
                gamingrnCell = __decorate([
                    m4m.reflect.node2DComponent
                ], gamingrnCell);
                return gamingrnCell;
            }(CommonCell_2.CommonCell));
            exports_5("gamingrnCell", gamingrnCell);
        }
    };
});
System.register("gamingViewData", ["Core/StageMgr", "Data/BindKeyName", "Data/CommonUIUtils", "Manager/GamingManager", "Manager/WaitRoomManager", "Manager/WoodenPeopleManager", "Net/PingTimeManager", "PSDUI/UiDataManager", "Tools/FrameMgr", "gamingView"], function (exports_6, context_6) {
    "use strict";
    var StageMgr_1, BindKeyName_1, CommonUIUtils_2, GamingManager_1, WaitRoomManager_1, WoodenPeopleManager_1, PingTimeManager_1, UiDataManager_1, FrameMgr_1, gamingView_2, gamingViewData, Integrlse;
    var __moduleName = context_6 && context_6.id;
    return {
        setters: [
            function (StageMgr_1_1) {
                StageMgr_1 = StageMgr_1_1;
            },
            function (BindKeyName_1_1) {
                BindKeyName_1 = BindKeyName_1_1;
            },
            function (CommonUIUtils_2_1) {
                CommonUIUtils_2 = CommonUIUtils_2_1;
            },
            function (GamingManager_1_1) {
                GamingManager_1 = GamingManager_1_1;
            },
            function (WaitRoomManager_1_1) {
                WaitRoomManager_1 = WaitRoomManager_1_1;
            },
            function (WoodenPeopleManager_1_1) {
                WoodenPeopleManager_1 = WoodenPeopleManager_1_1;
            },
            function (PingTimeManager_1_1) {
                PingTimeManager_1 = PingTimeManager_1_1;
            },
            function (UiDataManager_1_1) {
                UiDataManager_1 = UiDataManager_1_1;
            },
            function (FrameMgr_1_1) {
                FrameMgr_1 = FrameMgr_1_1;
            },
            function (gamingView_2_1) {
                gamingView_2 = gamingView_2_1;
            }
        ],
        execute: function () {
            gamingViewData = /** @class */ (function () {
                function gamingViewData() {
                    this.listekas = true;
                    this.main = null;
                    this.lists = [];
                    this.youlist = [];
                    this.obj = [];
                    this.objset = [];
                    this.blone = false;
                    this.dataType = [];
                    this.woodate = [];
                    this.store = false;
                    this.listEye = WaitRoomManager_1.WaitRoomManager.Instance.data;
                    this.dataEye = WoodenPeopleManager_1.WoodenPeopleManager.Instance.data;
                    this.maxEye = WaitRoomManager_1.WaitRoomManager.Instance.max;
                    this.playeData = this.playeDataFun.bind(this);
                    this.playerDeath = this.roleDeathFun.bind(this);
                    this.GlassFun = this.GlassIntegralFun.bind(this);
                    this.WoodFun = this.WoodIntegralFun.bind(this);
                    this.tygoFun = this.tugOfWarProFun.bind(this);
                    this.hoodleFun = this.hoodleItegralFun.bind(this);
                    this.EyeVerifyBindFun = this.EyeVerifyFun.bind(this);
                    UiDataManager_1.UiDataManager.bindFunctionData(BindKeyName_1.BindKeyName.gamePlayerDead, this.playeData);
                    UiDataManager_1.UiDataManager.bindFunctionData(BindKeyName_1.BindKeyName.RoleDeath, this.playerDeath);
                    UiDataManager_1.UiDataManager.bindFunctionData(BindKeyName_1.BindKeyName.GlassIntegral, this.GlassFun);
                    UiDataManager_1.UiDataManager.bindFunctionData(BindKeyName_1.BindKeyName.WoodIntegral, this.WoodFun);
                    UiDataManager_1.UiDataManager.bindFunctionData(BindKeyName_1.BindKeyName.SugarIntegral, this.WoodFun);
                    UiDataManager_1.UiDataManager.bindFunctionData(BindKeyName_1.BindKeyName.TugIntegral, this.tygoFun);
                    UiDataManager_1.UiDataManager.bindFunctionData(BindKeyName_1.BindKeyName.HoodleIntegral, this.hoodleFun);
                    UiDataManager_1.UiDataManager.bindFunctionData(BindKeyName_1.BindKeyName.EyeVerify, this.EyeVerifyBindFun);
                    var g_this = gamingView_2.gamingView.Instance;
                    this.data = GamingManager_1.GamingManager.Instance.data;
                    this.datatype = GamingManager_1.GamingManager.Instance.datatype;
                    this.listdata = GamingManager_1.GamingManager.Instance.datatype;
                    // 信号
                    //console.log(this.listdata);
                    this.max = WaitRoomManager_1.WaitRoomManager.Instance.max;
                    this.NetworkBindFun = this.NetworkFun.bind(this);
                    UiDataManager_1.UiDataManager.bindFunctionData(BindKeyName_1.BindKeyName.Network, this.NetworkBindFun);
                    // g_this.slideareabg.slideunit_scr.slideunitcontent.jianbianbg_img.time_lab.label.fontsize = 15;
                    g_this.time_lab_text("Your network quality is poor and the game is performing abnormally, please switch to a better network.");
                    // this.jianbianbg_img.time_lab.label.text = "Your network quality is poor and the game is performing abnormally, please switch to a better network.";
                    g_this.slideareabg.slideunit_scr.slideunitcontent.jianbianbg_img.time_lab.label.color = new m4m.math.color(1, 0, 0);
                    g_this.slideareabg.slideunit_scr.slideunitcontent.jianbianbg_img.time_lab.transform.visible = false;
                    g_this.slideareabg.slideunit_scr.slideunitcontent.jianbianbg_img.transform.visible = false;
                    // console.log(this.data);
                    // console.log(GamingManager.Instance.data);
                    g_this.rightbg1.transform.visible = false;
                    this.newMethods();
                }
                gamingViewData.prototype.EyeVerifyFun = function (listte) {
                    this.newMethod(listte);
                };
                gamingViewData.prototype.newMethod = function (listte) {
                    gamingView_2.gamingView.Instance.topbg.transform.visible = true;
                    var data = [];
                    for (var key in listte) {
                        var obj = listte[key];
                        data.push(obj);
                        this.datatype = listte;
                        this.listdata = listte;
                        this.data = data;
                    }
                    if (data) {
                        gamingView_2.gamingView.Instance.topbg.toplab1_lab.label.text = " WAITING FOR OTHER PLAYERS:" + "".concat(data.length, "/").concat(this.maxEye);
                        if (this.data.length == this.maxEye) {
                            if (gamingView_2.gamingView.Instance.mygrid == null && gamingView_2.gamingView.Instance.rnygrid == null) {
                                // console.log(this.data);
                                gamingView_2.gamingView.Instance.topbg.transform.visible = false;
                                this.newMethods();
                            }
                        }
                    }
                };
                gamingViewData.prototype.newMethods = function () {
                    var _this = this;
                    var temp;
                    for (var i = 0; i < this.data.length - 1; i++) {
                        for (var j = 0; j < this.data.length - 1 - i; j++) {
                            if (Number(this.data[j].num) > Number(this.data[j + 1].num)) {
                                temp = this.data[j + 1];
                                this.data[j + 1] = this.data[j];
                                this.data[j] = temp;
                            }
                        }
                    }
                    this.data.forEach(function (s) {
                        _this.obj.push({ name: s, type: false });
                    });
                    if (this.data.length != 0) {
                        // console.log(this.data);
                        if (gamingView_2.gamingView.Instance.mygrid == null && gamingView_2.gamingView.Instance.rnygrid == null) {
                            gamingView_2.gamingView.Instance.oninfogamingGrid();
                            gamingView_2.gamingView.Instance.oninforankinglist();
                        }
                        gamingView_2.gamingView.Instance.mygListModel.setSource(this.obj);
                        gamingView_2.gamingView.Instance.mygrid.setListModel(gamingView_2.gamingView.Instance.mygListModel);
                        if (this.obj.length > 50) {
                            gamingView_2.gamingView.Instance.leftbg.leftbg1.leftblack2_img.slide_scr.slidecontent.transform.height = gamingView_2.gamingView.Instance.mygrid.getHeight();
                            gamingView_2.gamingView.Instance.leftbg.leftbg1.leftblack2_img.slide_scr.slidecontent.transform.markDirty();
                        }
                        // gamingView.Instance.leftblack();
                    }
                };
                //单人或多人死亡数据
                gamingViewData.prototype.playeDataFun = function (list) {
                    var _this = this;
                    if (list) {
                        // console.log(list);
                        list.forEach(function (v) {
                            _this.lists.push(v);
                        });
                        var dataType = void 0;
                        var obj = [];
                        for (var key in this.datatype) {
                            for (var i = 0; i < this.lists.length; i++) {
                                var s = this.lists[i];
                                if (s == StageMgr_1.StageMgr.PlayerGUID) {
                                    this.store = true;
                                }
                                else {
                                    this.store = false;
                                }
                                if (key == s) {
                                    obj.push({ name: this.datatype[key], type: true });
                                    this.Guimanletdata(obj);
                                    this.blone = true;
                                    break;
                                }
                                else {
                                    this.blone = false;
                                }
                            }
                            if (this.blone == false) {
                                obj.push({ name: this.datatype[key], type: false });
                            }
                            dataType = obj;
                        }
                        if (dataType) {
                            var temp = void 0;
                            for (var i = 0; i < dataType.length - 1; i++) {
                                for (var j = 0; j < dataType.length - 1 - i; j++) {
                                    if (Number(dataType[j].name.num) > Number(dataType[j + 1].name.num)) {
                                        temp = dataType[j + 1];
                                        dataType[j + 1] = dataType[j];
                                        dataType[j] = temp;
                                    }
                                }
                            }
                            gamingView_2.gamingView.Instance.mygListModel.setSource(dataType);
                            gamingView_2.gamingView.Instance.mygrid.setListModel(gamingView_2.gamingView.Instance.mygListModel);
                            if (dataType.length > 50) {
                                gamingView_2.gamingView.Instance.leftbg.leftbg1.leftblack2_img.slide_scr.slidecontent.transform.height = gamingView_2.gamingView.Instance.mygrid.getHeight();
                                gamingView_2.gamingView.Instance.leftbg.leftbg1.leftblack2_img.slide_scr.slidecontent.transform.markDirty();
                            }
                        }
                    }
                };
                //玻璃桥死亡分数消失
                gamingViewData.prototype.Guimanletdata = function (obj) {
                    if (this.objset.length != 0) {
                        for (var e = 0; e < obj.length; e++) {
                            for (var j = 0; j < this.objset.length; j++) {
                                if (this.objset[j].num == obj[e].name.num) {
                                    if (obj[e].type == true) {
                                        this.objset.splice(j, 1);
                                        this.objset.forEach(function (item, index) {
                                            item.index = index;
                                        });
                                        if (obj[e].name.playerInfo.token == StageMgr_1.StageMgr.PlayerGUID) {
                                            gamingView_2.gamingView.Instance.downlab1_lab_text("");
                                        }
                                        gamingView_2.gamingView.Instance.rnygrListModel.setSource(this.objset);
                                        gamingView_2.gamingView.Instance.rnygrid.setListModel(gamingView_2.gamingView.Instance.rnygrListModel);
                                    }
                                }
                            }
                        }
                        for (var s = 0; s < obj.length; s++) {
                            for (var l = 0; l < this.dataType.length; l++) {
                                if (this.dataType[l].userToken && obj[s].name.playerInfo.token) {
                                    if (obj[s].name.playerInfo.token == this.dataType[l].userToken) {
                                        if (obj[s].type == true) {
                                            this.dataType.splice(l, 1);
                                        }
                                    }
                                }
                            }
                        }
                        //console.log("this.dataType", this.dataType);
                        // console.log("this.dataType", this.dataType);
                    }
                };
                //集体死亡数据
                gamingViewData.prototype.roleDeathFun = function (list) {
                    var dataType;
                    var obj = [];
                    for (var key in this.datatype) {
                        for (var s in list) {
                            var liste = list[s];
                            if (key == liste.token) {
                                obj.push({ name: this.datatype[key], type: true });
                                this.blone = true;
                                break;
                            }
                            else {
                                this.blone = false;
                            }
                        }
                        if (this.blone == false) {
                            obj.push({ name: this.datatype[key], type: false });
                        }
                        dataType = obj;
                    }
                    var temp;
                    for (var i = 0; i < dataType.length - 1; i++) {
                        for (var j = 0; j < dataType.length - 1 - i; j++) {
                            if (dataType[j].name.num > dataType[j + 1].name.num) {
                                temp = dataType[j + 1];
                                dataType[j + 1] = dataType[j];
                                dataType[j] = temp;
                            }
                        }
                    }
                    gamingView_2.gamingView.Instance.downlab1_lab_text("");
                    gamingView_2.gamingView.Instance.mygListModel.setSource(dataType);
                    gamingView_2.gamingView.Instance.mygrid.setListModel(gamingView_2.gamingView.Instance.mygListModel);
                    if (dataType.length > 40) {
                        gamingView_2.gamingView.Instance.leftbg.leftbg1.leftblack2_img.slide_scr.slidecontent.transform.height = gamingView_2.gamingView.Instance.mygrid.getHeight();
                        gamingView_2.gamingView.Instance.leftbg.leftbg1.leftblack2_img.slide_scr.slidecontent.transform.markDirty();
                    }
                };
                //玻璃桥数据积分榜数据
                gamingViewData.prototype.GlassIntegralFun = function (data) {
                    // console.log(this.listdata);
                    if (data) {
                        this.objset.length = 0;
                        if (data.userToken && data.point != 99) {
                            this.dataType.push(data);
                        }
                        for (var i = 0; i < this.dataType.length; i++) {
                            var liste = this.dataType[i];
                            for (var key in this.listdata) {
                                if (key == liste.userToken) {
                                    if (Math.floor(liste.point / 100) != 0) {
                                        var lista = new Integrlse();
                                        lista.num = this.listdata[key].num;
                                        lista.timeintegr = "Score: " + Math.floor(liste.point / 100);
                                        lista.time = liste.point;
                                        this.objset.push(lista);
                                    }
                                    if (liste.userToken == StageMgr_1.StageMgr.PlayerGUID) {
                                        gamingView_2.gamingView.Instance.downlab1_lab_text("Your score:" + Math.floor(liste.point / 100));
                                    }
                                }
                            }
                        }
                        if (this.objset.length > 1) {
                            for (var i = 0; i < this.objset.length; i++) {
                                var s = 1;
                                for (var j = 0; j < this.objset.length; j++) {
                                    if (this.objset[j + s]) {
                                        if (Number(this.objset[i].num) == Number(this.objset[j + s].num)) {
                                            if (this.objset[i].time > this.objset[j + s].time) {
                                                this.objset.splice(j + s, 1);
                                            }
                                            else {
                                                if (this.objset[i].time != this.objset[j + s].time) {
                                                    this.objset.splice(i, 1);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (this.dataType.length > 1) {
                            for (var i = 0; i < this.dataType.length - 1; i++) {
                                var s = 1;
                                for (var j = 0; j < this.dataType.length; j++) {
                                    if (this.dataType[j + s]) {
                                        if (this.dataType[i].userToken == this.dataType[j + s].userToken) {
                                            if (this.dataType[i].point > this.dataType[j + s].point) {
                                                this.dataType.splice(j + s, 1);
                                            }
                                            else {
                                                if (this.dataType[i].point != this.dataType[j + s].point) {
                                                    this.dataType.splice(i, 1);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        var temp = void 0;
                        for (var i = 0; i < this.objset.length - 1; i++) {
                            for (var j = 0; j < this.objset.length - 1 - i; j++) {
                                if (this.objset[j + 1].time > 1) {
                                    if (this.objset[j].time < this.objset[j + 1].time) {
                                        temp = this.objset[j + 1];
                                        this.objset[j + 1] = this.objset[j];
                                        this.objset[j] = temp;
                                    }
                                }
                            }
                        }
                        this.objset.forEach(function (item, index) {
                            item.index = index;
                        });
                        gamingView_2.gamingView.Instance.rnygrListModel.setSource(this.objset);
                        gamingView_2.gamingView.Instance.rnygrid.setListModel(gamingView_2.gamingView.Instance.rnygrListModel);
                    }
                };
                //木头人和糖饼积分榜数据
                gamingViewData.prototype.WoodIntegralFun = function (data) {
                    if (data) {
                        this.youlist.push(data[0]);
                        var atesae = [];
                        for (var i = 0; i < this.youlist.length; i++) {
                            var liste = this.youlist[i];
                            var lisetat = liste.pingTime / 1000;
                            var lista = new Integrlse();
                            lista.num = liste.num;
                            lista.timeintegr = "Finish time: " + lisetat.toFixed(2) + " S";
                            lista.time = lisetat.toFixed(2);
                            atesae.push(lista);
                            if (liste.playerInfo.token == StageMgr_1.StageMgr.PlayerGUID) {
                                gamingView_2.gamingView.Instance.downlab1_lab_text("Your score:" + lisetat.toFixed(2) + " S");
                            }
                            lista = null;
                        }
                        var temp = void 0;
                        for (var i = 0; i < atesae.length - 1; i++) {
                            for (var j = 0; j < atesae.length - 1 - i; j++) {
                                if (Number(atesae[j].time) > Number(atesae[j + 1].time)) {
                                    temp = atesae[j + 1];
                                    atesae[j + 1] = atesae[j];
                                    atesae[j] = temp;
                                }
                            }
                        }
                        atesae.forEach(function (item, index) {
                            item.index = index;
                        });
                        gamingView_2.gamingView.Instance.rnygrListModel.setSource(atesae);
                        gamingView_2.gamingView.Instance.rnygrid.setListModel(gamingView_2.gamingView.Instance.rnygrListModel);
                    }
                };
                //拔河积分榜数据
                gamingViewData.prototype.tugOfWarProFun = function (data) {
                    if (data) {
                        if (data.usersPoint) {
                            var ates = [];
                            var tesal = JSON.parse(data.usersPoint);
                            for (var key in this.listdata) {
                                for (var k in tesal) {
                                    if (key == k) {
                                        var lista = new Integrlse();
                                        lista.num = this.listdata[k].num;
                                        lista.timeintegr = "Score: " + tesal[k];
                                        lista.time = tesal[k];
                                        //lista.count =
                                        ates.push(lista);
                                        lista = null;
                                    }
                                    if (key == StageMgr_1.StageMgr.PlayerGUID) {
                                        gamingView_2.gamingView.Instance.downlab1_lab_text("Your score:" + tesal[key].toString());
                                    }
                                }
                            }
                            var temp = void 0;
                            for (var i = 0; i < ates.length - 1; i++) {
                                for (var j = 0; j < ates.length - 1 - i; j++) {
                                    if (Number(ates[j].time) < Number(ates[j + 1].time)) {
                                        temp = ates[j + 1];
                                        ates[j + 1] = ates[j];
                                        ates[j] = temp;
                                    }
                                }
                            }
                            ates.forEach(function (item, index) {
                                item.index = index;
                            });
                            gamingView_2.gamingView.Instance.rnygrListModel.setSource(ates);
                            gamingView_2.gamingView.Instance.rnygrid.setListModel(gamingView_2.gamingView.Instance.rnygrListModel);
                        }
                    }
                };
                //弹珠积分榜数据
                gamingViewData.prototype.hoodleItegralFun = function (data) {
                    if (data.dropPoint) {
                        if (data.OddNumber) {
                            var atesae = [];
                            var lista = new Integrlse();
                            lista.num = "Marbles in the judging";
                            lista.timeintegr = "  area:" + data.OddNumber;
                            lista.time = data.OddNumber;
                            lista.count = "1";
                            atesae.push(lista);
                            gamingView_2.gamingView.Instance.rnygrListModel.setSource(atesae);
                            gamingView_2.gamingView.Instance.rnygrid.setListModel(gamingView_2.gamingView.Instance.rnygrListModel);
                        }
                    }
                };
                gamingViewData.prototype.dispose = function () {
                    UiDataManager_1.UiDataManager.unBindFunctionData(BindKeyName_1.BindKeyName.gamePlayerDead, this.playeData);
                    UiDataManager_1.UiDataManager.unBindFunctionData(BindKeyName_1.BindKeyName.RoleDeath, this.playerDeath);
                    UiDataManager_1.UiDataManager.unBindFunctionData(BindKeyName_1.BindKeyName.GlassIntegral, this.GlassFun);
                    UiDataManager_1.UiDataManager.unBindFunctionData(BindKeyName_1.BindKeyName.WoodIntegral, this.WoodFun);
                    UiDataManager_1.UiDataManager.unBindFunctionData(BindKeyName_1.BindKeyName.SugarIntegral, this.WoodFun);
                    UiDataManager_1.UiDataManager.unBindFunctionData(BindKeyName_1.BindKeyName.TugIntegral, this.tygoFun);
                    UiDataManager_1.UiDataManager.unBindFunctionData(BindKeyName_1.BindKeyName.EyeVerify, this.EyeVerifyBindFun);
                    GamingManager_1.GamingManager.Instance.dispose();
                    this.dataType.length = 0;
                    this.objset.length = 0;
                    this.obj.length = 0;
                    this.youlist.length = 0;
                    this.data = null;
                    this.listdata = null;
                };
                // 信号
                gamingViewData.prototype.NetworkFun = function (data) {
                    gamingView_2.gamingView.Instance.rightbg1.transform.visible = true;
                    this.list = PingTimeManager_1.PingTimeManager.Instance.getNetworkQuality();
                    this.showlist(this.list);
                    this.showdata(data);
                };
                gamingViewData.prototype.showlist = function (list) {
                    var g_this = gamingView_2.gamingView.Instance;
                    if (list == 1) {
                        var iconType = gamingView_2.gamingView.Instance.uiName + ".atlas.json_signalg";
                        g_this.rightbg1.signal_img.image.sprite = CommonUIUtils_2.CommonUIUtils.getSprite(iconType);
                    }
                    else if (list == 2) {
                        var iconType = gamingView_2.gamingView.Instance.uiName + ".atlas.json_signalo";
                        g_this.rightbg1.signal_img.image.sprite = CommonUIUtils_2.CommonUIUtils.getSprite(iconType);
                    }
                    else {
                        var iconType = gamingView_2.gamingView.Instance.uiName + ".atlas.json_signalr";
                        g_this.rightbg1.signal_img.image.sprite = CommonUIUtils_2.CommonUIUtils.getSprite(iconType);
                        this.listeka(list);
                    }
                };
                gamingViewData.prototype.listeka = function (list) {
                    var g_this = gamingView_2.gamingView.Instance;
                    if (list == 3) {
                        if (this.listekas == true) {
                            g_this.slideareabg.slideunit_scr.slideunitcontent.jianbianbg_img.transform.visible = true;
                            g_this.slideareabg.slideunit_scr.slideunitcontent.jianbianbg_img.time_lab.transform.visible = true;
                            FrameMgr_1.FrameMgr.Add(this.carousel, this);
                        }
                    }
                };
                gamingViewData.prototype.carousel = function () {
                    var g_this = gamingView_2.gamingView.Instance;
                    var listes = g_this.slideareabg.transform.width + 500;
                    var listt;
                    var late;
                    listt = Math.floor(listes);
                    if (listt % 2 != 0) {
                        late = listt + 1;
                    }
                    else {
                        late = Math.floor(listes);
                    }
                    var count;
                    if (this.main == null) {
                        count = late - 2;
                        this.main = count;
                    }
                    else {
                        if (this.main != -600) {
                            count = this.main - 2;
                            this.main = count;
                            this.listekas = false;
                        }
                        else {
                            this.main = late;
                            FrameMgr_1.FrameMgr.Remove(this.carousel, this);
                            g_this.slideareabg.slideunit_scr.slideunitcontent.jianbianbg_img.transform.visible = false;
                            g_this.slideareabg.slideunit_scr.slideunitcontent.jianbianbg_img.time_lab.transform.visible = false;
                            this.listekas = true;
                        }
                    }
                    g_this.slideareabg.slideunit_scr.slideunitcontent.jianbianbg_img.time_lab.transform.setLayoutValue(m4m.framework.layoutOption.LEFT, count);
                    g_this.slideareabg.slideunit_scr.slideunitcontent.jianbianbg_img.time_lab.transform.markDirty();
                };
                gamingViewData.prototype.showdata = function (data) {
                    var g_this = gamingView_2.gamingView.Instance;
                    if (data <= 100) {
                        g_this.ms_lab_text(data + "ms");
                        g_this.rightbg1.ms_lab.label.color = new m4m.math.color(0, 1, 0, 1);
                    }
                    else if (data <= 200 && data > 100) {
                        g_this.ms_lab_text(data + "ms");
                        g_this.rightbg1.ms_lab.label.color = new m4m.math.color(1, 1, 0, 1);
                    }
                    else {
                        g_this.ms_lab_text(data + "ms");
                        g_this.rightbg1.ms_lab.label.color = new m4m.math.color(1, 0, 0, 1);
                    }
                };
                return gamingViewData;
            }());
            exports_6("gamingViewData", gamingViewData);
            Integrlse = /** @class */ (function () {
                function Integrlse() {
                }
                return Integrlse;
            }());
            exports_6("Integrlse", Integrlse);
        }
    };
});
System.register("gamingView", ["Core/StageMgr", "Data/BindKeyName", "Data/CellData", "Data/Grid", "Data/GridData", "Data/ListModel", "GameEnum", "Manager/GamingManager", "PSDUI/UiDataManager", "PSDUI/UiManager", "Role/RoleMgr", "Tools/FrameMgr", "gaming", "gamingCell", "gamingrnCell", "gamingViewData", "TopBarCtr"], function (exports_7, context_7) {
    "use strict";
    var StageMgr_2, BindKeyName_2, CellData_1, Grid_1, GridData_1, ListModel_1, GameEnum_1, GamingManager_2, UiDataManager_2, UiManager_1, RoleMgr_1, FrameMgr_2, gaming_1, gamingCell_1, gamingrnCell_1, gamingViewData_1, TopBarCtr_1, gamingView;
    var __moduleName = context_7 && context_7.id;
    return {
        setters: [
            function (StageMgr_2_1) {
                StageMgr_2 = StageMgr_2_1;
            },
            function (BindKeyName_2_1) {
                BindKeyName_2 = BindKeyName_2_1;
            },
            function (CellData_1_1) {
                CellData_1 = CellData_1_1;
            },
            function (Grid_1_1) {
                Grid_1 = Grid_1_1;
            },
            function (GridData_1_1) {
                GridData_1 = GridData_1_1;
            },
            function (ListModel_1_1) {
                ListModel_1 = ListModel_1_1;
            },
            function (GameEnum_1_1) {
                GameEnum_1 = GameEnum_1_1;
            },
            function (GamingManager_2_1) {
                GamingManager_2 = GamingManager_2_1;
            },
            function (UiDataManager_2_1) {
                UiDataManager_2 = UiDataManager_2_1;
            },
            function (UiManager_1_1) {
                UiManager_1 = UiManager_1_1;
            },
            function (RoleMgr_1_1) {
                RoleMgr_1 = RoleMgr_1_1;
            },
            function (FrameMgr_2_1) {
                FrameMgr_2 = FrameMgr_2_1;
            },
            function (gaming_1_1) {
                gaming_1 = gaming_1_1;
            },
            function (gamingCell_1_1) {
                gamingCell_1 = gamingCell_1_1;
            },
            function (gamingrnCell_1_1) {
                gamingrnCell_1 = gamingrnCell_1_1;
            },
            function (gamingViewData_1_1) {
                gamingViewData_1 = gamingViewData_1_1;
            },
            function (TopBarCtr_1_1) {
                TopBarCtr_1 = TopBarCtr_1_1;
            }
        ],
        execute: function () {
            /**游戏中的倒计时界面*/
            gamingView = /** @class */ (function (_super) {
                __extends(gamingView, _super);
                function gamingView() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.noAffected = true;
                    /** 当前UI是否会影响场景玩家操作 */
                    _this.influenceSceneAction = false;
                    _this.uiLayer = UiManager_1.uiLayerType.midlayer;
                    /** 状态条模板 */
                    _this.slotRoleBarMap = {};
                    _this.zoomNum = 0;
                    //头顶文本是否显示
                    _this.topBarVisible = true;
                    //默认头顶文本颜色
                    _this.defaultColor = new m4m.math.color();
                    _this.mygListModel = new ListModel_1.ListModel();
                    _this.rnygrListModel = new ListModel_1.ListModel();
                    _this.tiemat = 0;
                    _this.bool = true;
                    return _this;
                }
                gamingView.prototype.onInit = function () {
                    _super.prototype.onInit.call(this);
                    this.onShow = this.onShowFunc.bind(this);
                    this.onHide = this.onHideFunc.bind(this);
                    this.onDispose = this.onDisposeFunc.bind(this);
                    var intY = this.rightbg1.ms_lab.transform.height - 20;
                    this.rightbg1.ms_lab.transform.setLayoutValue(m4m.framework.layoutOption.V_CENTER, intY);
                    this.statebg.transform.visible = false;
                    // 锚点置为左上角
                    this.transform.pivot.x = 0;
                    this.transform.pivot.y = 0;
                    this.transform.pivot = this.transform.pivot;
                    this.statebg.transform.pivot.x = 0;
                    this.statebg.transform.pivot.y = 0;
                    this.statebg.transform.pivot = this.statebg.transform.pivot;
                    this.statebg.name_lab.transform.localTranslate = new m4m.math.vector2();
                    this.statebg.name_lab.transform.markDirty();
                    TopBarCtr_1.TopBarCtr.instance.init(this.statebg);
                    this.leftbgFun = this.leftbg.leftbg1.leftblack2_img.lefttopbg.leftblack_img.transform.addComponent("button");
                    this.leftbgFun.addListener(m4m.event.UIEventEnum.PointerDown, this.leftbgBtnDown, this);
                    // this.leftbg.leftbg1.leftblack2_img.slide_scr.slidecontent.numberbg.deathnumber_lab.label.fontsize = 17;
                    // this.leftbg.leftbg1.leftblack2_img.slide_scr.slidecontent.numberbg.deathnumber_lab.alivenumber_lab.label.fontsize = 17;
                    // this.leftbg.leftbg1.leftblack2_img.lefttopbg.lefttopblack_img.lefttoplab_lab.label.fontsize = 18;
                    // this.leftbg.leftbg1.leftblack2_img.lefttopbg.lefttoprgbg.lefttoplab1_lab.label.fontsize = 15;
                    // this.leftbg.leftbg1.leftblack2_img.lefttopbg.lefttoprgbg.lefttoplab2_lab.label.fontsize = 15;
                    // this.leftbg.leftbg1.leftblack1_img.downbg.leftdownblack_img.leftdownlab_lab.label.fontsize = 18;
                    // this.leftbg.leftbg1.leftblack1_img.downbg.downlabbg.downlab3_lab.label.fontsize = 13;
                    // this.leftbg.leftbg1.leftblack1_img.downbg.downlabbg.downlab2_lab.label.fontsize = 13;
                    // this.leftbg.leftbg1.leftblack1_img.downbg.downlabbg.downlab4_lab.label.fontsize = 13;
                    // this.leftbg.leftbg1.leftblack1_img.downbg.downlab1_lab.label.fontsize = 15;
                    // this.topbg.toplab1_lab.label.fontsize = 16;
                    this.leftbg.arrowbtn1_btn.transform.visible = false;
                    this.topbg.transform.visible = false;
                    this.arrowbtn1_btn_btnEvent = this.arrowbtn.bind(this);
                    this.lefttoplab1_lab_text("Alive:  ");
                    this.lefttoplab2_lab_text("Death:    ");
                    this.lefttoplab_lab_text("PLAYER LIST");
                    this.leftdownlab_lab_text("SCORE LIST");
                    this.downlab1_lab_text("");
                    this.downlab2_lab_text("");
                    if (GamingManager_2.GamingManager.Instance.index == 1) {
                        this.leftbg.leftbg1.transform.visible = false;
                        this.leftbg.arrowbtn1_btn.transform.visible = false;
                        GamingManager_2.GamingManager.Instance.index = null;
                    }
                    else {
                        this.topbg.transform.visible = false;
                        this.leftbg.leftbg1.transform.visible = false;
                        this.leftbg.arrowbtn1_btn.transform.visible = false;
                    }
                    this.ViewData = new gamingViewData_1.gamingViewData();
                    // if (StageMgr.levelType == GameType.glassBridge) {
                    //     this.leftbg.leftbg1.leftblack1_img.transform.visible = false;
                    //     this.leftdownlab_lab_text("");
                    // }
                    // setTimeout(() => {
                    //     let bar = this.getBar("222");
                    //     bar.setPos({x: -100, y: -100});
                    //     console.log("bar: ", bar.barTrans.localTranslate);
                    // }, 2000);
                    // 血条
                    this.statebg.blood1_img.transform.visible = false;
                    this.statebg.blood2_img.transform.visible = false;
                    this.statebg.blood3_img.transform.visible = false;
                    this.statebg.bloodbg_img.transform.visible = false;
                    this.redmask_img.transform.visible = false;
                    //this.redmask_img.image.color.a = 0.5;
                    // EventMgr.addListener("Wooden_Timer_Update", this.onWoodenTimerUpdate, this);
                    this.startTimeCDFunBind = this.startTimeCDFun.bind(this);
                    this.runningTimeCDFunBind = this.runningTimeCDFun.bind(this);
                    this.onBattleRoleTopBind = this.onBattleRoleTop.bind(this);
                    this.onPlayerDeadBind = this.onPlayerDead.bind(this);
                    this.readyTimeCDFunBind = this.readyTimeCDFun.bind(this);
                    this.setTopBarVisibleBind = this.setTopBarVisibleFun.bind(this);
                    this.enableGamingToucherBind = this.enableGamingToucherFun.bind(this);
                    this.clearTopBarBind = this.clearTopBar.bind(this);
                    this.Textlaber = this.Text.bind(this);
                    UiDataManager_2.UiDataManager.bindFunctionData(BindKeyName_2.BindKeyName.startTimeCD, this.startTimeCDFunBind);
                    UiDataManager_2.UiDataManager.bindFunctionData(BindKeyName_2.BindKeyName.runningTimeCD, this.runningTimeCDFunBind);
                    UiDataManager_2.UiDataManager.bindFunctionData(BindKeyName_2.BindKeyName.readyTimeCD, this.readyTimeCDFunBind);
                    UiDataManager_2.UiDataManager.bindFunctionData(BindKeyName_2.BindKeyName.battleRoleTopTos, this.onBattleRoleTopBind);
                    UiDataManager_2.UiDataManager.bindFunctionData(BindKeyName_2.BindKeyName.playerDead, this.onPlayerDeadBind);
                    UiDataManager_2.UiDataManager.bindFunctionData(BindKeyName_2.BindKeyName.setTopBarVisible, this.setTopBarVisibleBind);
                    UiDataManager_2.UiDataManager.bindFunctionData(BindKeyName_2.BindKeyName.enableGamingToucher, this.enableGamingToucherBind);
                    UiDataManager_2.UiDataManager.bindFunctionData(BindKeyName_2.BindKeyName.clearTopBar, this.clearTopBarBind);
                    UiDataManager_2.UiDataManager.bindFunctionData(BindKeyName_2.BindKeyName.updateTitleText, this.Textlaber);
                    //UiDataManager.bindFunctionData(BindKeyName.showHpBar, this.showHpBarBind);
                    FrameMgr_2.FrameMgr.Add(this.onUpdateFun, this);
                };
                gamingView.prototype.Text = function (data) {
                    this.toplab1_lab_text(data);
                };
                gamingView.prototype.onShowFunc = function () {
                    this.isReadyBol = false;
                    TopBarCtr_1.TopBarCtr.instance.onShow(this.transform);
                    this.updateHpBarFun();
                };
                gamingView.prototype.onDisposeFunc = function () {
                    this.leftbgFun.removeListener(m4m.event.UIEventEnum.PointerDown, this.leftbgBtnDown, this);
                    this.ViewData.dispose();
                };
                gamingView.prototype.onHideFunc = function () {
                    UiDataManager_2.UiDataManager.unBindFunctionData(BindKeyName_2.BindKeyName.startTimeCD, this.startTimeCDFunBind);
                    UiDataManager_2.UiDataManager.unBindFunctionData(BindKeyName_2.BindKeyName.runningTimeCD, this.runningTimeCDFunBind);
                    UiDataManager_2.UiDataManager.unBindFunctionData(BindKeyName_2.BindKeyName.battleRoleTopTos, this.onBattleRoleTopBind);
                    UiDataManager_2.UiDataManager.unBindFunctionData(BindKeyName_2.BindKeyName.playerDead, this.onPlayerDeadBind);
                    UiDataManager_2.UiDataManager.unBindFunctionData(BindKeyName_2.BindKeyName.readyTimeCD, this.readyTimeCDFunBind);
                    UiDataManager_2.UiDataManager.unBindFunctionData(BindKeyName_2.BindKeyName.setTopBarVisible, this.setTopBarVisibleBind);
                    UiDataManager_2.UiDataManager.unBindFunctionData(BindKeyName_2.BindKeyName.enableGamingToucher, this.enableGamingToucherBind);
                    UiDataManager_2.UiDataManager.unBindFunctionData(BindKeyName_2.BindKeyName.clearTopBar, this.clearTopBarBind);
                    UiDataManager_2.UiDataManager.unBindFunctionData(BindKeyName_2.BindKeyName.updateTitleText, this.Textlaber);
                    //UiDataManager.unBindFunctionData(BindKeyName.showHpBar, this.showHpBarBind);
                    this.clearTopBar();
                    TopBarCtr_1.TopBarCtr.instance.onHide();
                    FrameMgr_2.FrameMgr.Remove(this.onUpdateFun, this);
                    this.transform.removeComponent(this.viewToucherPad);
                    this.viewToucherPad = null;
                    GamingManager_2.GamingManager.Instance.index = null;
                };
                //初始化所有玩家
                gamingView.prototype.oninfogamingGrid = function () {
                    var lo = m4m.framework.layoutOption;
                    var cellTrans = this.leftbg.leftbg1.leftblack2_img.slide_scr.slidecontent.numberbg.transform;
                    var cellPercentWidth = cellTrans.width;
                    var cellPercentHeight = cellTrans.height;
                    var cellData = new CellData_1.CellData();
                    cellData.width = cellPercentWidth;
                    cellData.height = cellPercentHeight;
                    var gridData = new GridData_1.GridData();
                    gridData.columns = 10;
                    gridData.rows = 10;
                    gridData.offsetX = 14;
                    gridData.offsetY = 6;
                    var initX = cellTrans.getLayoutValue(lo.H_CENTER);
                    gridData.initXPlace = initX;
                    var initY = cellTrans.getLayoutValue(lo.V_CENTER);
                    gridData.initYPlace = initY;
                    gridData.cellName = gamingCell_1.gamingCell.name;
                    gridData.cellData = cellData;
                    gridData.cell = this.leftbg.leftbg1.leftblack2_img.slide_scr.slidecontent.numberbg;
                    //生成的格子放在父节点
                    gridData.parentTrans = cellTrans.parent;
                    gridData.cellLayoutX = lo.H_CENTER;
                    gridData.cellLayoutY = lo.V_CENTER;
                    this.mygrid = new Grid_1.Grid(gridData);
                    cellTrans.visible = false;
                };
                gamingView.prototype.oninforankinglist = function () {
                    var lo = m4m.framework.layoutOption;
                    var cellTrans = this.leftbg.leftbg1.leftblack1_img.downbg_img.downlabbg.transform;
                    var cellPercentWidth = cellTrans.width;
                    var cellPercentHeight = cellTrans.height;
                    var cellData = new CellData_1.CellData();
                    cellData.width = cellPercentWidth;
                    cellData.height = cellPercentHeight;
                    var gridData = new GridData_1.GridData();
                    gridData.columns = 1;
                    gridData.rows = 3;
                    gridData.offsetX = 10;
                    gridData.offsetY = 5;
                    var initX = cellTrans.getLayoutValue(lo.H_CENTER);
                    gridData.initXPlace = initX;
                    var initY = cellTrans.getLayoutValue(lo.V_CENTER);
                    gridData.initYPlace = initY;
                    gridData.cellName = gamingrnCell_1.gamingrnCell.name;
                    gridData.cellData = cellData;
                    gridData.cell = this.leftbg.leftbg1.leftblack1_img.downbg_img.downlabbg;
                    //生成的格子放在父节点
                    gridData.parentTrans = cellTrans.parent;
                    gridData.cellLayoutX = lo.H_CENTER;
                    gridData.cellLayoutY = lo.V_CENTER;
                    this.rnygrid = new Grid_1.Grid(gridData);
                    cellTrans.visible = false;
                    this.rnygrListModel.setSource([]);
                    this.rnygrid.setListModel(gamingView.Instance.rnygrListModel);
                };
                //更新头顶文本
                gamingView.prototype.onBattleRoleTop = function (sMap) {
                    if (!this.topBarVisible) {
                        return;
                    }
                    for (var slotId in sMap) {
                        var val = sMap[slotId];
                        if (val.name != null) {
                            var bar = this.getBar(val.name);
                            if (val.color) {
                                m4m.math.colorClone(val.color, bar.bar.name_lab.label.color);
                            }
                            else {
                                m4m.math.colorClone(this.defaultColor, bar.bar.name_lab.label.color);
                            }
                            var active = val.active;
                            bar.setVisible(active);
                            if (active) {
                                bar.setPos(val.pos);
                                bar.setHP(val.hpNormal);
                                //console.log("pos: ", val.pos);
                            }
                        }
                    }
                };
                //头顶文本是否显示
                gamingView.prototype.setTopBarVisibleFun = function (v) {
                    this.topBarVisible = v;
                    if (!v) {
                        for (var key in this.slotRoleBarMap) {
                            var slot = this.slotRoleBarMap[key];
                            slot.topBar.setVisible(false);
                        }
                    }
                };
                //清理头顶文本
                gamingView.prototype.clearTopBar = function () {
                    var keys = Object.keys(this.slotRoleBarMap);
                    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
                        var key = keys_1[_i];
                        var slot = this.slotRoleBarMap[key];
                        slot.topBar.dispose();
                        delete this.slotRoleBarMap[key];
                    }
                };
                gamingView.prototype.startTimeCDFun = function (data) {
                    var time = data.time;
                    var lab = this.topbg.toplab1_lab.label;
                    if (this.bool) {
                        this.leftbg.leftbg1.transform.visible = true;
                        this.leftbg.arrowbtn1_btn.transform.visible = false;
                        this.topbg.transform.visible = true;
                        this.bool = false;
                    }
                    if (time > 0) {
                        lab.text = "GAME STARTS IN " + time + "S";
                        if (StageMgr_2.StageMgr.levelType == GameEnum_1.GameType.tugOfWar) {
                            if (time == 4) { //倒计时第3秒时 拔河进入平台
                                UiDataManager_2.UiDataManager.changeFunctionData(BindKeyName_2.BindKeyName.gameStart, null);
                            }
                        }
                    }
                    else {
                        // lab.text = "GAME STARTS !";
                        this.tiemat = 1;
                    }
                };
                gamingView.prototype.runningTimeCDFun = function (data) {
                    if (this.ViewData.store == false) {
                        if (this.tiemat == 1) {
                            var time = data.time;
                            var lab = this.topbg.toplab1_lab.label;
                            this.topbg.transform.visible = true;
                            if (time > 0) {
                                lab.text = "TIME LEFT: " + time + " S";
                            }
                            else {
                                lab.text = "TIME 'S UP";
                                // this.jianbianbg_img.transform.visible = false;
                            }
                        }
                    }
                };
                gamingView.prototype.readyTimeCDFun = function (data) {
                    // this.topbg.toplab1_lab.label.fontsize = 16;
                    console.error("readyTime", data.time, this.topbg.toplab1_lab.transform.localScale);
                    this.isReadyBol = true;
                    this.zoomNum = 3;
                    var time = data.time;
                    var lab = this.topbg.toplab1_lab.label;
                    if (this.bool) {
                        this.leftbg.leftbg1.transform.visible = true;
                        this.leftbg.arrowbtn1_btn.transform.visible = false;
                        this.topbg.transform.visible = true;
                        this.bool = false;
                    }
                    if (time > 0) {
                        lab.text = "GAME STARTS IN " + time + "S";
                    }
                    else {
                        lab.text = "READY GO";
                        this.tiemat = 1;
                        // this.jianbianbg_img.transform.visible = false;
                    }
                };
                gamingView.prototype.onUpdateFun = function () {
                    // console.error("缩放--------", this.isReadyBol, "-------", this.zoomNum, "--------");
                    if (!this.isReadyBol) {
                        return;
                    }
                    ;
                    this.topbg.transform.visible = true;
                    this.topbg.toplab1_lab.transform.localScale.x = this.zoomNum;
                    this.topbg.toplab1_lab.transform.localScale.y = this.zoomNum;
                    this.topbg.toplab1_lab.transform.markDirty();
                    this.zoomNum -= 0.25;
                    if (this.zoomNum == 1) {
                        this.isReadyBol = false;
                    }
                };
                gamingView.prototype.getBar = function (slotID) {
                    var temp = this.slotRoleBarMap[slotID];
                    if (!temp) {
                        temp = this.slotRoleBarMap[slotID] = { roleID: -1, topBar: TopBarCtr_1.TopBarCtr.instance.newBar() };
                        temp.topBar.setPlayerName(slotID);
                        this.updateHpBarVisible(temp.topBar.bar, slotID.toString());
                    }
                    return temp.topBar;
                };
                gamingView.prototype.updateHpBarFun = function () {
                    for (var key in this.slotRoleBarMap) {
                        var slot = this.slotRoleBarMap[key];
                        this.updateHpBarVisible(slot.topBar.bar, key.toString());
                    }
                };
                //更新血条是否显示
                gamingView.prototype.updateHpBarVisible = function (statebg, slotID) {
                    if (GamingManager_2.GamingManager.Instance.hpBarVisible == 0) {
                        statebg.blood1_img.transform.visible = false;
                        statebg.blood2_img.transform.visible = false;
                    }
                    else if (GamingManager_2.GamingManager.Instance.hpBarVisible == 1) {
                        var v = slotID == RoleMgr_1.RoleMgr.player.roleData.name;
                        statebg.blood1_img.transform.visible = v;
                        statebg.blood2_img.transform.visible = v;
                    }
                    else if (GamingManager_2.GamingManager.Instance.hpBarVisible == 2) {
                        statebg.blood1_img.transform.visible = true;
                        statebg.blood2_img.transform.visible = true;
                    }
                };
                gamingView.prototype.onPlayerDead = function (guid) {
                    if (guid == StageMgr_2.StageMgr.PlayerGUID) {
                        this.redmask_img.transform.visible = true;
                    }
                };
                gamingView.prototype.arrowbtn = function () {
                    this.leftbg.leftbg1.transform.visible = true;
                    this.leftbg.arrowbtn1_btn.transform.visible = false;
                };
                gamingView.prototype.leftbgBtnDown = function () {
                    this.leftbg.leftbg1.transform.visible = false;
                    this.leftbg.arrowbtn1_btn.transform.visible = true;
                };
                //是否启用点击触摸
                gamingView.prototype.enableGamingToucherFun = function (v) {
                    if (!this.viewToucherPad) {
                        this.viewToucherPad = this.transform.addComponent("touchPad");
                        this.viewToucherPad.onPointDown = this.onPointDown.bind(this);
                        this.viewToucherPad.onPointUp = this.onPointUp.bind(this);
                        this.viewToucherPad.onValueChange = this.onPointMove.bind(this);
                    }
                    this.viewToucherPad.enabled = v;
                };
                gamingView.prototype.onPointDown = function (x, y) {
                    UiDataManager_2.UiDataManager.changeFunctionData(BindKeyName_2.BindKeyName.gamingToucherPoint, { type: "down", x: x, y: y });
                };
                gamingView.prototype.onPointUp = function (x, y) {
                    UiDataManager_2.UiDataManager.changeFunctionData(BindKeyName_2.BindKeyName.gamingToucherPoint, { type: "up", x: x, y: y });
                };
                gamingView.prototype.onPointMove = function (x, y) {
                    UiDataManager_2.UiDataManager.changeFunctionData(BindKeyName_2.BindKeyName.gamingToucherPoint, { type: "move", x: x, y: y });
                };
                gamingView.prototype.leftblack = function () {
                    //console.log(this.mygrid.getHeight());
                    // if (this.mygrid.getHeight() < 95) {
                    //     this.leftbg.leftbg1.leftblack2_img.transform.height = this.leftbg.leftbg1.leftblack2_img.transform.height - (95 - this.mygrid.getHeight()) + 10;
                    //     this.leftbg.leftbg1.leftblack2_img.transform.markDirty();
                    //     if (this.mygrid.getHeight() < 21.5) {
                    //         this.leftbg.leftbg1.leftblack1_img.transform.setLayoutValue(m4m.framework.layoutOption.TOP, (95 - this.mygrid.getHeight()) + 31);
                    //         this.leftbg.leftbg1.leftblack1_img.transform.markDirty();
                    //     } else {
                    //         this.leftbg.leftbg1.leftblack1_img.transform.setLayoutValue(m4m.framework.layoutOption.TOP, (95 - this.mygrid.getHeight()) + 69);
                    //         this.leftbg.leftbg1.leftblack1_img.transform.markDirty();
                    //     }
                    // }
                };
                return gamingView;
            }(gaming_1.gaming));
            exports_7("gamingView", gamingView);
        }
    };
});
//# sourceMappingURL=gaming.js.map