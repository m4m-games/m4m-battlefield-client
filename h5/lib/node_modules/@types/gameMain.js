var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
System.register("GameEnum", [], function (exports_1, context_1) {
    "use strict";
    var GamePlayType, GameType, RoleActInput, PlayerStatus, InGameStatus, PlayerMoveType, PlayerClientState, GameState, RankType, contentType, PointWithShape, ShapeType, TicketType, ShopType, CommodityType, Weapons, HitType;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [],
        execute: function () {
            /**
             * 游戏玩法类型
             */
            (function (GamePlayType) {
                /** 游戏准备大厅 */
                GamePlayType[GamePlayType["hall"] = 0] = "hall";
                /** 木头人 */
                GamePlayType[GamePlayType["woodenPeople"] = 1] = "woodenPeople";
                /** 扣糖饼 */
                GamePlayType[GamePlayType["sugarCake"] = 2] = "sugarCake";
                /** 拔河 */
                GamePlayType[GamePlayType["tugOfWar"] = 3] = "tugOfWar";
                /**单人大厅*/
                GamePlayType[GamePlayType["singleHall"] = 4] = "singleHall";
                /**玻璃桥*/
                GamePlayType[GamePlayType["glassBridge"] = 5] = "glassBridge";
                /** 弹珠 */
                GamePlayType[GamePlayType["hoodle"] = 6] = "hoodle";
                /**鱿鱼游戏*/
                GamePlayType[GamePlayType["squidGame"] = 7] = "squidGame";
                /**黑夜混战 */
                GamePlayType[GamePlayType["melee"] = 8] = "melee";
            })(GamePlayType || (exports_1("GamePlayType", GamePlayType = {})));
            /**
             * 游戏关卡
            */
            (function (GameType) {
                /** 木头人 */
                GameType[GameType["woodenPeople"] = 1] = "woodenPeople";
                /** 扣糖饼 */
                GameType[GameType["sugarCake"] = 2] = "sugarCake";
                /** 拔河 */
                GameType[GameType["tugOfWar"] = 3] = "tugOfWar";
                /**玻璃桥*/
                GameType[GameType["glassBridge"] = 4] = "glassBridge";
                /** 弹珠 */
                GameType[GameType["marbles"] = 5] = "marbles";
                /**鱿鱼游戏*/
                GameType[GameType["squidGame"] = 6] = "squidGame";
                /**大锦标赛 */
                GameType[GameType["greatChampionship"] = 8] = "greatChampionship";
            })(GameType || (exports_1("GameType", GameType = {})));
            /**
             * 角色 行为输入
             */
            (function (RoleActInput) {
                /** 方向 摇杆 (走) */
                RoleActInput[RoleActInput["Direction"] = 0] = "Direction";
                /** 方向 摇杆释放 (走 停) */
                RoleActInput[RoleActInput["Direction_Release"] = 1] = "Direction_Release";
                /** 跳跃 */
                RoleActInput[RoleActInput["Jump"] = 2] = "Jump";
                /** 攻击 */
                RoleActInput[RoleActInput["Attack"] = 3] = "Attack";
                /** 移动速度增加 (跑)*/
                RoleActInput[RoleActInput["SpeedUp"] = 4] = "SpeedUp";
                /** 移动速度增加 释放 (跑 停) */
                RoleActInput[RoleActInput["SpeedUp_Release"] = 5] = "SpeedUp_Release";
                /** 等死状态 */
                RoleActInput[RoleActInput["WaitForDeath"] = 6] = "WaitForDeath";
                /** 死亡 */
                RoleActInput[RoleActInput["Die"] = 7] = "Die";
                /** 掉落 */
                RoleActInput[RoleActInput["DropOut"] = 8] = "DropOut";
                /** 传送状态 */
                RoleActInput[RoleActInput["TransferState"] = 9] = "TransferState";
                /** 复活 */
                RoleActInput[RoleActInput["Revive"] = 10] = "Revive";
                /** 玩家同步 走 */
                RoleActInput[RoleActInput["Walk"] = 11] = "Walk";
                /** 抠糖饼状态 */
                RoleActInput[RoleActInput["Picking"] = 12] = "Picking";
                /**左侧玩家发力拔绳子*/
                RoleActInput[RoleActInput["PulltheRope"] = 13] = "PulltheRope";
                /**左侧玩家拔河预备状态*/
                RoleActInput[RoleActInput["PreparePull"] = 14] = "PreparePull";
                /**右侧玩家拔河预备状态*/
                RoleActInput[RoleActInput["RightPreparePull"] = 15] = "RightPreparePull";
                /**右侧玩家发力拔绳子*/
                RoleActInput[RoleActInput["RightPulltheRope"] = 16] = "RightPulltheRope";
                /** 被击飞 */
                RoleActInput[RoleActInput["StrikeToFly"] = 17] = "StrikeToFly";
            })(RoleActInput || (exports_1("RoleActInput", RoleActInput = {})));
            /**
             * 玩家账号状态
             */
            (function (PlayerStatus) {
                PlayerStatus[PlayerStatus["offLine"] = 0] = "offLine";
                PlayerStatus[PlayerStatus["onLine"] = 1] = "onLine";
                PlayerStatus[PlayerStatus["inRoom"] = 2] = "inRoom";
                PlayerStatus[PlayerStatus["onLoad"] = 3] = "onLoad";
                PlayerStatus[PlayerStatus["inReady"] = 4] = "inReady";
                PlayerStatus[PlayerStatus["inGame"] = 5] = "inGame";
            })(PlayerStatus || (exports_1("PlayerStatus", PlayerStatus = {})));
            /**
             * 玩家游戏中状态
             */
            (function (InGameStatus) {
                InGameStatus[InGameStatus["outGame"] = 0] = "outGame";
                InGameStatus[InGameStatus["inGame"] = 1] = "inGame";
                InGameStatus[InGameStatus["inGameWin"] = 2] = "inGameWin";
                InGameStatus[InGameStatus["inGameDead"] = 3] = "inGameDead";
            })(InGameStatus || (exports_1("InGameStatus", InGameStatus = {})));
            /**
             * 移动类型
             */
            (function (PlayerMoveType) {
                PlayerMoveType[PlayerMoveType["homing"] = -1] = "homing";
                PlayerMoveType[PlayerMoveType["walk"] = 1] = "walk";
                PlayerMoveType[PlayerMoveType["jump"] = 2] = "jump";
                PlayerMoveType[PlayerMoveType["run"] = 3] = "run";
                PlayerMoveType[PlayerMoveType["strikeToFly"] = 4] = "strikeToFly";
            })(PlayerMoveType || (exports_1("PlayerMoveType", PlayerMoveType = {})));
            /**
             * 玩家状态 (客户端状态)
             */
            (function (PlayerClientState) {
                //禁止移动
                PlayerClientState[PlayerClientState["prohibitionMove"] = 0] = "prohibitionMove";
                //可移动
                PlayerClientState[PlayerClientState["canMove"] = 1] = "canMove";
            })(PlayerClientState || (exports_1("PlayerClientState", PlayerClientState = {})));
            /**
             * 游戏的状态
            */
            (function (GameState) {
                GameState[GameState["ready"] = 1] = "ready";
                GameState[GameState["match"] = 2] = "match";
                GameState[GameState["over"] = 3] = "over";
            })(GameState || (exports_1("GameState", GameState = {})));
            /**
             * 排行榜类型
            */
            (function (RankType) {
                RankType[RankType["daily"] = 1] = "daily";
                RankType[RankType["weekly"] = 2] = "weekly";
                RankType[RankType["month"] = 3] = "month";
            })(RankType || (exports_1("RankType", RankType = {})));
            /**
             * @language zh_CN
             * @classdesc
             * 文本内容类型
             * @version gd3d 1.0
             */
            (function (contentType) {
                contentType[contentType["None"] = 0] = "None";
                contentType[contentType["Number"] = 1] = "Number";
                contentType[contentType["Word"] = 2] = "Word";
                contentType[contentType["Underline"] = 4] = "Underline";
                contentType[contentType["ChineseCharacter"] = 8] = "ChineseCharacter";
                contentType[contentType["NoneChineseCharacter"] = 16] = "NoneChineseCharacter";
                contentType[contentType["Email"] = 32] = "Email";
                contentType[contentType["PassWord"] = 64] = "PassWord";
                contentType[contentType["Custom"] = 128] = "Custom";
            })(contentType || (exports_1("contentType", contentType = {})));
            /**
             * 点相对于形状的位置
             */
            (function (PointWithShape) {
                PointWithShape[PointWithShape["in"] = -1] = "in";
                PointWithShape[PointWithShape["on"] = 0] = "on";
                PointWithShape[PointWithShape["out"] = 1] = "out";
            })(PointWithShape || (exports_1("PointWithShape", PointWithShape = {})));
            //图形类型
            (function (ShapeType) {
                //正方形
                ShapeType["square"] = "square";
                //三角形
                ShapeType["triangle"] = "triangle";
                //圆形
                ShapeType["round"] = "round";
                //星形
                ShapeType["star"] = "star";
                //伞形
                ShapeType["umbrella"] = "umbrella";
            })(ShapeType || (exports_1("ShapeType", ShapeType = {})));
            //门票类型
            //门票类型
            (function (TicketType) {
                TicketType[TicketType["wooden"] = 1001] = "wooden";
                TicketType[TicketType["sugarCake"] = 1002] = "sugarCake";
                TicketType[TicketType["tugOfWar"] = 1003] = "tugOfWar";
                TicketType[TicketType["miniChampionship"] = 1004] = "miniChampionship";
                TicketType[TicketType["marbles"] = 1005] = "marbles";
                TicketType[TicketType["glassBridge"] = 1006] = "glassBridge";
                TicketType[TicketType["squidGame"] = 1007] = "squidGame";
                TicketType[TicketType["greatChampionship"] = 1008] = "greatChampionship";
            })(TicketType || (exports_1("TicketType", TicketType = {})));
            //商店类型
            (function (ShopType) {
                //门票商店
                ShopType[ShopType["Tickets"] = 1001] = "Tickets";
            })(ShopType || (exports_1("ShopType", ShopType = {})));
            (function (CommodityType) {
                CommodityType[CommodityType["Tickets"] = 1] = "Tickets";
                CommodityType[CommodityType["Clothing"] = 2] = "Clothing";
            })(CommodityType || (exports_1("CommodityType", CommodityType = {})));
            //武器列表
            (function (Weapons) {
                Weapons[Weapons["none"] = 0] = "none";
                Weapons[Weapons["dao"] = 1] = "dao";
                Weapons[Weapons["bat"] = 2] = "bat";
            })(Weapons || (exports_1("Weapons", Weapons = {})));
            (function (HitType) {
                HitType["Bloom"] = "fx_Bloom";
                HitType["Hit"] = "fx_hit";
                HitType["HitBloom"] = "fx_hitBloom";
            })(HitType || (exports_1("HitType", HitType = {})));
        }
    };
});
System.register("Audio/AudioEnum", [], function (exports_2, context_2) {
    "use strict";
    var AudioEnum;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [],
        execute: function () {
            (function (AudioEnum) {
                AudioEnum[AudioEnum["WoodenBg"] = 1100] = "WoodenBg";
                AudioEnum[AudioEnum["WoodenSingsong1"] = 1101] = "WoodenSingsong1";
                AudioEnum[AudioEnum["WoodenSingsong2"] = 1102] = "WoodenSingsong2";
                AudioEnum[AudioEnum["WoodenSingsong3"] = 1103] = "WoodenSingsong3";
                AudioEnum[AudioEnum["WoodenSingsong4"] = 1104] = "WoodenSingsong4";
                AudioEnum[AudioEnum["WoodenGunshoot"] = 1105] = "WoodenGunshoot";
                AudioEnum[AudioEnum["WoodenMachineScan"] = 1106] = "WoodenMachineScan";
                AudioEnum[AudioEnum["WoodenTicking"] = 1107] = "WoodenTicking";
                AudioEnum[AudioEnum["WoodenTurnhead"] = 1108] = "WoodenTurnhead";
                AudioEnum[AudioEnum["WoodWalkNormal"] = 1109] = "WoodWalkNormal";
                AudioEnum[AudioEnum["WoodWalkSand"] = 1110] = "WoodWalkSand";
                AudioEnum[AudioEnum["WoodButtonNormal"] = 1111] = "WoodButtonNormal";
                AudioEnum[AudioEnum["WoodLandNormal"] = 1112] = "WoodLandNormal";
                AudioEnum[AudioEnum["WoodRunNormal"] = 1113] = "WoodRunNormal";
                AudioEnum[AudioEnum["WoodRunSand"] = 1114] = "WoodRunSand";
                AudioEnum[AudioEnum["SugarBroken"] = 1115] = "SugarBroken";
                AudioEnum[AudioEnum["SugarBrokenBig"] = 1116] = "SugarBrokenBig";
                AudioEnum[AudioEnum["SugarSlide"] = 1117] = "SugarSlide";
                AudioEnum[AudioEnum["SugarPrick"] = 1118] = "SugarPrick";
                AudioEnum[AudioEnum["Glassbroken"] = 1119] = "Glassbroken";
                AudioEnum[AudioEnum["DroupOut"] = 1120] = "DroupOut";
            })(AudioEnum || (exports_2("AudioEnum", AudioEnum = {})));
        }
    };
});
System.register("Data/CacheToolData", [], function (exports_3, context_3) {
    "use strict";
    var CacheToolData;
    var __moduleName = context_3 && context_3.id;
    return {
        setters: [],
        execute: function () {
            CacheToolData = /** @class */ (function () {
                function CacheToolData() {
                }
                //存储音乐
                CacheToolData.bgmVolume = 0.5;
                //存储音效
                CacheToolData.soundVolume = 0.5;
                return CacheToolData;
            }());
            exports_3("CacheToolData", CacheToolData);
        }
    };
});
System.register("Audio/OriginCode/CAudioPlayer", [], function (exports_4, context_4) {
    "use strict";
    var CAudioPlayer, CAudioChannel;
    var __moduleName = context_4 && context_4.id;
    return {
        setters: [],
        execute: function () {
            CAudioPlayer = /** @class */ (function () {
                function CAudioPlayer() {
                }
                Object.defineProperty(CAudioPlayer.prototype, "volume", {
                    /**
                    * @public
                    * @language zh_CN
                    * @classdesc
                    * 获取音量大小
                    * @version egret-m4m 1.0
                    */
                    get: function () {
                        return this.audioChannel == null ? -1 : this.audioChannel.volume;
                    },
                    /**
                     * @public
                     * @language zh_CN
                     * @classdesc
                     * 设置音量大小
                     * @param value 音量值
                     * @version egret-m4m 1.0
                     */
                    set: function (val) {
                        // tslint:disable-next-line: no-unused-expression
                        this.audioChannel == null ? 0 : this.audioChannel.volume = val;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 初始化声音播放器的播放
                 * @param buffer 声音资源
                 * @param volume 音量大小
                 * @param beLoop
                 */
                CAudioPlayer.prototype.init = function (name, audioChannel, beLoop) {
                    if (beLoop === void 0) { beLoop = false; }
                    this.name = name;
                    this.audioChannel = audioChannel;
                    this.beLoop = beLoop;
                };
                CAudioPlayer.prototype.start = function () {
                };
                CAudioPlayer.prototype.update = function (delta) {
                };
                CAudioPlayer.prototype.remove = function () {
                };
                CAudioPlayer.prototype.clone = function () {
                };
                /**
                 * @public
                 * @language zh_CN
                 * @classdesc
                 * 播放声音
                 * @param x 音源在3D空间中的播放位置
                 * @param y 音源在3D空间中的播放位置
                 * @param z 音源在3D空间中的播放位置
                 */
                CAudioPlayer.prototype.play = function (buffer, volume, onended, x, y, z) {
                    if (volume === void 0) { volume = 0; }
                    if (this.audioChannel == null) {
                        return null;
                    }
                    this.buffer = buffer;
                    this.volume = volume;
                    var c = this.audioChannel;
                    c.source.loop = this.beLoop;
                    c.source.buffer = this.buffer;
                    c.volume = this.volume;
                    c.source.start();
                    if (x && y && z) {
                        c.pannerNode.setPosition(x, y, z);
                    }
                    c.isplay = true;
                    if (!this.beLoop) {
                        c.source.onended = function () {
                            c.isplay = false;
                            c.source = null;
                            if (onended != undefined) {
                                onended();
                            }
                        };
                    }
                };
                /**
                * @public
                * @language zh_CN
                * @classdesc
                * 停止播放
                * @version egret-m4m 1.0
                */
                CAudioPlayer.prototype.stop = function () {
                    if (this.audioChannel != null) {
                        this.audioChannel.stop();
                    }
                };
                /**
                 * @public
                 * @language zh_CN
                 * @classdesc
                 * 获得当前音频播放器是否在播放
                 * @version egret-m4m 1.0
                 */
                CAudioPlayer.prototype.isPlaying = function () {
                    return this.audioChannel == undefined ? false : this.audioChannel.isplay;
                };
                CAudioPlayer.prototype.onPlay = function () {
                };
                return CAudioPlayer;
            }());
            exports_4("CAudioPlayer", CAudioPlayer);
            CAudioChannel = /** @class */ (function () {
                function CAudioChannel() {
                    /**当前个本声音 音量默认大小 (与整体声音调整区分开)
                     */
                    this.defVolume = 1;
                }
                Object.defineProperty(CAudioChannel.prototype, "volume", {
                    /**
                    * @public
                    * @language zh_CN
                    * @classdesc
                    * 获取音量大小
                    * @version egret-m4m 1.0
                    */
                    get: function () {
                        return this.gainNode ? this.gainNode.gain.value : 0;
                    },
                    /**
                     * @public
                     * @language zh_CN
                     * @classdesc
                     * 设置音量大小
                     * @param value 音量值
                     * @version egret-m4m 1.0
                     */
                    set: function (val) {
                        // tslint:disable-next-line: no-parameter-reassignment
                        val = val > 1 ? 1 : val;
                        // tslint:disable-next-line: no-parameter-reassignment
                        val = val <= 0 ? 0 : val;
                        if (this.gainNode) {
                            this.gainNode.gain.value = val;
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * @public
                 * @language zh_CN
                 * @classdesc
                 * 停止播放声音
                 * @version egret-m4m 1.0
                 */
                CAudioChannel.prototype.stop = function () {
                    if (this.source != null) {
                        this.source.stop();
                        this.source = null;
                    }
                    this.isplay = false;
                };
                return CAudioChannel;
            }());
            exports_4("CAudioChannel", CAudioChannel);
        }
    };
});
System.register("Audio/OriginCode/audioex", ["Audio/OriginCode/CAudioPlayer"], function (exports_5, context_5) {
    "use strict";
    var CAudioPlayer_1, CAudioEx;
    var __moduleName = context_5 && context_5.id;
    return {
        setters: [
            function (CAudioPlayer_1_1) {
                CAudioPlayer_1 = CAudioPlayer_1_1;
            }
        ],
        execute: function () {
            CAudioEx = /** @class */ (function () {
                function CAudioEx() {
                    try {
                        var _AudioContext = window["AudioContext"] || window["webkitAudioContext"] || window["mozAudioContext"] || window["msAudioContext"];
                        this.audioContext = new _AudioContext();
                        console.log("audio Context inited");
                    }
                    catch (e) {
                        // throw new Error("!Your browser does not support AudioContext");
                        console.error("!Your browser does not support AudioContext");
                    }
                }
                CAudioEx.instance = function () {
                    if (CAudioEx.g_this == null) {
                        CAudioEx.g_this = new CAudioEx();
                    }
                    return CAudioEx.g_this;
                };
                CAudioEx.loadArrayBuffer = function (url, fun, failCount) {
                    if (failCount === void 0) { failCount = 0; }
                    try {
                        var req_1 = new XMLHttpRequest(); //ness
                        req_1.open("GET", url);
                        req_1.responseType = "arraybuffer"; //ie 一定要在open之后修改responseType
                        req_1.onreadystatechange = function () {
                            if (req_1.readyState == 4) {
                                switch (req_1.status) {
                                    case 200:
                                    case 304:
                                    case 404:
                                        break;
                                    default:
                                        {
                                            if (failCount < 20) {
                                                setTimeout(function () {
                                                    // tslint:disable-next-line: no-parameter-reassignment
                                                    CAudioEx.loadArrayBuffer(url, fun, ++failCount);
                                                }, 500);
                                            }
                                            else {
                                                console.error("".concat(url, " \u591A\u6B21\u5C1D\u8BD5\u4E0B\u8F7D\u5931\u8D25 ,\u8BF7\u68C0\u67E5\u8D44\u6E90\u662F\u5426\u635F\u574F."));
                                            }
                                        }
                                        return;
                                }
                                if (req_1.status == 404) {
                                    fun(null, new Error("onerr 404"));
                                }
                                else {
                                    fun(req_1.response, null);
                                }
                            }
                        };
                        req_1.onerror = function () {
                            fun(null, new Error("onerr in req:")); //ness
                        };
                        req_1.send();
                    }
                    catch (er) {
                        console.error(url + "     Error   " + er);
                    }
                };
                /**
                 * @public
                 * @language zh_CN
                 * @classdesc
                 * 初始化声音api，注意：在ios上面必须手动点击某个按钮来调用初始化，否则无法播放声音
                 * @version egret-gd3d 1.0
                 */
                CAudioEx.prototype.clickInit = function () {
                    if (!this.isAvailable()) {
                        return;
                    }
                    // create empty buffer
                    if (this.audioContext != null) {
                        var buffer = this.audioContext.createBuffer(1, 1, 22050);
                        var source = this.audioContext.createBufferSource();
                        source.buffer = buffer;
                        // connect to output (your speakers)
                        source.connect(this.audioContext.destination);
                        // play the file
                        source.start();
                    }
                };
                /**
                 * @public
                 * @language zh_CN
                 * @classdesc
                 * 初始化声音api，注意：在ios上面必须手动点击某个按钮来调用初始化，否则无法播放声音
                 * @version egret-gd3d 1.0
                 */
                CAudioEx.prototype.isAvailable = function () {
                    return this.audioContext ? true : false;
                };
                /**
                 * @public
                 * @language zh_CN
                 * @classdesc
                 * 从arraybuffer转成audiobuffer
                 * @version egret-gd3d 1.0
                 * @param ab  二进制声音数据
                 * @param fun
                 */
                CAudioEx.prototype.loadAudioBufferFromArrayBuffer = function (ab, fun) {
                    this.audioContext.decodeAudioData(ab, function (audiobuffer) {
                        fun(audiobuffer, null);
                    });
                };
                /**
                 * @public
                 * @language zh_CN
                 * @classdesc
                 * 从本地文件加载音频数据，返回audiobuffer
                 * @version egret-gd3d 1.0
                 * @param url  文件地址
                 * @param fun
                 */
                CAudioEx.prototype.loadAudioBuffer = function (url, fun) {
                    // tslint:disable-next-line: variable-name
                    CAudioEx.loadArrayBuffer(url, function (_ab, __err) {
                        if (__err != null) {
                            fun(null, __err);
                        }
                        else {
                            try {
                                var inst = CAudioEx.instance();
                                if (!inst.audioContext) {
                                    return console.log("\u52A0\u8F7D\u97F3\u9891\u5931\u8D25 :".concat(url, "  \u97F3\u9891\u4E0A\u4E0B\u6587\u521D\u59CB\u5316\u5931\u8D25!"));
                                }
                                inst.audioContext.decodeAudioData(_ab, function (audiobuffer) {
                                    fun(audiobuffer, null);
                                });
                                //this.audioContext.decodeAudioData(_ab, (audiobuffer) => {
                                //    fun(audiobuffer, null);
                                //});
                            }
                            catch (er) {
                                console.error(url + "     Error   " + er);
                            }
                        }
                    });
                };
                CAudioEx.prototype.createAudioChannel = function () {
                    var cc = new CAudioPlayer_1.CAudioChannel();
                    if (!this.audioContext) {
                        return cc;
                    }
                    cc.source = this.audioContext.createBufferSource();
                    cc.gainNode = this.audioContext.createGain();
                    cc.source.connect(cc.gainNode);
                    cc.gainNode.connect(this.audioContext.destination);
                    //声音调节
                    cc.gainNode.gain.value = 1;
                    return cc;
                };
                return CAudioEx;
            }());
            exports_5("CAudioEx", CAudioEx);
        }
    };
});
System.register("Audio/OriginCode/SoundManage", ["Data/Dictionary", "Audio/OriginCode/audioex", "Audio/OriginCode/CAudioPlayer"], function (exports_6, context_6) {
    "use strict";
    var Dictionary_1, audioex_1, CAudioPlayer_2, SoundManage;
    var __moduleName = context_6 && context_6.id;
    return {
        setters: [
            function (Dictionary_1_1) {
                Dictionary_1 = Dictionary_1_1;
            },
            function (audioex_1_1) {
                audioex_1 = audioex_1_1;
            },
            function (CAudioPlayer_2_1) {
                CAudioPlayer_2 = CAudioPlayer_2_1;
            }
        ],
        execute: function () {
            SoundManage = /** @class */ (function () {
                function SoundManage() {
                    this._audioBufferDic = new Dictionary_1.Dictionary();
                }
                Object.defineProperty(SoundManage, "Instance", {
                    get: function () {
                        if (SoundManage.instance == null) {
                            SoundManage.instance = new SoundManage();
                        }
                        return SoundManage.instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                // private audioObj: m4m.framework.transform;
                SoundManage.prototype.setAudioPlayer = function (audio) {
                    // this.audioObj = audio;
                    this.audioPlayer = new CAudioPlayer_2.CAudioPlayer();
                };
                /**
                 * 普通立即播放（不考虑之前的播放状态）
                 * @param url
                 * @param call
                 * @param soundSourcePos  设定声源位置
                 */
                SoundManage.prototype.playAudio = function (url, audioChannel, volume) {
                    var _this = this;
                    if (volume === void 0) { volume = 1; }
                    if (this.audioPlayer == null) {
                        return;
                    }
                    // tslint:disable-next-line: newline-per-chained-call
                    if (!audioex_1.CAudioEx.instance().isAvailable()) {
                        return;
                    }
                    if (audioChannel == null || audioChannel.source == null) {
                        return;
                    }
                    this.getAudioBuffer(url, function (audioName, buffer) {
                        if (audioChannel.source == null) {
                            return;
                        }
                        _this.audioPlayer.init(audioName, audioChannel, false);
                        _this.audioPlayer.play(buffer, volume);
                    });
                };
                /**
                 * 中断式播放（暂停之前的，重头开始播放）
                 * @param url
                 * @param call
                 * @param soundSourcePos设定声源位置
                 */
                SoundManage.prototype.playAudioInterrupt = function (url, audioChannel, volume) {
                    var _this = this;
                    if (volume === void 0) { volume = 1; }
                    // tslint:disable-next-line: newline-per-chained-call
                    if (!audioex_1.CAudioEx.instance().isAvailable()) {
                        return;
                    }
                    if (audioChannel == null || audioChannel.source == null) {
                        return;
                    }
                    this.getAudioBuffer(url, function (audioName, buffer) {
                        if (audioChannel.source == null) {
                            return;
                        }
                        _this.audioPlayer.init(audioName, audioChannel, false);
                        _this.audioPlayer.play(buffer, volume);
                    });
                };
                /**
                 * 阻塞式播放（如果已经在播放，就忽略此次播放）
                 * @param url
                 * @param call
                 * @param soundSourcePos设定声源位置
                 */
                SoundManage.prototype.playAudioBlocking = function (url, audioChannel, volume) {
                    var _this = this;
                    if (volume === void 0) { volume = 1; }
                    // tslint:disable-next-line: newline-per-chained-call
                    if (!audioex_1.CAudioEx.instance().isAvailable()) {
                        return;
                    }
                    if (audioChannel == null || audioChannel.source == null) {
                        return;
                    }
                    if (audioChannel.isplay) {
                        return;
                    }
                    this.getAudioBuffer(url, function (audioName, buffer) {
                        if (audioChannel.source == null) {
                            return;
                        }
                        _this.audioPlayer.init(audioName, audioChannel, false);
                        _this.audioPlayer.play(buffer, volume);
                    });
                };
                /**
                 * 长的背景音乐，固定循环播放
                 * @param url
                 */
                SoundManage.prototype.playAuidoLoop = function (url, audioChannel, volume) {
                    var _this = this;
                    if (volume === void 0) { volume = 1; }
                    // tslint:disable-next-line: newline-per-chained-call
                    if (!audioex_1.CAudioEx.instance().isAvailable()) {
                        return;
                    }
                    if (url == null || url == "") {
                        return;
                    }
                    if (audioChannel == null || audioChannel.source == null) {
                        return;
                    }
                    audioChannel.gainNode.gain.value = volume;
                    this.getAudioBuffer(url, function (audioName, buffe) {
                        if (audioChannel.source == null) {
                            return;
                        }
                        _this.audioPlayer.init(audioName, audioChannel, true);
                        _this.audioPlayer.play(buffe, audioChannel.gainNode.gain.value);
                    });
                };
                //暂停背景音乐播放
                SoundManage.prototype.stopAudio = function (audioChannel) {
                    // tslint:disable-next-line: newline-per-chained-call
                    if (!audioex_1.CAudioEx.instance().isAvailable()) {
                        return;
                    }
                    if (audioChannel == null || audioChannel.source == null) {
                        return;
                    }
                    if (audioChannel.source.buffer == null) {
                        audioChannel.source = null;
                        return;
                    }
                    audioChannel.stop();
                };
                SoundManage.prototype.getAudioBuffer = function (url, call) {
                    if (url == null || url == "") {
                        return;
                    }
                    var lastIndex = url.lastIndexOf("/") + 1;
                    var audioName = SoundManage.Substring(url, lastIndex);
                    var audio = null;
                    if (this._audioBufferDic.ContainsKey(audioName)) {
                        audio = this._audioBufferDic.GetValue(audioName);
                        call(audioName, audio);
                    }
                    else {
                        // tslint:disable-next-line: newline-per-chained-call
                        audioex_1.CAudioEx.instance().loadAudioBuffer(url, function (buf, err) {
                            //LogManager.Error("加载声音完毕");
                            if (err == null) {
                                call(audioName, buf);
                                SoundManage.instance._audioBufferDic.Add(audioName, buf);
                            }
                            else {
                                console.error("error:" + err);
                            }
                        });
                    }
                };
                //因TS的 substring 和C#的Substring 方法 不同  这里写的一个C#  Substring方法相同用法
                SoundManage.Substring = function (str, start, length) {
                    if (length === void 0) { length = 0; }
                    if (length == 0) {
                        return str.substring(start);
                    }
                    return str.substring(start, start + length);
                };
                return SoundManage;
            }());
            exports_6("SoundManage", SoundManage);
        }
    };
});
System.register("Audio/OriginCode/AudioManager", ["Data/Dictionary", "Audio/OriginCode/audioex", "Audio/OriginCode/SoundManage"], function (exports_7, context_7) {
    "use strict";
    var Dictionary_2, audioex_2, SoundManage_1, AudioManager;
    var __moduleName = context_7 && context_7.id;
    return {
        setters: [
            function (Dictionary_2_1) {
                Dictionary_2 = Dictionary_2_1;
            },
            function (audioex_2_1) {
                audioex_2 = audioex_2_1;
            },
            function (SoundManage_1_1) {
                SoundManage_1 = SoundManage_1_1;
            }
        ],
        execute: function () {
            /**
             *
             */
            AudioManager = /** @class */ (function () {
                function AudioManager() {
                    /**
                    * 背景音乐路径
                    */
                    this.curBgMusicUrl = "";
                    this.curSoundUrl = "";
                    this.audioChannelDic = new Dictionary_2.Dictionary();
                    this.soundChannelDic = new Dictionary_2.Dictionary();
                    this.musicChannelDic = new Dictionary_2.Dictionary();
                    this._musicVolume = 1;
                    this._soundVolume = 1;
                    //整体音效大小 调整值
                    this._audioVolume = 1;
                    /**
                   *  播放声音与特效开关：
                   *
                   */
                    this.isPlay = true;
                }
                Object.defineProperty(AudioManager, "Instance", {
                    get: function () {
                        if (AudioManager._instance == null) {
                            AudioManager._instance = new AudioManager();
                        }
                        return AudioManager._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //设定语音声音大小
                AudioManager.prototype.setSoundVolume = function (volume) {
                    this._soundVolume = volume;
                    if (volume <= 0) {
                        this.stopSound();
                    }
                    if (this.soundAudioChannel) {
                        this.soundAudioChannel.volume = volume;
                    }
                };
                //设定背景音乐大小
                AudioManager.prototype.setMusicVolume = function (volume) {
                    this._musicVolume = volume;
                    if (volume <= 0) {
                        this.stopBGMusic();
                    }
                    else {
                        this.playBgMusic();
                    }
                    if (this.musicAudioChannel) {
                        this.musicAudioChannel.volume = volume;
                    }
                };
                //设置音效大小
                AudioManager.prototype.setAudioVolume = function (volume) {
                    this._audioVolume = volume;
                    if (volume <= 0) {
                        this.stopAllAudio();
                    }
                    if (this.audioAudioChannel) {
                        this.audioAudioChannel.volume = volume;
                    }
                };
                /**
                 * 局部控制背景声音
                 * @param posX 角色的世界坐标X值
                 */
                AudioManager.prototype.controlMusicVolume = function (posX) {
                    if (posX > 19950) {
                        var deviation = Math.abs((posX - 21550) / (23600 - 19500));
                        var soundPer = (1 - deviation) * 0.9;
                        if (posX > 21550) {
                            soundPer = (soundPer + deviation * 0.2) * 0.6;
                        }
                        this.setMusicVolume(soundPer);
                    }
                };
                /**
                 * 背景音乐
                 */
                AudioManager.prototype.playBgMusic = function (musicPath) {
                    if (!musicPath) {
                        if (this.musicAudioChannel && this.musicAudioChannel.isplay) {
                            return;
                        }
                        // tslint:disable-next-line: no-parameter-reassignment
                        musicPath = this.curBgMusicUrl;
                    }
                    else {
                        if (musicPath == this.curBgMusicUrl) {
                            return;
                        }
                        this.curBgMusicUrl = musicPath;
                    }
                    this.playMusic(musicPath);
                };
                /**
                 * 播放NPC语音
                 * @param soundPath
                 * @param callBack
                 */
                AudioManager.prototype.playNPCSound = function (soundPath) {
                    try {
                        this.clearSoundChannelDic();
                        if (this.soundChannelDic.ContainsKey(soundPath)) {
                            return;
                        }
                        this.curSoundUrl = soundPath;
                        this.stopSound();
                        // tslint:disable-next-line: newline-per-chained-call
                        this.soundAudioChannel = audioex_2.CAudioEx.instance().createAudioChannel();
                        SoundManage_1.SoundManage.Instance.playAudioInterrupt(soundPath, this.soundAudioChannel, this._soundVolume);
                        this.soundChannelDic.Add(soundPath, this.soundAudioChannel);
                    }
                    catch (error) { }
                };
                /**
                 * 播放聊天语音
                 */
                AudioManager.prototype.PlayChatSound = function (soundPath) {
                    try {
                        this.clearSoundChannelDic();
                        if (this.soundChannelDic.ContainsKey(soundPath)) {
                            return;
                        }
                        this.curSoundUrl = soundPath;
                        this.stopSound();
                        // tslint:disable-next-line: newline-per-chained-call
                        this.soundAudioChannel = audioex_2.CAudioEx.instance().createAudioChannel();
                        SoundManage_1.SoundManage.Instance.playAudioInterrupt(soundPath, this.soundAudioChannel, this._soundVolume);
                        this.soundChannelDic.Add(soundPath, this.soundAudioChannel);
                    }
                    catch (error) { }
                };
                /**
                 * 设置聊天语音
                 */
                AudioManager.prototype.setChatSound = function (value) {
                    if (!value) {
                        this.stopSound();
                    }
                };
                /**
                 * 设置背景音乐
                 */
                AudioManager.prototype.setBGMusic = function (value) {
                    if (value) {
                        this.playBgMusic();
                    }
                    else {
                        this.stopBGMusic();
                    }
                };
                /**
                 * 停止播放背景音乐
                 */
                AudioManager.prototype.stopBGMusic = function () {
                    //CEngine.LogManager.Error("停止播放背景音乐");
                    for (var i = 0; i < this.musicChannelDic.values.length; i++) {
                        var value = this.musicChannelDic.values[i];
                        SoundManage_1.SoundManage.Instance.stopAudio(value);
                    }
                    this.musicChannelDic.Clear();
                    //this.curBgMusicUrl = "";
                };
                /**
                 * 移除释放掉的MusicAudioChannel
                 */
                AudioManager.prototype.clearMusicChannelDic = function () {
                    var list = new Array();
                    for (var i = 0; i < this.musicChannelDic.keys.length; i++) {
                        var key = this.musicChannelDic.keys[i];
                        var value = this.musicChannelDic.values[i];
                        if (value.source == null) {
                            list.push(key);
                        }
                    }
                    for (var i = 0; i < list.length; i++) {
                        this.musicChannelDic.Remove(list[i]);
                    }
                    list.length = 0;
                };
                /**
                * 移除释放掉的audio AudioChannel
                */
                AudioManager.prototype.clearAudioChannelDic = function () {
                    var list = new Array();
                    for (var i = 0; i < this.audioChannelDic.keys.length; i++) {
                        var key = this.audioChannelDic.keys[i];
                        var value = this.audioChannelDic.values[i];
                        if (value.source == null) {
                            list.push(key);
                        }
                    }
                    for (var i = 0; i < list.length; i++) {
                        this.audioChannelDic.Remove(list[i]);
                    }
                    list.length = 0;
                };
                /**
                * 移除释放掉的audio AudioChannel
                */
                AudioManager.prototype.clearSoundChannelDic = function () {
                    var list = new Array();
                    for (var i = 0; i < this.soundChannelDic.keys.length; i++) {
                        var key = this.soundChannelDic.keys[i];
                        var value = this.soundChannelDic.values[i];
                        if (value.source == null) {
                            list.push(key);
                        }
                    }
                    for (var i = 0; i < list.length; i++) {
                        this.soundChannelDic.Remove(list[i]);
                    }
                    list.length = 0;
                };
                /**
                 * 停止播放npc语音
                 */
                AudioManager.prototype.stopSound = function () {
                    for (var i = 0; i < this.soundChannelDic.values.length; i++) {
                        var value = this.soundChannelDic.values[i];
                        SoundManage_1.SoundManage.Instance.stopAudio(value);
                    }
                    this.soundChannelDic.Clear();
                };
                /**
                 * 停止播放音效
                 */
                AudioManager.prototype.stopAllAudio = function () {
                    for (var i = 0; i < this.audioChannelDic.values.length; i++) {
                        var value = this.audioChannelDic.values[i];
                        SoundManage_1.SoundManage.Instance.stopAudio(value);
                    }
                    this.audioChannelDic.Clear();
                };
                /**
                 * 停止某一个音效播放
                 * @param name
                 */
                AudioManager.prototype.stopAudio = function (name) {
                    for (var i = 0; i < this.audioChannelDic.values.length; i++) {
                        var value = this.audioChannelDic.values[i];
                        var key = this.audioChannelDic.keys[i];
                        if (key.indexOf(name) != -1) {
                            SoundManage_1.SoundManage.Instance.stopAudio(value);
                            this.audioChannelDic.Remove(key);
                        }
                    }
                };
                /**
                 * 循环播放
                 * @param path 声音资源路径
                 */
                AudioManager.prototype.playLoopAudio = function (path, volume) {
                    if (volume === void 0) { volume = 1; }
                    try {
                        // tslint:disable-next-line: newline-per-chained-call
                        this.audioAudioChannel = audioex_2.CAudioEx.instance().createAudioChannel();
                        //存当前个本声音 音量默认大小
                        this.audioAudioChannel.defVolume = volume;
                        var volNum = this._audioVolume * volume;
                        SoundManage_1.SoundManage.Instance.playAuidoLoop(path, this.audioAudioChannel, volNum);
                        this.audioChannelDic.Add(path, this.audioAudioChannel);
                    }
                    catch (error) { }
                    return this.audioAudioChannel;
                };
                /**
                 * 普通立即播放（不考虑之前的播放状态）
                 * @param path 声音资源路径
                 */
                AudioManager.prototype.playAudio = function (path, volume) {
                    if (volume === void 0) { volume = 1; }
                    try {
                        this.clearAudioChannelDic();
                        // tslint:disable-next-line: newline-per-chained-call
                        this.audioAudioChannel = audioex_2.CAudioEx.instance().createAudioChannel();
                        //存当前个本声音 音量默认大小
                        this.audioAudioChannel.defVolume = volume;
                        var volNum = this._audioVolume * volume;
                        SoundManage_1.SoundManage.Instance.playAudio(path, this.audioAudioChannel, volNum);
                        this.audioChannelDic.Add(path, this.audioAudioChannel);
                    }
                    catch (error) { }
                    return this.audioAudioChannel;
                };
                /**
                 * 阻塞式播放（如果已经在播放，就忽略此次播放）
                 * @param path 声音播放路径
                 */
                AudioManager.prototype.playAudioBlocking = function (path, volume) {
                    if (volume === void 0) { volume = 1; }
                    try {
                        this.clearAudioChannelDic();
                        // tslint:disable-next-line: newline-per-chained-call
                        this.audioAudioChannel = audioex_2.CAudioEx.instance().createAudioChannel();
                        //存当前个本声音 音量默认大小
                        this.audioAudioChannel.defVolume = volume;
                        var volNum = this._audioVolume * volume;
                        SoundManage_1.SoundManage.Instance.playAudioBlocking(path, this.audioAudioChannel, volNum);
                        this.audioChannelDic.Add(path, this.audioAudioChannel);
                    }
                    catch (error) { }
                    return this.audioAudioChannel;
                };
                /**
                 * 中断式播放（暂停之前的，重头开始播放）
                 * @param path 声音资源路径
                 */
                AudioManager.prototype.playAudioInterrupt = function (path, volume) {
                    if (volume === void 0) { volume = 1; }
                    try {
                        this.clearAudioChannelDic();
                        // tslint:disable-next-line: newline-per-chained-call
                        this.audioAudioChannel = audioex_2.CAudioEx.instance().createAudioChannel();
                        //存当前个本声音 音量默认大小
                        this.audioAudioChannel.defVolume = volume;
                        var volNum = this._audioVolume * volume;
                        SoundManage_1.SoundManage.Instance.playAudioInterrupt(path, this.audioAudioChannel, volNum);
                        this.audioChannelDic.Add(path, this.audioAudioChannel);
                    }
                    catch (error) { }
                    return this.audioAudioChannel;
                };
                AudioManager.prototype.dispose = function () {
                };
                /**
                 * 长的背景音乐，固定循环播放
                 * @param musicPath 声音播放路径
                 */
                AudioManager.prototype.playMusic = function (musicPath) {
                    try {
                        this.clearMusicChannelDic();
                        if (this.musicChannelDic.ContainsKey(musicPath)) {
                            return;
                        }
                        // tslint:disable-next-line: newline-per-chained-call
                        this.musicAudioChannel = audioex_2.CAudioEx.instance().createAudioChannel();
                        SoundManage_1.SoundManage.Instance.playAuidoLoop(musicPath, this.musicAudioChannel, this._musicVolume);
                        this.musicChannelDic.Add(musicPath, this.musicAudioChannel);
                    }
                    catch (error) {
                        console.error(error);
                    }
                };
                return AudioManager;
            }());
            exports_7("AudioManager", AudioManager);
        }
    };
});
System.register("Audio/AudioPlayer", ["AudioBase", "Data/CacheToolData", "GameMgr", "Audio/OriginCode/AudioManager", "Audio/OriginCode/SoundManage"], function (exports_8, context_8) {
    "use strict";
    var AudioBase_1, CacheToolData_1, GameMgr_1, AudioManager_1, SoundManage_2, AudioPlayer;
    var __moduleName = context_8 && context_8.id;
    return {
        setters: [
            function (AudioBase_1_1) {
                AudioBase_1 = AudioBase_1_1;
            },
            function (CacheToolData_1_1) {
                CacheToolData_1 = CacheToolData_1_1;
            },
            function (GameMgr_1_1) {
                GameMgr_1 = GameMgr_1_1;
            },
            function (AudioManager_1_1) {
                AudioManager_1 = AudioManager_1_1;
            },
            function (SoundManage_2_1) {
                SoundManage_2 = SoundManage_2_1;
            }
        ],
        execute: function () {
            /**
             * 项目 音频播放器
             * （结合音频配置 管理播放参数）
             */
            AudioPlayer = /** @class */ (function () {
                function AudioPlayer() {
                }
                Object.defineProperty(AudioPlayer, "currBGM", {
                    // private static _audioKeyIDMap: { [key: string]: number };
                    // private static get audioKeyIDMap() {
                    //     if (!this._audioKeyIDMap && AudioBase.list) {
                    //         this._audioKeyIDMap = {};
                    //         AudioBase.list.forEach((val, key) => {
                    //             this._audioKeyIDMap[(val as AudioBase).audioKey] = key as number;
                    //         });
                    //     }
                    //     return this._audioKeyIDMap;
                    // }
                    /**当前在播放的 BGM */
                    get: function () { return this._currBGM; },
                    enumerable: false,
                    configurable: true
                });
                AudioPlayer.init = function () {
                    // AudioMgr.init(`${GameMgr.CDNURL}${GameMgr.AudioPath}`);
                    // AudioMgr.onEnded((resName: string) => {
                    //     //
                    //     // UiDataManager.changeFunctionData(BindKeyName.AUDIO_PLAYER_END, resName);
                    // });
                    this.audioUrl = "".concat(GameMgr_1.GameMgr.CDNURL).concat(GameMgr_1.GameMgr.AudioPath);
                    var audioObj = new m4m.framework.transform();
                    SoundManage_2.SoundManage.Instance.setAudioPlayer(audioObj);
                };
                /**
                 * 获取 音频的名字
                 * @param audioType
                 */
                AudioPlayer.getResName = function (audioType) {
                    if (audioType == null) {
                        return;
                    }
                    var _base = AudioBase_1.AudioBase.list.get(audioType);
                    if (!_base) {
                        return;
                    }
                    return _base.resName;
                };
                // /**
                //  * 获取 音频的typeID ,通过 audioKey
                //  * @param audioKey 音频Key字符串
                //  */
                // public static getAudioIDByKey(audioKey: string): AudioEnum {
                //     if (!this.audioKeyIDMap) { return; }
                //     let _id = this.audioKeyIDMap[audioKey];
                //     return _id;
                // }
                /**
                 * 播放BGM
                 * @param audioType
                 */
                AudioPlayer.playBGM = function (audioType, needLoop) {
                    if (needLoop === void 0) { needLoop = true; }
                    if (audioType == null) {
                        return;
                    }
                    var _base = AudioBase_1.AudioBase.list.get(audioType);
                    if (!_base) {
                        return;
                    }
                    this._currBGM = audioType;
                    var resName = _base.resName;
                    var volume = _base.volume;
                    // AudioMgr.Play(resName, needLoop, volume);
                    // console.error("播放音乐",CacheToolData.bgmVolume);
                    AudioManager_1.AudioManager.Instance.playBgMusic(this.audioUrl + resName);
                    AudioManager_1.AudioManager.Instance.setMusicVolume(CacheToolData_1.CacheToolData.bgmVolume);
                };
                /**
                 * 停播 BGM
                 */
                AudioPlayer.stopBGM = function () {
                    if (this._currBGM == null) {
                        return;
                    }
                    var _base = AudioBase_1.AudioBase.list.get(this._currBGM);
                    if (!_base) {
                        return;
                    }
                    // AudioMgr.Stop(_base.resName);
                    AudioManager_1.AudioManager.Instance.stopBGMusic();
                    this._currBGM = null;
                };
                /**
                 * 播放指定 音频
                 * @param audioType
                 */
                AudioPlayer.play = function (audioType, volume) {
                    if (volume === void 0) { volume = -1; }
                    if (audioType == null) {
                        return;
                    }
                    var _base = AudioBase_1.AudioBase.list.get(audioType);
                    if (!_base) {
                        return;
                    }
                    if (volume == -1) {
                        // tslint:disable-next-line: no-parameter-reassignment
                        volume = _base.volume;
                    }
                    // _base.resName = "walk_sand.mp3";
                    // _base.isLoop = true;
                    // console.error("开始播声音", TimeUtil.realtimeSinceStartup);
                    // AudioMgr.Play(_base.resName, _base.isLoop, volume);
                    if (_base.isLoop) {
                        AudioManager_1.AudioManager.Instance.playLoopAudio(this.audioUrl + _base.resName, volume);
                    }
                    else {
                        AudioManager_1.AudioManager.Instance.playAudio(this.audioUrl + _base.resName, volume);
                    }
                };
                /**
                 * 停止播放 指定音频
                 * @param audioType
                 */
                AudioPlayer.stop = function (audioType) {
                    if (audioType == null) {
                        return;
                    }
                    var _base = AudioBase_1.AudioBase.list.get(audioType);
                    if (!_base) {
                        return;
                    }
                    // AudioMgr.Stop(_base.resName);
                    AudioManager_1.AudioManager.Instance.stopAudio(this.audioUrl + _base.resName);
                };
                /**
                 * 停播所有 音频
                 */
                AudioPlayer.stopAll = function () {
                    this.stopBGM();
                    // AudioMgr.stopAll();
                    AudioManager_1.AudioManager.Instance.stopAllAudio();
                };
                /**
                 * 设置静音状态
                 * @param isMute 是否静音
                 */
                AudioPlayer.setMute = function (isMute) {
                    // AudioMgr.setMute(isMute);
                };
                /**
                 * 暂停 指定音频
                 * @param audioType
                 */
                AudioPlayer.pause = function (audioType) {
                    // if (audioType == null) { return; }
                    // let _base = AudioBase.list.get(audioType) as AudioBase;
                    // if (!_base) { return; }
                    // AudioMgr.pause(_base.resName);
                };
                /**
                 * 设置 音量 区分bgm 和其他 音效
                 * @param audioResList bgm
                 * @param bgm
                 */
                AudioPlayer.setSpecialVolume = function (volume, audioResList, bgm) {
                    // AudioMgr.setSpecialVolume(volume, audioResList, bgm);
                };
                /**
                 * 设置 指定音频的音量
                 * @param audioType
                 * @param volume
                 */
                AudioPlayer.setVolume = function (audioType, volume) {
                    // if (audioType == null) { return; }
                    // let _base = AudioBase.list.get(audioType) as AudioBase;
                    // if (!_base) { return; }
                    // // AudioMgr.setVolume(_base.resName, volume);
                    // AudioManager.Instance.setAudioVolume(volume);
                };
                /**
                 * 查看指定 音频是否 是暂停状态
                 * @param audioType
                 */
                AudioPlayer.ispaused = function (audioType) {
                    // if (audioType == null) { return; }
                    // let _base = AudioBase.list.get(audioType) as AudioBase;
                    // if (!_base) { return; }
                    // return AudioMgr.ispaused(_base.resName);
                };
                /**
                 * 偏移 指定的位置，播放
                 * @param audioType
                 * @param position 偏移时间（秒）
                 */
                AudioPlayer.seek = function (audioType, position) {
                    // if (audioType == null) { return; }
                    // let _base = AudioBase.list.get(audioType) as AudioBase;
                    // if (!_base) { return; }
                    // AudioMgr.Seek(_base.resName, position);
                };
                /**
                 * 删除销毁 音频
                 * @param audioType
                 */
                AudioPlayer.removeAudio = function (audioType) {
                    // if (audioType == null) { return; }
                    // let _base = AudioBase.list.get(audioType) as AudioBase;
                    // if (!_base) { return; }
                    // AudioMgr.removeAudio(_base.resName);
                };
                return AudioPlayer;
            }());
            exports_8("AudioPlayer", AudioPlayer);
            // import { AudioMgr } from "audio/AudioMgr";
            // import { AudioBase } from "AudioBase";
            // import { TimeUtil } from "Time/TimeUtil";
            // import { GameMgr } from "../GameMgr";
            // import { AudioEnum } from "./AudioEnum";
            // import { AudioManager } from "./OriginCode/AudioManager";
            // /**
            //  * 项目 音频播放器
            //  * （结合音频配置 管理播放参数） 
            //  */
            // export class AudioPlayer {
            //     private static _currBGM: AudioEnum;
            //     private static _audioKeyIDMap: { [key: string]: number };
            //     private static get audioKeyIDMap() {
            //         if (!this._audioKeyIDMap && AudioBase.list) {
            //             this._audioKeyIDMap = {};
            //             AudioBase.list.forEach((val, key) => {
            //                 this._audioKeyIDMap[(val as AudioBase).audioKey] = key as number;
            //             });
            //         }
            //         return this._audioKeyIDMap;
            //     }
            //     /**当前在播放的 BGM */
            //     public static get currBGM() { return this._currBGM; }
            //     public static init() {
            //         AudioMgr.init(`${GameMgr.CDNURL}${GameMgr.AudioPath}`);
            //         AudioMgr.onEnded((resName: string) => {
            //             //
            //             // UiDataManager.changeFunctionData(BindKeyName.AUDIO_PLAYER_END, resName);
            //         });
            //     }
            //     /**
            //      * 获取 音频的名字
            //      * @param audioType 
            //      */
            //     public static getResName(audioType: AudioEnum) {
            //         if (audioType == null) { return; }
            //         let _base = AudioBase.list.get(audioType) as AudioBase;
            //         if (!_base) { return; }
            //         return _base.resName;
            //     }
            //     /**
            //      * 获取 音频的typeID ,通过 audioKey
            //      * @param audioKey 音频Key字符串
            //      */
            //     public static getAudioIDByKey(audioKey: string): AudioEnum {
            //         if (!this.audioKeyIDMap) { return; }
            //         let _id = this.audioKeyIDMap[audioKey];
            //         return _id;
            //     }
            //     /**
            //      * 播放BGM
            //      * @param audioType 
            //      */
            //     public static playBGM(audioType: AudioEnum, needLoop: boolean = true) {
            //         if (audioType == null) { return; }
            //         let _base = AudioBase.list.get(audioType) as AudioBase;
            //         if (!_base) { return; }
            //         this._currBGM = audioType;
            //         let resName = _base.resName;
            //         let volume = _base.volume;
            //         AudioMgr.Play(resName, needLoop, volume);
            //     }
            //     /**
            //      * 停播 BGM
            //      */
            //     public static stopBGM() {
            //         if (this._currBGM == null) { return; }
            //         let _base = AudioBase.list.get(this._currBGM) as AudioBase;
            //         if (!_base) { return; }
            //         AudioMgr.Stop(_base.resName);
            //         this._currBGM = null;
            //     }
            //     /**
            //      * 播放指定 音频
            //      * @param audioType 
            //      */
            //     public static play(audioType: AudioEnum, volume: number = -1) {
            //         if (audioType == null) { return; }
            //         let _base = AudioBase.list.get(audioType) as AudioBase;
            //         if (!_base) { return; }
            //         if (volume == -1) {
            //             // tslint:disable-next-line: no-parameter-reassignment
            //             volume = _base.volume;
            //         }
            //         // _base.resName = "walk_sand.mp3";
            //         // _base.isLoop = true;
            //         // console.error("开始播声音", TimeUtil.realtimeSinceStartup);
            //         AudioMgr.Play(_base.resName, _base.isLoop, volume);
            //     }
            //     /**
            //      * 停止播放 指定音频
            //      * @param audioType 
            //      */
            //     public static stop(audioType: AudioEnum) {
            //         if (audioType == null) { return; }
            //         let _base = AudioBase.list.get(audioType) as AudioBase;
            //         if (!_base) { return; }
            //         AudioMgr.Stop(_base.resName);
            //     }
            //     /**
            //      * 停播所有 音频
            //      */
            //     public static stopAll() {
            //         this.stopBGM();
            //         AudioMgr.stopAll();
            //     }
            //     /**
            //      * 设置静音状态
            //      * @param isMute 是否静音
            //      */
            //     public static setMute(isMute: boolean) {
            //         AudioMgr.setMute(isMute);
            //     }
            //     /**
            //      * 暂停 指定音频
            //      * @param audioType 
            //      */
            //     public static pause(audioType: AudioEnum) {
            //         if (audioType == null) { return; }
            //         let _base = AudioBase.list.get(audioType) as AudioBase;
            //         if (!_base) { return; }
            //         AudioMgr.pause(_base.resName);
            //     }
            //     /**
            //      * 设置 音量 区分bgm 和其他 音效
            //      * @param audioResList bgm 
            //      * @param bgm 
            //      */
            //     public static setSpecialVolume(volume: number, audioResList: string[], bgm: boolean) {
            //         AudioMgr.setSpecialVolume(volume, audioResList, bgm);
            //     }
            //     /**
            //      * 设置 指定音频的音量
            //      * @param audioType 
            //      * @param volume 
            //      */
            //     public static setVolume(audioType: AudioEnum, volume: number) {
            //         if (audioType == null) { return; }
            //         let _base = AudioBase.list.get(audioType) as AudioBase;
            //         if (!_base) { return; }
            //         AudioMgr.setVolume(_base.resName, volume);
            //     }
            //     /**
            //      * 查看指定 音频是否 是暂停状态
            //      * @param audioType 
            //      */
            //     public static ispaused(audioType: AudioEnum) {
            //         if (audioType == null) { return; }
            //         let _base = AudioBase.list.get(audioType) as AudioBase;
            //         if (!_base) { return; }
            //         return AudioMgr.ispaused(_base.resName);
            //     }
            //     /**
            //      * 偏移 指定的位置，播放
            //      * @param audioType 
            //      * @param position 偏移时间（秒）
            //      */
            //     public static seek(audioType: AudioEnum, position: number) {
            //         if (audioType == null) { return; }
            //         let _base = AudioBase.list.get(audioType) as AudioBase;
            //         if (!_base) { return; }
            //         AudioMgr.Seek(_base.resName, position);
            //     }
            //     /**
            //      * 删除销毁 音频
            //      * @param audioType 
            //      */
            //     public static removeAudio(audioType: AudioEnum) {
            //         if (audioType == null) { return; }
            //         let _base = AudioBase.list.get(audioType) as AudioBase;
            //         if (!_base) { return; }
            //         AudioMgr.removeAudio(_base.resName);
            //     }
            // }
        }
    };
});
System.register("Data/BindKeyName", [], function (exports_9, context_9) {
    "use strict";
    var BindKeyName;
    var __moduleName = context_9 && context_9.id;
    return {
        setters: [],
        execute: function () {
            BindKeyName = /** @class */ (function () {
                function BindKeyName() {
                }
                //滑动
                BindKeyName.clickSlide = "clickSlide";
                //游戏开始倒计时
                BindKeyName.startTimeCD = "startTimeCD";
                //游戏进行至结束倒计时
                BindKeyName.runningTimeCD = "runningTimeCD";
                //角色创建完毕
                BindKeyName.roleMakeSuccess = "role_makeSuccess";
                //主角 移动去目标点
                BindKeyName.mainRoleToTargetPoint = "mainRoleToTargetPoint";
                //玩家 跳起后落地
                BindKeyName.roleJumpGround = "roleJumpGround";
                //跳起后落地
                BindKeyName.dieStateRoleJumpGround = "dieStateRoleJumpGround";
                //玻璃破碎
                BindKeyName.glassBroken = "glassBroken";
                //玩家掉落
                BindKeyName.roleDropOut = "roleDropOut";
                //摇杆 复位
                BindKeyName.joyReset = "joy_Reset";
                //玩家头顶文字改变
                BindKeyName.battleRoleTopTos = "battleRoleTopTos";
                //设置头顶文本是否显示
                BindKeyName.setTopBarVisible = "setTopBarVisible";
                //刷新货币和门票数量
                BindKeyName.refreshCurrency = "refreshCurrency";
                //刷新多人大厅的人数等待
                BindKeyName.EyeVerify = "EyeVerify";
                //刷新游戏场景的人数等待
                BindKeyName.Scenario = "Scenario";
                //刷新网络品质
                BindKeyName.Network = "Network";
                //玩家受伤掉血
                BindKeyName.playerHit = "playerHit";
                //玩家死亡
                BindKeyName.playerDead = "playerDead";
                //刷新门票数量
                BindKeyName.refreshTicket = "refreshTicket";
                //购票结果
                BindKeyName.buyTicketResult = "buyTicketResult";
                //游戏中其他玩家死亡
                BindKeyName.gamePlayerDead = "gamePlayerDead";
                //游戏中其他玩家胜利
                BindKeyName.gamePlayerWin = "gamePlayerWin";
                //游戏中被击飞
                BindKeyName.strikeToFly = "strikeToFly";
                //授权额度成功
                BindKeyName.approveSuc = "approveSuc";
                //获取排行榜奖励信息成功
                BindKeyName.getRankPrizeDataSuc = "getRankPrizeDataSuc";
                //绳子移动
                BindKeyName.ropeMove = "ropeMove";
                //设置玩家拔河游戏开始位置
                BindKeyName.playerStartPos = "playerStartPos";
                //拔河游戏开始
                BindKeyName.gameStart = "gameStart";
                //打开扣糖饼页面
                BindKeyName.openSugarCakeGame = "sugarConfigInit";
                //扣糖饼游戏状态改变
                BindKeyName.changeSugarCakeState = "changeSugarCakeState";
                //扣糖饼添加npc
                BindKeyName.addSugarCakeNpc = "addSugarCakeNpc";
                //拔河失败
                BindKeyName.gameResult = "gameResult";
                //拔河进度
                BindKeyName.tugOfWarPro = "tugOfWarPro";
                //拔河目标键类型
                BindKeyName.targetType = "targetType";
                //ready Go
                BindKeyName.readyTimeCD = "readyTimeCD";
                //开始拔河
                BindKeyName.startTugOfWar = "startTugOfWar";
                //拔河方向
                BindKeyName.TugOfWarDerection = "TugOfWarDerection";
                //拔河超时判定
                BindKeyName.TugOfWarOverTime = "TugOfWarOverTime"; //购票成功进入对应游戏
                BindKeyName.buyTicketSuccessToGame = "buyTicketSuccessToGame";
                //弹珠下注
                BindKeyName.hoodleBottomPour = "hoodleBottomPour";
                //启用/禁用gaming页面的触摸事件
                BindKeyName.enableGamingToucher = "enableGamingToucher";
                //gaming触摸点
                BindKeyName.gamingToucherPoint = "gamingToucherPoint";
                //清理头顶名称
                BindKeyName.clearTopBar = "clearTopBar";
                //更新gaming页面标题文本
                BindKeyName.updateTitleText = "updateTitleText";
                //玩家旋转设置
                BindKeyName.RoleRotateState = "RoleRotateState";
                //玩家集体死亡
                BindKeyName.RoleDeath = "RoleDeath";
                //玻璃桥积分
                BindKeyName.GlassIntegral = "GlassIntegral";
                //木头人积分
                BindKeyName.WoodIntegral = "WoodIntegral";
                //拔河积分
                BindKeyName.TugIntegral = "TugIntegral";
                //糖饼积分
                BindKeyName.SugarIntegral = "SugarIntegral";
                //弹珠积分
                BindKeyName.HoodleIntegral = "HoodleIntegral";
                //时间time 
                BindKeyName.TimeData = "TimeData";
                //抛出弹珠
                BindKeyName.throwHoodle = "throwHoodle";
                //是否显示抛弹珠轨迹
                BindKeyName.enableThrowHoodleTrack = "enableThrowHoodleTrack";
                //是否显示攻击按钮
                BindKeyName.showAttackBtn = "showAttackBtn";
                //设置血条是否显示
                //public static showHpBar: string = "showHpBar";
                //游戏中ui数据
                BindKeyName.gamingdata = "gamingdata";
                //关卡时间
                BindKeyName.StageselectTime = "StageselectTime";
                //关卡数据
                BindKeyName.StageselectData = "StageselectData";
                // 关卡时间状态
                BindKeyName.StageselectTimeStart = "StageselectTimeStart";
                BindKeyName.roelgming = "roelgming";
                //拔河回合结果
                BindKeyName.tugOfWarRoundResult = "tugOfWarRoundResult";
                // 邮件领取成功
                BindKeyName.mail = "mail";
                // 删除邮件
                BindKeyName.Delmail = "mailDelmail";
                BindKeyName.LoginSucceeded = "LoginSucceeded";
                return BindKeyName;
            }());
            exports_9("BindKeyName", BindKeyName);
        }
    };
});
System.register("gamePlays/IGamePlay", [], function (exports_10, context_10) {
    "use strict";
    var __moduleName = context_10 && context_10.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("Manager/PerformanceTestMgr", ["Tools/gameMathUtil", "GameMgr"], function (exports_11, context_11) {
    "use strict";
    var gameMathUtil_1, GameMgr_2, PerformanceTestMgr;
    var __moduleName = context_11 && context_11.id;
    return {
        setters: [
            function (gameMathUtil_1_1) {
                gameMathUtil_1 = gameMathUtil_1_1;
            },
            function (GameMgr_2_1) {
                GameMgr_2 = GameMgr_2_1;
            }
        ],
        execute: function () {
            PerformanceTestMgr = /** @class */ (function () {
                //性能测试 管理器
                function PerformanceTestMgr() {
                }
                PerformanceTestMgr.update = function (dt) {
                    this.PerformanceTestStatistics(dt);
                };
                //性能测试统计
                //平均帧率和方差
                PerformanceTestMgr.PerformanceTestStatistics = function (delta) {
                    if (delta == 0) {
                        return;
                    }
                    // 平均 帧率统计调试
                    if (GameMgr_2.GameMgr.perfDebugStart) {
                        var avergeFPS = 1 / delta;
                        this.timeTotal += delta;
                        this.FrameCount++;
                        this.FPSArr.push(avergeFPS);
                        if (GameMgr_2.GameMgr.perfDebugOutput) {
                            GameMgr_2.GameMgr.perfDebugOutput = false;
                            // if (this.timeTotal >= this.FPSCEndTime) {
                            //     this.FPSCEndTime = Number.POSITIVE_INFINITY;
                            var currAvergeFPS = this.timeTotal / this.FrameCount;
                            //输出计算结果
                            currAvergeFPS = 1 / currAvergeFPS;
                            //FPS 方差
                            var currVariance = gameMathUtil_1.gameMathUtil.variance(this.FPSArr);
                            console.error(this.FPSArr);
                            console.error(currVariance);
                            var str = GameMgr_2.GameMgr.testStr + " \u6E38\u620F\u5E27\u7387\u7EDF\u8BA1 \u5E73\u5747FPS\uFF1A".concat(currAvergeFPS.toFixed(3), "  \u65B9\u5DEE\uFF1A").concat(currVariance.toFixed(3), " }");
                            console.error(str);
                            // }
                        }
                    }
                };
                // private static FPSCEndTime = 1.5 * 60;//一段时间内的帧率
                PerformanceTestMgr.FPSArr = [];
                PerformanceTestMgr.timeTotal = 0;
                PerformanceTestMgr.FrameCount = 0;
                return PerformanceTestMgr;
            }());
            exports_11("PerformanceTestMgr", PerformanceTestMgr);
        }
    };
});
//---------------------------------接口--------------------------------------------
System.register("Core/PoolMgr", ["Data/Map", "Tools/commTool", "Tools/engineParallel/spInterface", "GameMgr"], function (exports_12, context_12) {
    "use strict";
    var Map_1, commTool_1, spInterface_1, GameMgr_3, Prefab3dPool, EffectModlePool, BaseModlePool, DataClassPool, PoolMgr;
    var __moduleName = context_12 && context_12.id;
    function typeParallel(engineType) {
        var eType = engineType != null ? engineType : GameMgr_3.GameMgr.engineParallel;
        return eType;
    }
    function urlParallel(prefabName, path, eType) {
        var url;
        switch (eType) {
            case spInterface_1.engineParallelType.none:
                url = "".concat(path).concat(prefabName, "/").concat(prefabName, ".assetbundle.json");
                break;
            case spInterface_1.engineParallelType.wxEngine:
                var isShell = GameMgr_3.GameMgr.wxResHasShell(path);
                url = isShell ? "".concat(path).concat(prefabName, "/resources/").concat(prefabName, ".prefab") : "".concat(path).concat(prefabName, ".prefab");
                break;
            default: url = "";
        }
        return url;
    }
    return {
        setters: [
            function (Map_1_1) {
                Map_1 = Map_1_1;
            },
            function (commTool_1_1) {
                commTool_1 = commTool_1_1;
            },
            function (spInterface_1_1) {
                spInterface_1 = spInterface_1_1;
            },
            function (GameMgr_3_1) {
                GameMgr_3 = GameMgr_3_1;
            }
        ],
        execute: function () {//---------------------------------接口--------------------------------------------
            Prefab3dPool = /** @class */ (function () {
                //---------------------------------各 池处理类--------------------------------------------
                /** 3d 预制体 对象池 */
                function Prefab3dPool() {
                    this.poolArrMap = new Map_1.cMap();
                }
                Prefab3dPool.prototype.newObj = function (prefabURL) {
                    return this.getObj(prefabURL);
                };
                Prefab3dPool.prototype.deleteObj = function (obj) {
                    if (!obj) {
                        return false;
                    }
                    if (obj[Prefab3dPool.InPool]) {
                        return false;
                    } //已经在 池 中了 ， 避免重复入池
                    obj.gameObject.visible = true;
                    //还原处理
                    if (obj.getParent()) {
                        obj.getParent()
                            .removeChild(obj);
                    }
                    //入池
                    var url = obj[Prefab3dPool.tagP3dPoolURL];
                    if (!url) {
                        console.error(" \u8FD9\u4E2A\u5BF9\u8C61\u4E0D\u662F\u4ECE\u6C60\u91CC\u53D6\u51FA\u6765\u7684 \uFF0C\u4E0D\u80FD\u653E\u5165\u6C60\u4E2D \uFF0C\u56E0\u4E3A URL \u672A\u77E5  ");
                        return false;
                    }
                    var poolArr = this.getPoolArr(url);
                    poolArr.push(obj);
                    obj[Prefab3dPool.InPool] = true;
                    return true;
                };
                /** 清理池中所有的对象 */
                Prefab3dPool.prototype.clearAll = function () {
                    // this.poolArrMap.forEach((val)=>{
                    //     if(val) val.length = 0;
                    // });
                    this.poolArrMap.clear();
                };
                Prefab3dPool.prototype.getObj = function (prefabURL, engineType) {
                    var _this = this;
                    return new Promise(function (resolve, reject) {
                        var eType = engineType != null ? engineType : GameMgr_3.GameMgr.engineParallel;
                        var poolArr = _this.getPoolArr(prefabURL);
                        if (poolArr.length > 0) {
                            var _t = poolArr.pop();
                            _t[Prefab3dPool.InPool] = false;
                            resolve(_t);
                        }
                        else {
                            //选择加载方法
                            var loadFun = void 0;
                            switch (eType) {
                                case spInterface_1.engineParallelType.none:
                                    loadFun = commTool_1.commTool.loadPrefebURL.bind(commTool_1.commTool);
                                    break;
                                case spInterface_1.engineParallelType.wxEngine:
                                    loadFun = commTool_1.commTool.loadPrefebURLWXEngin.bind(commTool_1.commTool);
                                    break;
                                default: loadFun = commTool_1.commTool.loadPrefebURL.bind(commTool_1.commTool);
                            }
                            //加载
                            loadFun(prefabURL)
                                .then(function (pfb) {
                                if (!pfb) {
                                    console.error("loadPrefeb fial : ".concat(prefabURL, " "));
                                    reject();
                                    return;
                                }
                                var tran = pfb.getCloneTrans();
                                //保存prefabName
                                tran[Prefab3dPool.tagP3dPoolURL] = prefabURL;
                                tran[Prefab3dPool.InPool] = false;
                                resolve(tran);
                            });
                        }
                    });
                };
                Prefab3dPool.prototype.getPoolArr = function (prefabURL) {
                    var poolArr = this.poolArrMap.get(prefabURL);
                    if (!poolArr) {
                        poolArr = [];
                        this.poolArrMap.set(prefabURL, poolArr);
                    }
                    return poolArr;
                };
                Prefab3dPool.InPool = "_InPool_";
                Prefab3dPool.tagP3dPoolURL = "_tagP3dPool_URL_";
                return Prefab3dPool;
            }());
            /** 特效 对象池 */
            EffectModlePool = /** @class */ (function (_super) {
                __extends(EffectModlePool, _super);
                function EffectModlePool() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                EffectModlePool.prototype.newObj = function (prefabName, path, engineType) {
                    if (path === void 0) { path = "".concat(GameMgr_3.GameMgr.effectPath); }
                    var _engineType = engineType;
                    var eType = typeParallel(_engineType);
                    var url = urlParallel(prefabName, path, eType);
                    // if (GameMgr.forceClearScene && !memoryClearMgr.PoolIgnores[prefabName]) {  //记录流过的资源
                    //     memoryClearMgr.poolEffectResMap.set(url, true);
                    // }
                    // return super.new_Obj(url);
                    return this.getObj(url, eType);
                };
                EffectModlePool.prototype.deleteObj = function (obj) {
                    var result = _super.prototype.deleteObj.call(this, obj);
                    if (!result || obj == null) {
                        return false;
                    }
                    m4m.math.vec3SetAll(obj.localScale, 1); //重置缩放 1
                    obj.localScale = obj.localScale;
                    return true;
                };
                return EffectModlePool;
            }(Prefab3dPool));
            /** 普通模型 对象池 */
            BaseModlePool = /** @class */ (function (_super) {
                __extends(BaseModlePool, _super);
                function BaseModlePool() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                BaseModlePool.prototype.newObj = function (prefabName, path, engineType) {
                    if (path === void 0) { path = "".concat(GameMgr_3.GameMgr.rolePath); }
                    var _engineType = engineType;
                    var eType = typeParallel(_engineType);
                    var url = urlParallel(prefabName, path, eType);
                    // if (GameMgr.forceClearScene && !memoryClearMgr.PoolIgnores[prefabName]) {  //记录流过的资源
                    //     memoryClearMgr.poolBaseResMap.set(url, true);
                    // }
                    // return super.new_Obj(url);
                    return this.getObj(url, eType);
                };
                BaseModlePool.prototype.deleteObj = function (obj) {
                    var result = _super.prototype.deleteObj.call(this, obj);
                    return (result && obj != null);
                };
                return BaseModlePool;
            }(Prefab3dPool));
            //------------------------------------数据类池--------------------------------------------------------
            // tslint:disable-next-line: max-classes-per-file
            DataClassPool = /** @class */ (function () {
                function DataClassPool() {
                    this.poolArrMap = new Map_1.cMap();
                }
                DataClassPool.prototype.newObj = function (classobj) {
                    var result;
                    var objName = classobj.name;
                    var poolArr = this.getPoolArr(objName);
                    if (poolArr.length > 0) {
                        result = poolArr.pop();
                        return result;
                    }
                    var pfb = new classobj();
                    if (!pfb) {
                        console.error("_dataClassPool load fial ! ");
                        return result;
                    }
                    return pfb;
                };
                DataClassPool.prototype.deleteObj = function (obj) {
                    if (!obj) {
                        return false;
                    }
                    var objName = Object.getPrototypeOf(obj).constructor.name;
                    var poolArr = this.getPoolArr(objName);
                    poolArr.push(obj);
                    obj.reset();
                };
                DataClassPool.prototype.getPoolArr = function (objName) {
                    var poolArr = this.poolArrMap.get(objName);
                    if (!poolArr) {
                        poolArr = [];
                        this.poolArrMap.set(objName, poolArr);
                    }
                    return poolArr;
                };
                return DataClassPool;
            }());
            PoolMgr = /** @class */ (function () {
                //------------------------------------项目对象池管理类-------------------------------------------------
                /**
                 * 项目对象池管理类
                 */
                // tslint:disable-next-line: max-classes-per-file
                function PoolMgr() {
                }
                //对象池初始 
                /** 基本模型池 */
                PoolMgr.baseModlePool = new BaseModlePool();
                /** 特效的对象池 */
                PoolMgr.effectMPool = new EffectModlePool();
                /** 数据类池 */
                PoolMgr.dataClassPool = new DataClassPool();
                return PoolMgr;
            }());
            exports_12("PoolMgr", PoolMgr);
        }
    };
});
System.register("Core/types", [], function (exports_13, context_13) {
    "use strict";
    var __moduleName = context_13 && context_13.id;
    return {
        setters: [],
        execute: function () {
            /** @hidden */
            /* interface DeepImmutableMap<K, V> extends ReadonlyMap<DeepImmutable<K>, DeepImmutable<V>> {} // es2015+ only */ 
        }
    };
});
System.register("Core/EffectMgr", ["Data/Map", "Time/FrameTimer", "Time/TimeUtil", "Tools/commTool", "Tools/engineParallel/spInterface", "GameMgr", "Core/PoolMgr"], function (exports_14, context_14) {
    "use strict";
    var Map_2, FrameTimer_1, TimeUtil_1, commTool_2, spInterface_2, GameMgr_4, PoolMgr_1, EffectTypes, EffectMgr;
    var __moduleName = context_14 && context_14.id;
    return {
        setters: [
            function (Map_2_1) {
                Map_2 = Map_2_1;
            },
            function (FrameTimer_1_1) {
                FrameTimer_1 = FrameTimer_1_1;
            },
            function (TimeUtil_1_1) {
                TimeUtil_1 = TimeUtil_1_1;
            },
            function (commTool_2_1) {
                commTool_2 = commTool_2_1;
            },
            function (spInterface_2_1) {
                spInterface_2 = spInterface_2_1;
            },
            function (GameMgr_4_1) {
                GameMgr_4 = GameMgr_4_1;
            },
            function (PoolMgr_1_1) {
                PoolMgr_1 = PoolMgr_1_1;
            }
        ],
        execute: function () {
            /** 特效资源列表 */
            EffectTypes = /** @class */ (function () {
                function EffectTypes() {
                    this["fx_pp"] = "";
                    this["fx_cs"] = "";
                    this["fx_UI_lq"] = "";
                    this["Bullet_bingzhui"] = "";
                    this["Com_chongsheng"] = "";
                    this["Com_nenglianghudun"] = "";
                    this["Com_shengminghudunA"] = "";
                    this["Eff_baoqi1"] = "";
                }
                return EffectTypes;
            }());
            EffectMgr = /** @class */ (function () {
                /** 特效管理器 */
                function EffectMgr() {
                }
                /**
                 * 游戏特效 管理器
                 * @param effRoot 特效root 节点
                 * @param resPath 资源路径
                 */
                EffectMgr.init = function (effRoot) {
                    this.effRoot = effRoot;
                    var effects = new EffectTypes();
                    for (var key in effects) {
                        effects[key] = key; //字段名 赋给 字段作为值
                    }
                    //设置各种特效的 初始偏移数据
                    this.adjustMap.set(effects.fx_pp, { offsetPos: null, offsetScale: null, offsetEuler: null, enableCulling: true });
                    this.adjustMap.set(effects.Eff_baoqi1, { offsetPos: new m4m.math.vector3(0, -0.5, 0), offsetScale: new m4m.math.vector3(1.5, 1.5, 1.5), offsetEuler: null, enableCulling: true });
                    this.adjustMap.set(effects.fx_cs, { offsetPos: null, offsetScale: null, offsetEuler: null, enableCulling: true });
                    this.adjustMap.set(effects.Com_shengminghudunA, { offsetPos: new m4m.math.vector3(0, 1.2, 0), offsetScale: new m4m.math.vector3(2.5, 2.5, 2.5), offsetEuler: null, enableCulling: true });
                    this.adjustMap.set(effects.Com_nenglianghudun, { offsetPos: new m4m.math.vector3(0, 1.2, 0), offsetScale: new m4m.math.vector3(2.5, 2.5, 2.5), offsetEuler: null, enableCulling: true });
                    // this.adjustMap.set("Bullet_bingzhui", { offsetPos: null, offsetScale: null, offsetEuler: new m4m.math.vector3(0, 90, 0), enableCulling: true });
                };
                /** 获取一个 特效对象 */
                EffectMgr.getEffBuyName = function (effectName) {
                    return __awaiter(this, void 0, void 0, function () {
                        var effTrans;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.getEff(effectName)];
                                case 1:
                                    effTrans = _a.sent();
                                    return [2 /*return*/, effTrans];
                            }
                        });
                    });
                };
                /** 获取一个 特效对象 */
                EffectMgr.getEff = function (effectName) {
                    return __awaiter(this, void 0, void 0, function () {
                        var effTrans, offsetD;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, PoolMgr_1.PoolMgr.effectMPool.newObj(effectName, GameMgr_4.GameMgr.effectPath, GameMgr_4.GameMgr.engineParallel)];
                                case 1:
                                    effTrans = _a.sent();
                                    offsetD = this.adjustMap.get(effectName);
                                    if (!offsetD) {
                                        return [2 /*return*/, effTrans];
                                    }
                                    // if (offsetD.offsetPos) {
                                    //     m4m.math.vec3Clone(offsetD.offsetPos, effTrans.localPosition);
                                    //     effTrans.localPosition = effTrans.localPosition;
                                    // }
                                    // if (offsetD.offsetScale) {
                                    //     m4m.math.vec3Clone(offsetD.offsetScale, effTrans.localScale);
                                    //     effTrans.localScale = effTrans.localScale;
                                    // }
                                    // let _euler = offsetD.offsetEuler;
                                    // if (_euler) {
                                    //     m4m.math.quatFromEulerAngles(_euler.x, _euler.y, _euler.z, effTrans.localRotate);
                                    //     effTrans.localRotate = effTrans.localRotate;
                                    // }
                                    effTrans.enableCulling = offsetD.enableCulling;
                                    return [2 /*return*/, effTrans];
                            }
                        });
                    });
                };
                /**
                 * 修改颜色（待补完）
                 * @param _guid
                 * @param color
                 * @param color2
                 */
                EffectMgr.changeColor = function (_guid, color) {
                    var effTrans = this.effMap.get(_guid);
                    if (!effTrans) {
                        return;
                    }
                    // eff.stop();
                    var effs = this.getParticleSystems(effTrans);
                    effs.forEach(function (v) {
                        // m4m.math.colorClone(color, v.main.startColor.color);
                        v.setColor(color);
                    });
                };
                /** 修改缩放 */
                EffectMgr.changeScale = function (_guid, scale) {
                    var effTrans = this.effMap.get(_guid);
                    if (!effTrans) {
                        return;
                    }
                    // eff.stop();
                    m4m.math.vec3SetAll(effTrans.localScale, scale);
                    effTrans.setWorldScale(effTrans.localScale);
                };
                /**
                 * 播放 粒子 特效 （返回一个 唯一标记id）
                 * @param effectName 特效名
                 * @param pos 位置
                 * @param beAttatchTrans 挂载到哪个transform
                 * @param scale 缩放
                 */
                EffectMgr.setPlay = function (effectName, pos, scale, _euler, beAttatchTrans, color, loop) {
                    if (scale === void 0) { scale = 1; }
                    if (_euler === void 0) { _euler = null; }
                    if (beAttatchTrans === void 0) { beAttatchTrans = null; }
                    if (color === void 0) { color = null; }
                    if (loop === void 0) { loop = false; }
                    return __awaiter(this, void 0, void 0, function () {
                        var tempPos, tempEuler, effTrans, gameObject, f, attatchRoot, _currID, effs, tempQ;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    tempPos = m4m.poolv3(pos);
                                    tempEuler = null;
                                    if (_euler) {
                                        tempEuler = m4m.poolv3(_euler);
                                    }
                                    return [4 /*yield*/, this.getEff(effectName)];
                                case 1:
                                    effTrans = _a.sent();
                                    //循环
                                    if (loop) {
                                        gameObject = effTrans.rawHandle.gameObject;
                                        f = gameObject.getComponent("f14EffectSystem");
                                        f.data.beloop = true;
                                    }
                                    attatchRoot = beAttatchTrans != null ? beAttatchTrans : this.effRoot;
                                    attatchRoot.addChild(effTrans);
                                    _currID = ++this.guid;
                                    this.effMap.set(_currID, effTrans);
                                    effs = this.getParticleSystems(effTrans);
                                    effs.forEach(function (v) {
                                        v.play(function () {
                                            _this.onPlayEnd(_currID);
                                        });
                                        if (color != null) {
                                            v.setColor(color);
                                            // m4m.math.colorClone(color, v.main.startColor.color);
                                        }
                                    });
                                    //set transform 
                                    //位置
                                    this.setPostion(_currID, tempPos);
                                    //缩放
                                    this.setScale(_currID, scale);
                                    tempQ = EffectMgr.helpQuat;
                                    if (!tempEuler) {
                                        tempEuler = EffectMgr.helpV3Zero;
                                    }
                                    m4m.math.quatFromEulerAngles(tempEuler.x, tempEuler.y, tempEuler.z, tempQ);
                                    this.setRotate(_currID, tempQ);
                                    //v3 to pool
                                    m4m.poolv3_del(tempPos);
                                    if (tempEuler != EffectMgr.helpV3Zero) {
                                        m4m.poolv3_del(tempEuler);
                                    }
                                    return [2 /*return*/, _currID];
                            }
                        });
                    });
                };
                /**
                 * 停止播放
                 * @param _guid
                 */
                EffectMgr.setStop = function (_guid) {
                    var effTrans = this.effMap.get(_guid);
                    if (!effTrans) {
                        return;
                    }
                    // eff.stop();
                    var effs = this.getParticleSystems(effTrans);
                    effs.forEach(function (v) {
                        v.stop();
                    });
                    // console.error("播放特效 " + effTrans.name + "   " + effTrans.getWorldPosition().toString() + "   ");
                };
                /**
                 * 用真实时间播放特效
                 * @param _guid
                 */
                EffectMgr.realUpdata = function (_guid) {
                    var effTrans = this.effMap.get(_guid);
                    if (!effTrans) {
                        return;
                    }
                    // eff.stop();
                    var effs = this.getParticleSystems(effTrans);
                    effs.forEach(function (v) {
                        var fs = v.rawHandle;
                        fs.update(TimeUtil_1.TimeUtil.realDeltaTime);
                    });
                    // console.error("播放特效 " + effTrans.name + "   " + effTrans.getWorldPosition().toString() + "   ");
                };
                /**
                 * 特效layer 改变
                 * @param _guid
                 * @param layer
                 */
                EffectMgr.effectLayerChange = function (_guid, layer) {
                    var effTrans = this.effMap.get(_guid);
                    if (!effTrans) {
                        return;
                    }
                    commTool_2.commTool.changeLayerGUI(effTrans, layer);
                };
                /**
                 * 获取特效组件
                 * @param effTrans
                 */
                EffectMgr.getParticleSystems = function (effTrans) {
                    var eff = effTrans.gameObject.getComponents(spInterface_2.spComponentType.particleSystem);
                    return eff;
                };
                /**
                 * 清除一个特效
                 * @param _guid
                 */
                EffectMgr.removeOne = function (_guid) {
                    var effTrans = this.effMap.get(_guid);
                    if (!effTrans) {
                        return;
                    }
                    PoolMgr_1.PoolMgr.effectMPool.deleteObj(effTrans);
                    this.effMap.delete(_guid);
                };
                /**
                 * 清除所有的特效
                 */
                EffectMgr.clearAll = function () {
                    var _this = this;
                    var arr = [];
                    this.effMap.forEach(function (v, k) {
                        if (v) {
                            v.gameObject.visible = false;
                            arr.push(Number(k));
                        }
                    });
                    var len = arr.length;
                    for (var i = 0; i < len; i++) {
                        //全释放
                        this.removeOne(arr[i]);
                    }
                    this.effMap.clear();
                    //
                    var keys = Object.keys(this.playEndMap);
                    keys.forEach(function (k) {
                        delete _this.playEndMap[k];
                    });
                };
                /**
                 * 倒计时 删除
                 * @param _guid id
                 * @param life 时间
                 */
                EffectMgr.countDownRemove = function (_guid, life) {
                    var _this = this;
                    FrameTimer_1.FrameTimer.Instance.once(life, function (dt, isEnd) {
                        if (isEnd) {
                            _this.removeOne(_guid);
                        }
                    });
                };
                /**
                 * 注册指定特效对象（guid） 播放完毕后回调删除
                 * @param _guid id
                 * @param callBack 结束后回调
                 */
                EffectMgr.onPlayEndRemove = function (_guid, callBack) {
                    if (callBack === void 0) { callBack = null; }
                    var tran = this.effMap.get(_guid);
                    if (!tran) {
                        return;
                    }
                    this.playEndMap[_guid] = callBack;
                };
                /**
                 * 设置 特效朝向
                 * @param _guid id
                 * @param pos
                 */
                EffectMgr.lookAt = function (_guid, lookPos) {
                    var tran = this.effMap.get(_guid);
                    if (!tran) {
                        return;
                    }
                    var finalQuat = tran.localRotate;
                    //offset 检查
                    var hasOffset = false;
                    var _euler;
                    var offsetD = this.adjustMap.get(tran.name);
                    if (offsetD && offsetD.offsetEuler) {
                        _euler = offsetD.offsetEuler;
                        hasOffset = true;
                    }
                    tran.lookatPoint(lookPos);
                    if (hasOffset) {
                        var tempQ = EffectMgr.helpQuat;
                        m4m.math.quatFromEulerAngles(_euler.x, _euler.y, _euler.z, tempQ);
                        m4m.math.quatMultiply(tempQ, finalQuat, finalQuat);
                    }
                    // else {
                    // finalQuat = rotate;
                    // m4m.math.quatClone(rotate,finalQuat);
                    // }
                    tran.localRotate = finalQuat;
                };
                EffectMgr.getPostion = function (_guid, out) {
                    var tran = this.effMap.get(_guid);
                    if (!tran) {
                        return;
                    }
                    m4m.math.vec3Clone(tran.localPosition, out);
                };
                EffectMgr.getForward = function (_guid, out) {
                    var tran = this.effMap.get(_guid);
                    if (!tran) {
                        return;
                    }
                    tran.getForwardInWorld(out);
                };
                EffectMgr.getRight = function (_guid, out) {
                    var tran = this.effMap.get(_guid);
                    if (!tran) {
                        return;
                    }
                    tran.getRightInWorld(out);
                };
                EffectMgr.getUp = function (_guid, out) {
                    var tran = this.effMap.get(_guid);
                    if (!tran) {
                        return;
                    }
                    tran.getUpInWorld(out);
                };
                /**
                 * 设置 特效位置
                 * @param _guid id
                 * @param pos
                 */
                EffectMgr.setPostion = function (_guid, pos) {
                    var tran = this.effMap.get(_guid);
                    if (!tran) {
                        return;
                    }
                    var finalPos = tran.localPosition;
                    //offset 检查
                    var hasOffset = false;
                    var _pos;
                    var offsetD = this.adjustMap.get(tran.name);
                    if (offsetD && offsetD.offsetPos) {
                        _pos = offsetD.offsetPos;
                        hasOffset = true;
                    }
                    if (hasOffset) {
                        m4m.math.vec3Add(pos, _pos, finalPos);
                    }
                    else {
                        // finalPos = pos;
                        m4m.math.vec3Clone(pos, finalPos);
                    }
                    tran.localPosition = finalPos;
                };
                /**
                 * 设置 特效旋转
                 * @param _guid
                 * @param rotate
                 * @returns
                 */
                EffectMgr.setRotate = function (_guid, rotate) {
                    var tran = this.effMap.get(_guid);
                    if (!tran) {
                        return;
                    }
                    var finalQuat = tran.localRotate;
                    //offset 检查
                    var hasOffset = false;
                    var _euler;
                    var offsetD = this.adjustMap.get(tran.name);
                    if (offsetD && offsetD.offsetEuler) {
                        _euler = offsetD.offsetEuler;
                        hasOffset = true;
                    }
                    if (hasOffset) {
                        var tempQ = EffectMgr.helpQuat;
                        m4m.math.quatFromEulerAngles(_euler.x, _euler.y, _euler.z, tempQ);
                        m4m.math.quatMultiply(tempQ, rotate, finalQuat);
                    }
                    else {
                        // finalQuat = rotate;
                        m4m.math.quatClone(rotate, finalQuat);
                    }
                    tran.localRotate = finalQuat;
                };
                /**
                * 设置 特效缩放
                * @param _guid
                * @param rotate
                * @returns
                */
                EffectMgr.setScale = function (_guid, scale) {
                    var tran = this.effMap.get(_guid);
                    if (!tran) {
                        return;
                    }
                    var finalScale = tran.localScale;
                    //offset 检查
                    var hasOffset = false;
                    var _scale;
                    var offsetD = this.adjustMap.get(tran.name);
                    if (offsetD && offsetD.offsetScale) {
                        _scale = offsetD.offsetScale;
                        hasOffset = true;
                    }
                    if (hasOffset) {
                        m4m.math.vec3ScaleByNum(_scale, scale, finalScale);
                    }
                    else {
                        m4m.math.vec3SetAll(finalScale, scale);
                    }
                    tran.localScale = finalScale;
                };
                EffectMgr.onPlayEnd = function (_guid) {
                    var fun = this.playEndMap[_guid];
                    delete this.playEndMap[_guid];
                    this.removeOne(_guid);
                    if (fun) {
                        fun();
                    }
                };
                EffectMgr.helpV3Zero = new m4m.math.vector3(0, 0, 0);
                EffectMgr.helpV3 = new m4m.math.vector3();
                EffectMgr.helpQuat = new m4m.math.quaternion();
                EffectMgr.effMap = new Map_2.cMap();
                EffectMgr.guid = -1;
                // tslint:disable-next-line: max-line-length
                EffectMgr.adjustMap = new Map_2.cMap();
                EffectMgr.playEndMap = {};
                return EffectMgr;
            }());
            exports_14("EffectMgr", EffectMgr);
        }
    };
});
System.register("Net/DataEvents/UserVarBaseEvent", [], function (exports_15, context_15) {
    "use strict";
    var UserVarBaseEvent;
    var __moduleName = context_15 && context_15.id;
    return {
        setters: [],
        execute: function () {
            UserVarBaseEvent = /** @class */ (function () {
                function UserVarBaseEvent() {
                }
                /** 初始化全部数据*/
                UserVarBaseEvent.Init = "Init";
                /** 批量加载数据*/
                UserVarBaseEvent.ChangeList = "ChangeList";
                /** 用户uuid*/
                UserVarBaseEvent.id = "id";
                /** 用户名*/
                UserVarBaseEvent.playerName = "playerName";
                /** token*/
                UserVarBaseEvent.token = "token";
                /** 密码*/
                UserVarBaseEvent.passWord = "passWord";
                /** 账号状态*/
                UserVarBaseEvent.status = "status";
                /** 游戏中账号状态*/
                UserVarBaseEvent.inGameStatus = "inGameStatus";
                /** 人物属性*/
                UserVarBaseEvent.roleStatus = "roleStatus";
                /** 持有货币*/
                UserVarBaseEvent.currency = "currency";
                /** 装备道具*/
                UserVarBaseEvent.equip = "equip";
                /** 持有道具*/
                UserVarBaseEvent.items = "items";
                /** 邮箱道具*/
                UserVarBaseEvent.mailItem = "mailItem";
                /** 是否屏蔽*/
                UserVarBaseEvent.isBlock = "isBlock";
                /** 是否记录*/
                UserVarBaseEvent.isLogUser = "isLogUser";
                /** 登录时间*/
                UserVarBaseEvent.loginTime = "loginTime";
                /** 游戏经历是否打开*/
                UserVarBaseEvent.experience = "experience";
                /** 游戏经历*/
                UserVarBaseEvent.Battlelist = "Battlelist";
                /** 玩家头像*/
                UserVarBaseEvent.playerIcon = "playerIcon";
                /** 持有头像*/
                UserVarBaseEvent.headPortrait = "headPortrait";
                return UserVarBaseEvent;
            }());
            exports_15("UserVarBaseEvent", UserVarBaseEvent);
        }
    };
});
System.register("Net/WsDataManager", ["Data/Map", "BattleListBase", "CookieConfigBase", "CookieGameData", "DailyRank", "WeeklyRank", "MonthlyRank", "CookieDailyRank", "CookieWeeklyRank", "CookieMonthlyRank", "DailyRankLast", "DailyRankLog", "WeeklyRankLast", "WeeklyRankLog", "MonthlyRankLast", "MonthlyRankLog", "CookieDailyRankLast", "CookieDailyRankLog", "CookieWeeklyRankLast", "CookieWeeklyRankLog", "CookieMonthlyRankLast", "CookieMonthlyRankLog", "DarkFightConfigBase", "DialRiverConfigBase", "DialRiverData", "GameOpenSetting", "GamesConfigBase", "GamesTicketBase", "GlassBridgerConfigBase", "GlassBridgeData", "GlassBridgePos", "HallConfigBase", "ItemBase", "ItemData", "ItemLog", "LoginLogBase", "MailData", "MarblesConfigBase", "MarblesData", "Notice", "PKConfigBase", "PlayerIcon", "ResultBase", "SettingBase", "SeverConfigBase", "ShopList", "ShopSet", "SquidGameConfigBase", "TimeEvent", "TotleRank", "CookieTotleRank", "UserVarBase", "WalletErrLog", "WalletLog", "WoodConfigBase", "WoodSongData"], function (exports_16, context_16) {
    "use strict";
    var Map_3, BattleListBase_1, CookieConfigBase_1, CookieGameData_1, DailyRank_1, WeeklyRank_1, MonthlyRank_1, CookieDailyRank_1, CookieWeeklyRank_1, CookieMonthlyRank_1, DailyRankLast_1, DailyRankLog_1, WeeklyRankLast_1, WeeklyRankLog_1, MonthlyRankLast_1, MonthlyRankLog_1, CookieDailyRankLast_1, CookieDailyRankLog_1, CookieWeeklyRankLast_1, CookieWeeklyRankLog_1, CookieMonthlyRankLast_1, CookieMonthlyRankLog_1, DarkFightConfigBase_1, DialRiverConfigBase_1, DialRiverData_1, GameOpenSetting_1, GamesConfigBase_1, GamesTicketBase_1, GlassBridgerConfigBase_1, GlassBridgeData_1, GlassBridgePos_1, HallConfigBase_1, ItemBase_1, ItemData_1, ItemLog_1, LoginLogBase_1, MailData_1, MarblesConfigBase_1, MarblesData_1, Notice_1, PKConfigBase_1, PlayerIcon_1, ResultBase_1, SettingBase_1, SeverConfigBase_1, ShopList_1, ShopSet_1, SquidGameConfigBase_1, TimeEvent_1, TotleRank_1, CookieTotleRank_1, UserVarBase_1, WalletErrLog_1, WalletLog_1, WoodConfigBase_1, WoodSongData_1, WsDataManager;
    var __moduleName = context_16 && context_16.id;
    return {
        setters: [
            function (Map_3_1) {
                Map_3 = Map_3_1;
            },
            function (BattleListBase_1_1) {
                BattleListBase_1 = BattleListBase_1_1;
            },
            function (CookieConfigBase_1_1) {
                CookieConfigBase_1 = CookieConfigBase_1_1;
            },
            function (CookieGameData_1_1) {
                CookieGameData_1 = CookieGameData_1_1;
            },
            function (DailyRank_1_1) {
                DailyRank_1 = DailyRank_1_1;
            },
            function (WeeklyRank_1_1) {
                WeeklyRank_1 = WeeklyRank_1_1;
            },
            function (MonthlyRank_1_1) {
                MonthlyRank_1 = MonthlyRank_1_1;
            },
            function (CookieDailyRank_1_1) {
                CookieDailyRank_1 = CookieDailyRank_1_1;
            },
            function (CookieWeeklyRank_1_1) {
                CookieWeeklyRank_1 = CookieWeeklyRank_1_1;
            },
            function (CookieMonthlyRank_1_1) {
                CookieMonthlyRank_1 = CookieMonthlyRank_1_1;
            },
            function (DailyRankLast_1_1) {
                DailyRankLast_1 = DailyRankLast_1_1;
            },
            function (DailyRankLog_1_1) {
                DailyRankLog_1 = DailyRankLog_1_1;
            },
            function (WeeklyRankLast_1_1) {
                WeeklyRankLast_1 = WeeklyRankLast_1_1;
            },
            function (WeeklyRankLog_1_1) {
                WeeklyRankLog_1 = WeeklyRankLog_1_1;
            },
            function (MonthlyRankLast_1_1) {
                MonthlyRankLast_1 = MonthlyRankLast_1_1;
            },
            function (MonthlyRankLog_1_1) {
                MonthlyRankLog_1 = MonthlyRankLog_1_1;
            },
            function (CookieDailyRankLast_1_1) {
                CookieDailyRankLast_1 = CookieDailyRankLast_1_1;
            },
            function (CookieDailyRankLog_1_1) {
                CookieDailyRankLog_1 = CookieDailyRankLog_1_1;
            },
            function (CookieWeeklyRankLast_1_1) {
                CookieWeeklyRankLast_1 = CookieWeeklyRankLast_1_1;
            },
            function (CookieWeeklyRankLog_1_1) {
                CookieWeeklyRankLog_1 = CookieWeeklyRankLog_1_1;
            },
            function (CookieMonthlyRankLast_1_1) {
                CookieMonthlyRankLast_1 = CookieMonthlyRankLast_1_1;
            },
            function (CookieMonthlyRankLog_1_1) {
                CookieMonthlyRankLog_1 = CookieMonthlyRankLog_1_1;
            },
            function (DarkFightConfigBase_1_1) {
                DarkFightConfigBase_1 = DarkFightConfigBase_1_1;
            },
            function (DialRiverConfigBase_1_1) {
                DialRiverConfigBase_1 = DialRiverConfigBase_1_1;
            },
            function (DialRiverData_1_1) {
                DialRiverData_1 = DialRiverData_1_1;
            },
            function (GameOpenSetting_1_1) {
                GameOpenSetting_1 = GameOpenSetting_1_1;
            },
            function (GamesConfigBase_1_1) {
                GamesConfigBase_1 = GamesConfigBase_1_1;
            },
            function (GamesTicketBase_1_1) {
                GamesTicketBase_1 = GamesTicketBase_1_1;
            },
            function (GlassBridgerConfigBase_1_1) {
                GlassBridgerConfigBase_1 = GlassBridgerConfigBase_1_1;
            },
            function (GlassBridgeData_1_1) {
                GlassBridgeData_1 = GlassBridgeData_1_1;
            },
            function (GlassBridgePos_1_1) {
                GlassBridgePos_1 = GlassBridgePos_1_1;
            },
            function (HallConfigBase_1_1) {
                HallConfigBase_1 = HallConfigBase_1_1;
            },
            function (ItemBase_1_1) {
                ItemBase_1 = ItemBase_1_1;
            },
            function (ItemData_1_1) {
                ItemData_1 = ItemData_1_1;
            },
            function (ItemLog_1_1) {
                ItemLog_1 = ItemLog_1_1;
            },
            function (LoginLogBase_1_1) {
                LoginLogBase_1 = LoginLogBase_1_1;
            },
            function (MailData_1_1) {
                MailData_1 = MailData_1_1;
            },
            function (MarblesConfigBase_1_1) {
                MarblesConfigBase_1 = MarblesConfigBase_1_1;
            },
            function (MarblesData_1_1) {
                MarblesData_1 = MarblesData_1_1;
            },
            function (Notice_1_1) {
                Notice_1 = Notice_1_1;
            },
            function (PKConfigBase_1_1) {
                PKConfigBase_1 = PKConfigBase_1_1;
            },
            function (PlayerIcon_1_1) {
                PlayerIcon_1 = PlayerIcon_1_1;
            },
            function (ResultBase_1_1) {
                ResultBase_1 = ResultBase_1_1;
            },
            function (SettingBase_1_1) {
                SettingBase_1 = SettingBase_1_1;
            },
            function (SeverConfigBase_1_1) {
                SeverConfigBase_1 = SeverConfigBase_1_1;
            },
            function (ShopList_1_1) {
                ShopList_1 = ShopList_1_1;
            },
            function (ShopSet_1_1) {
                ShopSet_1 = ShopSet_1_1;
            },
            function (SquidGameConfigBase_1_1) {
                SquidGameConfigBase_1 = SquidGameConfigBase_1_1;
            },
            function (TimeEvent_1_1) {
                TimeEvent_1 = TimeEvent_1_1;
            },
            function (TotleRank_1_1) {
                TotleRank_1 = TotleRank_1_1;
            },
            function (CookieTotleRank_1_1) {
                CookieTotleRank_1 = CookieTotleRank_1_1;
            },
            function (UserVarBase_1_1) {
                UserVarBase_1 = UserVarBase_1_1;
            },
            function (WalletErrLog_1_1) {
                WalletErrLog_1 = WalletErrLog_1_1;
            },
            function (WalletLog_1_1) {
                WalletLog_1 = WalletLog_1_1;
            },
            function (WoodConfigBase_1_1) {
                WoodConfigBase_1 = WoodConfigBase_1_1;
            },
            function (WoodSongData_1_1) {
                WoodSongData_1 = WoodSongData_1_1;
            }
        ],
        execute: function () {
            WsDataManager = /** @class */ (function () {
                function WsDataManager() {
                }
                WsDataManager.setData = function (className, data) {
                    WsDataManager[className + "Data"].clone(data);
                    WsDataManager[className + "Data"].dispatchEvent("Init", data);
                };
                WsDataManager.changeDataList = function (className, data) {
                    var getClass = WsDataManager[className + "DataList"];
                    if (getClass) {
                        var newMap = new Map_3.cMap();
                        for (var key in data) {
                            newMap.set(key, data[key]);
                        }
                        getClass.list = newMap;
                    }
                    WsDataManager[className + "Data"].dispatchEvent("ChangeList", data);
                };
                WsDataManager.changeData = function (className, proName, paramType, data) {
                    var param = WsDataManager[className + "Data"][proName];
                    switch (paramType) {
                        case "list":
                            if (!param) {
                                WsDataManager[className + "Data"][proName] = [];
                            }
                            for (var key in data) {
                                if (key >= param.length) {
                                    WsDataManager[className + "Data"][proName].push(data[key]);
                                }
                                else {
                                    WsDataManager[className + "Data"][proName][key] = data[key];
                                }
                            }
                            break;
                        case "map":
                            var oldMap = void 0;
                            if (WsDataManager[className + "Data"][proName]) {
                                oldMap = JSON.parse(WsDataManager[className + "Data"][proName]);
                            }
                            else {
                                oldMap = {};
                            }
                            for (var key in data) {
                                oldMap[key] = data[key];
                            }
                            WsDataManager[className + "Data"][proName] = JSON.stringify(oldMap);
                            break;
                        case "mapdel":
                            var oldMapDel = void 0;
                            if (WsDataManager[className + "Data"][proName]) {
                                oldMapDel = JSON.parse(WsDataManager[className + "Data"][proName]);
                            }
                            else {
                                oldMapDel = {};
                            }
                            for (var key in data) {
                                if (oldMapDel[key]) {
                                    delete oldMapDel[key];
                                }
                            }
                            WsDataManager[className + "Data"][proName] = JSON.stringify(oldMapDel);
                            break;
                        default:
                            WsDataManager[className + "Data"][proName] = data;
                    }
                    WsDataManager[className + "Data"].dispatchEvent(proName, data);
                };
                WsDataManager.BattleListBaseData = new BattleListBase_1.BattleListBase();
                WsDataManager.CookieConfigBaseData = new CookieConfigBase_1.CookieConfigBase();
                WsDataManager.CookieGameDataData = new CookieGameData_1.CookieGameData();
                WsDataManager.DailyRankData = new DailyRank_1.DailyRank();
                WsDataManager.WeeklyRankData = new WeeklyRank_1.WeeklyRank();
                WsDataManager.MonthlyRankData = new MonthlyRank_1.MonthlyRank();
                WsDataManager.CookieDailyRankData = new CookieDailyRank_1.CookieDailyRank();
                WsDataManager.CookieWeeklyRankData = new CookieWeeklyRank_1.CookieWeeklyRank();
                WsDataManager.CookieMonthlyRankData = new CookieMonthlyRank_1.CookieMonthlyRank();
                WsDataManager.DailyRankLastData = new DailyRankLast_1.DailyRankLast();
                WsDataManager.DailyRankLogData = new DailyRankLog_1.DailyRankLog();
                WsDataManager.WeeklyRankLastData = new WeeklyRankLast_1.WeeklyRankLast();
                WsDataManager.WeeklyRankLogData = new WeeklyRankLog_1.WeeklyRankLog();
                WsDataManager.MonthlyRankLastData = new MonthlyRankLast_1.MonthlyRankLast();
                WsDataManager.MonthlyRankLogData = new MonthlyRankLog_1.MonthlyRankLog();
                WsDataManager.CookieDailyRankLastData = new CookieDailyRankLast_1.CookieDailyRankLast();
                WsDataManager.CookieDailyRankLogData = new CookieDailyRankLog_1.CookieDailyRankLog();
                WsDataManager.CookieWeeklyRankLastData = new CookieWeeklyRankLast_1.CookieWeeklyRankLast();
                WsDataManager.CookieWeeklyRankLogData = new CookieWeeklyRankLog_1.CookieWeeklyRankLog();
                WsDataManager.CookieMonthlyRankLastData = new CookieMonthlyRankLast_1.CookieMonthlyRankLast();
                WsDataManager.CookieMonthlyRankLogData = new CookieMonthlyRankLog_1.CookieMonthlyRankLog();
                WsDataManager.DarkFightConfigBaseData = new DarkFightConfigBase_1.DarkFightConfigBase();
                WsDataManager.DialRiverConfigBaseData = new DialRiverConfigBase_1.DialRiverConfigBase();
                WsDataManager.DialRiverDataData = new DialRiverData_1.DialRiverData();
                WsDataManager.GameOpenSettingData = new GameOpenSetting_1.GameOpenSetting();
                WsDataManager.GamesConfigBaseData = new GamesConfigBase_1.GamesConfigBase();
                WsDataManager.GamesTicketBaseData = new GamesTicketBase_1.GamesTicketBase();
                WsDataManager.GlassBridgerConfigBaseData = new GlassBridgerConfigBase_1.GlassBridgerConfigBase();
                WsDataManager.GlassBridgeDataData = new GlassBridgeData_1.GlassBridgeData();
                WsDataManager.GlassBridgePosData = new GlassBridgePos_1.GlassBridgePos();
                WsDataManager.HallConfigBaseData = new HallConfigBase_1.HallConfigBase();
                WsDataManager.ItemBaseData = new ItemBase_1.ItemBase();
                WsDataManager.ItemDataData = new ItemData_1.ItemData();
                WsDataManager.ItemLogData = new ItemLog_1.ItemLog();
                WsDataManager.LoginLogBaseData = new LoginLogBase_1.LoginLogBase();
                WsDataManager.MailDataData = new MailData_1.MailData();
                WsDataManager.MarblesConfigBaseData = new MarblesConfigBase_1.MarblesConfigBase();
                WsDataManager.MarblesDataData = new MarblesData_1.MarblesData();
                WsDataManager.NoticeData = new Notice_1.Notice();
                WsDataManager.PKConfigBaseData = new PKConfigBase_1.PKConfigBase();
                WsDataManager.PlayerIconData = new PlayerIcon_1.PlayerIcon();
                WsDataManager.ResultBaseData = new ResultBase_1.ResultBase();
                WsDataManager.SettingBaseData = new SettingBase_1.SettingBase();
                WsDataManager.SeverConfigBaseData = new SeverConfigBase_1.SeverConfigBase();
                WsDataManager.ShopListData = new ShopList_1.ShopList();
                WsDataManager.ShopSetData = new ShopSet_1.ShopSet();
                WsDataManager.SquidGameConfigBaseData = new SquidGameConfigBase_1.SquidGameConfigBase();
                WsDataManager.TimeEventData = new TimeEvent_1.TimeEvent();
                WsDataManager.TotleRankData = new TotleRank_1.TotleRank();
                WsDataManager.CookieTotleRankData = new CookieTotleRank_1.CookieTotleRank();
                WsDataManager.UserVarBaseData = new UserVarBase_1.UserVarBase();
                WsDataManager.WalletErrLogData = new WalletErrLog_1.WalletErrLog();
                WsDataManager.WalletLogData = new WalletLog_1.WalletLog();
                WsDataManager.WoodConfigBaseData = new WoodConfigBase_1.WoodConfigBase();
                WsDataManager.WoodSongDataData = new WoodSongData_1.WoodSongData();
                WsDataManager.BattleListBaseDataList = BattleListBase_1.BattleListBase;
                WsDataManager.CookieConfigBaseDataList = CookieConfigBase_1.CookieConfigBase;
                WsDataManager.CookieGameDataDataList = CookieGameData_1.CookieGameData;
                WsDataManager.DailyRankDataList = DailyRank_1.DailyRank;
                WsDataManager.WeeklyRankDataList = WeeklyRank_1.WeeklyRank;
                WsDataManager.MonthlyRankDataList = MonthlyRank_1.MonthlyRank;
                WsDataManager.CookieDailyRankDataList = CookieDailyRank_1.CookieDailyRank;
                WsDataManager.CookieWeeklyRankDataList = CookieWeeklyRank_1.CookieWeeklyRank;
                WsDataManager.CookieMonthlyRankDataList = CookieMonthlyRank_1.CookieMonthlyRank;
                WsDataManager.DailyRankLastDataList = DailyRankLast_1.DailyRankLast;
                WsDataManager.DailyRankLogDataList = DailyRankLog_1.DailyRankLog;
                WsDataManager.WeeklyRankLastDataList = WeeklyRankLast_1.WeeklyRankLast;
                WsDataManager.WeeklyRankLogDataList = WeeklyRankLog_1.WeeklyRankLog;
                WsDataManager.MonthlyRankLastDataList = MonthlyRankLast_1.MonthlyRankLast;
                WsDataManager.MonthlyRankLogDataList = MonthlyRankLog_1.MonthlyRankLog;
                WsDataManager.CookieDailyRankLastDataList = CookieDailyRankLast_1.CookieDailyRankLast;
                WsDataManager.CookieDailyRankLogDataList = CookieDailyRankLog_1.CookieDailyRankLog;
                WsDataManager.CookieWeeklyRankLastDataList = CookieWeeklyRankLast_1.CookieWeeklyRankLast;
                WsDataManager.CookieWeeklyRankLogDataList = CookieWeeklyRankLog_1.CookieWeeklyRankLog;
                WsDataManager.CookieMonthlyRankLastDataList = CookieMonthlyRankLast_1.CookieMonthlyRankLast;
                WsDataManager.CookieMonthlyRankLogDataList = CookieMonthlyRankLog_1.CookieMonthlyRankLog;
                WsDataManager.DarkFightConfigBaseDataList = DarkFightConfigBase_1.DarkFightConfigBase;
                WsDataManager.DialRiverConfigBaseDataList = DialRiverConfigBase_1.DialRiverConfigBase;
                WsDataManager.DialRiverDataDataList = DialRiverData_1.DialRiverData;
                WsDataManager.GameOpenSettingDataList = GameOpenSetting_1.GameOpenSetting;
                WsDataManager.GamesConfigBaseDataList = GamesConfigBase_1.GamesConfigBase;
                WsDataManager.GamesTicketBaseDataList = GamesTicketBase_1.GamesTicketBase;
                WsDataManager.GlassBridgerConfigBaseDataList = GlassBridgerConfigBase_1.GlassBridgerConfigBase;
                WsDataManager.GlassBridgeDataDataList = GlassBridgeData_1.GlassBridgeData;
                WsDataManager.GlassBridgePosDataList = GlassBridgePos_1.GlassBridgePos;
                WsDataManager.HallConfigBaseDataList = HallConfigBase_1.HallConfigBase;
                WsDataManager.ItemBaseDataList = ItemBase_1.ItemBase;
                WsDataManager.ItemDataDataList = ItemData_1.ItemData;
                WsDataManager.ItemLogDataList = ItemLog_1.ItemLog;
                WsDataManager.LoginLogBaseDataList = LoginLogBase_1.LoginLogBase;
                WsDataManager.MailDataDataList = MailData_1.MailData;
                WsDataManager.MarblesConfigBaseDataList = MarblesConfigBase_1.MarblesConfigBase;
                WsDataManager.MarblesDataDataList = MarblesData_1.MarblesData;
                WsDataManager.NoticeDataList = Notice_1.Notice;
                WsDataManager.PKConfigBaseDataList = PKConfigBase_1.PKConfigBase;
                WsDataManager.PlayerIconDataList = PlayerIcon_1.PlayerIcon;
                WsDataManager.ResultBaseDataList = ResultBase_1.ResultBase;
                WsDataManager.SettingBaseDataList = SettingBase_1.SettingBase;
                WsDataManager.SeverConfigBaseDataList = SeverConfigBase_1.SeverConfigBase;
                WsDataManager.ShopListDataList = ShopList_1.ShopList;
                WsDataManager.ShopSetDataList = ShopSet_1.ShopSet;
                WsDataManager.SquidGameConfigBaseDataList = SquidGameConfigBase_1.SquidGameConfigBase;
                WsDataManager.TimeEventDataList = TimeEvent_1.TimeEvent;
                WsDataManager.TotleRankDataList = TotleRank_1.TotleRank;
                WsDataManager.CookieTotleRankDataList = CookieTotleRank_1.CookieTotleRank;
                WsDataManager.UserVarBaseDataList = UserVarBase_1.UserVarBase;
                WsDataManager.WalletErrLogDataList = WalletErrLog_1.WalletErrLog;
                WsDataManager.WalletLogDataList = WalletLog_1.WalletLog;
                WsDataManager.WoodConfigBaseDataList = WoodConfigBase_1.WoodConfigBase;
                WsDataManager.WoodSongDataDataList = WoodSongData_1.WoodSongData;
                return WsDataManager;
            }());
            exports_16("WsDataManager", WsDataManager);
        }
    };
});
System.register("Manager/UIData/UiNames", [], function (exports_17, context_17) {
    "use strict";
    var UiNames;
    var __moduleName = context_17 && context_17.id;
    return {
        setters: [],
        execute: function () {
            UiNames = /** @class */ (function () {
                function UiNames() {
                }
                /**游戏中*/
                UiNames.gaming = "gaming";
                /**大厅*/
                UiNames.Hall = "Hall";
                /**摇杆*/
                UiNames.rocker = "rocker";
                /**临时使用*/
                UiNames.test = "test";
                /**结算弹窗*/
                UiNames.countdown = "countdown";
                UiNames.tloading = "tloading";
                /**手机引导*/
                UiNames.tutorialmb = "tutorialmb";
                /**pc引导*/
                UiNames.tutorialpc = "tutorialpc";
                /**多人大厅等待文字提示*/
                UiNames.txtbg = "txtbg";
                UiNames.tips = "tips";
                UiNames.signals = "signals";
                UiNames.connect = "connect";
                UiNames.wloading = "wloading";
                UiNames.loading = "loading";
                //Steer
                UiNames.Steer = "Steer";
                return UiNames;
            }());
            exports_17("UiNames", UiNames);
        }
    };
});
System.register("Manager/UserDataManager", ["PSDUI/UiDataManager", "Time/CDManage", "Core/StageMgr", "Data/BindKeyName", "GameMgr", "Net/DataEvents/UserVarBaseEvent", "Net/WsDataManager"], function (exports_18, context_18) {
    "use strict";
    var UiDataManager_1, CDManage_1, StageMgr_1, BindKeyName_1, GameMgr_5, UserVarBaseEvent_1, WsDataManager_1, UserDataManager;
    var __moduleName = context_18 && context_18.id;
    return {
        setters: [
            function (UiDataManager_1_1) {
                UiDataManager_1 = UiDataManager_1_1;
            },
            function (CDManage_1_1) {
                CDManage_1 = CDManage_1_1;
            },
            function (StageMgr_1_1) {
                StageMgr_1 = StageMgr_1_1;
            },
            function (BindKeyName_1_1) {
                BindKeyName_1 = BindKeyName_1_1;
            },
            function (GameMgr_5_1) {
                GameMgr_5 = GameMgr_5_1;
            },
            function (UserVarBaseEvent_1_1) {
                UserVarBaseEvent_1 = UserVarBaseEvent_1_1;
            },
            function (WsDataManager_1_1) {
                WsDataManager_1 = WsDataManager_1_1;
            }
        ],
        execute: function () {
            //玩家账号数据
            UserDataManager = /** @class */ (function () {
                function UserDataManager() {
                    this.moveSpeed = 0; //走的速度
                    this.runSpeed = 0; //跑的速度
                    this.backpack = [];
                    this.ticketData = {}; //玩家拥有的门票 数量 TicketType
                }
                Object.defineProperty(UserDataManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new UserDataManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //根据类型获取门票数量
                UserDataManager.prototype.getTicketNum = function (type) {
                    var num = this.ticketData[type];
                    return num == undefined ? 0 : num;
                };
                //根据类型设置门票数量
                UserDataManager.prototype.setTicketNum = function (type, num) {
                    if (this.ticketData[type] == null) {
                        this.ticketData[type] = num;
                    }
                    else {
                        for (var key in this.ticketData) {
                            if (key == type.toString()) {
                                this.ticketData[type] = this.ticketData[type] + num;
                            }
                        }
                    }
                    // console.error("根据类型设置门票数量");
                };
                //初始化
                UserDataManager.prototype.init = function () {
                    // console.error(WsDataManager.UserVarBaseData);
                    WsDataManager_1.WsDataManager.UserVarBaseData.addEventListener(UserVarBaseEvent_1.UserVarBaseEvent.Init, this.userInfoFun.bind(this));
                    WsDataManager_1.WsDataManager.UserVarBaseData.addEventListener(UserVarBaseEvent_1.UserVarBaseEvent.items, this.upDateItems.bind(this));
                    WsDataManager_1.WsDataManager.UserVarBaseData.addEventListener(UserVarBaseEvent_1.UserVarBaseEvent.mailItem, this.UpdataMali.bind(this));
                };
                UserDataManager.prototype.userInfoFun = function (data) {
                    // console.error("玩家name",data.playerName);
                    StageMgr_1.StageMgr.playername = data.playerName;
                    var roleStatus = JSON.parse(WsDataManager_1.WsDataManager.UserVarBaseData.roleStatus);
                    var items = JSON.parse(WsDataManager_1.WsDataManager.UserVarBaseData.items);
                    console.error("玩家数据更新", WsDataManager_1.WsDataManager.UserVarBaseData.roleStatus);
                    var itemCount = 0;
                    var itemData;
                    this.ticketData = {};
                    for (var key in items) {
                        if (key) {
                            itemData = items[key];
                            if (itemData) {
                                this.setTicketNum(itemData.baseId, itemData.count);
                                this.backpack.push(itemData);
                            }
                        }
                    }
                    // this.ticketNum = itemCount;
                    // console.error("玩家当前拥有的门票数", this.ticketNum);
                    if (roleStatus.ms) {
                        this.moveSpeed = roleStatus.ms; //走的速度
                    }
                    else {
                        console.error("服务器返回走的速度出错！");
                    }
                    if (roleStatus.rs) {
                        this.runSpeed = roleStatus.rs; //跑的速度
                    }
                    else {
                        console.error("服务器返回跑的速度出错！");
                    }
                    // this.moveSpeed = 2;//为了效果暂时设置
                    var serverTime = WsDataManager_1.WsDataManager.UserVarBaseData.loginTime;
                    CDManage_1.CDManage.Instance.setServerTime(serverTime);
                    //登录成功返回
                    // UIOpenOrHideManager.Instance.HideTestView();
                    // UIOpenOrHideManager.Instance.HideConnectWalletView();
                    //
                    StageMgr_1.StageMgr.onLoginServerSuccess();
                    setTimeout(function () {
                        UiDataManager_1.UiDataManager.changeFunctionData(BindKeyName_1.BindKeyName.LoginSucceeded, true);
                    }, 500);
                };
                //有道具更新
                UserDataManager.prototype.upDateItems = function (data) {
                    if (GameMgr_5.GameMgr.openWalletBol) {
                        var items = JSON.parse(WsDataManager_1.WsDataManager.UserVarBaseData.items);
                        var itemData = void 0;
                        this.ticketData = {};
                        for (var key in items) {
                            if (key) {
                                itemData = items[key];
                                if (itemData) {
                                    this.setTicketNum(itemData.baseId, itemData.count);
                                    this.backpack.push(itemData);
                                }
                            }
                        }
                        // if (keys.length > 0) {
                        //     let item = data[keys[0]];
                        //     this.setTicketNum(item.baseId, item.count);
                        // }
                    }
                    else {
                        var items = JSON.parse(WsDataManager_1.WsDataManager.UserVarBaseData.items);
                        // console.log(items);
                        var itemData = void 0;
                        this.ticketData = {};
                        for (var key in items) {
                            if (key) {
                                itemData = items[key];
                                if (itemData) {
                                    this.setTicketNum(itemData.baseId, itemData.count);
                                    this.backpack.push(itemData);
                                }
                            }
                        }
                    }
                    // console.error("有道具更新 ", data);
                    // console.error("买票弹窗状态  ",UiManager.isUiShow(UiNames.buyticketWindow),"前往游戏大厅  ",StageMgr.gotoPlayGameBol);
                    // if (UiManager.isUiShow(UiNames.buyticketWindow) && !StageMgr.gotoPlayGameBol) {
                    //     UiDataManager.changeFunctionData(BindKeyName.buyTicketSuccessToGame, { gameType: StageMgr.levelType });
                    // }
                };
                UserDataManager.prototype.UpdataMali = function () {
                    if (GameMgr_5.GameMgr.openWalletBol) {
                        var maitems = JSON.parse(WsDataManager_1.WsDataManager.UserVarBaseData.mailItem);
                        console.error("钱包邮件道具更新", maitems);
                        UiDataManager_1.UiDataManager.changeFunctionData(BindKeyName_1.BindKeyName.mail, null);
                    }
                    else {
                        var maitems = JSON.parse(WsDataManager_1.WsDataManager.UserVarBaseData.mailItem);
                        console.error("邮件道具", maitems);
                        UiDataManager_1.UiDataManager.changeFunctionData(BindKeyName_1.BindKeyName.mail, null);
                    }
                };
                // tslint:disable-next-line: member-ordering
                UserDataManager.prototype.dispose = function () {
                    this.backpack.length = 0;
                };
                return UserDataManager;
            }());
            exports_18("UserDataManager", UserDataManager);
        }
    };
});
System.register("Manager/UIOpenOrHideManager", ["eventMgr", "events/sceneHideEvent", "events/sceneShowEvent", "PSDUI/UiManager", "Tools/miniGame", "Tools/PlatformUtil", "GameMgr", "Manager/UIData/UiNames"], function (exports_19, context_19) {
    "use strict";
    var eventMgr_1, sceneHideEvent_1, sceneShowEvent_1, UiManager_1, miniGame_1, PlatformUtil_1, GameMgr_6, UiNames_1, UIOpenOrHideManager;
    var __moduleName = context_19 && context_19.id;
    return {
        setters: [
            function (eventMgr_1_1) {
                eventMgr_1 = eventMgr_1_1;
            },
            function (sceneHideEvent_1_1) {
                sceneHideEvent_1 = sceneHideEvent_1_1;
            },
            function (sceneShowEvent_1_1) {
                sceneShowEvent_1 = sceneShowEvent_1_1;
            },
            function (UiManager_1_1) {
                UiManager_1 = UiManager_1_1;
            },
            function (miniGame_1_1) {
                miniGame_1 = miniGame_1_1;
            },
            function (PlatformUtil_1_1) {
                PlatformUtil_1 = PlatformUtil_1_1;
            },
            function (GameMgr_6_1) {
                GameMgr_6 = GameMgr_6_1;
            },
            function (UiNames_1_1) {
                UiNames_1 = UiNames_1_1;
            }
        ],
        execute: function () {
            UIOpenOrHideManager = /** @class */ (function () {
                function UIOpenOrHideManager() {
                    var _this = this;
                    this._showRoomEuler = 0;
                    this.roleId = 0;
                    /**设置矿洞页面 */
                    this.cavePageNumber = 0;
                    this.uiloadingCanShow = true;
                    ///隐藏 不主动释放的 UI列表
                    UiManager_1.UiManager.dontDisposeUIList = [];
                    UiManager_1.UiManager.dontDisposeUIList.push(UiNames_1.UiNames.loading);
                    UiManager_1.UiManager.dontDisposeUIList.push(UiNames_1.UiNames.wloading);
                    // UiManager.dontDisposeUIList.push(UiNames.Tooltip);
                    // UiManager.dontDisposeUIList.push(UiNames.Circleloading);
                    // UiManager.dontDisposeUIList.push(UiNames.Cardsone);
                    // UiManager.dontDisposeUIList.push(UiNames.Cardsten);
                    // UiManager.dontDisposeUIList.push(UiNames.Guide);
                    // UiManager.dontDisposeUIList.push(UiNames.Playgame);
                    //开始打开UI 回调
                    UiManager_1.UiManager.startLoadCallBack = function (uiname) {
                        if (UIOpenOrHideManager.needShowLoading && uiname != UiNames_1.UiNames.wloading) {
                            // console.error("开始加载UI " + uiname);
                            if (_this.uiloadingCanShow) {
                                //显示UIloading界面
                                UiManager_1.UiManager.showUi(UiNames_1.UiNames.wloading);
                                _this.uiloadingCanShow = false;
                            }
                        }
                    };
                    UiManager_1.UiManager.endLoadCallBack = function (uiname) {
                        if (UIOpenOrHideManager.needShowLoading && uiname != UiNames_1.UiNames.wloading) {
                            // console.error("UI加载完成 " + uiname);
                            //半闭UIloading界面
                            if (UiManager_1.UiManager.isUiShow(UiNames_1.UiNames.wloading)) {
                                UiManager_1.UiManager.hideUi(UiNames_1.UiNames.wloading);
                            }
                            _this.uiloadingCanShow = true;
                        }
                    };
                }
                Object.defineProperty(UIOpenOrHideManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new UIOpenOrHideManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                UIOpenOrHideManager.prototype.OpenNextUI = function () {
                    if (this.nextOpenUiName) {
                        UiManager_1.UiManager.showUi(this.nextOpenUiName);
                        this.nextOpenUiName = "";
                    }
                    else {
                        // UiManager.showUi(UiNames.Main);
                    }
                };
                //通用面板中调用打开别的UI面板方法
                // public CommonOpenFunPanel(funcType: FuncType, param, param2 = null) {
                //     CommonOpenFunPanelManager.Instance.funcType = funcType;
                //     CommonOpenFunPanelManager.Instance.param = param;
                //     CommonOpenFunPanelManager.Instance.param2 = param2;
                //     switch (funcType) {
                //         case FuncType.FT_RECHARGE:  //充值
                //             this.OpenReCharge2();
                //             break;
                //         case FuncType.FT_QIAN_DAO: //签到
                //             this.OpenSigninView();
                //             break;
                //         case FuncType.FT_HEISHI:  //神秘商店
                //             this.OpenShopView();
                //             break;
                //         case FuncType.FT_HERO_LIST:  //英雄列表
                //             this.OpenHeroListView();
                //             break;
                //         case FuncType.FT_JJC: //竞技场
                //             this.OpenArenaView();
                //             break;
                //         case FuncType.FT_CHALLENGE: //试炼 挑战
                //             this.OpenLadderView();
                //             break;
                //         case FuncType.FT_RES_DUNGEON: //沙漠探索
                //             this.OpenCaveView();
                //             break;
                //         case FuncType.FT_DESERT_EXPLORE: //沙漠探索
                //             // this.OpenLadderView();
                //             break;
                //         case FuncType.FT_MAIN: //主界面
                //             this.OpenMainView();
                //             break;
                //         case FuncType.FT_FRIEND: //好友
                //             this.OpenFriendsPanel();
                //             break;
                //         case FuncType.FT_FAST_COLLECT_BUILD_PRIZE: //挂机奖励
                //             this.OpenGuajiTCView();
                //             break;
                //         case FuncType.FT_ALLIANCE: // 悬赏
                //             this.OpenXStaskView();
                //             break;
                //         case FuncType.FT_CARD: // 酒馆召唤
                //             this.OpenSummonView();
                //             break;
                //         case FuncType.FT_UPGRADE_QUALITY: // 英雄祭坛
                //             this.OpenHeroAltarView();
                //             break;
                //         case FuncType.FT_RECHARGE: // 英雄祭坛
                //             this.OpenHeroAltarView();
                //             break;
                //         case FuncType.FT_EQUIP: // 装备强化
                //             this.OpenHeroListView();
                //             break;
                //         case FuncType.FT_ACTIVE_DEGREE: //任务界面
                //             this.OpenMainRWView();
                //             break;
                //         default:
                //             UITipManager.Instance.tipPanelText = "未找到需要打开的面板！类型 " + funcType;
                //             UIOpenOrHideManager.Instance.OpenTipsTCView();
                //     }
                // }
                //流海屏 UI层偏移位置
                UIOpenOrHideManager.prototype.liuhaiOffset = function () {
                    if (PlatformUtil_1.PlatformUtil.isLiuHai == false) {
                        if (miniGame_1.miniGame.wxSystemInfo && miniGame_1.miniGame.wxSystemInfo.safeArea) { //判断流海屏
                            //如果是流海屏
                            PlatformUtil_1.PlatformUtil.isLiuHai = miniGame_1.miniGame.wxSystemInfo.safeArea.left > 0; //||res.safeArea.top>0;
                            // console.error("是否流海屏 " + PlatformUtil.isLiuHai);
                            if (PlatformUtil_1.PlatformUtil.isLiuHai) { //流海屏 UI层偏移位置
                                var num = 45;
                                UiManager_1.UiManager.baselayer.transform.setLayoutValue(m4m.framework.layoutOption.LEFT, num);
                                UiManager_1.UiManager.baselayer.transform.markDirty();
                                UiManager_1.UiManager.midlayer.transform.setLayoutValue(m4m.framework.layoutOption.LEFT, num);
                                UiManager_1.UiManager.midlayer.transform.markDirty();
                                UiManager_1.UiManager.highlayer.transform.setLayoutValue(m4m.framework.layoutOption.LEFT, num);
                                UiManager_1.UiManager.highlayer.transform.markDirty();
                                // console.error("是否流海屏 移动位置 " + PlatformUtil.isLiuHai);
                            }
                        }
                    }
                };
                //调用场景显示
                UIOpenOrHideManager.prototype.loadSceneFun = function (sceneID, uiName) {
                    if (uiName === void 0) { uiName = null; }
                    //显示目标场景
                    var sceneShowEvent = new sceneShowEvent_1.SceneShowEvent();
                    sceneShowEvent.sceneID = sceneID;
                    sceneShowEvent.uiName = uiName;
                    eventMgr_1.EventMgr.dispatchEvent("scene_show", sceneShowEvent);
                };
                /**关闭 英雄详情界面*/
                UIOpenOrHideManager.prototype.hideHeroView = function () {
                    this.hideSceneFun(GameMgr_6.GameMgr.heroDetailsSceneID);
                };
                //调用场景显示
                UIOpenOrHideManager.prototype.hideSceneFun = function (sceneID) {
                    //显示目标场景
                    var sceneShowEvent = new sceneHideEvent_1.SceneHideEvent();
                    sceneShowEvent.sceneID = sceneID;
                    sceneShowEvent.dispose = false;
                    eventMgr_1.EventMgr.dispatchEvent("scene_hide", sceneShowEvent);
                };
                // /*关闭单人大厅按钮界面*/
                UIOpenOrHideManager.prototype.HideHallView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.Hall);
                };
                // /*打开单人大厅按钮界面*/
                UIOpenOrHideManager.prototype.OpenHallView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.Hall);
                };
                /** 打开摇杆ui */
                UIOpenOrHideManager.prototype.OpenRockerView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.rocker);
                };
                /** 打开登录ui */
                UIOpenOrHideManager.prototype.OpenTestView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.test);
                };
                /** 关闭登录ui */
                UIOpenOrHideManager.prototype.HideTestView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.test);
                };
                /** 打开游戏中UI */
                UIOpenOrHideManager.prototype.OpenGamingView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.gaming, null, false);
                };
                /** 关闭游戏中UI */
                UIOpenOrHideManager.prototype.HideGamingView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.gaming);
                };
                /** 打开通用结算 */
                UIOpenOrHideManager.prototype.OpenCountdownView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.countdown);
                };
                /** 关闭通用结算 */
                UIOpenOrHideManager.prototype.HideCountdownView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.countdown);
                };
                /** 打开新loading */
                UIOpenOrHideManager.prototype.OpenTloadingView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.tloading);
                };
                /** 关闭新loading */
                UIOpenOrHideManager.prototype.HideTloadingView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.tloading);
                };
                /** 打开手机操作引导图 */
                UIOpenOrHideManager.prototype.OpenTutorialmbView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.tutorialmb);
                };
                /** 关闭手机操作引导图 */
                UIOpenOrHideManager.prototype.HideTutorialmbView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.tutorialmb);
                };
                /** 打开pc操作引导图 */
                UIOpenOrHideManager.prototype.OpenTutorialpcView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.tutorialpc);
                };
                /** 关闭pc操作引导图 */
                UIOpenOrHideManager.prototype.HideTutorialpcView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.tutorialpc);
                };
                /**开启多人大厅等待文字提示*/
                UIOpenOrHideManager.prototype.OpentxtbgView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.txtbg, null, false);
                };
                /**关闭多人大厅等待文字提示*/
                UIOpenOrHideManager.prototype.HidetxtbgView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.txtbg);
                };
                /**开启信号提示*/
                UIOpenOrHideManager.prototype.OpensignalsView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.signals, null, false);
                };
                /** 打开loading界面 */
                UIOpenOrHideManager.prototype.OpenLoadingView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.loading);
                };
                /** 关闭loading界面 */
                UIOpenOrHideManager.prototype.HideLoadingView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.loading);
                };
                /**关闭信号提示*/
                UIOpenOrHideManager.prototype.HidesignalsView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.signals);
                };
                /** 打开tips */
                UIOpenOrHideManager.prototype.OpenTipsTCView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.tips);
                };
                /** 关闭tips */
                UIOpenOrHideManager.prototype.HideTipsTCView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.tips);
                };
                /** 打开圆环旋转loading */
                UIOpenOrHideManager.prototype.OpenWloadingView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.wloading);
                };
                /** 关闭圆环旋转loading */
                UIOpenOrHideManager.prototype.HideWloadingView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.wloading);
                };
                /** 打开链接钱包 */
                UIOpenOrHideManager.prototype.OpenConnectWalletView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.connect);
                };
                /** 关闭链接钱包 */
                UIOpenOrHideManager.prototype.HideConnectWalletView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.connect);
                };
                UIOpenOrHideManager.prototype.OpenSteerView = function () {
                    UiManager_1.UiManager.showUi(UiNames_1.UiNames.Steer);
                };
                UIOpenOrHideManager.prototype.HideSteerView = function () {
                    UiManager_1.UiManager.hideUi(UiNames_1.UiNames.Steer);
                };
                // public set showRoomEuler(v) { this._showRoomEuler = v; this.refreashShowRoompaltformEuler(); }
                // public get showRoomEuler() { return this._showRoomEuler; }
                //是否可以显示loading
                UIOpenOrHideManager.needShowLoading = true;
                return UIOpenOrHideManager;
            }());
            exports_19("UIOpenOrHideManager", UIOpenOrHideManager);
        }
    };
});
System.register("Manager/UITipManager", [], function (exports_20, context_20) {
    "use strict";
    var UITipManager, TipPanelType;
    var __moduleName = context_20 && context_20.id;
    return {
        setters: [],
        execute: function () {
            //弹出提示框 数据
            UITipManager = /** @class */ (function () {
                function UITipManager() {
                    this.tipPanelText = "";
                }
                Object.defineProperty(UITipManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new UITipManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                return UITipManager;
            }());
            exports_20("UITipManager", UITipManager);
            (function (TipPanelType) {
                TipPanelType[TipPanelType["rest"] = 0] = "rest";
                TipPanelType[TipPanelType["mistake"] = 1] = "mistake";
            })(TipPanelType || (exports_20("TipPanelType", TipPanelType = {})));
        }
    };
});
System.register("Net/PingTimeManager", ["PSDUI/UiDataManager", "Time/CTimer", "Time/TimeUtil", "Data/BindKeyName", "Net/WebsocketTool"], function (exports_21, context_21) {
    "use strict";
    var UiDataManager_2, CTimer_1, TimeUtil_2, BindKeyName_2, WebsocketTool_1, NetworkQualityType, PingTimeManager;
    var __moduleName = context_21 && context_21.id;
    return {
        setters: [
            function (UiDataManager_2_1) {
                UiDataManager_2 = UiDataManager_2_1;
            },
            function (CTimer_1_1) {
                CTimer_1 = CTimer_1_1;
            },
            function (TimeUtil_2_1) {
                TimeUtil_2 = TimeUtil_2_1;
            },
            function (BindKeyName_2_1) {
                BindKeyName_2 = BindKeyName_2_1;
            },
            function (WebsocketTool_1_1) {
                WebsocketTool_1 = WebsocketTool_1_1;
            }
        ],
        execute: function () {
            /**
             * 网络品质类型
             */
            (function (NetworkQualityType) {
                NetworkQualityType[NetworkQualityType["height"] = 1] = "height";
                NetworkQualityType[NetworkQualityType["middle"] = 2] = "middle";
                NetworkQualityType[NetworkQualityType["low"] = 3] = "low";
            })(NetworkQualityType || (exports_21("NetworkQualityType", NetworkQualityType = {})));
            //ping 时间管理
            PingTimeManager = /** @class */ (function () {
                function PingTimeManager() {
                    this.pingtimeStart = 0;
                    //每1秒
                    CTimer_1.CTimer.Instance.loopTimeUpdate(1000, this.updateFun.bind(this));
                }
                Object.defineProperty(PingTimeManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new PingTimeManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //返回当前网络质量品质
                PingTimeManager.prototype.getNetworkQuality = function () {
                    if (this.timeQualityNum <= 100) {
                        return NetworkQualityType.height;
                    }
                    if (this.timeQualityNum <= 200 && this.timeQualityNum > 100) {
                        return NetworkQualityType.middle;
                    }
                    return NetworkQualityType.low;
                };
                //
                PingTimeManager.prototype.pingTimeFun = function () {
                    // let gameTime: number = Math.floor(TimeUtil.realtimeSinceStartup / 1000);
                    // console.error("当前游戏启动时间秒 " + gameTime);
                    this.pingtimeStart = TimeUtil_2.TimeUtil.realtimeSinceStartup;
                    WebsocketTool_1.WebsocketTool.Instance.ServerManager_ping();
                };
                //收到服务器返回
                PingTimeManager.prototype.serverBackFun = function () {
                    //毫秒
                    this.timeQualityNum = TimeUtil_2.TimeUtil.realtimeSinceStartup - this.pingtimeStart; //
                    UiDataManager_2.UiDataManager.changeFunctionData(BindKeyName_2.BindKeyName.Network, this.timeQualityNum);
                    // console.error("网络延迟 ", this.timeQualityNum,"毫秒");
                };
                PingTimeManager.prototype.updateFun = function () {
                    // 
                    this.pingTimeFun();
                };
                return PingTimeManager;
            }());
            exports_21("PingTimeManager", PingTimeManager);
        }
    };
});
System.register("Net/NetWebsocket", ["Manager/UIOpenOrHideManager", "Manager/UITipManager", "Net/PingTimeManager", "Net/WebsocketTool"], function (exports_22, context_22) {
    "use strict";
    var UIOpenOrHideManager_1, UITipManager_1, PingTimeManager_1, WebsocketTool_2, NetWebscoket;
    var __moduleName = context_22 && context_22.id;
    return {
        setters: [
            function (UIOpenOrHideManager_1_1) {
                UIOpenOrHideManager_1 = UIOpenOrHideManager_1_1;
            },
            function (UITipManager_1_1) {
                UITipManager_1 = UITipManager_1_1;
            },
            function (PingTimeManager_1_1) {
                PingTimeManager_1 = PingTimeManager_1_1;
            },
            function (WebsocketTool_2_1) {
                WebsocketTool_2 = WebsocketTool_2_1;
            }
        ],
        execute: function () {
            NetWebscoket = /** @class */ (function () {
                function NetWebscoket() {
                }
                Object.defineProperty(NetWebscoket, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new NetWebscoket();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                NetWebscoket.prototype.connect = function (url) {
                    // console.log("开始链接服务器*** " + url);
                    // this._webscoket = new WebSocket(url);//"wss://hse-dev-qq.upaidui.com"
                    if (url == null) {
                        console.error("服务器 地址出错！" + url);
                        return;
                    }
                    // url = "wss://kingzet.cn";
                    console.log("开始链接服务器 " + url);
                    this._webscoket = new WebSocket(url);
                    this._webscoket["onmessage"] = this.onmessage.bind(this);
                    this._webscoket["onopen"] = this.onopen.bind(this);
                    this._webscoket["onclose"] = this.onclose.bind(this);
                    this._webscoket["onerror"] = this.onerror.bind(this);
                };
                NetWebscoket.prototype.onmessage = function (e) {
                    return __awaiter(this, void 0, void 0, function () {
                        var notCode, buffer, messObj, messStr, messageObj, title, tipType, context;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, WebsocketTool_2.WebsocketTool.Instance.onmessage(e)];
                                case 1:
                                    notCode = _a.sent();
                                    // console.log(`byteLength : ${(e.data as ArrayBuffer).byteLength}` , e.data);
                                    // e.data.arrayBuffer()
                                    //     .then((buffer) => {
                                    //         console.error("处理 ArrayBuffer 数据的代码……");
                                    //     });
                                    if (notCode) {
                                        return [2 /*return*/];
                                    }
                                    if (!e.data.arrayBuffer) return [3 /*break*/, 3];
                                    return [4 /*yield*/, e.data.arrayBuffer()];
                                case 2:
                                    buffer = _a.sent();
                                    return [3 /*break*/, 4];
                                case 3:
                                    buffer = e.data;
                                    _a.label = 4;
                                case 4:
                                    if (typeof (buffer) == "string") {
                                        if (buffer.indexOf("[LOG]") == -1) {
                                            messObj = JSON.parse(buffer);
                                            //ping Time
                                            if (messObj.functionName == "ping") {
                                                //
                                                PingTimeManager_1.PingTimeManager.Instance.serverBackFun();
                                            }
                                            else {
                                                if (messObj.className == "Tip" && messObj.functionName == "Message") {
                                                    messStr = messObj.args[0];
                                                    messageObj = JSON.parse(messStr);
                                                    title = messageObj.title;
                                                    tipType = messageObj.tipType;
                                                    context = messageObj.context;
                                                    console.log(title, tipType, context);
                                                    if (tipType == 0) {
                                                        UITipManager_1.UITipManager.Instance.tipPanelText = "Login denied\nThe account has been logged in to another device\nPlease refresh the page and re-enter the game";
                                                        UITipManager_1.UITipManager.Instance.type = UITipManager_1.TipPanelType.mistake;
                                                    }
                                                    else {
                                                        UITipManager_1.UITipManager.Instance.tipPanelText = context;
                                                        UITipManager_1.UITipManager.Instance.type = UITipManager_1.TipPanelType.rest;
                                                    }
                                                    UIOpenOrHideManager_1.UIOpenOrHideManager.Instance.OpenTipsTCView();
                                                }
                                                else {
                                                    console.error(messObj);
                                                }
                                            }
                                            if (messObj.className == "newUser") {
                                                UIOpenOrHideManager_1.UIOpenOrHideManager.Instance.HideTloadingView();
                                                // UIOpenOrHideManager.Instance.OpenCreateCharacterView();  // 进入创建角色
                                            }
                                            // if (messObj.functionName == "login") {
                                            //     //登录成功返回
                                            //     UIOpenOrHideManager.Instance.HideTestView();
                                            //     //
                                            //     let roleArr = messObj.args[0];
                                            //     StageMgr.onLoginServerSuccess();
                                            // }
                                            // if (messObj.functionName == "creatARoom") {
                                            //     //加载房间场景
                                            // }
                                            // if (messObj.functionName == "addToRoom") {
                                            //     //进入游戏开始前等待房间
                                            //     let roleArr = messObj.args[0];
                                            //     StageMgr.createRole(roleArr);
                                            // }
                                            // if (messObj.functionName == "loadGame") {
                                            //     //开始加载游戏场景
                                            //     let roleArr = messObj.args[0];
                                            //     StageMgr.loadGameScene(roleArr);
                                            // }
                                            // if (messObj.functionName == "startGame") {
                                            //     //可以开始游戏
                                            // }
                                            // if (messObj.functionName == "updataGame") {
                                            //     //同步玩家数据
                                            //     let roleArr = messObj.args[0];
                                            //     StageMgr.moveRole(roleArr);
                                            // }
                                        }
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                NetWebscoket.prototype.sendMessage = function (buff) {
                    console.error("发送消息", buff.toString());
                    // console.error(buff.join());
                    // this.rnetStream.Write(buff, 0, buff.length);
                    NetWebscoket.Instance.send(buff);
                };
                NetWebscoket.prototype.onopen = function (e) {
                    console.log("WebSocket连接成功! 开始链接服务器onopen");
                };
                NetWebscoket.prototype.send = function (bytes) {
                    // console.error("发送");
                    // console.error(bytes.join());
                    if (this._webscoket && this._webscoket.readyState == 1) {
                        this._webscoket.send(bytes);
                    }
                    else {
                        console.error("谁的傻逼代码 服务器都还没连上就调发送了111！");
                    }
                };
                NetWebscoket.prototype.sendStr = function (mess) {
                    // console.error("发送");
                    if (this._webscoket && this._webscoket.readyState == 1) {
                        this._webscoket.send(mess);
                    }
                    else {
                        console.error("谁的傻逼代码 服务器都还没连上就调发送了222！");
                    }
                };
                NetWebscoket.prototype.onclose = function (e) {
                    console.error("socket close  连接关闭连接关闭连接关闭。。。", e);
                    UITipManager_1.UITipManager.Instance.tipsData = 1;
                    UITipManager_1.UITipManager.Instance.tipPanelText = "Server disconnected\nPlease refresh the page and re-enter the game";
                    UITipManager_1.UITipManager.Instance.type = UITipManager_1.TipPanelType.mistake;
                    UIOpenOrHideManager_1.UIOpenOrHideManager.Instance.OpenTipsTCView();
                };
                NetWebscoket.prototype.onerror = function (e) {
                    console.error(e);
                    console.log("socket error", e);
                    if (UITipManager_1.UITipManager.Instance.tipsData != 1) {
                        UITipManager_1.UITipManager.Instance.tipPanelText = e;
                        UITipManager_1.UITipManager.Instance.type = UITipManager_1.TipPanelType.mistake;
                        UIOpenOrHideManager_1.UIOpenOrHideManager.Instance.OpenTipsTCView();
                    }
                };
                NetWebscoket.prototype.Close = function () {
                    if (this._webscoket) {
                        this._webscoket.close();
                    }
                };
                /**********是否需要请求 配置数据***********
                */
                NetWebscoket.reqconfigMes = true;
                return NetWebscoket;
            }());
            exports_22("NetWebscoket", NetWebscoket);
        }
    };
});
System.register("Net/WebsocketTool", ["Net/NetWebsocket", "Net/WsDataManager"], function (exports_23, context_23) {
    "use strict";
    var NetWebsocket_1, WsDataManager_2, WebsocketTool;
    var __moduleName = context_23 && context_23.id;
    return {
        setters: [
            function (NetWebsocket_1_1) {
                NetWebsocket_1 = NetWebsocket_1_1;
            },
            function (WsDataManager_2_1) {
                WsDataManager_2 = WsDataManager_2_1;
            }
        ],
        execute: function () {
            WebsocketTool = /** @class */ (function () {
                function WebsocketTool() {
                }
                Object.defineProperty(WebsocketTool, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new WebsocketTool();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                WebsocketTool.prototype.onmessage = function (e) {
                    return __awaiter(this, void 0, void 0, function () {
                        var buffer, messObj, key, element;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!e.data.arrayBuffer) return [3 /*break*/, 2];
                                    return [4 /*yield*/, e.data.arrayBuffer()];
                                case 1:
                                    buffer = _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    buffer = e.data;
                                    _a.label = 3;
                                case 3:
                                    if (typeof (buffer) == "string") {
                                        if (!buffer.startsWith("[LOG]")) {
                                            messObj = JSON.parse(buffer);
                                            if (messObj.argsType == "code") {
                                                return [2 /*return*/, false];
                                            }
                                            if (messObj.functionName == "All") {
                                                WsDataManager_2.WsDataManager.setData(messObj.className, messObj.args[0]);
                                            }
                                            else if (messObj.functionName == "ChangeList") {
                                                WsDataManager_2.WsDataManager.changeDataList(messObj.className, messObj.args[0]);
                                            }
                                            else {
                                                for (key in messObj.args) {
                                                    element = messObj.args[key];
                                                    WsDataManager_2.WsDataManager.changeData(messObj.className, messObj.functionName, messObj.argsType, element);
                                                }
                                            }
                                            return [2 /*return*/, true];
                                        }
                                    }
                                    return [2 /*return*/, false];
                            }
                        });
                    });
                };
                WebsocketTool.prototype.getMsg = function (className, functionName, text) {
                    var mess = "{\"currentType\":null,\"type\":null,\"callTime\":\"0001-01-01T00:00:00\",\"callid\":0,\"timeout\":0,\"className\":\"".concat(className, "\",\"functionName\":\"").concat(functionName, "\",\"argsType\":null,\n        \"args\":[").concat(text, "],\"returnType\":null,\"returnValue\":null}");
                    return mess;
                };
                /***
                 * 同步游戏信息 dataInfo:同步信息
                 */
                WebsocketTool.prototype.GameManager_updataGame = function (dataInfo) {
                    var paramJsons = "".concat(JSON.stringify(dataInfo));
                    var mess = this.getMsg("GameManager", "updataGame", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 退出游戏
                 */
                WebsocketTool.prototype.GameManager_outGame = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("GameManager", "outGame", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取游戏开放信息
                 */
                WebsocketTool.prototype.GameOpenManager_getGameOpenInfo = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("GameOpenManager", "getGameOpenInfo", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 玩家注册新账号,userInfoJson:玩家信息,passWord:密码,name:玩家名字,face:脸ID,hair:头发id
                 */
                WebsocketTool.prototype.LoginManager_creatAndLoginWallet = function (userInfoJson, passWord, name, face, hair) {
                    var paramJsons = "".concat(JSON.stringify(userInfoJson), ",").concat(JSON.stringify(passWord), ",").concat(JSON.stringify(name), ",").concat(JSON.stringify(face), ",").concat(JSON.stringify(hair));
                    var mess = this.getMsg("LoginManager", "creatAndLoginWallet", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 玩家注册新账号不经过钱包,userID:玩家id,passWord:密码,name:玩家名字,face:脸ID,hair:头发id
                 */
                WebsocketTool.prototype.LoginManager_creatAndLogin = function (userID, passWord, name, face, hair) {
                    var paramJsons = "".concat(JSON.stringify(userID), ",").concat(JSON.stringify(passWord), ",").concat(JSON.stringify(name), ",").concat(JSON.stringify(face), ",").concat(JSON.stringify(hair));
                    var mess = this.getMsg("LoginManager", "creatAndLogin", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 玩家登录不使用钱包,userId:玩家ID,passWord:密码
                 */
                WebsocketTool.prototype.LoginManager_loginWithOutWallet = function (userId, passWord, playerName) {
                    var paramJsons = "".concat(JSON.stringify(userId), ",").concat(JSON.stringify(passWord), ",").concat(JSON.stringify(playerName));
                    var mess = this.getMsg("LoginManager", "loginWithOutWallet", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 玩家登录使用钱包,userInfoJson:玩家信息,passWord:密码
                 */
                WebsocketTool.prototype.LoginManager_login = function (userInfoJson, passWord, playerName) {
                    var paramJsons = "".concat(JSON.stringify(userInfoJson), ",").concat(JSON.stringify(passWord), ",").concat(JSON.stringify(playerName));
                    var mess = this.getMsg("LoginManager", "login", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取邮件
                 */
                WebsocketTool.prototype.MailManager_getMails = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("MailManager", "getMails", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取邮件道具,itemDataID:道具ID
                 */
                WebsocketTool.prototype.MailManager_getMailItem = function (itemDataID) {
                    var paramJsons = "".concat(JSON.stringify(itemDataID));
                    var mess = this.getMsg("MailManager", "getMailItem", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过邮件ID获取邮件道具,mailID:邮件ID
                 */
                WebsocketTool.prototype.MailManager_getMailItemByMailID = function (mailID) {
                    var paramJsons = "".concat(JSON.stringify(mailID));
                    var mess = this.getMsg("MailManager", "getMailItemByMailID", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过邮件ID删除邮件,mailID:邮件ID
                 */
                WebsocketTool.prototype.MailManager_updateMailItemByMailID = function (mailID) {
                    var paramJsons = "".concat(JSON.stringify(mailID));
                    var mess = this.getMsg("MailManager", "updateMailItemByMailID", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取木头人排行列表 rankType:列表类型 1：日榜 2：周榜 3：月榜  page:页数
                 */
                WebsocketTool.prototype.RankManager_getRankList = function (rankType, page) {
                    var paramJsons = "".concat(JSON.stringify(rankType), ",").concat(JSON.stringify(page));
                    var mess = this.getMsg("RankManager", "getRankList", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取糖饼排行列表 rankType:列表类型 1：日榜 2：周榜 3：月榜  page:页数
                 */
                WebsocketTool.prototype.RankManager_getCookieRankList = function (rankType, page) {
                    var paramJsons = "".concat(JSON.stringify(rankType), ",").concat(JSON.stringify(page));
                    var mess = this.getMsg("RankManager", "getCookieRankList", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取木头人实时排行列表 rankType:列表类型 1：日榜 2：周榜 3：月榜  page:页数
                 */
                WebsocketTool.prototype.RankManager_getNowRankList = function (rankType, page) {
                    var paramJsons = "".concat(JSON.stringify(rankType), ",").concat(JSON.stringify(page));
                    var mess = this.getMsg("RankManager", "getNowRankList", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取糖饼实时排行列表 rankType:列表类型 1：日榜 2：周榜 3：月榜  page:页数
                 */
                WebsocketTool.prototype.RankManager_getCookieNowRankList = function (rankType, page) {
                    var paramJsons = "".concat(JSON.stringify(rankType), ",").concat(JSON.stringify(page));
                    var mess = this.getMsg("RankManager", "getCookieNowRankList", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取自身排行 rankType:列表类型 1：日榜 2：周榜 3：月榜
                 */
                WebsocketTool.prototype.RankManager_getSelfRank = function (rankType) {
                    var paramJsons = "".concat(JSON.stringify(rankType));
                    var mess = this.getMsg("RankManager", "getSelfRank", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取糖饼自身排行 rankType:列表类型 1：日榜 2：周榜 3：月榜
                 */
                WebsocketTool.prototype.RankManager_getCookieSelfRank = function (rankType) {
                    var paramJsons = "".concat(JSON.stringify(rankType));
                    var mess = this.getMsg("RankManager", "getCookieSelfRank", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取木头人实时自身排行 rankType:列表类型 1：日榜 2：周榜 3：月榜
                 */
                WebsocketTool.prototype.RankManager_getNowSelfRank = function (rankType) {
                    var paramJsons = "".concat(JSON.stringify(rankType));
                    var mess = this.getMsg("RankManager", "getNowSelfRank", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取糖饼实时自身排行 rankType:列表类型 1：日榜 2：周榜 3：月榜
                 */
                WebsocketTool.prototype.RankManager_getCookieNowSelfRank = function (rankType) {
                    var paramJsons = "".concat(JSON.stringify(rankType));
                    var mess = this.getMsg("RankManager", "getCookieNowSelfRank", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 准备完成
                 */
                WebsocketTool.prototype.RoomManager_readyForGame = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("RoomManager", "readyForGame", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改服务器时间,count：时间便宜量，单位秒
                 */
                WebsocketTool.prototype.ServerManager_timePlus = function (count) {
                    var paramJsons = "".concat(JSON.stringify(count));
                    var mess = this.getMsg("ServerManager", "timePlus", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 心跳检测
                 */
                WebsocketTool.prototype.ServerManager_heartBeat = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ServerManager", "heartBeat", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 延迟检测
                 */
                WebsocketTool.prototype.ServerManager_ping = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ServerManager", "ping", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取服务器时间
                 */
                WebsocketTool.prototype.ServerManager_servertime = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("ServerManager", "servertime", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取设置数据
                 */
                WebsocketTool.prototype.SettingManager_ObtainTing = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("SettingManager", "ObtainTing", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 修改设置数据
                 */
                WebsocketTool.prototype.SettingManager_ModifyTing = function (SettingData) {
                    var paramJsons = "".concat(JSON.stringify(SettingData));
                    var mess = this.getMsg("SettingManager", "ModifyTing", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取商品列表，shopId:商店ID)
                 */
                WebsocketTool.prototype.ShopManager_getShopInfo = function (shopId) {
                    var paramJsons = "".concat(JSON.stringify(shopId));
                    var mess = this.getMsg("ShopManager", "getShopInfo", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 购买商品，goodsId:商店ID,shopType:货币类型)
                 */
                WebsocketTool.prototype.ShopManager_buyShopGoods = function (goodsId, shopType) {
                    var paramJsons = "".concat(JSON.stringify(goodsId), ",").concat(JSON.stringify(shopType));
                    var mess = this.getMsg("ShopManager", "buyShopGoods", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 购买门票验证，使用数字货币验证的话就和数字货币服务器通讯获取门票,gameType 游戏类型)
                 */
                WebsocketTool.prototype.TicketManager_getTicket = function (gameType) {
                    var paramJsons = "".concat(JSON.stringify(gameType));
                    var mess = this.getMsg("TicketManager", "getTicket", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 购买门票不经过钱包，count购买数量,gameType:游戏类型)
                 */
                WebsocketTool.prototype.TicketManager_getTicketWithOutWallet = function (count, gameType) {
                    var paramJsons = "".concat(JSON.stringify(count), ",").concat(JSON.stringify(gameType));
                    var mess = this.getMsg("TicketManager", "getTicketWithOutWallet", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取所有门票信息)
                 */
                WebsocketTool.prototype.TicketManager_getAllTicketInfo = function () {
                    var paramJsons = "";
                    var mess = this.getMsg("TicketManager", "getAllTicketInfo", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 获取门票信息，gameId:游戏ID)
                 */
                WebsocketTool.prototype.TicketManager_getTicketId = function (gameId) {
                    var paramJsons = "".concat(JSON.stringify(gameId));
                    var mess = this.getMsg("TicketManager", "getTicketId", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 支付门票开始进入游戏房，gameId:游戏ID)
                 */
                WebsocketTool.prototype.TicketManager_useTickToGameRoom = function (gameId) {
                    var paramJsons = "".concat(JSON.stringify(gameId));
                    var mess = this.getMsg("TicketManager", "useTickToGameRoom", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过玩家userId获得玩家数据,userId:玩家UID
                 */
                WebsocketTool.prototype.UserManager_getUser = function (userId) {
                    var paramJsons = "".concat(JSON.stringify(userId));
                    var mess = this.getMsg("UserManager", "getUser", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过玩家userID修改昵称，userID:玩家ID,playerName:玩家昵称,itemDataId:道具ID
                 */
                WebsocketTool.prototype.UserManager_updataUser = function (userID, playerName, itemDataId) {
                    var paramJsons = "".concat(JSON.stringify(userID), ",").concat(JSON.stringify(playerName), ",").concat(JSON.stringify(itemDataId));
                    var mess = this.getMsg("UserManager", "updataUser", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过玩家userID修改游戏经历是否打开，userID:玩家ID
                 */
                WebsocketTool.prototype.UserManager_updataUserexpice = function (userID) {
                    var paramJsons = "".concat(JSON.stringify(userID));
                    var mess = this.getMsg("UserManager", "updataUserexpice", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                /***
                 * 通过玩家userID修改玩家头像,userID:玩家ID,playericon:玩家头像
                 */
                WebsocketTool.prototype.UserManager_updataplayericon = function (userID, playericon) {
                    var paramJsons = "".concat(JSON.stringify(userID), ",").concat(JSON.stringify(playericon));
                    var mess = this.getMsg("UserManager", "updataplayericon", "".concat(paramJsons));
                    NetWebsocket_1.NetWebscoket.Instance.sendStr(mess);
                };
                return WebsocketTool;
            }());
            exports_23("WebsocketTool", WebsocketTool);
        }
    };
});
System.register("Role/actStates/RoleActState", [], function (exports_24, context_24) {
    "use strict";
    var __moduleName = context_24 && context_24.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("Role/actStates/AttackState", ["GameEnum"], function (exports_25, context_25) {
    "use strict";
    var GameEnum_1, AttackState;
    var __moduleName = context_25 && context_25.id;
    return {
        setters: [
            function (GameEnum_1_1) {
                GameEnum_1 = GameEnum_1_1;
            }
        ],
        execute: function () {
            AttackState = /** @class */ (function () {
                function AttackState() {
                    this.timeOut = 0;
                    this.state = GameEnum_1.RoleActInput.Attack;
                    AttackState.stateArr = [GameEnum_1.RoleActInput.Direction_Release, GameEnum_1.RoleActInput.Direction, GameEnum_1.RoleActInput.SpeedUp, GameEnum_1.RoleActInput.StrikeToFly];
                }
                AttackState.prototype.enter = function (_role, prevState) {
                    if (!_role) {
                        return;
                    }
                    _role.attack(prevState);
                };
                // public handleInput(_role: Role, _input: RoleActInput): IRoleActState {
                //     return null;
                // }
                AttackState.prototype.canChange = function (_input, _role) {
                    return _input == GameEnum_1.RoleActInput.StrikeToFly || (!_role.isAttacking && AttackState.stateArr.indexOf(_input) != -1);
                };
                AttackState.prototype.update = function (_role, dt) {
                    if (_role) {
                        _role.walk(dt);
                    }
                };
                AttackState.stateArr = [];
                return AttackState;
            }());
            exports_25("AttackState", AttackState);
        }
    };
});
System.register("Role/AI/AiInterface", [], function (exports_26, context_26) {
    "use strict";
    var AIType;
    var __moduleName = context_26 && context_26.id;
    return {
        setters: [],
        execute: function () {
            /** AI 类型
             */
            (function (AIType) {
                /** 闲逛 */
                AIType[AIType["Ramble"] = 0] = "Ramble";
                /** 木头人 玩家AI */
                AIType[AIType["WoodenPeople"] = 1] = "WoodenPeople";
            })(AIType || (exports_26("AIType", AIType = {})));
        }
    };
});
System.register("Res/ResMgr", ["Data/ExcelDataMgr", "Data/Map", "eventMgr", "Loader/loadMgr", "Tools/TaskManager", "Data/configMgr", "GameMgr"], function (exports_27, context_27) {
    "use strict";
    var ExcelDataMgr_1, Map_4, eventMgr_2, loadMgr_1, TaskManager_1, configMgr_1, GameMgr_7, ResMgr;
    var __moduleName = context_27 && context_27.id;
    return {
        setters: [
            function (ExcelDataMgr_1_1) {
                ExcelDataMgr_1 = ExcelDataMgr_1_1;
            },
            function (Map_4_1) {
                Map_4 = Map_4_1;
            },
            function (eventMgr_2_1) {
                eventMgr_2 = eventMgr_2_1;
            },
            function (loadMgr_1_1) {
                loadMgr_1 = loadMgr_1_1;
            },
            function (TaskManager_1_1) {
                TaskManager_1 = TaskManager_1_1;
            },
            function (configMgr_1_1) {
                configMgr_1 = configMgr_1_1;
            },
            function (GameMgr_7_1) {
                GameMgr_7 = GameMgr_7_1;
            }
        ],
        execute: function () {
            ResMgr = /** @class */ (function () {
                function ResMgr() {
                }
                //初始资源列表 注册
                ResMgr.setLoadUrls = function () {
                    //this.lReslist.push(`xxx/xxxx`);
                    //this.lReslist.push(`xxx/xxxx`);
                    //this.lReslist.push(``);
                    //this.lReslist.push(``);
                };
                ResMgr.init = function () {
                    if (this.isInit) {
                        return;
                    }
                    this.isInit = true;
                    //设置列表
                    this.setLoadUrls();
                    //并行资源加载
                    var pTaskArr = [];
                    var len = ResMgr.lReslist.length;
                    for (var i = 0; i < len; i++) {
                        var url = ResMgr.lReslist[i];
                        var t = this.getLoadTask(url);
                        pTaskArr.push(t);
                    }
                    //单json 配置
                    pTaskArr.push(this.loadConfigJsonTask.bind(this)); //配置加载 与 资源列表并行
                    var loadParalleTask = TaskManager_1.TaskManager.parallelArray(pTaskArr);
                    //串行任务，串行执行
                    var funs = TaskManager_1.TaskManager.serial(this.loadShaderTask, this.loadExcalJSTask, this.loadExcelConfigTask.bind(this), loadParalleTask, this.configInitTask);
                    //执行任务 并抛送事件
                    funs(this.postEventTask);
                };
                ResMgr.getLoadTask = function (url) {
                    var result = function (cb) {
                        loadMgr_1.loadMgr.Instance.load(url, cb);
                    };
                    return result;
                };
                ResMgr.getLoadExcelTask = function (cfgName) {
                    var _this = this;
                    var url = "".concat(GameMgr_7.GameMgr.ExcelConfigPath).concat(cfgName, ".json");
                    var result = function (cb) {
                        m4m.io.loadArrayBuffer(url, function (bin, urlStr) {
                            _this.ExcelConfigBufferMap.set(cfgName, bin);
                            cb();
                        });
                    };
                    return result;
                };
                //派发加载完成事件
                ResMgr.postEventTask = function () {
                    eventMgr_2.EventMgr.dispatchEvent("res_dependent_loaded", new eventMgr_2.EventBase());
                    // cb();
                };
                //加载Excel 的JS
                ResMgr.loadExcalJSTask = function (cb) {
                    ExcelDataMgr_1.ExcelDataMgr.initAllDataClass(cb);
                };
                //串行任务，串行执行
                ResMgr.loadExcelConfigTask = function (cb) {
                    //加载表格数据
                    this.ExcelConfigClassList = m4m["__ExcDate__"].__list;
                    var list = ResMgr.ExcelConfigClassList;
                    var len = list.length;
                    var pTaskArr = [];
                    for (var i = 0; i < len; i++) {
                        var classObj = list[i];
                        var t = ResMgr.getLoadExcelTask(classObj.name);
                        pTaskArr.push(t);
                    }
                    //并行处理
                    var actFun = TaskManager_1.TaskManager.parallelArray(pTaskArr);
                    actFun(cb);
                };
                //加载shader
                ResMgr.loadShaderTask = function (cb) {
                    var shaderURL = "".concat(GameMgr_7.GameMgr.shaderPath, "customShader/customShader.assetbundle.json");
                    loadMgr_1.loadMgr.Instance.load(shaderURL, function () {
                        cb();
                    });
                };
                //加载 json 配置
                ResMgr.loadConfigJsonTask = function (cb) {
                    var _this = this;
                    // 非表格 JSON配置    (       游戏内用的excel导出的  base 数据   写上面的加载列表中  )
                    var configs = [
                        "".concat(GameMgr_7.GameMgr.configPath, "config.json"),
                    ];
                    Promise.all(configs.map(function (p) { return _this.loadText(p); }))
                        .then(function (v) {
                        var main = v[0];
                        _this.mainConfig = main;
                        cb();
                    });
                };
                ResMgr.loadText = function (path) {
                    return new Promise(function (res, rej) {
                        m4m.io.loadText(path, function (txt) {
                            res(txt);
                        });
                    });
                };
                ResMgr.configInitTask = function (cb) {
                    configMgr_1.ConfigMgr.init();
                    cb();
                };
                /** 表格配置bufferdata 字典 */
                ResMgr.ExcelConfigBufferMap = new Map_4.cMap();
                ResMgr.lReslist = [];
                ResMgr.isInit = false;
                return ResMgr;
            }());
            exports_27("ResMgr", ResMgr);
        }
    };
});
System.register("Data/configMgr", ["Tools/ioTool", "Res/ResMgr"], function (exports_28, context_28) {
    "use strict";
    var ioTool_1, ResMgr_1, ConfigMgr;
    var __moduleName = context_28 && context_28.id;
    return {
        setters: [
            function (ioTool_1_1) {
                ioTool_1 = ioTool_1_1;
            },
            function (ResMgr_1_1) {
                ResMgr_1 = ResMgr_1_1;
            }
        ],
        execute: function () {
            ConfigMgr = /** @class */ (function () {
                function ConfigMgr() {
                }
                ConfigMgr.init = function () {
                    //json 配置初始化
                    var conf = ResMgr_1.ResMgr.mainConfig;
                    var obj = JSON.parse(conf);
                    this.setConf(obj);
                    //excel 解析
                    var len = ResMgr_1.ResMgr.ExcelConfigClassList.length;
                    for (var i = 0; i < len; i++) {
                        var classObj = ResMgr_1.ResMgr.ExcelConfigClassList[i];
                        try {
                            var bd = ResMgr_1.ResMgr.ExcelConfigBufferMap.get(classObj.name);
                            if (bd) {
                                var bytes = new ioTool_1.ioTool();
                                bytes.write(new Uint8Array(bd));
                                classObj.parseData(bytes);
                                bytes.dispose();
                            }
                        }
                        catch (er) {
                            console.error("".concat(classObj.name, " \u8868\u89E3\u6790\u9519\u8BEF\uFF01\uFF01\uFF01"));
                        }
                    }
                };
                ConfigMgr.setConf = function (obj) {
                    for (var k in obj) {
                        // console.error(obj[k]);
                        ConfigMgr[k] = obj[k];
                    }
                };
                ConfigMgr.print = function () {
                    var c = {};
                    for (var k in ConfigMgr) {
                        c[k] = ConfigMgr[k];
                    }
                    console.error("".concat(JSON.stringify(c)));
                };
                return ConfigMgr;
            }());
            exports_28("ConfigMgr", ConfigMgr);
        }
    };
});
System.register("appMain", ["Data/ExcelDataMgr", "eventMgr", "Loader/otherPlan/testCreat", "PSDUI/UiManager", "Scripts/multiToucher", "Tools/commTool", "Tools/consTool", "Tools/GameInfoUtil", "Tools/htmlCode", "Tools/miniGame", "Tools/PlatformUtil", "UIBase/metaUIManager", "Audio/AudioEnum", "Audio/AudioPlayer", "Core/StageMgr", "Data/configMgr", "GameMgr", "Manager/UIData/UiNames", "Manager/UIOpenOrHideManager", "Net/NetWebsocket", "Res/ResMgr"], function (exports_29, context_29) {
    "use strict";
    var ExcelDataMgr_2, eventMgr_3, testCreat_1, UiManager_2, multiToucher_1, commTool_3, consTool_1, GameInfoUtil_1, htmlCode_1, miniGame_2, PlatformUtil_2, metaUIManager_1, AudioEnum_1, AudioPlayer_1, StageMgr_2, configMgr_2, GameMgr_8, UiNames_2, UIOpenOrHideManager_2, NetWebsocket_2, ResMgr_2, AppMain;
    var __moduleName = context_29 && context_29.id;
    return {
        setters: [
            function (ExcelDataMgr_2_1) {
                ExcelDataMgr_2 = ExcelDataMgr_2_1;
            },
            function (eventMgr_3_1) {
                eventMgr_3 = eventMgr_3_1;
            },
            function (testCreat_1_1) {
                testCreat_1 = testCreat_1_1;
            },
            function (UiManager_2_1) {
                UiManager_2 = UiManager_2_1;
            },
            function (multiToucher_1_1) {
                multiToucher_1 = multiToucher_1_1;
            },
            function (commTool_3_1) {
                commTool_3 = commTool_3_1;
            },
            function (consTool_1_1) {
                consTool_1 = consTool_1_1;
            },
            function (GameInfoUtil_1_1) {
                GameInfoUtil_1 = GameInfoUtil_1_1;
            },
            function (htmlCode_1_1) {
                htmlCode_1 = htmlCode_1_1;
            },
            function (miniGame_2_1) {
                miniGame_2 = miniGame_2_1;
            },
            function (PlatformUtil_2_1) {
                PlatformUtil_2 = PlatformUtil_2_1;
            },
            function (metaUIManager_1_1) {
                metaUIManager_1 = metaUIManager_1_1;
            },
            function (AudioEnum_1_1) {
                AudioEnum_1 = AudioEnum_1_1;
            },
            function (AudioPlayer_1_1) {
                AudioPlayer_1 = AudioPlayer_1_1;
            },
            function (StageMgr_2_1) {
                StageMgr_2 = StageMgr_2_1;
            },
            function (configMgr_2_1) {
                configMgr_2 = configMgr_2_1;
            },
            function (GameMgr_8_1) {
                GameMgr_8 = GameMgr_8_1;
            },
            function (UiNames_2_1) {
                UiNames_2 = UiNames_2_1;
            },
            function (UIOpenOrHideManager_2_1) {
                UIOpenOrHideManager_2 = UIOpenOrHideManager_2_1;
            },
            function (NetWebsocket_2_1) {
                NetWebsocket_2 = NetWebsocket_2_1;
            },
            function (ResMgr_2_1) {
                ResMgr_2 = ResMgr_2_1;
            }
        ],
        execute: function () {
            /** core enter point */
            AppMain = /** @class */ (function () {
                function AppMain() {
                    // window["eruda"].init();
                    //显示loading  UI 界面
                    // UIOpenOrHideManager.Instance.OpenLoadingView();
                    UIOpenOrHideManager_2.UIOpenOrHideManager.Instance.OpenTloadingView();
                    UiManager_2.UiManager.InitUi(UiNames_2.UiNames.tips);
                    // pbtest.AsyncTest01();
                    // console.error("end");
                    // NetworkRegisterManager.init();
                    ExcelDataMgr_2.ExcelDataMgr.init("lib/node_modules/@types/");
                    //
                    // NetWebscoket.Instance.connect("ws://127.0.0.1", 3300);
                    // Ress.init(app).then(() => {  //gdPromise 有问题 故此处理
                    //     configMgr.PreInit();
                    // });
                    consTool_1.consTool.init();
                    //init
                    console.log("appMain inited");
                    // 引擎启动
                    this.initEngine();
                    var app = m4m.framework.sceneMgr.app;
                    //项目启动
                    var width = 1280;
                    var height = 720;
                    //屏幕适配处理
                    //因会被广告位档到  iphone  5  5s   iphone 8  ui整体微调缩小
                    var isLowPix = app.canvasClientHeight <= 414;
                    var pixChange = 1;
                    pixChange = (app.canvasClientHeight * 530) / (height * (app.canvasClientHeight - 135));
                    var screenMatchRate = 1; //如果是以高度固定的 模屏 模式  要把这个值设置为1   默认为竖屏模式
                    //处理窄屏UI适配问题
                    var asp = app.width / app.height;
                    var min = 0.6;
                    var max = 1.68;
                    asp = asp < min ? min : asp;
                    if (asp < max) {
                        screenMatchRate = (asp - min) / (max - min);
                    }
                    //相机ui
                    // UiManager.init(1280,720,1,"","");
                    // uiMgr.init(width, height,screenMatchRate,appMain.UIPath,appMain.atlasPath);
                    UiManager_2.UiManager.init(width, height, screenMatchRate, GameMgr_8.GameMgr.UIPath, GameMgr_8.GameMgr.atlasPath);
                    m4m.framework.batcher2D["limitCount"] = 1024 * 64; //设置 UI vbo buffer 大小上限 ， 不同项目需要平衡（太大太小都不好）。
                    //测试下来 1024 * 64 或 1024 * 128 最优
                    //小游戏平台
                    miniGame_2.miniGame.init(UiManager_2.UiManager);
                    this.setMini();
                    // //初始化服务器连接
                    // if (miniGame.miniType != miniAPIType.none) {
                    //     LoginTool.miniLogin(this.initAccountNetByMini.bind(this));
                    //     // this.initAccountNet();
                    // } else {
                    //     this.initAccountNet();
                    // }
                    // GameMgr.openWalletBol = true;
                    // let id = m4m["accountID"];
                    // if (id != null) {
                    //     id = decodeURI(id);
                    //     if (id == "跳过钱包") {
                    //         GameMgr.openWalletBol = false;
                    //     }
                    // }
                    //gameMgr
                    GameMgr_8.GameMgr.init(app);
                    //testCreat
                    testCreat_1.testCreat.init(GameMgr_8.GameMgr.CDNURL, PlatformUtil_2.PlatformUtil.systemQuality, PlatformUtil_2.PlatformUtil.WXGetSystemPlatformType, GameMgr_8.GameMgr.pathReplaceMap);
                    //animclip 使用test asset模式
                    commTool_3.commTool.enableAnimclipAssetVerTest("TESTAsset/"); //设定匹配 字符串为 TESTAsset/
                    //htmltool
                    htmlCode_1.htmlCode.runCode();
                    //multiToucher
                    multiToucher_1.multiToucher.init(metaUIManager_1.metaUIManager.ActiveSelf.overlay, m4m.framework.sceneMgr.app);
                    //event reg
                    eventMgr_3.EventMgr.addListener("res_dependent_loaded", this.onResLoaded, this);
                    //res
                    ResMgr_2.ResMgr.init();
                    //Audio
                    AudioPlayer_1.AudioPlayer.init();
                    //
                    this.connectWebSocket();
                    //IOS必须由html点击触发声音
                    var playAudio = function () {
                        AudioPlayer_1.AudioPlayer.play(AudioEnum_1.AudioEnum.WoodButtonNormal, 0);
                        console.log("playAudio");
                        window.removeEventListener("touchstart", playAudio, false);
                    };
                    window.addEventListener("touchstart", playAudio, false);
                }
                //连接服务器
                AppMain.prototype.connectWebSocket = function () {
                    // 外网
                    //"wss://kingzet.cn"
                    m4m.io.loadText("res/server.json", function (txt, _err, isFail) {
                        if (isFail) {
                            console.error("load  server.json err : ".concat(_err));
                            return;
                        }
                        var obj = JSON.parse(txt);
                        NetWebsocket_2.NetWebscoket.Instance.connect(obj.SERVER_ID);
                        // console.error(`账号配置加载完毕!`,obj.SERVER_ID);
                    });
                };
                AppMain.prototype.loadTestAccountIDConfig = function () {
                    return new Promise(function (resolve, reject) {
                        var id = m4m["accountID"];
                        if (id == null) {
                            id = "";
                        }
                        console.error("H5版本账号ID  :" + id);
                        m4m.io.loadText("res/accountID/config".concat(id, ".json"), function (txt, _err, isFail) {
                            if (isFail) {
                                console.error("loadTestAccountIDConfig err : ".concat(_err));
                                reject();
                                return;
                            }
                            //set config
                            var obj = JSON.parse(txt);
                            configMgr_2.ConfigMgr.setConf(obj);
                            console.log("\u8D26\u53F7\u914D\u7F6E\u52A0\u8F7D\u5B8C\u6BD5!");
                            resolve(null);
                        });
                    });
                };
                AppMain.prototype.initEngine = function () {
                    var app = m4m.framework.sceneMgr.app;
                    if (!app) {
                        app = new m4m.framework.application();
                        // 引擎启动
                        app.bePlay = true;
                        var rootEle = document.getElementById("gamecontainer");
                        app.start(rootEle, m4m.framework.CanvasFixedType.Free);
                        app.orientation = m4m.framework.OrientationMode.LANDSCAPE;
                        if (window != null) {
                            window.onorientationchange = function () {
                                app.refreshOrientationMode(); //屏幕有旋转时，刷新屏幕方向。
                            };
                        }
                    }
                };
                AppMain.prototype.onResLoaded = function () {
                    console.log("\u524D\u7F6E\u4F9D\u8D56\u8D44\u6E90\u52A0\u8F7D\u5B8C\u6BD5\uFF01");
                    eventMgr_3.EventMgr.removeListener("res_dependent_loaded", this.onResLoaded, this);
                    //stageMgr
                    StageMgr_2.StageMgr.init();
                    // //
                    // Pick3DModelsMgr.init();
                    //多点功能init
                    multiToucher_1.multiToucher.init(UiManager_2.UiManager.overlay, GameMgr_8.GameMgr.app);
                };
                AppMain.prototype.setMini = function () {
                    //PlatformUtil default
                    PlatformUtil_2.PlatformUtil.systemQuality = PlatformUtil_2.SystemQualityType.high;
                    PlatformUtil_2.PlatformUtil.WXGetSystemPlatformType = PlatformUtil_2.PlatformType.PC;
                    var _miniAPIType = "web 浏览器";
                    //mini set
                    if (miniGame_2.miniGame.miniType != miniGame_2.miniAPIType.none) {
                        miniGame_2.miniGame.onMemoryWarning(function (res) {
                            var level = 0;
                            if (res) {
                                level = res.level;
                            }
                            console.warn("\u5FAE\u4FE1\u5185\u5B58\u8B66\u544A\uFF01 onMemoryWarningReceive , \u7EA7\u522B\uFF1A".concat(level));
                            //尝试清理 内存
                            miniGame_2.miniGame.triggerGC();
                        });
                        if (miniGame_2.miniGame.wxSystemInfo) {
                            this.setSysInfoInitOnPlay(miniGame_2.miniGame.wxSystemInfo);
                        }
                        _miniAPIType = miniGame_2.miniAPIType[miniGame_2.miniGame.miniType];
                    }
                    else {
                        PlatformUtil_2.PlatformUtil.WXGetSystemPlatformType = PlatformUtil_2.PlatformUtil.getTypeByBrowser();
                    }
                    PlatformUtil_2.PlatformUtil.platform = PlatformUtil_2.PlatformType[PlatformUtil_2.PlatformUtil.WXGetSystemPlatformType];
                    console.log("h5\u5E73\u53F0 \u7C7B\u578B \uFF1A".concat(_miniAPIType, " \n\u8BBE\u5907\u7C7B\u578B PlatformType \uFF1A ").concat(PlatformUtil_2.PlatformUtil.platform, " "));
                };
                AppMain.prototype.setSysInfoInitOnPlay = function (res) {
                    GameInfoUtil_1.GameInfoUtil.brand = res.brand;
                    GameInfoUtil_1.GameInfoUtil.model = res.model;
                    GameInfoUtil_1.GameInfoUtil.version = res.version;
                    GameInfoUtil_1.GameInfoUtil.systemStr = res.system;
                    GameInfoUtil_1.GameInfoUtil.SDKVersion = res.SDKVersion;
                    // //流海屏 UI层偏移位置
                    // UIOpenOrHideManager.Instance.liuhaiOffset();
                    console.error("当前平台 **********   " + res.platform);
                    PlatformUtil_2.PlatformUtil.recordWXPlatform = res.platform;
                    if (res.platform == "ios") {
                        PlatformUtil_2.PlatformUtil.WXGetSystemPlatformType = PlatformUtil_2.PlatformType.iPhone;
                        // PlatformUtil.platform = "ios";
                        // console.error("苹果 ");
                    }
                    else if (res.platform == "android") {
                        PlatformUtil_2.PlatformUtil.WXGetSystemPlatformType = PlatformUtil_2.PlatformType.Android;
                        // PlatformUtil.platform = "android";
                    }
                    var _model = res.model;
                    console.log("当前机型  " + _model + " platform  " + res.platform);
                    var qua = "高";
                    //ios  暂设置 iPhone8及以下 机型为低端机
                    if (PlatformUtil_2.PlatformUtil.WXGetSystemPlatformType == PlatformUtil_2.PlatformType.iPhone) {
                        var modelArr = _model.split(" ");
                        if (modelArr.length > 1) {
                            var modelStr = modelArr[1];
                            modelStr = modelStr[0]; //因拿 到的机型值 种类比较多  暂时直接拿 第一位数值来判断  8以下 4以上都是低端机  所以可以这样先做判断
                            var isNum = Number(modelStr);
                            if (!isNaN(isNum) && isNum >= 4 && isNum <= 8) {
                                PlatformUtil_2.PlatformUtil.systemQuality = PlatformUtil_2.SystemQualityType.low;
                                console.log("当前机型  " + _model + "  品质  low");
                                qua = "低";
                            }
                        }
                    }
                    else if (PlatformUtil_2.PlatformUtil.WXGetSystemPlatformType == PlatformUtil_2.PlatformType.Android) {
                        if (res.benchmarkLevel != -1 && res.benchmarkLevel <= 9) {
                            PlatformUtil_2.PlatformUtil.systemQuality = PlatformUtil_2.SystemQualityType.low;
                            qua = "低";
                        }
                        qua += "    安卓设备性能等级  " + res.benchmarkLevel;
                    }
                    console.error("当前机型  " + _model + "  品质 " + qua);
                    if (PlatformUtil_2.PlatformUtil.systemQuality === PlatformUtil_2.SystemQualityType.low) {
                        m4m.framework.sceneMgr.app["globalMacros"].push("LOW_END"); //shader 中增加全局宏
                    }
                };
                return AppMain;
            }());
            exports_29("AppMain", AppMain);
            setTimeout(function () {
                var a = new AppMain();
            }, 0);
        }
    };
});
System.register("Scene/Obstacle/Grid2D", ["Data/ReuseArray"], function (exports_30, context_30) {
    "use strict";
    var ReuseArray_1, Grid2D;
    var __moduleName = context_30 && context_30.id;
    return {
        setters: [
            function (ReuseArray_1_1) {
                ReuseArray_1 = ReuseArray_1_1;
            }
        ],
        execute: function () {
            Grid2D = /** @class */ (function () {
                function Grid2D(unitSize) {
                    /** 去重map */
                    this._filterRepeatMap = {};
                    this._puCount = 0;
                    /** 单元存 id列表 */
                    this._unitIDsMap = {};
                    this._unitSize = unitSize;
                }
                /**
                 * 添加 矩形
                 * @param rect 矩形
                 * @param id 矩形ID
                 */
                Grid2D.prototype.addRect = function (rect, id) {
                    var _arr = Grid2D.helpStrArr;
                    _arr.length = 0;
                    this.getUnitByRect(rect, _arr);
                    for (var i = 0; i < _arr.length; i++) {
                        var unitKey = _arr.get(i);
                        var arr = this._unitIDsMap[unitKey];
                        if (!arr) {
                            arr = this._unitIDsMap[unitKey] = [];
                        }
                        arr.push(id);
                    }
                };
                Grid2D.prototype.getPolygon = function (unitList) {
                };
                /**
                 * 获取 通过位置坐标
                 * @param pos 平面点 坐标
                 * @param outData 多边形（id） 列表
                 * @returns boolean : 是否有获取到数据
                 */
                Grid2D.prototype.getByPos = function (pos, outData) {
                    var result = false;
                    this.getUnitByPoint(pos);
                    return result;
                };
                Grid2D.prototype.getByLine = function (p0, p1, outData) {
                    var _arr = Grid2D.helpStrArr;
                    this.getUnitByLine(p0, p1, _arr);
                    this.getPolygonByUints(_arr, outData);
                };
                Grid2D.prototype.getPolygonByUints = function (uints, outData) {
                    outData.length = 0;
                    this._puCount++;
                    var len = uints.length;
                    var _map = this._unitIDsMap;
                    var _fMap = this._filterRepeatMap;
                    for (var i = 0; i < len; i++) {
                        var key = uints.get(i);
                        var arr = _map[key];
                        if (!arr) {
                            continue;
                        }
                        var len1 = arr.length;
                        for (var j = 0; j < len1; j++) {
                            var id = arr[j];
                            //map 去重
                            if (_fMap[id] && _fMap[id] == this._puCount) {
                                continue;
                            }
                            _fMap[id] = this._puCount;
                            outData.push(id);
                        }
                    }
                };
                /**
                 * 获取 unitPos 通过 线段
                 * @param p0 线段开始点
                 * @param p1 线段结束点
                 * @param outData 格子的单元坐标Key 列表
                 */
                Grid2D.prototype.getUnitByLine = function (p0, p1, outData) {
                    var minX = Math.min(p0.x, p1.x);
                    var minY = Math.min(p0.y, p1.y);
                    var maxX = Math.max(p0.x, p1.x);
                    var maxY = Math.max(p0.y, p1.y);
                    this.getUintByRange(minX, minY, maxX, maxY, outData);
                };
                /**
                 * 获取 unitPos 通过 Rect
                 * @param rect 矩形
                 * @param outData 输出 数据
                 */
                Grid2D.prototype.getUnitByRect = function (rect, outData) {
                    this.getUintByRange(rect.x, rect.y, rect.x + rect.w, rect.y + rect.h, outData);
                };
                Grid2D.prototype.getUintByRange = function (minX, minY, maxX, maxY, outData) {
                    outData.length = 0;
                    var _s = this._unitSize;
                    var gridMinX = Math.floor(minX / _s);
                    var gridMinY = Math.floor(minY / _s);
                    var gridMaxX = Math.floor(maxX / _s);
                    var gridMaxY = Math.floor(maxY / _s);
                    var xCount = gridMaxX - gridMinX + 1;
                    var yCount = gridMaxY - gridMinY + 1;
                    for (var y = 0; y < yCount; y++) {
                        for (var x = 0; x < xCount; x++) {
                            outData.push("".concat(gridMinX + x, "_").concat(gridMinY + y));
                        }
                    }
                };
                /**
                 * 获取 unitPos 通过 Rect
                 * @param point
                 */
                Grid2D.prototype.getUnitByPoint = function (point) {
                    var _s = this._unitSize;
                    return "".concat(Math.floor(point.x / _s), "_").concat(Math.floor(point.y / _s));
                };
                Grid2D.helpStrArr = new ReuseArray_1.ReuseArray();
                return Grid2D;
            }());
            exports_30("Grid2D", Grid2D);
        }
    };
});
System.register("Scene/Obstacle/PolygonObstacle", ["Tools/gameMathUtil"], function (exports_31, context_31) {
    "use strict";
    var gameMathUtil_2, PolygonObstacle;
    var __moduleName = context_31 && context_31.id;
    return {
        setters: [
            function (gameMathUtil_2_1) {
                gameMathUtil_2 = gameMathUtil_2_1;
            }
        ],
        execute: function () {
            PolygonObstacle = /** @class */ (function () {
                function PolygonObstacle(data) {
                    this._active = true;
                    this._points = [];
                    var len = data.length;
                    if (len % 2 == 1) {
                        console.error("\u6570\u636E\u957F\u5EA6\u4E3A \u5947\u6570\uFF01");
                        return;
                    }
                    var minX = Number.POSITIVE_INFINITY;
                    var minY = Number.POSITIVE_INFINITY;
                    var maxX = Number.NEGATIVE_INFINITY;
                    var maxY = Number.NEGATIVE_INFINITY;
                    for (var i = 0; i < len; i += 2) {
                        var v2 = new m4m.math.vector2(data[i], data[i + 1]);
                        this._points.push(v2);
                        minX = v2.x < minX ? v2.x : minX;
                        minY = v2.y < minY ? v2.y : minY;
                        maxX = v2.x > maxX ? v2.x : maxX;
                        maxY = v2.y > maxY ? v2.y : maxY;
                    }
                    this._aabb = new m4m.math.rect(minX, minY, maxX - minX, maxY - minY);
                }
                Object.defineProperty(PolygonObstacle.prototype, "points", {
                    /** 获取点s */
                    get: function () { return this._points; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(PolygonObstacle.prototype, "aabb", {
                    /** aabb*/
                    get: function () { return this._aabb; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(PolygonObstacle.prototype, "active", {
                    /** 激活中*/
                    get: function () { return this._active; },
                    set: function (val) { this._active = val; },
                    enumerable: false,
                    configurable: true
                });
                //通过点
                PolygonObstacle.prototype.hitTestPoint = function (point) {
                };
                /**
                 * 通过线段 碰撞测试
                 * @param p0 线段 开始点
                 * @param p1 线段 结束点
                 * @param outHitPoint   返回的碰撞点
                 * @param outHitNormal  返回的碰撞点法线
                 * @param outHitP2  返回的相交边上的点
                 */
                PolygonObstacle.prototype.hitTestLine = function (p0, p1, outHitPoint, outHitNormal, outHitP2) {
                    var result = false;
                    if (!p0 || !p1) {
                        return false;
                    }
                    var len = this._points.length;
                    if (len <= 1) {
                        return false;
                    }
                    var hitPoint = PolygonObstacle.helpV2;
                    var tempV2 = PolygonObstacle.helpV2v1;
                    var _hitP2 = PolygonObstacle.helpV2v2;
                    var _hitP3 = PolygonObstacle.helpV2v3;
                    for (var i = 0; i < len; i++) {
                        //检测每条边 
                        // tslint:disable-next-line: one-variable-per-declaration
                        var p2 = void 0, p3 = void 0;
                        p2 = this._points[i];
                        p3 = this._points[(i + 1) % len];
                        var b = this.lineIntersection(p0, p1, p2, p3, tempV2);
                        if (!b) {
                            continue;
                        }
                        if (!outHitPoint) {
                            return true;
                        }
                        //获取最近碰撞点
                        if (result && gameMathUtil_2.gameMathUtil.vec2DisSqr(p0, hitPoint) <= gameMathUtil_2.gameMathUtil.vec2DisSqr(p0, tempV2)) {
                            continue;
                        }
                        result = true;
                        m4m.math.vec2Clone(tempV2, hitPoint);
                        m4m.math.vec2Clone(p2, _hitP2);
                        m4m.math.vec2Clone(p3, _hitP3);
                    }
                    if (!result) {
                        return false;
                    }
                    m4m.math.vec2Clone(hitPoint, outHitPoint);
                    //计算法线 
                    if (outHitNormal) {
                        var _v2P23 = PolygonObstacle.helpV2v4;
                        var _v2hitP0 = PolygonObstacle.helpV2v5;
                        m4m.math.vec2Subtract(p0, outHitPoint, _v2hitP0);
                        m4m.math.vec2Subtract(_hitP3, _hitP2, _v2P23);
                        m4m.math.vec2Normalize(_v2P23, _v2P23);
                        var angle = gameMathUtil_2.gameMathUtil.calcAngleByVec(_v2P23.x, _v2P23.y, true);
                        m4m.math.vec2Set(outHitNormal, Math.sin(angle), Math.cos(angle));
                        if (m4m.math.vec2Dot(_v2hitP0, outHitNormal) < 0) {
                            m4m.math.vec2ScaleByNum(outHitNormal, -1, outHitNormal);
                        }
                    }
                    if (outHitP2) {
                        m4m.math.vec2Clone(_hitP2, outHitP2);
                    }
                    return result;
                };
                /**
                 * 是否与 选段相交
                 * @param p0 线段 开始点
                 * @param p1 线段 结束点
                 * @returns
                 */
                PolygonObstacle.prototype.hasLineIntersection = function (p0, p1) {
                    if (!p0 || !p1) {
                        return false;
                    }
                    var len = this._points.length;
                    if (len <= 1) {
                        return false;
                    }
                    for (var i = 0; i < len; i++) {
                        //检测每条边 
                        // tslint:disable-next-line: one-variable-per-declaration
                        var p2 = void 0, p3 = void 0;
                        p2 = this._points[i];
                        p3 = this._points[(i + 1) % len];
                        var b = this.lineIntersection(p0, p1, p2, p3);
                        if (b) {
                            return true;
                        }
                    }
                    return false;
                };
                /**
                 * 线段相交检测
                 * @param p1 线段一 开始点
                 * @param p2 线段一 结束点
                 * @param p3 线段二 开始点
                 * @param p4 线段二 结束点
                 * @param interPoint 线段相交点
                 */
                PolygonObstacle.prototype.lineIntersection = function (p0, p1, p2, p3, interPoint) {
                    // tslint:disable-next-line: one-variable-per-declaration
                    var s1x, s1y, s2x, s2y;
                    s1x = p1.x - p0.x;
                    s1y = p1.y - p0.y;
                    s2x = p3.x - p2.x;
                    s2y = p3.y - p2.y;
                    // tslint:disable-next-line: one-variable-per-declaration
                    var s, t;
                    s = (-s1y * (p0.x - p2.x) + s1x * (p0.y - p2.y)) / (-s2x * s1y + s1x * s2y);
                    t = (s2x * (p0.y - p2.y) - s2y * (p0.x - p2.x)) / (-s2x * s1y + s1x * s2y);
                    if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {
                        // Collision detected
                        if (interPoint) {
                            interPoint.x = p0.x + (t * s1x);
                            interPoint.y = p0.y + (t * s1y);
                        }
                        return true;
                    }
                    return false; // No collision
                };
                PolygonObstacle.helpV2 = new m4m.math.vector2();
                PolygonObstacle.helpV2v1 = new m4m.math.vector2();
                PolygonObstacle.helpV2v2 = new m4m.math.vector2();
                PolygonObstacle.helpV2v3 = new m4m.math.vector2();
                PolygonObstacle.helpV2v4 = new m4m.math.vector2();
                PolygonObstacle.helpV2v5 = new m4m.math.vector2();
                return PolygonObstacle;
            }());
            exports_31("PolygonObstacle", PolygonObstacle);
        }
    };
});
System.register("Scene/SceneObstacleMgr", ["Data/ReuseArray", "Tools/commTool", "Tools/DebugLineTool2d", "Tools/FrameMgr", "Tools/gameMathUtil", "UIBase/metaUIManager", "GameMgr", "Scene/Obstacle/Grid2D", "Scene/Obstacle/PolygonObstacle"], function (exports_32, context_32) {
    "use strict";
    var ReuseArray_2, commTool_4, DebugLineTool2d_1, FrameMgr_1, gameMathUtil_3, metaUIManager_2, GameMgr_9, Grid2D_1, PolygonObstacle_1, SceneObstacleMgr;
    var __moduleName = context_32 && context_32.id;
    return {
        setters: [
            function (ReuseArray_2_1) {
                ReuseArray_2 = ReuseArray_2_1;
            },
            function (commTool_4_1) {
                commTool_4 = commTool_4_1;
            },
            function (DebugLineTool2d_1_1) {
                DebugLineTool2d_1 = DebugLineTool2d_1_1;
            },
            function (FrameMgr_1_1) {
                FrameMgr_1 = FrameMgr_1_1;
            },
            function (gameMathUtil_3_1) {
                gameMathUtil_3 = gameMathUtil_3_1;
            },
            function (metaUIManager_2_1) {
                metaUIManager_2 = metaUIManager_2_1;
            },
            function (GameMgr_9_1) {
                GameMgr_9 = GameMgr_9_1;
            },
            function (Grid2D_1_1) {
                Grid2D_1 = Grid2D_1_1;
            },
            function (PolygonObstacle_1_1) {
                PolygonObstacle_1 = PolygonObstacle_1_1;
            }
        ],
        execute: function () {
            SceneObstacleMgr = /** @class */ (function () {
                /** 场景障碍 */
                function SceneObstacleMgr() {
                }
                SceneObstacleMgr.init = function () {
                    //update
                    FrameMgr_1.FrameMgr.Add(this.update, this);
                };
                Object.defineProperty(SceneObstacleMgr, "isEnable", {
                    /** 当前是否激活 */
                    get: function () { return this._currObsName != null; },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 加载处理 障碍
                 * @param obsName
                 */
                SceneObstacleMgr.show = function (obsName) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    //加载配置
                                    this._currObsName = obsName;
                                    return [4 /*yield*/, this.setSceneObstacle(obsName)];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * 删除当前障碍
                 */
                SceneObstacleMgr.remove = function () {
                    if (!this._currObsName) {
                        return;
                    }
                    this._currObsName = null;
                };
                /**
                 * 计算 射线碰撞终点
                 * @param _p0 射线开始点
                 * @param _p1 射线结束点
                 * @param outPoint 终点
                 * @param outMidPoint？ 转折中间点
                 * @returns
                 */
                SceneObstacleMgr.calcLineCollisionPoint = function (_p0, _p1, outPoint, outMidPoint) {
                    var result = false;
                    var p0 = m4m.poolv2(_p0);
                    var p1 = m4m.poolv2(_p1);
                    var hitNormal = m4m.poolv2();
                    var hitPoint = m4m.poolv3();
                    var hitTanP = m4m.poolv2();
                    var v2 = m4m.poolv2();
                    //clear HitPoints
                    if (GameMgr_9.GameMgr.Draw2dDebug) {
                        this._debugHitPoints.forEach(function (val) { m4m.poolv3_del(val); });
                        this._debugHitPoints.length = 0;
                        this._debugMoveLines.forEach(function (val) { m4m.poolv3_del(val); });
                        this._debugMoveLines.length = 0;
                        //line 1
                        this._debugMoveLines.push(m4m.math.pool.new_vector3(_p0.x, 0, _p0.y));
                        this._debugMoveLines.push(m4m.math.pool.new_vector3(_p1.x, 0, _p1.y));
                    }
                    //hit point
                    result = this.hitTestByLine(p0, p1, v2, SceneObstacleMgr.hitMixGap, hitNormal, hitTanP);
                    if (result) {
                        m4m.math.vec3Set(hitPoint, v2.x, 0, v2.y);
                        m4m.math.vec3Set(outPoint, hitTanP.x, 0, hitTanP.y);
                        if (outMidPoint) {
                            m4m.math.vec3Clone(hitPoint, outMidPoint);
                        }
                        if (GameMgr_9.GameMgr.Draw2dDebug) {
                            this._debugHitPoints.push(m4m.poolv3(hitPoint));
                            this._debugHitPoints.push(m4m.poolv3(outPoint));
                            m4m.math.vec2Clone(hitNormal, this._debugHitNormal);
                            //line 2
                            this._debugMoveLines.push(m4m.math.pool.new_vector3(v2.x, 0, v2.y));
                            this._debugMoveLines.push(m4m.math.pool.new_vector3(hitTanP.x, 0, hitTanP.y));
                        }
                        //碰撞二次传递
                        var hasHited = this.transmitCollision(hitPoint, hitTanP, v2);
                        m4m.math.vec3Set(outPoint, v2.x, 0, v2.y);
                        if (GameMgr_9.GameMgr.Draw2dDebug) {
                            this._debugHitPoints.push(m4m.poolv3(outPoint));
                            //line 3
                            this._debugMoveLines.push(m4m.math.pool.new_vector3(hitTanP.x, 0, hitTanP.y));
                            this._debugMoveLines.push(m4m.math.pool.new_vector3(v2.x, 0, v2.y));
                        }
                        // if (hasHited) {
                        // }
                    }
                    //检查 是否穿越到多边形里面，避免穿墙
                    if (this.hasHitByline(_p0, v2)) {
                        m4m.math.vec3Set(outPoint, _p0.x, 0, _p0.y);
                    }
                    //clear
                    m4m.poolv2_del(p0);
                    m4m.poolv2_del(p1);
                    m4m.poolv2_del(hitNormal);
                    m4m.poolv3_del(hitPoint);
                    m4m.poolv2_del(hitTanP);
                    m4m.poolv2_del(v2);
                    return result;
                };
                //获取 当前场景
                SceneObstacleMgr.getObstacle = function (obsName) {
                    return __awaiter(this, void 0, void 0, function () {
                        var url, text, arr;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    url = "".concat(GameMgr_9.GameMgr.sceneObstaclePath).concat(obsName, ".json");
                                    return [4 /*yield*/, commTool_4.commTool.syncloadText(url)];
                                case 1:
                                    text = _a.sent();
                                    arr = JSON.parse(text);
                                    return [2 /*return*/, arr];
                            }
                        });
                    });
                };
                /** 设置场景障碍 */
                SceneObstacleMgr.setSceneObstacle = function (obsName) {
                    return __awaiter(this, void 0, void 0, function () {
                        var _map, _grid, _pMap, arr, datas, len, i, data, p;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _map = this._ObsGridMap;
                                    _grid = _map[obsName];
                                    this._currObsName = obsName;
                                    if (_grid) {
                                        return [2 /*return*/];
                                    }
                                    _grid = _map[obsName] = new Grid2D_1.Grid2D(this._GridUintSize);
                                    _pMap = this._ObsPolygonsMap;
                                    arr = _pMap[obsName] = [];
                                    return [4 /*yield*/, this.getObstacle(obsName)];
                                case 1:
                                    datas = _a.sent();
                                    len = datas.length;
                                    for (i = 0; i < len; i++) {
                                        data = datas[i];
                                        p = new PolygonObstacle_1.PolygonObstacle(data);
                                        arr.push(p);
                                        //装入网格
                                        _grid.addRect(p.aabb, i);
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * 通过线段碰撞 检测
                 * @param p0 线段开始点
                 * @param p1 线段结束点
                 * @param outHitPoint 返回的碰撞点
                 * @param outNormal 返回的碰撞点法向量
                 * @param outTangentP 返回的碰撞点切线方向延展后终点
                 * @param minGap 离多边形的 保留间距（默认不保留）
                 */
                // tslint:disable-next-line: cyclomatic-complexity
                SceneObstacleMgr.hitTestByLine = function (p0, p1, outHitPoint, _minGap, outNormal, outTangentP) {
                    if (_minGap === void 0) { _minGap = 0; }
                    var result = false;
                    var _map = this._ObsGridMap;
                    var _grid = _map[this._currObsName];
                    if (!_grid) {
                        return false;
                    }
                    var minGap = _minGap == null || isNaN(_minGap) ? 0 : _minGap;
                    var _pmap = this._ObsPolygonsMap;
                    var _arr = _pmap[this._currObsName];
                    var uintArr = this.helpNumReuseArr;
                    _grid.getByLine(p0, p1, uintArr);
                    var len = uintArr.length;
                    var nearPID = null;
                    var hitPoint = m4m.poolv2();
                    var tempHitPoint = m4m.poolv2();
                    var tempNormal = outNormal || minGap > 0 ? m4m.poolv2() : null;
                    var tempHitP2 = outTangentP ? m4m.poolv2() : null;
                    //碰 区域内的多边形
                    for (var i = 0; i < len; i++) {
                        var id = uintArr.get(i);
                        var p = _arr[id];
                        if (!p || !p.active) {
                            continue;
                        }
                        var isHited = false;
                        isHited = p.hitTestLine(p0, p1, tempHitPoint, tempNormal, tempHitP2);
                        if (!isHited) {
                            continue;
                        }
                        //判读是否是离开始点最近的
                        if (nearPID != null && gameMathUtil_3.gameMathUtil.vec2DisSqr(p0, hitPoint) <= gameMathUtil_3.gameMathUtil.vec2DisSqr(p0, tempHitPoint)) {
                            continue;
                        }
                        nearPID = id;
                        m4m.math.vec2Clone(tempHitPoint, hitPoint);
                        if (tempNormal && outNormal) {
                            m4m.math.vec2Clone(tempNormal, outNormal);
                        }
                        if (tempHitP2) {
                            m4m.math.vec2Clone(tempHitP2, outTangentP);
                        }
                    }
                    if (GameMgr_9.GameMgr.Draw2dDebug) {
                        var v30 = m4m.poolv3();
                        m4m.math.vec3Set(v30, p0.x, 0, p0.y);
                        this._debugVelPoints.push(v30);
                        var v31 = m4m.poolv3();
                        m4m.math.vec3Set(v31, p1.x, 0, p1.y);
                        this._debugVelPoints.push(v31);
                    }
                    result = nearPID != null;
                    if (result) {
                        if (minGap > 0) {
                            m4m.math.vec2Set(hitPoint, hitPoint.x + tempNormal.x * minGap, hitPoint.y + tempNormal.y * minGap);
                        }
                        m4m.math.vec2Clone(hitPoint, outHitPoint);
                        if (outTangentP) {
                            var dirTan = m4m.poolv2();
                            var lineHitP1 = m4m.poolv2();
                            m4m.math.vec2Subtract(outTangentP, tempHitPoint, dirTan);
                            //方向 和 射线方向一致？
                            m4m.math.vec2Subtract(outHitPoint, p1, lineHitP1);
                            m4m.math.vec2Normalize(dirTan, dirTan);
                            var tanLne = m4m.math.vec2Dot(dirTan, lineHitP1);
                            m4m.math.vec2ScaleByNum(dirTan, -tanLne, dirTan);
                            m4m.math.vec2Add(dirTan, hitPoint, outTangentP);
                            m4m.poolv2_del(dirTan);
                            m4m.poolv2_del(lineHitP1);
                        }
                    }
                    m4m.poolv2_del(hitPoint);
                    m4m.poolv2_del(tempHitPoint);
                    if (tempNormal) {
                        m4m.poolv2_del(tempNormal);
                    }
                    if (tempHitP2) {
                        m4m.poolv2_del(tempHitP2);
                    }
                    return result;
                };
                SceneObstacleMgr.hasHitByline = function (p0, p1) {
                    var _map = this._ObsGridMap;
                    var _grid = _map[this._currObsName];
                    if (!_grid) {
                        return false;
                    }
                    var _pmap = this._ObsPolygonsMap;
                    var _arr = _pmap[this._currObsName];
                    var uintArr = this.helpNumReuseArr;
                    _grid.getByLine(p0, p1, uintArr);
                    var len = uintArr.length;
                    for (var i = 0; i < len; i++) {
                        var id = uintArr.get(i);
                        var p = _arr[id];
                        if (!p || !p.active) {
                            continue;
                        }
                        var isHited = false;
                        isHited = p.hasLineIntersection(p0, p1);
                        if (isHited) {
                            return true;
                        }
                    }
                };
                /**
                 * 碰撞 传播检测
                 * @param p0
                 * @param p1
                 * @param outPoint 输出点
                 */
                SceneObstacleMgr.transmitCollision = function (p0, p1, outPoint) {
                    var result = false;
                    var _p0 = m4m.poolv2(p0);
                    m4m.math.vec2Set(_p0, p0.x, p0.z);
                    var _p1 = m4m.poolv2(p1);
                    result = this.hitTestByLine(_p0, _p1, outPoint, SceneObstacleMgr.hitMixGap);
                    if (!result) {
                        m4m.math.vec2Clone(_p1, outPoint);
                    }
                    //clear
                    m4m.poolv2_del(_p0);
                    m4m.poolv2_del(_p1);
                    return result;
                };
                /** 调试测试 */
                SceneObstacleMgr.debugTest = function () {
                    if (!this._currObsName) {
                        return;
                    }
                    var p0 = this.helpV2;
                    var p1 = this.helpV2v1;
                    var v3 = this.helpV3;
                    m4m.math.vec2Set(p0, -1, 8);
                    m4m.math.vec2Set(p1, -1 + 5, 8 + 6.2);
                    this.calcLineCollisionPoint(p0, p1, v3);
                };
                /** 调试绘制 */
                SceneObstacleMgr.debugDraw = function () {
                    if (!this._currObsName) {
                        return;
                    }
                    var _cam = m4m.framework.sceneMgr.scene.mainCamera;
                    var _canvas = metaUIManager_2.metaUIManager.ActiveSelf.overlay.canvas;
                    //绘制 所有多边形障碍
                    var _map = this._ObsPolygonsMap;
                    var _arr = _map[this._currObsName];
                    if (!_arr) {
                        return;
                    }
                    var len = _arr.length;
                    var uiPoints = [];
                    var v3 = this.helpV3;
                    for (var i = 0; i < len; i++) {
                        var p = _arr[i];
                        var pointsLen = p.points.length;
                        for (var j = 0; j < pointsLen; j++) {
                            var pPoint = p.points[j];
                            var v2 = m4m.poolv2();
                            m4m.math.vec3Set(v3, pPoint.x, 0, pPoint.y);
                            commTool_4.commTool.calcuUIPosBy3DPos(_cam, _canvas, v3, v2);
                            uiPoints.push(v2);
                        }
                        //draw
                        DebugLineTool2d_1.DebugLineTool2d.drawPoints(uiPoints, 3, 1, 1, true);
                        //clear
                        uiPoints.forEach(function (val) {
                            m4m.poolv2_del(val);
                        });
                        uiPoints.length = 0;
                    }
                    //碰撞线段
                    var uiP0 = this.helpV2;
                    var uiP1 = this.helpV2v1;
                    var _dvpLen = this._debugVelPoints.length;
                    for (var i = 0; i < _dvpLen; i += 2) {
                        var _velP0 = this._debugVelPoints[i];
                        var _velP1 = this._debugVelPoints[i + 1];
                        commTool_4.commTool.calcuUIPosBy3DPos(_cam, _canvas, _velP0, uiP0);
                        commTool_4.commTool.calcuUIPosBy3DPos(_cam, _canvas, _velP1, uiP1);
                        //绘制 当前的碰撞 line
                        DebugLineTool2d_1.DebugLineTool2d.drawLine(uiP0, uiP1, 3, 4, 1);
                        //clear
                        m4m.poolv3_del(_velP0);
                        m4m.poolv3_del(_velP1);
                    }
                    this._debugVelPoints.length = 0;
                    var v2Hit = this.helpV2v2;
                    var v2Nv = this.helpV2v3;
                    var v3NVect = this.helpV3v1;
                    //碰撞点
                    var pointslen = this._debugHitPoints.length;
                    for (var i = 0; i < pointslen; i++) {
                        var t = this._debugHitPoints[i];
                        commTool_4.commTool.calcuUIPosBy3DPos(_cam, _canvas, t, v2Hit);
                        DebugLineTool2d_1.DebugLineTool2d.drawCircle(v2Hit, 4, 3, 0, 1, 6);
                        if (i != 0) {
                            continue;
                        }
                        //法线
                        var n = this._debugHitNormal;
                        m4m.math.vec3Set(v3NVect, n.x, 0, n.y);
                        m4m.math.vec3ScaleByNum(v3NVect, 5, v3NVect);
                        m4m.math.vec3Add(t, v3NVect, v3NVect);
                        commTool_4.commTool.calcuUIPosBy3DPos(_cam, _canvas, v3NVect, v2Nv);
                        DebugLineTool2d_1.DebugLineTool2d.drawLine(v2Hit, v2Nv, 3, 5, 1);
                    }
                    var lp0V2 = this.helpV2v4;
                    var lp1V2 = this.helpV2v5;
                    //运动线
                    var lineLen = this._debugMoveLines.length;
                    for (var i = 0; i < lineLen; i += 2) {
                        var _LP0 = this._debugMoveLines[i];
                        commTool_4.commTool.calcuUIPosBy3DPos(_cam, _canvas, _LP0, lp0V2);
                        var _LP1 = this._debugMoveLines[i + 1];
                        commTool_4.commTool.calcuUIPosBy3DPos(_cam, _canvas, _LP1, lp1V2);
                        DebugLineTool2d_1.DebugLineTool2d.drawLine(lp0V2, lp1V2, 3, i % 5, 1);
                    }
                };
                SceneObstacleMgr.update = function (dt) {
                    //test
                    // this.debugTest();
                    //--------
                    if (GameMgr_9.GameMgr.Draw2dDebug) {
                        this.debugDraw();
                    }
                };
                SceneObstacleMgr.helpV2 = new m4m.math.vector2();
                SceneObstacleMgr.helpV2v1 = new m4m.math.vector2();
                SceneObstacleMgr.helpV2v2 = new m4m.math.vector2();
                SceneObstacleMgr.helpV2v3 = new m4m.math.vector2();
                SceneObstacleMgr.helpV2v4 = new m4m.math.vector2();
                SceneObstacleMgr.helpV2v5 = new m4m.math.vector2();
                SceneObstacleMgr.helpV3 = new m4m.math.vector3();
                SceneObstacleMgr.helpV3v1 = new m4m.math.vector3();
                SceneObstacleMgr.helpNumReuseArr = new ReuseArray_2.ReuseArray();
                SceneObstacleMgr.hitMixGap = 0.02;
                SceneObstacleMgr._ObsGridMap = {};
                SceneObstacleMgr._ObsPolygonsMap = {};
                SceneObstacleMgr._currObsName = null;
                SceneObstacleMgr._debugVelP0 = new m4m.math.vector3(); //debug绘制 碰撞速度向量P0
                SceneObstacleMgr._debugVelP1 = new m4m.math.vector3(); //debug绘制 碰撞速度向量P1
                SceneObstacleMgr._debugVelPoints = [];
                SceneObstacleMgr._debugHitNormal = new m4m.math.vector2(); //debug绘制 碰撞点 法线
                SceneObstacleMgr._debugHitPoints = []; //debug绘制 碰撞点 list
                SceneObstacleMgr._debugMoveLines = []; //debug绘制 轨迹线
                SceneObstacleMgr._GridUintSize = 20;
                return SceneObstacleMgr;
            }());
            exports_32("SceneObstacleMgr", SceneObstacleMgr);
        }
    };
});
System.register("Core/GameLogic", [], function (exports_33, context_33) {
    "use strict";
    var GameLogic;
    var __moduleName = context_33 && context_33.id;
    return {
        setters: [],
        execute: function () {
            GameLogic = /** @class */ (function () {
                /**
                 * 游戏逻辑相关
                 * 这是一个存储游戏逻辑相关我们希望全局可访问的东西的地方，都是静态
                 */
                function GameLogic() {
                }
                // constants
                //game layers-------------------------------------------------------------------------------
                GameLogic.layerIndexDefault = 0;
                GameLogic.layerIndexGround = 8;
                GameLogic.layerIndexActor = 9;
                GameLogic.layerIndexBuilding = 10;
                /** ui之上3d模型 */
                GameLogic.layerIndexOverUI3d = 30;
                //bit 二进制---------------------------------------------------------------------------------
                GameLogic.layerBitDefault = 1 << GameLogic.layerIndexDefault;
                GameLogic.layerBitGround = 1 << GameLogic.layerIndexGround;
                GameLogic.layerBitActor = 1 << GameLogic.layerIndexActor;
                GameLogic.layerBitBuilding = 1 << GameLogic.layerIndexBuilding;
                /** ui之上3d模型 */
                GameLogic.layerBitOverUI3d = 1 << GameLogic.layerIndexOverUI3d;
                return GameLogic;
            }());
            exports_33("GameLogic", GameLogic);
        }
    };
});
System.register("Tool/gameTool", ["animation/animLoadPlayer", "eventMgr", "Loader/otherPlan/testCreat", "PSDUI/UiManager", "Tools/engineParallel/spInterface", "GameMgr"], function (exports_34, context_34) {
    "use strict";
    var animLoadPlayer_1, eventMgr_4, testCreat_2, UiManager_3, spInterface_3, GameMgr_10, GameTool;
    var __moduleName = context_34 && context_34.id;
    return {
        setters: [
            function (animLoadPlayer_1_1) {
                animLoadPlayer_1 = animLoadPlayer_1_1;
            },
            function (eventMgr_4_1) {
                eventMgr_4 = eventMgr_4_1;
            },
            function (testCreat_2_1) {
                testCreat_2 = testCreat_2_1;
            },
            function (UiManager_3_1) {
                UiManager_3 = UiManager_3_1;
            },
            function (spInterface_3_1) {
                spInterface_3 = spInterface_3_1;
            },
            function (GameMgr_10_1) {
                GameMgr_10 = GameMgr_10_1;
            }
        ],
        execute: function () {
            GameTool = /** @class */ (function () {
                /** 游戏相关 工具类 */
                function GameTool() {
                }
                /**
                 * 请求UI，并等待(事件 Show模式)
                 * @param showEvent UI事件
                 */
                GameTool.UIWaitEvent = function (showEvent) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    eventMgr_4.EventMgr.dispatchEvent(showEvent, null);
                                    //非 Show 或者 已经show过的，直接完成返回。
                                    if (showEvent.lastIndexOf("_Show") == -1 || GameTool.hasUIShowMap[showEvent]) {
                                        return [2 /*return*/];
                                    }
                                    //还没 show 过需要监听第一次初始化加载UI
                                    return [4 /*yield*/, this.waitListenUIEvent(showEvent)];
                                case 1:
                                    //还没 show 过需要监听第一次初始化加载UI
                                    _a.sent();
                                    this.hasUIShowMap[showEvent] = true;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                /**
                 * 请求 UI,并等待(inited) 显示（type2 类型UI）
                 * @param uiClassName UI类的名字
                 */
                GameTool.UIWaitShowType2 = function (uiClassName) {
                    var cb;
                    var _p = new Promise(function (resolve) {
                        if (UiManager_3.UiManager.isUiInited(uiClassName)) {
                            resolve(null);
                        }
                        else {
                            cb = resolve;
                        }
                    });
                    //show UI
                    UiManager_3.UiManager.showUi(uiClassName, cb);
                    //等待 UI init 完成
                    return _p;
                };
                /**
                 * 等待 UI 进入显示状态，不主动请求UI
                 * @param uiClassName UI类的名字
                 * @param needInited 是否必须 等待 初始化完成
                 */
                GameTool.UIWaitIsShow = function (uiClassName) {
                    var cb;
                    var _p = new Promise(function (resolve) {
                        //检查 UI 是否已经满足条件
                        if (UiManager_3.UiManager.isUiShow(uiClassName)) {
                            resolve(null);
                        }
                        else {
                            cb = resolve;
                        }
                    });
                    if (cb) {
                        //show 的事件等待
                        var objS_1 = {
                            onShow: function (_uiClassName) {
                                if (_uiClassName == uiClassName) {
                                    UiManager_3.UiManager.eventer.RemoveListener(UiManager_3.UiManager.ON_SHOW_UI, objS_1.onShow, objS_1);
                                    cb();
                                }
                            },
                        };
                        UiManager_3.UiManager.eventer.On(UiManager_3.UiManager.ON_SHOW_UI, objS_1.onShow, objS_1);
                    }
                    return _p;
                };
                /**
                 * 获取 AnimPlayerHandle ，通过ISpAnimPlayer
                 * @param _aniplayer  ISpAnimPlayer组件对象
                 * @param loadpath    加载的路径 例如：GameMgr.rolePath
                 */
                GameTool.getAnimPlayerHandle = function (_aniplayer, loadpath) {
                    return __awaiter(this, void 0, void 0, function () {
                        var _animPlayerHd, etype, orgAnimPlayer, clipNames, newPath, animLP_1, waitLoadEnd;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!_aniplayer) {
                                        return [2 /*return*/];
                                    }
                                    etype = _aniplayer.gameObject.transform.engineType;
                                    if (!(etype == spInterface_3.engineParallelType.none)) return [3 /*break*/, 2];
                                    orgAnimPlayer = _aniplayer.rawHandle;
                                    clipNames = orgAnimPlayer.allClipNames();
                                    newPath = loadpath;
                                    if (GameMgr_10.GameMgr.useTestCreate) {
                                        newPath = testCreat_2.testCreat.pathReplaceMap[loadpath];
                                        if (!newPath) {
                                            newPath = loadpath;
                                        }
                                    }
                                    animLP_1 = new animLoadPlayer_1.AnimLoadPlayer(_aniplayer.gameObject.name, clipNames, orgAnimPlayer, newPath);
                                    _animPlayerHd = animLP_1;
                                    waitLoadEnd = function () {
                                        return new Promise(function (resolve) {
                                            if (animLP_1.isLoadedAll) {
                                                resolve(null);
                                            }
                                            else {
                                                animLP_1.onLoadedClips = resolve;
                                            }
                                        });
                                    };
                                    return [4 /*yield*/, waitLoadEnd()];
                                case 1:
                                    _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    _animPlayerHd = _aniplayer;
                                    _a.label = 3;
                                case 3: return [2 /*return*/, _animPlayerHd];
                            }
                        });
                    });
                };
                /** 等待UI 监听事件成功 */
                GameTool.waitListenUIEvent = function (showEvent) {
                    var _this = this;
                    return new Promise(function (resolve, reject) {
                        eventMgr_4.EventMgr.addListener(showEvent, function () {
                            resolve(null);
                        }, _this);
                    });
                };
                GameTool.test = function () {
                };
                GameTool.hasUIShowMap = {};
                return GameTool;
            }());
            exports_34("GameTool", GameTool);
        }
    };
});
System.register("Role/RoleAttrInfo", [], function (exports_35, context_35) {
    "use strict";
    var GameDiePerformanceEnum, RoleTypeEnum, RoleServerInfo, RoleAttrInfo;
    var __moduleName = context_35 && context_35.id;
    return {
        setters: [],
        execute: function () {
            /**
             *当前游戏默认死亡表现
             */
            (function (GameDiePerformanceEnum) {
                GameDiePerformanceEnum[GameDiePerformanceEnum["Die"] = 0] = "Die";
                GameDiePerformanceEnum[GameDiePerformanceEnum["DropOutDie"] = 1] = "DropOutDie";
                GameDiePerformanceEnum[GameDiePerformanceEnum["Back"] = 2] = "Back";
            })(GameDiePerformanceEnum || (exports_35("GameDiePerformanceEnum", GameDiePerformanceEnum = {})));
            /**
             *玩家类型
             */
            (function (RoleTypeEnum) {
                /** 玩家 */
                RoleTypeEnum[RoleTypeEnum["Player"] = 0] = "Player";
                RoleTypeEnum[RoleTypeEnum["NPC"] = 1] = "NPC";
            })(RoleTypeEnum || (exports_35("RoleTypeEnum", RoleTypeEnum = {})));
            /**
             * RoleServerInfo
             */
            RoleServerInfo = /** @class */ (function () {
                function RoleServerInfo() {
                }
                return RoleServerInfo;
            }());
            exports_35("RoleServerInfo", RoleServerInfo);
            /**
             * RoleAttrInfo
             */
            RoleAttrInfo = /** @class */ (function (_super) {
                __extends(RoleAttrInfo, _super);
                function RoleAttrInfo() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    //初始创建
                    _this.isInit = false;
                    //角度信息
                    _this.angle = 0;
                    //单机状态
                    _this.isSingle = false;
                    _this.num = 0;
                    //默认直接播死亡
                    _this.defDiePerformance = GameDiePerformanceEnum.Die;
                    return _this;
                }
                return RoleAttrInfo;
            }(RoleServerInfo));
            exports_35("RoleAttrInfo", RoleAttrInfo);
        }
    };
});
System.register("Role/RoleDoll", ["animation/AnimationController", "Tools/engineParallel/spInterface", "Tools/gameMathUtil", "Core/GameLogic", "Core/PoolMgr", "Core/StageMgr", "GameEnum", "GameMgr", "Scene/SceneObstacleMgr", "Tool/gameTool"], function (exports_36, context_36) {
    "use strict";
    var AnimationController_1, spInterface_4, gameMathUtil_4, GameLogic_1, PoolMgr_2, StageMgr_3, GameEnum_2, GameMgr_11, SceneObstacleMgr_1, gameTool_1, RoleDoll;
    var __moduleName = context_36 && context_36.id;
    return {
        setters: [
            function (AnimationController_1_1) {
                AnimationController_1 = AnimationController_1_1;
            },
            function (spInterface_4_1) {
                spInterface_4 = spInterface_4_1;
            },
            function (gameMathUtil_4_1) {
                gameMathUtil_4 = gameMathUtil_4_1;
            },
            function (GameLogic_1_1) {
                GameLogic_1 = GameLogic_1_1;
            },
            function (PoolMgr_2_1) {
                PoolMgr_2 = PoolMgr_2_1;
            },
            function (StageMgr_3_1) {
                StageMgr_3 = StageMgr_3_1;
            },
            function (GameEnum_2_1) {
                GameEnum_2 = GameEnum_2_1;
            },
            function (GameMgr_11_1) {
                GameMgr_11 = GameMgr_11_1;
            },
            function (SceneObstacleMgr_1_1) {
                SceneObstacleMgr_1 = SceneObstacleMgr_1_1;
            },
            function (gameTool_1_1) {
                gameTool_1 = gameTool_1_1;
            }
        ],
        execute: function () {
            RoleDoll = /** @class */ (function () {
                // let configStr = `
                // {
                //     "states":{
                //         "Idle":{"clipName":"Idle" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "Run":{"clipName":"Run" , "speed":1.3 , "normalizeTime":1 , "mirror":false },
                //         "Turn1":{"clipName":"Turn1" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "Turn2":{"clipName":"Turn2" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "Jump1":{"clipName":"Jump1" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "Jump2":{"clipName":"Jump2" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "Jump3":{"clipName":"Jump3" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "Walk":{"clipName":"Walk" , "speed":1.3 , "normalizeTime":1 , "mirror":false },
                //         "Die":{"clipName":"Die" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "Die2":{"clipName":"Die2" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "TugOfWarFall2":{"clipName":"TugOfWarFall2" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "TugOfWarFall3":{"clipName":"TugOfWarFall3" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "IdleWithAPistol":{"clipName":"IdleWithAPistol" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "Submachinegun":{"clipName":"Submachinegun" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "Pistol":{"clipName":"Pistol" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "IdleTakeTheGun":{"clipName":"IdleTakeTheGun" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "BuckleSugarCake":{"clipName":"BuckleSugarCake" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "TugOfWar":{"clipName":"TugOfWar" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "TugOfWarFallReverse1":{"clipName":"TugOfWarFallReverse1" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "TugOfWarIdle":{"clipName":"TugOfWarIdle" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "TugOfWarIdleReverse":{"clipName":"TugOfWarIdleReverse" , "speed":1 , "normalizeTime":1 , "mirror":false },
                //         "TugOfWarReverse":{"clipName":"TugOfWarReverse" , "speed":1 , "normalizeTime":1 , "mirror":false }
                //     },
                //     "transitions":[
                //         {"from":"__entry__","to":"Idle"},
                //         {"from":"__anyState__","to":"Idle"},
                //         {"from":"__anyState__","to":"Run"},
                //         {"from":"__anyState__","to":"Turn1"},
                //         {"from":"__anyState__","to":"Turn2"},
                //         {"from":"__anyState__","to":"Jump1"},
                //         {"from":"__anyState__","to":"Jump2"},
                //         {"from":"__anyState__","to":"Jump3"},
                //         {"from":"__anyState__","to":"Walk"},
                //         {"from":"__anyState__","to":"Die"},
                //         {"from":"__anyState__","to":"Die2"},
                //         {"from":"__anyState__","to":"TugOfWarFall2"},
                //         {"from":"__anyState__","to":"TugOfWarFall3"},
                //         {"from":"__anyState__","to":"IdleTakeTheGun"},
                //         {"from":"__anyState__","to":"IdleWithAPistol"},
                //         {"from":"__anyState__","to":"Submachinegun"},
                //         {"from":"__anyState__","to":"Pistol"},
                //         {"from":"__anyState__","to":"BuckleSugarCake"},
                //         {"from":"__anyState__","to":"TugOfWar"},
                //         {"from":"__anyState__","to":"TugOfWarFallReverse1"},
                //         {"from":"__anyState__","to":"TugOfWarIdle"},
                //         {"from":"__anyState__","to":"TugOfWarIdleReverse"},
                //         {"from":"__anyState__","to":"TugOfWarReverse"}
                //     ]
                // }
                // `;
                // let configObj = JSON.parse(configStr);
                // interface IAnimNames {
                //     "Idle": string;
                //     "Run": string;
                //     "Turn1": string;
                //     "Turn2": string;
                //     "Walk": string;
                //     "Jump1": string;
                //     "Jump2": string;
                //     "Jump3": string;
                //     "Die": string;
                //     "Die2": string;
                //     "TugOfWarFall2": string;
                //     "TugOfWarFall3": string;
                //     "IdleTakeTheGun": string;
                //     "IdleWithAPistol": string;
                //     "Submachinegun": string;
                //     "Pistol": string;
                //     "BuckleSugarCake": string;
                //     "TugOfWar": string;
                //     "TugOfWarFallReverse1": string;
                //     "TugOfWarIdle": string;
                //     "TugOfWarIdleReverse": string;
                //     "TugOfWarReverse": string;
                // }
                /**
                 * 角色玩偶对象
                 * 负责 显示相关功能，模型渲染、动画播放、特效播放
                 */
                function RoleDoll() {
                    // tslint:disable-next-line: member-ordering
                    this.moveSpeed = 0;
                    // tslint:disable-next-line: member-ordering
                    this.TargetPointArr = []; //目标点数组
                    this.ModelRadius = 0.5;
                    //----- 暂时这么写
                    //玩家脸数据
                    this.faceDatas = ["nan_face01", "nan_face02", "nan_face03", "nv_face01", "nv_face02", "nv_face03"];
                    //玩家头发数据
                    this.hairDatas = ["nan_hair01", "nan_hair02", "nan_hair03", "nv_hair01", "nv_hair02", "nv_hair03"];
                    this._inited = false;
                    this._initedWaits = [];
                    this.num = "0";
                }
                Object.defineProperty(RoleDoll.prototype, "model", {
                    /** 角色场景对象 */
                    get: function () { return this._model; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(RoleDoll.prototype, "animationCtr", {
                    /** 动画 状态机 控制器 */
                    get: function () { return this._animationCtr; },
                    enumerable: false,
                    configurable: true
                });
                /** 获取 骨骼位置的名字 */
                RoleDoll.getBoneNameMap = function (aplayer) {
                    var sm = aplayer.gameObject.getFirstComponentInChildren("skinnedMeshRenderer");
                    var meshResID = sm.mesh.getGUID();
                    var ctemp = this._isPlayerBoneNameMap[meshResID];
                    if (!ctemp) {
                        ctemp = this._isPlayerBoneNameMap[meshResID] = {};
                        aplayer.bones.forEach(function (val) {
                            ctemp[val.name] = true;
                        });
                    }
                    return ctemp;
                };
                Object.defineProperty(RoleDoll.prototype, "inited", {
                    /** 初始化完毕？ */
                    get: function () { return this._inited; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(RoleDoll.prototype, "canMove", {
                    //是否可移动
                    get: function () {
                        return this.TargetPointArr.length == 0;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 初始化
                 * @param resName 显示模型的资源名
                 */
                RoleDoll.prototype.init = function (resName) {
                    return __awaiter(this, void 0, void 0, function () {
                        var _a, _animPlayerHd, _aniplayer, etype, _ap, _b, _c;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    _a = this;
                                    return [4 /*yield*/, PoolMgr_2.PoolMgr.baseModlePool.newObj(resName, GameMgr_11.GameMgr.rolePath_Policy(resName), GameMgr_11.GameMgr.engineParallel)];
                                case 1:
                                    _a._model = _d.sent();
                                    // if (role == null) {
                                    //     // console.error("拿到的人物对象出错！！！");
                                    //     return;
                                    // }
                                    // debug
                                    // this._model = new Proxy(this._model, {
                                    //     set(target, p, v) {
                                    //         if (p == "localPosition") {
                                    //             if (isNaN(v.x) || isNaN(v.y) || isNaN(v.z)) {
                                    //                 console.error("调试:102901:设置位置出现NAN!!!!", v);
                                    //             }
                                    //             target.localPosition = v;
                                    //         }
                                    //         return true;
                                    //     },
                                    // });
                                    //获取 角色位置点
                                    this.setHole(this._model);
                                    //set layer
                                    this._model.gameObject.layer = GameLogic_1.GameLogic.layerIndexActor;
                                    //添加到场景
                                    StageMgr_3.StageMgr.roleRoot.addChild(this._model);
                                    _aniplayer = this._model.gameObject.getFirstComponent(spInterface_4.spComponentType.animPlayer);
                                    if (!_aniplayer) return [3 /*break*/, 3];
                                    etype = _aniplayer.gameObject.transform.engineType;
                                    if (etype == spInterface_4.engineParallelType.none) {
                                        _ap = _aniplayer.rawHandle;
                                        // //处理 asbone------------
                                        // this.tryAddAsBone(_ap);
                                        // //-----------------------
                                        // //boonroot 处理
                                        // let skinMr = _ap.gameObject.getFirstComponentInChildren("skinnedMeshRenderer") as m4m.framework.skinnedMeshRenderer;
                                        // if (skinMr.rootBone) {
                                        //     skinMr.rootBone.gameObject.addComponent("asbone");
                                        //     this._boenNodeMap.set(RoleDoll.BoonRoot, getSpTransform(skinMr.rootBone));
                                        // }
                                    }
                                    return [4 /*yield*/, gameTool_1.GameTool.getAnimPlayerHandle(_aniplayer, GameMgr_11.GameMgr.rolePath)];
                                case 2:
                                    _animPlayerHd = _d.sent();
                                    _d.label = 3;
                                case 3:
                                    //anmationCtr 
                                    this._animationCtr = new AnimationController_1.AnimationController();
                                    this._animationCtr.init(_animPlayerHd, StageMgr_3.StageMgr.actionBaseConfigObj); //configObj可以从配置中取出
                                    //播放idle 
                                    this.playAnim("Idle");
                                    //
                                    this._inited = true;
                                    //脚底阴影
                                    _b = this;
                                    _c = this;
                                    return [4 /*yield*/, PoolMgr_2.PoolMgr.baseModlePool.newObj(RoleDoll.shadowResName, GameMgr_11.GameMgr.itemPath_Policy(RoleDoll.shadowResName), GameMgr_11.GameMgr.engineParallel)];
                                case 4:
                                    //脚底阴影
                                    _b.shadow = _c._roleShadow = _d.sent();
                                    this.shadow.localPosition.y = 0.06;
                                    this.model.addChild(this.shadow);
                                    //init end list act
                                    this._initedWaits.forEach(function (v) {
                                        v(null);
                                    });
                                    this._initedWaits.length = 0;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                //设置号码
                RoleDoll.prototype.setNum = function (num) {
                    // this.num = num;
                    // let guid = this.role.roleData.guid;
                    // if (num.length == 1) {
                    //     // tslint:disable-next-line: no-parameter-reassignment
                    //     this.num = "0" + num;
                    // }
                    // if (this._model.engineType == engineParallelType.none) {
                    //     if (this.role.roleData.roleType == RoleTypeEnum.Player) {
                    //         let trans = this._model.rawHandle as m4m.framework.transform;
                    //         let tempTran = trans.find("body_shuzi");
                    //         let skinmr = tempTran.gameObject.getFirstComponentInChildren("skinnedMeshRenderer") as m4m.framework.skinnedMeshRenderer;
                    //         // 下载贴图
                    //         let src = GameMgr.TexPath + "roleNum/" + this.num + ".png";
                    //         let newMat: m4m.framework.material;
                    //         let mat: m4m.framework.material = skinmr.materials[0];
                    //         newMat = mat.clone();//clone原皮肤参数  用于新的皮
                    //         commTool.loaderTextureFun(src, (_tex) => {
                    //             // console.error(skinmr.materials[0]);
                    //             if (newMat && skinmr.materials && this.role.roleData) {
                    //                 newMat.setTexture("_MainTex", _tex);
                    //                 skinmr.materials[0] = newMat;
                    //             }
                    //         });
                    //     }
                    // }
                };
                RoleDoll.prototype.getNum = function () {
                    return this.num;
                };
                /** 获取 一个 等待 init完成的回调 */
                RoleDoll.prototype.waitInited = function () {
                    var _this = this;
                    return new Promise(function (resolve, reject) {
                        if (_this._inited) {
                            resolve(null);
                        }
                        else {
                            _this._initedWaits.push(resolve);
                        }
                    });
                };
                RoleDoll.prototype.UpdateLogic = function (dt) {
                    this.updateMoveToTargetPoint(dt);
                };
                RoleDoll.prototype.dispose = function () {
                    this.moveSpeed = 0;
                    if (this.targetPoint) {
                        m4m.poolv3_del(this.targetPoint);
                        this.targetPoint = null;
                    }
                    if (this._model) {
                        this._model.removeChild(this.shadow);
                        PoolMgr_2.PoolMgr.baseModlePool.deleteObj(this._model);
                        var _p = this._model.getParent();
                        if (_p) {
                            _p.removeChild(this._model);
                        }
                        this._model = null;
                    }
                    if (this._animationCtr) {
                        this._animationCtr.dispose();
                        this._animationCtr = null;
                    }
                };
                /**
                 * 播放动画
                 * @param animName      动画名
                 * @param needPlayEnd   是否返回 （为true时等待播放结束的Promise）
                 */
                RoleDoll.prototype.playAnim = function (animName, needPlayEnd) {
                    var _this = this;
                    if (needPlayEnd === void 0) { needPlayEnd = false; }
                    // this._animPlayerHandle.playAnimByName(`${animName}.FBAni.aniclip.bin`);
                    // console.error("播动作 ",animName);
                    this._animationCtr.play(animName);
                    if (!needPlayEnd) {
                        return;
                    }
                    //等待播放 结束 
                    var _p = new Promise(function (resolve) {
                        var obj = {
                            onPlayEnd: function (ev) {
                                if (ev.stateName == animName) {
                                    _this._animationCtr.RemoveListener("onStatePlayEnd", obj.onPlayEnd, obj);
                                    resolve(null);
                                }
                            },
                        };
                        _this._animationCtr.On("onStatePlayEnd", obj.onPlayEnd, obj);
                    });
                    return _p;
                };
                RoleDoll.prototype.playFX = function (fxName) {
                };
                /** 暂停动画播放 */
                RoleDoll.prototype.stopAnim = function () {
                    this._animationCtr.stop();
                };
                /**
                 * 行走一步
                 * @param dt dt 时间
                 * @param moveVelocity 移动速度
                 * @param forwarddRotate 角色转到前方旋转
                 */
                RoleDoll.prototype.walkStep = function (dt, moveVelocity, forwarddRotate) {
                    var _m = this._model;
                    //检查播放 行走动画
                    //获取方向 和 速度
                    var vel = moveVelocity;
                    //没有速度 
                    if (gameMathUtil_4.gameMathUtil.vec2SqrLength(vel) <= 0.001) {
                        return;
                    }
                    // let pos = _m.localPosition;
                    // let rot = _m.localRotate;
                    // let addV3 = RoleDoll.helpV3;
                    var realVel = RoleDoll.helpV3v1;
                    realVel.x = vel.x;
                    realVel.z = vel.y;
                    realVel.y = 0;
                    m4m.math.quatTransformVector(forwarddRotate, realVel, realVel);
                    // // addV3.x = pos.x + vel.x * dt;
                    // // addV3.z = pos.z + vel.y * dt;
                    // addV3.x = pos.x + realVel.x * dt;
                    // addV3.z = pos.z + realVel.z * dt;
                    // addV3.y = pos.y;
                    // m4m.math.quatLookat(pos, addV3, rot);
                    // _m.localPosition = addV3;
                    // _m.localRotate = rot;
                    m4m.math.vec3ScaleByNum(realVel, dt, realVel);
                    //
                    this.moveByVelocity(realVel.x, realVel.z);
                };
                RoleDoll.prototype.getTopPos = function (pos) {
                    m4m.math.vec3Clone(this._top.getWorldPosition(), pos);
                    pos.y += 2.3;
                };
                // 暂时这么写, 玩家脸, 根据token
                RoleDoll.prototype.makePlayerFace = function () {
                    // for (let s of this.faceDatas) {
                    //     this.model.find(s).gameObject.visible = false;
                    // }
                    // for (let s of this.hairDatas) {
                    //     this.model.find(s).gameObject.visible = false;
                    // }
                    // let guid = this.role.roleData.guid;
                    // let i1 = guid.charCodeAt(0) % 6;
                    // let i2 = guid.charCodeAt(1) % 6;
                    // //let i1 = gameMathUtil.RandRange(0, this.faceDatas.length, true);
                    // //let i2 = gameMathUtil.RandRange(0, this.hairDatas.length, true);
                    // this.model.find(this.faceDatas[i1]).gameObject.visible = true;
                    // this.model.find(this.hairDatas[i2]).gameObject.visible = true;
                };
                //开始移动
                // tslint:disable-next-line: member-ordering
                RoleDoll.prototype.moveToTarget = function (_pos, moveTime, moveType) {
                    // let a = { pos: _pos, moveTime, moveType };
                    // this.TargetPointArr.push(a);
                    // if (this.targetPoint) {
                    //     return;
                    // }
                    // this.newFun();
                    // let pointInfo = this.TargetPointArr.shift();
                    // let moveTime = pointInfo.moveTime;
                    // let moveType = pointInfo.moveType;
                    // this.posInfo["moveType"] = PlayerMoveType.walk;//1走路  2跳  3跑(冲刺)
                    // console.error("其他玩家同步移动的点 ", _pos, moveType);
                    // tslint:disable-next-line: switch-default
                    switch (moveType) {
                        case GameEnum_2.PlayerMoveType.homing:
                            this.role.roleCtr.handleInput(GameEnum_2.RoleActInput.Direction_Release);
                            break;
                        case GameEnum_2.PlayerMoveType.walk:
                            this.role.roleCtr.handleInput(GameEnum_2.RoleActInput.Walk);
                            break;
                        case GameEnum_2.PlayerMoveType.jump:
                            this.role.roleCtr.handleInput(GameEnum_2.RoleActInput.Jump);
                            break;
                        case GameEnum_2.PlayerMoveType.run:
                            this.role.roleCtr.handleInput(GameEnum_2.RoleActInput.SpeedUp);
                            // tslint:disable-next-line: switch-final-break
                            break;
                    }
                    var apos = _pos;
                    var pos = m4m.poolv3(apos);
                    pos.y = 0;
                    this.targetPoint = pos;
                    var _m = this.model;
                    //实际移动到目标点的时间=原时间-网络同步的延迟时间
                    var trueTime = moveTime; //- (PingTimeManager.Instance.timeQualityNum) / 1000;
                    this.moveSpeed = 0;
                    if (trueTime <= 0) {
                        //直接瞬移到目标点
                        this.targetPoint.y = _m.localPosition.y;
                        m4m.math.vec3Clone(this.targetPoint, _m.localPosition);
                        _m.localPosition = _m.localPosition;
                        // console.error("直接瞬移到目标点");
                        this.stop();
                    }
                    else {
                        var _Mpos = _m.localPosition;
                        var vePos = RoleDoll.helpV3v4;
                        m4m.math.vec3Clone(_Mpos, vePos);
                        vePos.y = 0;
                        var distance = m4m.math.vec3Distance(vePos, this.targetPoint);
                        this.moveSpeed = distance / trueTime;
                        // console.error(vePos, this.targetPoint, "  ++++++  ", distance);
                    }
                    // console.error(trueTime, "算出来的速度值 ", this.moveSpeed, "    ", trueTime);
                };
                //停止移动
                // tslint:disable-next-line: member-ordering
                RoleDoll.prototype.stop = function (trueStop) {
                    var _this = this;
                    if (trueStop === void 0) { trueStop = false; }
                    this.moveSpeed = 0;
                    m4m.poolv3_del(this.targetPoint);
                    this.targetPoint = null;
                    // if (this.TargetPointArr.length > 0) {
                    //     this.newFun();
                    // }
                    setTimeout(function () {
                        // tslint:disable-next-line: no-conditional-assignment
                        // console.error("停止111111111");
                        if (_this.targetPoint == null && _this._animationCtr) {
                            if (_this.role.roleCtr.state.state == GameEnum_2.RoleActInput.Direction || _this.role.roleCtr.state.state == GameEnum_2.RoleActInput.SpeedUp) {
                                // this.playAnim("idle");
                                // console.error("停止");
                                _this.role.roleCtr.handleInput(GameEnum_2.RoleActInput.Direction_Release);
                            }
                        }
                    }, 50);
                };
                // //停止移动
                // public stopMoveTarget() {
                //     m4m.poolv3_del(this.targetPoint);
                //     this.targetPoint = null;
                // }
                // tslint:disable-next-line: member-ordering
                /**
                 * 根据距离和到达时间计算出行走的速度
                 * @param dt
                 * @returns
                 */
                RoleDoll.prototype.updateMoveToTargetPoint = function (dt) {
                    if (!this.targetPoint) {
                        return;
                    }
                    var _m = this.model;
                    var _mPos = _m.localPosition;
                    var vePos = RoleDoll.helpV3v3;
                    m4m.math.vec3Clone(_mPos, vePos);
                    vePos.y = 0;
                    var currDist = m4m.math.vec3Distance(vePos, this.targetPoint);
                    var moveDist = dt * this.moveSpeed; //moveSpeed
                    //到达目标点
                    if (moveDist >= currDist) {
                        // this.setTargetPoint();
                        // let rot: m4m.math.vector3 = m4m.math.pool.new_vector3();
                        // rot.x = 0;
                        // rot.y = this.targetAngle;
                        // rot.z = 0;
                        // this.currentRole.rotation = rot;
                        this.targetPoint.y = _m.localPosition.y;
                        m4m.math.vec3Clone(this.targetPoint, _m.localPosition);
                        _m.localPosition = _m.localPosition;
                        this.stop();
                        // console.error("停下来的点 ", this.model.localPosition);
                    }
                    else {
                        // this.currentRole.rotateTo(this.targetAngle);
                        // let pos: m4m.math.vector3 = Vector3Util.Instance.MoveTo(currentRole.localPosition, this.targetPoint, distance);
                        if (this._animationCtr.getCurrentStateName() == "Idle") {
                            // this.playAnim("walk");
                            this.role.roleCtr.handleInput(GameEnum_2.RoleActInput.Direction);
                        }
                        var vel = RoleDoll.helpV3;
                        m4m.math.vec3Subtract(this.targetPoint, vePos, vel);
                        // m4m.math.vec3Normalize(vel, vel);
                        m4m.math.vec3ScaleByNum(vel, moveDist / currDist, vel);
                        this.moveByVelocity(vel.x, vel.z);
                        // m4m.math.vec3Add(_mPos, vel, _mPos);
                        // _m.localPosition = _mPos;
                        // m4m.math.pool.delete_vector3(pos);
                        // let pos: m4m.math.vector3 = Vector3Util.Instance.MoveTo(currentRole.localPosition, this.targetPoint, distance);
                        // m4m.math.vec3Clone(pos, currentRole.localPosition);
                        // currentRole.localPosition = currentRole.localPosition;
                        // m4m.math.pool.delete_vector3(pos);
                        // let pos: m4m.math.vector3 = Vector3Util.Instance.MoveTo(_m.localPosition, this.targetPoint, moveDist);
                        // m4m.math.vec3Clone(pos, _m.localPosition);
                        // _m.localPosition = _m.localPosition;
                        // m4m.math.pool.delete_vector3(pos);
                    }
                    // console.error(moveDist , currDist,"根据距离和到达时间计算出行走的速度 ",this.model.localPosition);
                };
                /**
                 * 移动通过 速度向量
                 * @param velX 速度向量X
                 * @param velY 速度向量Y
                 */
                RoleDoll.prototype.moveByVelocity = function (velX, velY) {
                    var _m = this._model;
                    var pos = _m.localPosition;
                    var rot = _m.localRotate;
                    var addV3 = m4m.poolv3();
                    addV3.x = pos.x + velX;
                    addV3.z = pos.z + velY;
                    addV3.y = pos.y;
                    if (!this.role.isTarPointMove && SceneObstacleMgr_1.SceneObstacleMgr.isEnable) {
                        this.adjustByObs(pos, addV3, addV3);
                    }
                    if (gameMathUtil_4.gameMathUtil.vec3DisSqr(pos, addV3) > 0.0001) {
                        m4m.math.quatLookat(pos, addV3, rot);
                        _m.localRotate = rot;
                    }
                    _m.localPosition = addV3;
                    m4m.poolv3_del(addV3);
                };
                //调整障碍碰撞后的 速度向量
                RoleDoll.prototype.adjustByObs = function (p0, p1, outPos) {
                    if (!SceneObstacleMgr_1.SceneObstacleMgr.isEnable) {
                        return;
                    }
                    var _p0 = m4m.poolv2();
                    m4m.math.vec2Set(_p0, p0.x, p0.z);
                    var _p1 = m4m.poolv2();
                    m4m.math.vec2Set(_p1, p1.x, p1.z);
                    var tempV3 = m4m.poolv3();
                    var ishited = SceneObstacleMgr_1.SceneObstacleMgr.calcLineCollisionPoint(_p0, _p1, tempV3);
                    if (ishited) {
                        m4m.math.vec3Clone(tempV3, outPos);
                        outPos.y = p0.y;
                    }
                    m4m.poolv3_del(tempV3);
                    m4m.poolv2_del(_p1);
                    m4m.poolv2_del(_p0);
                };
                /** 获取 角色挂在位置点 */
                RoleDoll.prototype.setHole = function (_modle) {
                    this._top = _modle;
                };
                /** 蒙皮动画 根节点 名 */
                RoleDoll.BoonRoot = "__BoonRoot__";
                /** 角色 上下动效关键帧数据 */
                RoleDoll.roleKFDatas = [[0, 0], [0.166, -0.174], [0.666, 0]];
                // private _animPlayerHandle: ISpAnimPlayerHandle;
                RoleDoll.adBoneAddedTag = "__adBoneAdded__";
                RoleDoll._isPlayerBoneNameMap = {};
                RoleDoll.helpQua = new m4m.math.quaternion();
                RoleDoll.helpV2 = new m4m.math.vector2();
                RoleDoll.helpV2v1 = new m4m.math.vector2();
                RoleDoll.helpV2v2 = new m4m.math.vector2();
                RoleDoll.helpV2v3 = new m4m.math.vector2();
                RoleDoll.helpV3 = new m4m.math.vector3();
                // private static readonly helpV3: m4m.math.vector3 = new Proxy(new m4m.math.vector3(), {
                //     set(target, p, v) {
                //         if (isNaN(v)) {
                //             console.error("调试:102901:helpV3设置属性为NAN!!!!", p, v);
                //         }
                //         target[p] = v;
                //         return true;
                //     },
                // });
                RoleDoll.helpV3v1 = new m4m.math.vector3();
                RoleDoll.helpV3v2 = new m4m.math.vector3();
                RoleDoll.helpV3v3 = new m4m.math.vector3();
                RoleDoll.helpV3v4 = new m4m.math.vector3();
                RoleDoll.shadowResName = "roleShadow";
                return RoleDoll;
            }());
            exports_36("RoleDoll", RoleDoll);
        }
    };
});
System.register("Scene/SceneInterface", [], function (exports_37, context_37) {
    "use strict";
    var __moduleName = context_37 && context_37.id;
    return {
        setters: [],
        execute: function () {
        }
    };
});
System.register("Scene/SceneBattle", ["Core/PoolMgr", "Core/StageMgr", "GameMgr"], function (exports_38, context_38) {
    "use strict";
    var PoolMgr_3, StageMgr_4, GameMgr_12, SceneBattle;
    var __moduleName = context_38 && context_38.id;
    return {
        setters: [
            function (PoolMgr_3_1) {
                PoolMgr_3 = PoolMgr_3_1;
            },
            function (StageMgr_4_1) {
                StageMgr_4 = StageMgr_4_1;
            },
            function (GameMgr_12_1) {
                GameMgr_12 = GameMgr_12_1;
            }
        ],
        execute: function () {
            /** 战斗场景 */
            SceneBattle = /** @class */ (function () {
                function SceneBattle(config) {
                    this.config = config;
                }
                SceneBattle.prototype.show = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var resName, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    resName = this.config.name;
                                    if (!!this.model) return [3 /*break*/, 2];
                                    _a = this;
                                    return [4 /*yield*/, PoolMgr_3.PoolMgr.baseModlePool.newObj(resName, GameMgr_12.GameMgr.scenePath_Policy(resName), GameMgr_12.GameMgr.engineParallel)];
                                case 1:
                                    _a.model = _b.sent();
                                    _b.label = 2;
                                case 2:
                                    if (!this.model) {
                                        console.error("\u573A\u666F\u8D44\u6E90 ".concat(resName, " \u6CA1\u6709\u627E\u5230 "));
                                        return [2 /*return*/];
                                    }
                                    //放入场景root节点
                                    StageMgr_4.StageMgr.sceneRoot.addChild(this.model);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                SceneBattle.prototype.hied = function () {
                    if (!this.model) {
                        return;
                    }
                    var _p = this.model.getParent();
                    _p.removeChild(_p);
                    PoolMgr_3.PoolMgr.baseModlePool.deleteObj(this.model); //入池
                    this.model = null;
                };
                SceneBattle.prototype.dispose = function () {
                    this.hied();
                    if (this.model) {
                        this.model.dispose();
                    } //节点 dispose
                    //资源
                    this.model = null;
                };
                return SceneBattle;
            }());
            exports_38("SceneBattle", SceneBattle);
        }
    };
});
System.register("Scene/SceneHomeMap", ["Core/PoolMgr", "Core/StageMgr", "GameMgr"], function (exports_39, context_39) {
    "use strict";
    var PoolMgr_4, StageMgr_5, GameMgr_13, SceneHomeMap;
    var __moduleName = context_39 && context_39.id;
    return {
        setters: [
            function (PoolMgr_4_1) {
                PoolMgr_4 = PoolMgr_4_1;
            },
            function (StageMgr_5_1) {
                StageMgr_5 = StageMgr_5_1;
            },
            function (GameMgr_13_1) {
                GameMgr_13 = GameMgr_13_1;
            }
        ],
        execute: function () {
            /** 首页 主菜单场景 */
            SceneHomeMap = /** @class */ (function () {
                function SceneHomeMap(config) {
                    this._config = config;
                }
                Object.defineProperty(SceneHomeMap.prototype, "model", {
                    get: function () {
                        return this._model;
                    },
                    enumerable: false,
                    configurable: true
                });
                SceneHomeMap.prototype.show = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var resName, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    resName = this._config.name;
                                    if (!!this._model) return [3 /*break*/, 2];
                                    _a = this;
                                    return [4 /*yield*/, PoolMgr_4.PoolMgr.baseModlePool.newObj(resName, GameMgr_13.GameMgr.scenePath_Policy(resName), GameMgr_13.GameMgr.engineParallel)];
                                case 1:
                                    _a._model = _b.sent();
                                    _b.label = 2;
                                case 2:
                                    if (!this._model) {
                                        console.error("\u573A\u666F\u8D44\u6E90 ".concat(resName, " \u6CA1\u6709\u627E\u5230 "));
                                        return [2 /*return*/];
                                    }
                                    // gd3d.math.vec3Clone(this._config.sceneScale,this._model.localScale);
                                    // this._model.localScale = this._model.localScale;
                                    //放入场景root节点
                                    StageMgr_5.StageMgr.sceneRoot.addChild(this._model);
                                    return [2 /*return*/, null];
                            }
                        });
                    });
                };
                SceneHomeMap.prototype.hied = function () {
                    if (!this._model) {
                        return;
                    }
                    var _p = this._model.getParent();
                    _p.removeChild(_p);
                    PoolMgr_4.PoolMgr.baseModlePool.deleteObj(this._model); //入池
                    this._model = null;
                };
                SceneHomeMap.prototype.dispose = function () {
                    this.hied();
                    if (this._model) {
                        this._model.dispose();
                    } //节点 dispose
                    //资源
                    this._model = null;
                };
                return SceneHomeMap;
            }());
            exports_39("SceneHomeMap", SceneHomeMap);
        }
    };
});
System.register("Scene/SceneMgr", ["Data/ReuseArray", "eventMgr", "events/sceneVisualEvent", "SceneBase", "Tools/commTool", "Core/GameLogic", "Core/StageMgr", "Scene/SceneBattle", "Scene/SceneCamAvoidObsCtr", "Scene/SceneHomeMap", "Scene/SceneObstacleMgr"], function (exports_40, context_40) {
    "use strict";
    var ReuseArray_3, eventMgr_5, sceneVisualEvent_1, SceneBase_1, commTool_5, GameLogic_2, StageMgr_6, SceneBattle_1, SceneCamAvoidObsCtr_1, SceneHomeMap_1, SceneObstacleMgr_2, SceneMgr;
    var __moduleName = context_40 && context_40.id;
    return {
        setters: [
            function (ReuseArray_3_1) {
                ReuseArray_3 = ReuseArray_3_1;
            },
            function (eventMgr_5_1) {
                eventMgr_5 = eventMgr_5_1;
            },
            function (sceneVisualEvent_1_1) {
                sceneVisualEvent_1 = sceneVisualEvent_1_1;
            },
            function (SceneBase_1_1) {
                SceneBase_1 = SceneBase_1_1;
            },
            function (commTool_5_1) {
                commTool_5 = commTool_5_1;
            },
            function (GameLogic_2_1) {
                GameLogic_2 = GameLogic_2_1;
            },
            function (StageMgr_6_1) {
                StageMgr_6 = StageMgr_6_1;
            },
            function (SceneBattle_1_1) {
                SceneBattle_1 = SceneBattle_1_1;
            },
            function (SceneCamAvoidObsCtr_1_1) {
                SceneCamAvoidObsCtr_1 = SceneCamAvoidObsCtr_1_1;
            },
            function (SceneHomeMap_1_1) {
                SceneHomeMap_1 = SceneHomeMap_1_1;
            },
            function (SceneObstacleMgr_2_1) {
                SceneObstacleMgr_2 = SceneObstacleMgr_2_1;
            }
        ],
        execute: function () {
            SceneMgr = /** @class */ (function () {
                /** 场景管理器 */
                function SceneMgr() {
                }
                SceneMgr.init = function () {
                    this._sceneVEvent = new sceneVisualEvent_1.SceneVisualEvent();
                    //
                    SceneObstacleMgr_2.SceneObstacleMgr.init();
                    SceneCamAvoidObsCtr_1.SceneCamAvoidObsCtr.init();
                    eventMgr_5.EventMgr.addListener("scene_show", this.show, this);
                    eventMgr_5.EventMgr.addListener("scene_hide", this.hide, this);
                };
                SceneMgr.getSceneByID = function (id) {
                    return this._cacheMap[id];
                };
                SceneMgr.tryGet = function (id) {
                    return this._cacheMap[id];
                };
                SceneMgr.show = function (ev) {
                    return __awaiter(this, void 0, void 0, function () {
                        var sId, uiName, sType, resName, conf, obsName, _scene;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    sId = ev.sceneID;
                                    uiName = ev.uiName;
                                    resName = "";
                                    return [4 /*yield*/, SceneBase_1.SceneBase.getDataByID(sId)];
                                case 1:
                                    conf = _a.sent();
                                    if (!conf) {
                                        console.error("".concat(SceneBase_1.SceneBase.name, " \u8868\u683C \u4E2D\u627E\u4E0D\u5230 id\uFF1A").concat(sId));
                                        return [2 /*return*/];
                                    }
                                    obsName = conf.obstacleRes;
                                    if (!obsName) return [3 /*break*/, 3];
                                    return [4 /*yield*/, SceneObstacleMgr_2.SceneObstacleMgr.show(obsName)];
                                case 2:
                                    _a.sent();
                                    _a.label = 3;
                                case 3:
                                    //
                                    sType = conf.type;
                                    resName = conf.name;
                                    _scene = this.tryGet(sId);
                                    if (!_scene) {
                                        switch (sType) {
                                            case sceneVisualEvent_1.SceneType.HomeMap:
                                                _scene = new SceneHomeMap_1.SceneHomeMap(conf);
                                                break;
                                            case sceneVisualEvent_1.SceneType.Battle:
                                                _scene = new SceneBattle_1.SceneBattle(conf);
                                                break;
                                            // case SceneType.Showroom:
                                            //     _scene = new SceneShowRoom(conf);
                                            //     break;
                                            default:
                                        }
                                    }
                                    //放入 map
                                    this._cacheMap[sId] = _scene;
                                    //show
                                    _scene.show()
                                        .then(function () {
                                        // console.error("显示 场景", sId);
                                        //cam 
                                        _this.setSceneCam(_scene, conf);
                                        _this.setFog(conf);
                                        _this.trySetCamAvoidObsModel(conf);
                                        //场景显示切换 event
                                        _this._sceneVEvent.isShow = true;
                                        _this._sceneVEvent.sceneID = sId;
                                        _this._sceneVEvent.sceneType = sType;
                                        _this._sceneVEvent.uiName = uiName;
                                        eventMgr_5.EventMgr.dispatchEvent("scene_visual_change", _this._sceneVEvent);
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                //设置 相机躲避的场景模型
                SceneMgr.trySetCamAvoidObsModel = function (conf) {
                    if (!conf.camAvoidObs) {
                        return;
                    }
                    var arr;
                    try {
                        arr = JSON.parse(conf.camAvoidObs);
                    }
                    catch (error) {
                        console.error("\u914D\u7F6E SceneBase  ID :".concat(conf.id, " ,  camAvoidObs \u4E0D\u6B63\u786E\uFF0CJson\u89E3\u6790\u5931\u8D25\uFF01 "));
                    }
                    if (!arr) {
                        return;
                    }
                    for (var i = 0, len = arr.length; i < len; i++) {
                        var node = commTool_5.commTool.get3DNodeByPath(arr[i]);
                        if (!node) {
                            console.error("SceneBase ID:".concat(conf.id, " camAvoidObs \u4E2D\u7684 \u7B2C<").concat(i + 1, ">\u4E2A\u5BF9\u8C61 \u83B7\u53D6\u5931\u8D25\uFF01"));
                            continue;
                        }
                        //设置 相机检查的特定层级
                        node.gameObject.layer = GameLogic_2.GameLogic.layerIndexBuilding;
                    }
                };
                SceneMgr.hide = function (ev) {
                    var sId = ev.sceneID;
                    var _scene = this.tryGet(sId);
                    if (!_scene) {
                        return;
                    }
                    if (ev.dispose) {
                        _scene.dispose();
                        delete this._cacheMap[sId];
                        // console.error("释放 场景资源", sId);
                    }
                    else {
                        _scene.hied();
                        // console.error("隐藏 场景资源", sId);
                    }
                    // ev.dispose;
                    var sType = sceneVisualEvent_1.SceneType.Battle; //取配置
                    //try hide obs
                    SceneObstacleMgr_2.SceneObstacleMgr.remove();
                    //event
                    this._sceneVEvent.isShow = false;
                    this._sceneVEvent.sceneID = sId;
                    this._sceneVEvent.sceneType = sType;
                    eventMgr_5.EventMgr.dispatchEvent("scene_visual_change", this._sceneVEvent);
                };
                /** 设置场景相机 */
                SceneMgr.setSceneCam = function (_scene, config) {
                    StageMgr_6.StageMgr.camCtr.enabled = true; //关闭跟随
                    //test cam set 之后读取配置--------
                    //*读配置
                    var activeCam = StageMgr_6.StageMgr.mainCam;
                    //位置
                    activeCam.gameObject.transform.setWorldPosition(config.camPos);
                    //旋转
                    var wR = activeCam.gameObject.transform.getWorldRotate();
                    var euler = config.camEuler;
                    m4m.math.quatFromEulerAngles(euler.x, euler.y, euler.z, wR);
                    activeCam.gameObject.transform.setWorldRotate(wR);
                    //参数
                    activeCam.fov = commTool_5.commTool.toRadian * config.camFOV;
                    activeCam.far = config.camFar;
                    activeCam.near = config.camNear;
                };
                /** 设置雾效 */
                SceneMgr.setFog = function (config) {
                    if (!config.enableFog) {
                        m4m.framework.sceneMgr.scene.fog = null;
                    }
                    else {
                        m4m.framework.sceneMgr.scene.fog = new m4m.framework.Fog();
                        var c = config.fogColor;
                        m4m.framework.sceneMgr.scene.fog._Color = new m4m.math.vector4(c.x, c.y, c.z, 1);
                        m4m.framework.sceneMgr.scene.fog._Start = config.fogStart;
                        m4m.framework.sceneMgr.scene.fog._End = config.fogEnd;
                    }
                };
                SceneMgr.helpV2 = new m4m.math.vector2();
                SceneMgr.helpV2v1 = new m4m.math.vector2();
                SceneMgr.helpV2v2 = new m4m.math.vector2();
                SceneMgr.helpV2v3 = new m4m.math.vector2();
                SceneMgr.helpV2v4 = new m4m.math.vector2();
                SceneMgr.helpV2v5 = new m4m.math.vector2();
                SceneMgr.helpV3 = new m4m.math.vector3();
                SceneMgr.helpV3v1 = new m4m.math.vector3();
                SceneMgr.helpNumReuseArr = new ReuseArray_3.ReuseArray();
                SceneMgr._cacheMap = {};
                return SceneMgr;
            }());
            exports_40("SceneMgr", SceneMgr);
        }
    };
});
System.register("Scene/SceneCamAvoidObsCtr", ["Tools/LateUpdateMgr", "Core/GameLogic", "Core/StageMgr"], function (exports_41, context_41) {
    "use strict";
    var LateUpdateMgr_1, GameLogic_3, StageMgr_7, SceneCamAvoidObsCtr;
    var __moduleName = context_41 && context_41.id;
    return {
        setters: [
            function (LateUpdateMgr_1_1) {
                LateUpdateMgr_1 = LateUpdateMgr_1_1;
            },
            function (GameLogic_3_1) {
                GameLogic_3 = GameLogic_3_1;
            },
            function (StageMgr_7_1) {
                StageMgr_7 = StageMgr_7_1;
            }
        ],
        execute: function () {
            SceneCamAvoidObsCtr = /** @class */ (function () {
                /**
                 * 场景相机 避开障碍阻挡 控制器
                 */
                function SceneCamAvoidObsCtr() {
                }
                Object.defineProperty(SceneCamAvoidObsCtr, "active", {
                    /** 是否激活 */
                    get: function () { return this._active; },
                    set: function (val) { this._active = val; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SceneCamAvoidObsCtr, "baseDistance", {
                    /** 相机看向目标的基础距离 */
                    get: function () { return this._baseDistance; },
                    set: function (val) {
                        if (isNaN(val)) {
                            return;
                        }
                        var v = val < this._minDistance ? this._minDistance : val;
                        if (v == this._baseDistance) {
                            return;
                        }
                        this._baseDistance = v;
                        this._currDistance = v;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SceneCamAvoidObsCtr, "minDistance", {
                    /** 相机能拉近的最大距离 */
                    get: function () { return this._minDistance; },
                    set: function (val) {
                        if (isNaN(val)) {
                            return;
                        }
                        this._minDistance = val < 0 ? 0 : val;
                        if (this._baseDistance < this._minDistance) {
                            this.baseDistance = this._minDistance;
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                SceneCamAvoidObsCtr.init = function () {
                    //update fun reg
                    LateUpdateMgr_1.LateUpdateMgr.Add(this.lateUpdate, this);
                };
                SceneCamAvoidObsCtr.lateUpdate = function (dt) {
                    if (!this._active) {
                        return;
                    }
                    var camCtr = StageMgr_7.StageMgr.camCtr;
                    if (!camCtr) {
                        return;
                    }
                    if (this._enableCkObs) {
                        this.ckObs(dt);
                    }
                    if (camCtr.distance == this._currDistance) {
                        return;
                    }
                    //渐进 相机距离调整
                    camCtr.distance = m4m.math.numberLerp(camCtr.distance, this._currDistance, dt * this._moveSpeed);
                    if (Math.abs(camCtr.distance - this._currDistance) < 0.01) {
                        camCtr.distance = this._currDistance;
                    }
                };
                // 检查障碍
                SceneCamAvoidObsCtr.ckObs = function (dt) {
                    this._ckObsTimeCounter -= dt;
                    if (this._ckObsTimeCounter > 0) {
                        return;
                    }
                    this._ckObsTimeCounter = this._ckObsTime;
                    var _ray = SceneCamAvoidObsCtr.helpRay;
                    var _pickInfo = SceneCamAvoidObsCtr.helpPickInfo;
                    //检查是否 相机看角色被阻挡
                    // let _layerMask = m4m.framework.CullingMask.everything; //仅碰特定层
                    var _layerMask = GameLogic_3.GameLogic.layerBitBuilding; //仅碰特定层
                    var scene = m4m.framework.sceneMgr.scene;
                    var cam = scene.mainCamera;
                    var camPos = cam.gameObject.transform.localPosition;
                    StageMgr_7.StageMgr.camCtr.getRealLookPoint(_ray.origin);
                    m4m.math.vec3Subtract(camPos, _ray.origin, _ray.direction);
                    m4m.math.vec3Normalize(_ray.direction, _ray.direction);
                    //打射线
                    var ishited = scene.pick(_ray, _pickInfo, true, StageMgr_7.StageMgr.sceneRoot.rawHandle, _layerMask);
                    // let rayLen = m4m.math.vec3Distance(_pickInfo.hitposition, camPos);
                    var rayLen = m4m.math.vec3Distance(_ray.origin, _pickInfo.hitposition);
                    if (ishited && rayLen <= this._baseDistance) {
                        var dis = rayLen - 0.1;
                        this._currDistance = dis < this._minDistance ? this._minDistance : dis > this._baseDistance ? this._baseDistance : dis;
                    }
                    else {
                        this._currDistance = this._baseDistance;
                    }
                };
                SceneCamAvoidObsCtr.helpV3 = new m4m.math.vector3();
                SceneCamAvoidObsCtr.helpV3v1 = new m4m.math.vector3();
                SceneCamAvoidObsCtr.helpV3v2 = new m4m.math.vector3();
                SceneCamAvoidObsCtr.helpRay = new m4m.framework.ray(new m4m.math.vector3(), new m4m.math.vector3());
                SceneCamAvoidObsCtr.helpPickInfo = new m4m.framework.pickinfo();
                SceneCamAvoidObsCtr._enableCkObs = true;
                SceneCamAvoidObsCtr._active = false;
                SceneCamAvoidObsCtr._minDistance = 5;
                SceneCamAvoidObsCtr._baseDistance = 10;
                SceneCamAvoidObsCtr._currDistance = 10;
                SceneCamAvoidObsCtr._ckObsTime = 0.15;
                SceneCamAvoidObsCtr._moveSpeed = 5;
                SceneCamAvoidObsCtr._ckObsTimeCounter = 0;
                return SceneCamAvoidObsCtr;
            }());
            exports_41("SceneCamAvoidObsCtr", SceneCamAvoidObsCtr);
        }
    };
});
System.register("Role/CameraViewInfo", [], function (exports_42, context_42) {
    "use strict";
    var CameraViewInfo;
    var __moduleName = context_42 && context_42.id;
    return {
        setters: [],
        execute: function () {
            /**
             * CameraViewInfo
             */
            CameraViewInfo = /** @class */ (function () {
                function CameraViewInfo() {
                    //斜角
                    this.tiltAngle = 0;
                    //环绕角
                    this.panAngle = 0;
                }
                return CameraViewInfo;
            }());
            exports_42("CameraViewInfo", CameraViewInfo);
        }
    };
});
System.register("Role/RoleMgr", ["eventMgr", "PSDUI/UiDataManager", "PSDUI/UiManager", "Tools/commTool", "Tools/FrameMgr", "Tools/gameMathUtil", "Tools/LateUpdateMgr", "Core/StageMgr", "Data/BindKeyName", "GameEnum", "GameMgr", "Scene/SceneCamAvoidObsCtr", "Role/Role"], function (exports_43, context_43) {
    "use strict";
    var eventMgr_6, UiDataManager_3, UiManager_4, commTool_6, FrameMgr_2, gameMathUtil_5, LateUpdateMgr_2, StageMgr_8, BindKeyName_3, GameEnum_3, GameMgr_14, SceneCamAvoidObsCtr_2, Role_1, RoleMgr, TopPosMap;
    var __moduleName = context_43 && context_43.id;
    return {
        setters: [
            function (eventMgr_6_1) {
                eventMgr_6 = eventMgr_6_1;
            },
            function (UiDataManager_3_1) {
                UiDataManager_3 = UiDataManager_3_1;
            },
            function (UiManager_4_1) {
                UiManager_4 = UiManager_4_1;
            },
            function (commTool_6_1) {
                commTool_6 = commTool_6_1;
            },
            function (FrameMgr_2_1) {
                FrameMgr_2 = FrameMgr_2_1;
            },
            function (gameMathUtil_5_1) {
                gameMathUtil_5 = gameMathUtil_5_1;
            },
            function (LateUpdateMgr_2_1) {
                LateUpdateMgr_2 = LateUpdateMgr_2_1;
            },
            function (StageMgr_8_1) {
                StageMgr_8 = StageMgr_8_1;
            },
            function (BindKeyName_3_1) {
                BindKeyName_3 = BindKeyName_3_1;
            },
            function (GameEnum_3_1) {
                GameEnum_3 = GameEnum_3_1;
            },
            function (GameMgr_14_1) {
                GameMgr_14 = GameMgr_14_1;
            },
            function (SceneCamAvoidObsCtr_2_1) {
                SceneCamAvoidObsCtr_2 = SceneCamAvoidObsCtr_2_1;
            },
            function (Role_1_1) {
                Role_1 = Role_1_1;
            }
        ],
        execute: function () {
            RoleMgr = /** @class */ (function () {
                /**
                 * 角色对象管理器
                 */
                function RoleMgr() {
                }
                Object.defineProperty(RoleMgr, "player", {
                    /** 玩家 角色 */
                    get: function () { return this._player; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(RoleMgr, "roleMap", {
                    get: function () {
                        return this._roleMap;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(RoleMgr, "topPosMap", {
                    get: function () {
                        return this._topPosMap;
                    },
                    set: function (value) {
                        this._topPosMap = value;
                    },
                    enumerable: false,
                    configurable: true
                });
                RoleMgr.setUpdateBattleRoleTop = function (v) {
                    this.isUpdateBattleRoleTop = v;
                };
                // /** test */
                RoleMgr.init = function () {
                    var _app = m4m.framework.sceneMgr.app;
                    // this.battleRoleReadyEv = new EventBase();
                    //update
                    LateUpdateMgr_2.LateUpdateMgr.Add(this.lateUpdate, this);
                    FrameMgr_2.FrameMgr.Add(this.update, this);
                    //事件reg
                    // EventMgr.addListener("player_make", this.onPlayerMake, this);
                    //player input 事件
                    eventMgr_6.EventMgr.addListener("rocker_Direction", this.onPlayerMove, this);
                    eventMgr_6.EventMgr.addListener("rocker_Release", this.onPlayerRocRelease, this);
                    eventMgr_6.EventMgr.addListener("rocker_JumpBtn_click", this.onJumpBtnClick, this);
                    eventMgr_6.EventMgr.addListener("rocker_AttackBtn_click", this.onAttackBtnClick, this);
                    eventMgr_6.EventMgr.addListener("rocker_RunBtn_Down", this.onRunDown, this);
                    eventMgr_6.EventMgr.addListener("rocker_RunBtn_Up", this.onRunUp, this);
                    eventMgr_6.EventMgr.addListener("rocker_View_move", this.onViewMove, this);
                    eventMgr_6.EventMgr.addListener("rocker_View_down", this.onViewDown, this);
                    // role Input
                    eventMgr_6.EventMgr.addListener("role_make", this.onMake, this);
                    eventMgr_6.EventMgr.addListener("role_remove", this.onRemove, this);
                    eventMgr_6.EventMgr.addListener("role_Direction", this.onInputDir, this);
                    eventMgr_6.EventMgr.addListener("role_DirRelease", this.onInputDirRelease, this);
                    eventMgr_6.EventMgr.addListener("role_speedUp", this.onInputSpeedUp, this);
                    eventMgr_6.EventMgr.addListener("role_speedUpRel", this.onInputSpeedUpRel, this);
                    eventMgr_6.EventMgr.addListener("role_jump", this.onInputJump, this);
                    eventMgr_6.EventMgr.addListener("role_attack", this.onInputAttack, this);
                    eventMgr_6.EventMgr.addListener("role_setPos", this.onSetPos, this);
                    eventMgr_6.EventMgr.addListener("role_setYRotate", this.onSetYRotate, this);
                    eventMgr_6.EventMgr.addListener("role_setAI", this.onSetAI, this);
                    //同步其他玩家信息
                    eventMgr_6.EventMgr.addListener("role_Data_upDate", this.onRoleDataUpDate, this);
                    eventMgr_6.EventMgr.addListener("role_view", this.setMainRoleCamInfo, this);
                    //清理其他角色
                    eventMgr_6.EventMgr.addListener("role_clear_Other", this.clearOtherRole, this);
                    this.roleRotateYFunBind = this.roleRotateYFun.bind(this);
                    //role_setYRotate
                    UiDataManager_3.UiDataManager.bindFunctionData(BindKeyName_3.BindKeyName.RoleRotateState, this.roleRotateYFunBind);
                };
                RoleMgr.getRoleByGUID = function (id) {
                    return this._roleMap[id];
                };
                RoleMgr.getRoleByNum = function (num) {
                    for (var k in this._roleMap) {
                        var role = this._roleMap[k];
                        if (role.roleData.name == num) {
                            return role;
                        }
                    }
                    return null;
                };
                //获取角色有效的transform
                RoleMgr.getRoleValidTrans = function (_role) {
                    if (!_role || !_role.roleDoll) {
                        return;
                    }
                    return _role.roleDoll.model;
                };
                //---------------------------Player --------------------------
                RoleMgr.onRunDown = function () {
                    if (!this._player) {
                        return;
                    }
                    this._player.roleCtr.handleInput(GameEnum_3.RoleActInput.SpeedUp);
                };
                RoleMgr.onRunUp = function () {
                    if (!this._player) {
                        return;
                    }
                    this._player.roleCtr.handleInput(GameEnum_3.RoleActInput.SpeedUp_Release);
                };
                RoleMgr.onViewDown = function () {
                    this._lastaCamPAngle = StageMgr_8.StageMgr.camCtr.panAngle;
                    this._lastaCamTAngle = StageMgr_8.StageMgr.camCtr.tiltAngle;
                };
                RoleMgr.onViewMove = function (ev) {
                    if (!this._player || !this._player.roleDoll) {
                        return;
                    }
                    var speed = 0.1;
                    StageMgr_8.StageMgr.camCtr.panAngle = this._lastaCamPAngle + ev.data.x * speed;
                    StageMgr_8.StageMgr.camCtr.tiltAngle = this._lastaCamTAngle + ev.data.y * speed;
                    this.adjustOrientation2Forward(this._player);
                };
                RoleMgr.onJumpBtnClick = function () {
                    if (!this._player || !this._player.roleDoll) {
                        return;
                    }
                    this.roleIptJump(this._player);
                };
                RoleMgr.onAttackBtnClick = function () {
                    if (!this._player || !this._player.roleDoll) {
                        return;
                    }
                    this.roleIptAttack(this._player);
                };
                RoleMgr.onPlayerMove = function (ev) {
                    if (!this._player || !this._player.roleDoll) {
                        return;
                    }
                    this.mainRoleIptMove(ev.data, this._player);
                };
                RoleMgr.onPlayerRocRelease = function () {
                    this.roleIptMoveReleas(this._player);
                };
                // // 创建 player 玩家
                // private static async onPlayerMake(ev: EventGeneric<{ roleInfo: RoleAttrInfo }>) {
                //     let setPos = ev.data.roleInfo.pos;
                //     if (this._player && this._player.roleDoll) {
                //         // tslint:disable-next-line: no-shadowed-variable
                //         let pos = this._player.roleDoll.model.localPosition;
                //         //处理更新
                //         if (setPos) {
                //             console.error("玩家已存在  同步位置 ", setPos);
                //             m4m.math.vec3Set(pos, setPos.x, setPos.y, setPos.z);
                //             //暂时这样写
                //             this._player.roleDoll.model.localPosition = pos;
                //             // tslint:disable-next-line: no-shadowed-variable
                //             let m = this._player.roleDoll.model;
                //             // tslint:disable-next-line: no-shadowed-variable
                //             let rot = m.localRotate;
                //             // tslint:disable-next-line: no-shadowed-variable
                //             let angle = ev.data.roleInfo.angle;
                //             m4m.math.quatFromAxisAngle(RoleMgr.helpV3UP, angle, rot);
                //             m.localRotate = rot;
                //             StageMgr.camCtr.setTarget(this._player.roleDoll.model);
                //             StageMgr.camCtr.distance = 15;
                //             StageMgr.camCtr.setTargetOffset(0, 1.5, 0);
                //             StageMgr.camCtr.tiltAngle = 7;
                //             StageMgr.camCtr.panAngle = 0;
                //             StageMgr.camCtr.maxTileAngle = 60;
                //             StageMgr.camCtr.minTileAngle = 5;
                //             StageMgr.mainCam.fov = commTool.toRadian * 32;
                //         }
                //         return;
                //     }
                //     let _player = new Role();
                //     await _player.init(ev.data.roleInfo.roleId, ev.data.roleInfo.GUID);
                //     this._roleMap[StageMgr.PlayerGUID] = _player;
                //     this._player = _player;
                //     let pos = _player.roleDoll.model.localPosition;
                //     if (setPos) {
                //         m4m.math.vec3Set(pos, setPos.x, setPos.y, setPos.z);
                //     } else {
                //         m4m.math.vec3Set(pos, 0, 0, 0);
                //     }
                //     // console.error("玩家位置", pos);
                //     _player.roleDoll.model.localPosition = pos;
                //     let m = _player.roleDoll.model;
                //     let rot = m.localRotate;
                //     let angle = ev.data.roleInfo.angle;
                //     m4m.math.quatFromAxisAngle(RoleMgr.helpV3UP, angle, rot);
                //     m.localRotate = rot;
                //     StageMgr.camCtr.setTarget(_player.roleDoll.model);
                //     StageMgr.camCtr.distance = 15;
                //     StageMgr.camCtr.setTargetOffset(0, 1.5, 0);
                //     StageMgr.camCtr.tiltAngle = 7;
                //     StageMgr.camCtr.panAngle = 0;
                //     StageMgr.camCtr.maxTileAngle = 60;
                //     StageMgr.camCtr.minTileAngle = 5;
                //     StageMgr.mainCam.fov = commTool.toRadian * 32;
                //     this.adjustOrientation2Forward(_player);
                //     this._evMakeSuccess.data = StageMgr.PlayerGUID;
                //     //抛 make 完毕事件
                //     EventMgr.dispatchEvent("role_makeSuccess", this._evMakeSuccess);
                //     let topMap = this.battleRoleTopEv.topPosMap;
                //     topMap[StageMgr.PlayerGUID] = { active: false, pos: new m4m.math.vector2() };
                // }
                //设置看向目标参数 (主玩家视角)
                RoleMgr.setMainRoleCamInfo = function (ev) {
                    // console.error("设置看向目标参数 (主玩家视角) ", this._player.roleData.guid);
                    StageMgr_8.StageMgr.camCtr.setTarget(this._player.roleDoll.model);
                    var info = ev.data.info;
                    var dis = info.distance;
                    StageMgr_8.StageMgr.camCtr.distance = dis;
                    var offset = info.camViewOffset;
                    StageMgr_8.StageMgr.camCtr.setTargetOffset(offset.x, offset.y, offset.z);
                    StageMgr_8.StageMgr.camCtr.tiltAngle = info.tiltAngle; //7;
                    StageMgr_8.StageMgr.camCtr.panAngle = info.panAngle; //0;//-180
                    StageMgr_8.StageMgr.camCtr.maxTileAngle = 60;
                    StageMgr_8.StageMgr.camCtr.minTileAngle = 5;
                    StageMgr_8.StageMgr.mainCam.fov = commTool_6.commTool.toRadian * 32;
                    this.adjustOrientation2Forward(this._player);
                    //相机 阻挡控制器
                    SceneCamAvoidObsCtr_2.SceneCamAvoidObsCtr.active = true;
                    SceneCamAvoidObsCtr_2.SceneCamAvoidObsCtr.baseDistance = dis;
                    //( 特殊处理 )调整完成后 设置 旋转
                    this.player.initRotate();
                    //设置相机看向目标参数完成
                    eventMgr_6.EventMgr.dispatchEvent("camera_View_Success", null);
                };
                /** 调整 角色的前方朝向 ，屏幕上方 */
                RoleMgr.adjustOrientation2Forward = function (role) {
                    if (!role || !role.roleDoll) {
                        return;
                    }
                    var _m = role.roleDoll.model;
                    var camForward = RoleMgr.helpV3;
                    StageMgr_8.StageMgr.camCtr.gameObject.transform.getForwardInWorld(camForward);
                    camForward.y = 0;
                    m4m.math.vec3Normalize(camForward, camForward);
                    var angle = gameMathUtil_5.gameMathUtil.calcAngleByVec(camForward.x, camForward.z) + 90;
                    var rot = RoleMgr.helpQuat;
                    m4m.math.quatFromAxisAngle(RoleMgr.helpV3UP, angle, rot);
                    // _m.localRotate = rot;    //人物转向 前方
                    m4m.math.quatClone(rot, role.forwarddRotate);
                };
                /**
                 * 获取 指定role 的前方 朝向 角度（）
                 * @param role
                 * @param isRadian 是否 是弧度制
                 * @returns
                 */
                RoleMgr.getRoleForwardAngle = function (role, isRadian) {
                    if (isRadian === void 0) { isRadian = true; }
                    var rDoll = role.roleDoll;
                    if (!rDoll) {
                        return;
                    }
                    var v3 = m4m.poolv3();
                    rDoll.model.getForwardInWorld(v3);
                    v3.y = 0;
                    m4m.math.vec3Normalize(v3, v3);
                    var fixNum = (isRadian ? gameMathUtil_5.gameMathUtil.toRadian : 1) * 90;
                    var angle = gameMathUtil_5.gameMathUtil.calcAngleByVec(v3.x, v3.z, true) + fixNum;
                    return angle;
                };
                RoleMgr.lateUpdate = function (dt) {
                };
                //设置 是否可移动
                RoleMgr.canMove = function (can, isTransfer) {
                    if (isTransfer === void 0) { isTransfer = false; }
                    console.error("主角玩家是否可移动", can);
                    if (can) {
                        // isSingle
                        if (this._player && this._player.roleData.isSingle == false) {
                            this.needSynchronous = true;
                        }
                        // if (this._player && this._player.roleDoll) {
                        //     let pos = this._player.roleDoll.model.localPosition;
                        //     m4m.math.vec3Clone(pos, this.lastPos);
                        // } else {
                        //     console.error("主角可移动状态设置时 玩家数据未初始化完成");
                        // }
                    }
                    else {
                        this.needSynchronous = false;
                        // console.error("this._player", this._player);
                        if (this._player) {
                            //强行停止
                            this._player.stop(true);
                        }
                        this.needSynchronous = false;
                    }
                    if (this._player) {
                        this._player.roleData.roleClientState = can ? GameEnum_3.PlayerClientState.canMove : GameEnum_3.PlayerClientState.prohibitionMove;
                        if (isTransfer) {
                            this._player.roleCtr.handleInput(GameEnum_3.RoleActInput.TransferState);
                        }
                    }
                };
                // private static lastPos: m4m.math.vector3 = new m4m.math.vector3();
                // private static posInfo = {};
                // private static syncNet(dt: number) {
                //     if (!this.needSynchronous) {
                //         return;
                //     }
                //     //需要开始同步位置
                //     this.newDaTime += dt;
                //     if (this.newDaTime >= this.gapTime) {
                //         this.newDaTime = 0;
                //         //主角位置 网络同步处理
                //         if (!this._player || !this._player.roleDoll) { return; }
                //         let pos = this._player.roleDoll.model.localPosition;
                //         let currDist = m4m.math.vec3Distance(pos, this.lastPos);
                //         if (currDist > 0) {
                //             // let vel = RoleMgr.helpV2;
                //             // m4m.math.vec2Normalize(this._player.moveVelocity, vel);
                //             // let yAngle = gameMathUtil.calcAngleByVec(vel.x, vel.y);
                //             this.posInfo["pos"] = pos;
                //             // console.error("主角位置移动 " + currDist,"   ",pos);
                //             // posA["jump"] = true;//跳也可以通过这个同步
                //             WebsocketTool.Instance.GameManager_updataGame(this.posInfo);
                //             m4m.math.vec3Clone(pos, this.lastPos);
                //         }
                //     }
                // }
                RoleMgr.update = function (dt) {
                    this.keyUpdate(dt);
                    //是否更新头顶文本
                    if (this.isUpdateBattleRoleTop) {
                        this.dispatchBattleRoleTop();
                    }
                    //
                    var _map = this._roleMap;
                    // tslint:disable-next-line: no-shadowed-variable
                    for (var key_1 in _map) {
                        var _r = _map[key_1];
                        if (!_r) {
                            continue;
                        }
                        _r.UpdateLogic(dt);
                        //debugDraw
                        if (GameMgr_14.GameMgr.Draw2dDebug) {
                            _r.UpdateDebugDraw(dt);
                        }
                    }
                    //
                    // this.syncNet(dt);
                };
                // tslint:disable-next-line: cyclomatic-complexity
                RoleMgr.keyUpdate = function (dt) {
                    if (!this._player || !this._player.roleDoll) {
                        return;
                    }
                    var _p = this._player;
                    var iptMgr = m4m.framework.sceneMgr.app.getInputMgr();
                    // console.error(this._hasDirKeyDown,"按键  ",iptMgr.KeyDownCount());
                    var _WDown = iptMgr.GetKeyDown(RoleMgr._upKey);
                    var _SDown = iptMgr.GetKeyDown(RoleMgr._downKey);
                    var _ADown = iptMgr.GetKeyDown(RoleMgr._leftKey);
                    var _DDown = iptMgr.GetKeyDown(RoleMgr._rightKey);
                    var _KongDown = iptMgr.GetKeyDown(RoleMgr._jumpKey);
                    var _FAttack = iptMgr.GetKeyDown(RoleMgr._attackKey);
                    if (_WDown || _SDown || _ADown || _DDown || _KongDown || _FAttack) {
                        //有方向键被按下
                    }
                    else {
                        if (this._hasDirKeyDown) {
                            this._hasDirKeyDown = false;
                            this.roleIptMoveReleas(this._player);
                        }
                        return;
                    }
                    var vel = RoleMgr.helpV2;
                    //方向向量归零
                    vel.x = 0;
                    vel.y = 0;
                    if (_WDown || _SDown || _ADown || _DDown) {
                        if (_p.roleCtr.state.state != GameEnum_3.RoleActInput.Attack) {
                            if (_WDown) {
                                this._hasDirKeyDown = true;
                                vel.y += 1;
                            }
                            if (_SDown) {
                                this._hasDirKeyDown = true;
                                vel.y += -1;
                            }
                            if (_ADown) {
                                this._hasDirKeyDown = true;
                                vel.x += -1;
                            }
                            if (_DDown) {
                                this._hasDirKeyDown = true;
                                vel.x += 1;
                            }
                        }
                    }
                    if (this._hasDirKeyDown) {
                        m4m.math.vec2Normalize(vel, vel);
                        this.mainRoleIptMove(vel, this._player);
                    }
                    //
                    if (_KongDown) {
                        if (_p.roleCtr.state.state != GameEnum_3.RoleActInput.Attack) {
                            this.roleIptJump(_p);
                        }
                    }
                    if (_FAttack) {
                        this.roleIptAttack(_p);
                    }
                    if (iptMgr.GetKeyDown(RoleMgr._runKey)) {
                        this.roleIptSpeedUp(_p);
                    }
                    else if (iptMgr.GetKeyUP(RoleMgr._runKey)) {
                        this.roleIptSpeedUpReleas(_p);
                    }
                };
                /**
                 * 主角色移动调用 同步服务器
                 * @param dir 移动方向
                 * @param role 角色
                 */
                RoleMgr.mainRoleIptMove = function (dir, role) {
                    if (!role || !role.roleDoll) {
                        return;
                    }
                    // console.log("角色移动 输入", dir);
                    // //计算移动朝向
                    // m4m.math.vec2Clone(dir, role.moveVelocity);
                    // m4m.math.vec2ScaleByNum(role.moveVelocity, role.moveSpeed, role.moveVelocity);
                    this.roleIptMove(dir, role);
                };
                /** 同步其他玩家信息*/
                RoleMgr.onRoleDataUpDate = function (ev) {
                    var roleServerInfo = ev.data.data;
                    var guid = roleServerInfo.GUID;
                    var r = this._roleMap[guid];
                    if (!r || !r.roleDoll) {
                        return;
                    }
                    if (roleServerInfo.pos) {
                        r.roleDoll.moveToTarget(roleServerInfo.pos, roleServerInfo.moveTime, roleServerInfo.moveType);
                    }
                    //血量
                    if (roleServerInfo.hp != null) {
                        r.setHp(roleServerInfo.hp);
                    }
                    //状态
                    r.roleData.roleState = roleServerInfo.roleState;
                    r.roleData.inGameState = roleServerInfo.inGameStatus;
                    // if (r.roleData.isMainPlayer()) {
                    //     console.error(roleServerInfo.pos, roleServerInfo.roleState + "主玩家游戏中状态更新 ", r.roleData.inGameState);
                    // } else {
                    //     // console.error(roleServerInfo.pos, roleServerInfo.roleState + "其他玩家游戏中状态更新 ", r.roleData.inGameState);
                    // }
                };
                //--------------------------------------------------------------------------
                //--------------------------------- Role-------------------------------------
                /**
                 * 创建角色
                 * @param ev <{roleId: 角色配置ID ， GUID：唯一ID} >
                 */
                RoleMgr.onMake = function (ev) {
                    return __awaiter(this, void 0, void 0, function () {
                        var roleInfo, guid, numStr, role, setPos_1, pos_1, _evMakeSuccess_1, data, _r, setPos, m, pos, _evMakeSuccess;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    roleInfo = ev.data.roleInfo;
                                    guid = roleInfo.GUID;
                                    numStr = roleInfo.num.toString();
                                    // console.log(numStr);
                                    if (this._roleMap[guid]) {
                                        role = this._roleMap[guid];
                                        role.roleData.setData(roleInfo);
                                        // console.error(role.roleData.angle, "设置位置****：", role.roleData.pos, "状态 ", role.roleData.roleState);
                                        if (role && role.roleDoll) {
                                            setPos_1 = role.roleData.pos;
                                            pos_1 = m4m.poolv3();
                                            if (setPos_1) {
                                                m4m.math.vec3Set(pos_1, setPos_1.x, setPos_1.y, setPos_1.z);
                                                role.roleDoll.model.localPosition = pos_1;
                                            }
                                            // // tslint:disable-next-line: no-shadowed-variable
                                            // let m = role.roleDoll.model;
                                            // // tslint:disable-next-line: no-shadowed-variable
                                            // let rot = m.localRotate;
                                            // // tslint:disable-next-line: no-shadowed-variable
                                            // m4m.math.quatFromAxisAngle(RoleMgr.helpV3UP, role.roleData.angle, rot);
                                            // m.localRotate = rot;
                                            //设置旋转角度
                                            role.localRotate = role.roleData.angle;
                                            _evMakeSuccess_1 = new eventMgr_6.EventGeneric();
                                            _evMakeSuccess_1.data = guid;
                                            //不是npc
                                            if (!guid.startsWith("N")) {
                                                data = this._topPosMap[guid];
                                                data.name = numStr;
                                                role.roleData.name = numStr;
                                                role.roleDoll.setNum(numStr);
                                            }
                                            else {
                                                role.roleData.name = guid;
                                            }
                                            // console.error("调试:102901:抛make完毕事件, 已经存在: ", guid);
                                            //抛 make 完毕事件
                                            eventMgr_6.EventMgr.dispatchEvent("role_makeSuccess", _evMakeSuccess_1);
                                            UiDataManager_3.UiDataManager.changeFunctionData(BindKeyName_3.BindKeyName.roleMakeSuccess, guid);
                                            //切换为站立状态
                                            role.roleCtr.handleInput(GameEnum_3.RoleActInput.Direction_Release);
                                        }
                                        return [2 /*return*/];
                                    }
                                    _r = new Role_1.Role();
                                    _r.roleData.setData(roleInfo);
                                    // _r.roleData.pos = roleInfo.pos;
                                    // _r.roleData.angle = roleInfo.angle;
                                    // _r.roleData.isSingle = roleInfo.isSingle;
                                    // _r.roleData.roleState = roleInfo.roleState;
                                    _r.roleData.name = numStr;
                                    // if (roleInfo.defDiePerformance) {
                                    //     _r.roleData.defDiePerformance = roleInfo.defDiePerformance;
                                    // }
                                    // console.error("设置位置：", _r.roleData.pos, "状态 ", _r.roleData.roleState);
                                    //不是npc
                                    if (!guid.startsWith("N")) {
                                        this._topPosMap[guid] = { active: false, pos: new m4m.math.vector2(), name: numStr, hpNormal: 0 };
                                    }
                                    return [4 /*yield*/, _r.init(roleInfo.roleType, guid)];
                                case 1:
                                    _a.sent();
                                    this._roleMap[guid] = _r;
                                    //设置主玩家
                                    if (guid == StageMgr_8.StageMgr.PlayerGUID) {
                                        this._player = _r;
                                    }
                                    setPos = _r.roleData.pos;
                                    m = _r.roleDoll.model;
                                    pos = m4m.poolv3();
                                    if (setPos) {
                                        // console.error(_r.roleData.pos, _r.roleData.angle, " 玩家初始位置位置 ", roleInfo, setPos);
                                        m4m.math.vec3Set(pos, setPos.x, setPos.y, setPos.z);
                                        m.localPosition = pos;
                                        this.showpos = pos;
                                    }
                                    // let rot = m.localRotate;
                                    // m4m.math.quatFromAxisAngle(RoleMgr.helpV3UP, _r.roleData.angle, rot);
                                    // m.localRotate = rot;            
                                    //设置旋转角度
                                    _r.localRotate = _r.roleData.angle;
                                    //不是npc
                                    if (!guid.startsWith("N")) {
                                        this._topPosMap[guid] = { active: false, pos: new m4m.math.vector2(), name: numStr, hpNormal: 0 };
                                        //随机脸
                                        _r.roleDoll.makePlayerFace();
                                    }
                                    else {
                                        _r.roleData.name = guid;
                                    }
                                    _evMakeSuccess = new eventMgr_6.EventGeneric();
                                    _evMakeSuccess.data = guid;
                                    // console.error("调试:102901:抛make完毕事件, 新的: ", guid);
                                    //抛 make 完毕事件
                                    eventMgr_6.EventMgr.dispatchEvent("role_makeSuccess", _evMakeSuccess);
                                    // }, 5000);
                                    UiDataManager_3.UiDataManager.changeFunctionData(BindKeyName_3.BindKeyName.roleMakeSuccess, guid);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                RoleMgr.test = function (id) {
                    eventMgr_6.EventMgr.dispatchEvent("role_remove", { data: id });
                };
                /**
                 * 清理所有其他角色
                 */
                RoleMgr.clearOtherRole = function () {
                    for (var guid in this._roleMap) {
                        if (guid == StageMgr_8.StageMgr.PlayerGUID) {
                            //主玩家不清理
                        }
                        else {
                            this.removeRole(guid);
                        }
                    }
                };
                /**
                 * 删除指定的其他角色
                 * @param ev <唯一ID>
                 */
                RoleMgr.onRemove = function (ev) {
                    var guid = ev.data;
                    this.removeRole(guid);
                };
                RoleMgr.removeRole = function (guid) {
                    var r = this._roleMap[guid];
                    if (!r) {
                        console.error("需要删除的角色不存在！", guid);
                        return;
                    }
                    //恢复武器
                    r.changeWeapons(GameEnum_3.Weapons.none);
                    delete this._roleMap[guid];
                    delete this._topPosMap[guid];
                    //回收到池子。。
                    r.dispose();
                };
                /** 设置 位置 */
                RoleMgr.onSetPos = function (ev) {
                    var guid = ev.data.GUID;
                    var r = this._roleMap[guid];
                    if (!r || !r.roleDoll) {
                        return;
                    }
                    var m = r.roleDoll.model;
                    m.localPosition = ev.data.pos;
                };
                /** 设置 方向 */
                RoleMgr.onSetYRotate = function (ev) {
                    var guid = ev.data.GUID;
                    var r = this._roleMap[guid];
                    if (!r || !r.roleDoll) {
                        return;
                    }
                    // let m = r.roleDoll.model;
                    // let rot = m.localRotate;
                    // let angle = ev.data.yAngle;
                    // m4m.math.quatFromAxisAngle(RoleMgr.helpV3UP, angle, rot);
                    // m.localRotate = rot;
                    var angle = ev.data.yAngle;
                    r.localRotate = angle;
                };
                //设置 方向
                RoleMgr.roleRotateYFun = function (data) {
                    console.error("侦听设置玩家方向", data.yAngle);
                    var guid = data.GUID;
                    var r = this._roleMap[guid];
                    if (!r || !r.roleDoll) {
                        return;
                    }
                    var angle = data.yAngle;
                    r.localRotate = angle;
                };
                /** 输入方向 摇杆*/
                RoleMgr.onInputDir = function (ev) {
                    var guid = ev.data.GUID;
                    if (!this._roleMap[guid]) {
                        return;
                    }
                    this.roleIptMove(ev.data.dir, this._roleMap[guid]);
                };
                /** 输入方向 摇杆释放*/
                RoleMgr.onInputDirRelease = function (ev) {
                    var guid = ev.data.GUID;
                    if (!this._roleMap[guid]) {
                        return;
                    }
                    this.roleIptMoveReleas(this._roleMap[guid]);
                };
                /** 输入 加速*/
                RoleMgr.onInputSpeedUp = function (ev) {
                    var guid = ev.data.GUID;
                    if (!this._roleMap[guid]) {
                        return;
                    }
                    this.roleIptSpeedUp(this._roleMap[guid]);
                };
                /** 输入 加速释放 */
                RoleMgr.onInputSpeedUpRel = function (ev) {
                    var guid = ev.data.GUID;
                    if (!this._roleMap[guid]) {
                        return;
                    }
                    this.roleIptSpeedUpReleas(this._roleMap[guid]);
                };
                /** 输入 跳跃 */
                RoleMgr.onInputJump = function (ev) {
                    var guid = ev.data.GUID;
                    if (!this._roleMap[guid]) {
                        return;
                    }
                    this.roleIptJump(this._roleMap[guid]);
                };
                /** 输入攻击 */
                RoleMgr.onInputAttack = function (ev) {
                    var guid = ev.data.GUID;
                    if (!this._roleMap[guid]) {
                        return;
                    }
                    this.roleIptAttack(this._roleMap[guid]);
                };
                /** 设置AI */
                RoleMgr.onSetAI = function (ev) {
                    var guid = ev.data.GUID;
                    if (!this._roleMap[guid]) {
                        return;
                    }
                    this._roleMap[guid].setAI(ev.data.aiType);
                };
                //---------------------------------------------------------------------------
                /**
                 * 角色移动 输入
                 * @param dir 移动方向
                 * @param role 角色
                 */
                RoleMgr.roleIptMove = function (dir, role) {
                    if (!role || !role.roleDoll) {
                        return;
                    }
                    // console.log("角色移动 输入", dir);
                    if (role.roleData.canMove == false) {
                        this.roleIptMoveReleas(role);
                        return;
                    }
                    //计算移动朝向
                    m4m.math.vec2Clone(dir, role.moveVelocity);
                    // m4m.math.vec2Normalize(dir, dir);
                    // console.log("角色移动 输入", dir);
                    //每次移动固定的距离
                    var moveDistance = role.moveSpeed;
                    if (role.isTarPointMove) {
                        moveDistance = RoleMgr.moveDistance; //1;// 不同游戏可能会需要设置不同参数
                        // moveSpeed = 10;
                    }
                    m4m.math.vec2ScaleByNum(role.moveVelocity, moveDistance, role.moveVelocity);
                    // m4m.math.vec3Add(this.position, moveVelocity, this.targetPoint);
                    //控制输入
                    role.roleCtr.handleInput(GameEnum_3.RoleActInput.Direction);
                };
                /** 角色移动 输入 释放 */
                RoleMgr.roleIptMoveReleas = function (role) {
                    if (!role) {
                        return;
                    }
                    // console.error("角色移动 输入 释放  速度设为 0");
                    m4m.math.vec2SetAll(role.moveVelocity, 0);
                    // //控制输入
                    // role.roleCtr.handleInput(RoleActInput.Direction_Release);
                };
                /** 角色 输入 加度按键 */
                RoleMgr.roleIptSpeedUp = function (role) {
                    if (!role) {
                        return;
                    }
                    role.roleCtr.handleInput(GameEnum_3.RoleActInput.SpeedUp);
                };
                /** 角色 输入 加度按键释放 */
                RoleMgr.roleIptSpeedUpReleas = function (role) {
                    if (!role) {
                        return;
                    }
                    role.roleCtr.handleInput(GameEnum_3.RoleActInput.SpeedUp_Release);
                };
                /** 角色 输入 跳跃按键 */
                RoleMgr.roleIptJump = function (role) {
                    if (!role || !role.roleData.canMove) {
                        return;
                    }
                    // console.log("角色 输入 跳跃按键  跳跳跳！",TimeUtil.realtimeSinceStartup);
                    role.roleCtr.handleInput(GameEnum_3.RoleActInput.Jump);
                };
                /** 角色 输入 攻击按键 */
                RoleMgr.roleIptAttack = function (role) {
                    if (!role || !role.canAttack()) {
                        return;
                    }
                    role.roleCtr.handleInput(GameEnum_3.RoleActInput.Attack, role.roleCtr.state);
                };
                /** 角色 头顶显示UI 坐标同步 */
                RoleMgr.dispatchBattleRoleTop = function () {
                    // tslint:disable-next-line: no-shadowed-variable
                    for (var key_2 in this._roleMap) {
                        var role = this._roleMap[key_2];
                        var data = this._topPosMap[key_2];
                        if (data) {
                            data.active = false;
                            if (!role || !role.roleDoll || !role.roleDoll.model.gameObject.visible) {
                                continue;
                            }
                            var posTop = this.helpV3;
                            role.roleDoll.getTopPos(posTop);
                            data.active = this.isInView(m4m.framework.sceneMgr.scene.mainCamera, posTop);
                            //
                            if (data.active) {
                                this.setTopUIPos(posTop, data.pos);
                                data.hpNormal = role.roleData.getHpNormal();
                            }
                            if (role.roleData.dieTime >= 3) { //3秒后隐藏名字
                                data.active = false;
                            }
                        }
                    }
                    UiDataManager_3.UiDataManager.changeFunctionData(BindKeyName_3.BindKeyName.battleRoleTopTos, this._topPosMap);
                };
                RoleMgr.setTopUIPos = function (wPos, posUI, _yOffset, UIoffset) {
                    if (_yOffset === void 0) { _yOffset = 0; }
                    if (UIoffset === void 0) { UIoffset = null; }
                    if (!posUI) {
                        return;
                    }
                    var clipP = this.helpV3;
                    var realWpos = this.helpV3v1;
                    m4m.math.vec3Set(realWpos, wPos.x, wPos.y + _yOffset, wPos.z);
                    var _cam = m4m.framework.sceneMgr.scene.mainCamera;
                    _cam.calcClipPosFromWorldPos(m4m.framework.sceneMgr.app, realWpos, clipP);
                    var canvas = UiManager_4.UiManager.overlay.canvas;
                    canvas.clipPosToCanvasPos(clipP, posUI);
                    if (UIoffset) {
                        m4m.math.vec2Add(posUI, UIoffset, posUI);
                    }
                };
                RoleMgr.isInView = function (camera, worldPos) {
                    var camTransform = camera.gameObject.transform;
                    var dir = new m4m.math.vector3();
                    m4m.math.vec3Subtract(worldPos, camTransform.localPosition, dir);
                    m4m.math.vec3Normalize(dir, dir);
                    var forward = new m4m.math.vector3();
                    camTransform.getForwardInWorld(forward);
                    var dot = m4m.math.vec3Dot(forward, dir);
                    //判断物体是否在相机前面
                    if (dot > 0) {
                        return true;
                    }
                    return false;
                };
                RoleMgr.helpV2 = new m4m.math.vector2();
                RoleMgr.helpV2v1 = new m4m.math.vector2();
                RoleMgr.helpV3 = new m4m.math.vector3();
                RoleMgr.helpV3UP = new m4m.math.vector3(0, 1, 0);
                RoleMgr.helpV3v1 = new m4m.math.vector3();
                RoleMgr.helpQuat = new m4m.math.quaternion();
                RoleMgr._roleMap = {};
                RoleMgr._lastaCamTAngle = 0;
                RoleMgr._lastaCamPAngle = 0;
                RoleMgr._upKey = m4m.event.KeyCode.KeyW;
                RoleMgr._downKey = m4m.event.KeyCode.KeyS;
                RoleMgr._leftKey = m4m.event.KeyCode.KeyA;
                RoleMgr._rightKey = m4m.event.KeyCode.KeyD;
                RoleMgr._jumpKey = m4m.event.KeyCode.Space;
                RoleMgr._attackKey = m4m.event.KeyCode.KeyF;
                RoleMgr._runKey = m4m.event.KeyCode.ShiftLeft;
                RoleMgr._hasDirKeyDown = false;
                /** 战斗场景 头顶UI 坐标事件 */
                RoleMgr._topPosMap = {};
                //是否更新头顶ui
                RoleMgr.isUpdateBattleRoleTop = true;
                RoleMgr.gapTime = 0.2; //每0.2秒 轮一次
                RoleMgr.newDaTime = 0;
                // tslint:disable-next-line: member-ordering
                RoleMgr.needSynchronous = false;
                // tslint:disable-next-line: member-ordering
                RoleMgr.moveDistance = 1; //每走一步的距离  后续在服务器配置中取得
                return RoleMgr;
            }());
            exports_43("RoleMgr", RoleMgr);
            TopPosMap = /** @class */ (function () {
                function TopPosMap() {
                }
                return TopPosMap;
            }());
            exports_43("TopPosMap", TopPosMap);
        }
    };
});
System.register("Role/MainRoleDoll", ["PSDUI/UiDataManager", "Time/TimeUtil", "Tools/gameMathUtil", "Data/BindKeyName", "GameEnum", "gamePlays/GamePlayMgr", "Net/PingTimeManager", "Net/WebsocketTool", "Scene/SceneObstacleMgr", "Role/RoleDoll", "Role/RoleMgr"], function (exports_44, context_44) {
    "use strict";
    var UiDataManager_4, TimeUtil_3, gameMathUtil_6, BindKeyName_4, GameEnum_4, GamePlayMgr_1, PingTimeManager_2, WebsocketTool_3, SceneObstacleMgr_3, RoleDoll_1, RoleMgr_1, MainRoleDoll;
    var __moduleName = context_44 && context_44.id;
    return {
        setters: [
            function (UiDataManager_4_1) {
                UiDataManager_4 = UiDataManager_4_1;
            },
            function (TimeUtil_3_1) {
                TimeUtil_3 = TimeUtil_3_1;
            },
            function (gameMathUtil_6_1) {
                gameMathUtil_6 = gameMathUtil_6_1;
            },
            function (BindKeyName_4_1) {
                BindKeyName_4 = BindKeyName_4_1;
            },
            function (GameEnum_4_1) {
                GameEnum_4 = GameEnum_4_1;
            },
            function (GamePlayMgr_1_1) {
                GamePlayMgr_1 = GamePlayMgr_1_1;
            },
            function (PingTimeManager_2_1) {
                PingTimeManager_2 = PingTimeManager_2_1;
            },
            function (WebsocketTool_3_1) {
                WebsocketTool_3 = WebsocketTool_3_1;
            },
            function (SceneObstacleMgr_3_1) {
                SceneObstacleMgr_3 = SceneObstacleMgr_3_1;
            },
            function (RoleDoll_1_1) {
                RoleDoll_1 = RoleDoll_1_1;
            },
            function (RoleMgr_1_1) {
                RoleMgr_1 = RoleMgr_1_1;
            }
        ],
        execute: function () {
            MainRoleDoll = /** @class */ (function (_super) {
                __extends(MainRoleDoll, _super);
                /**
                 * 角色玩偶对象
                 * 负责 显示相关功能，模型渲染、动画播放、特效播放
                 */
                function MainRoleDoll() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    // tslint:disable-next-line: member-ordering
                    _this.testTime = 0;
                    // tslint:disable-next-line: member-ordering
                    _this.posInfo = {};
                    // private nextPoint: m4m.math.vector3[] = [];
                    _this._nowSpeed = 0;
                    return _this;
                }
                //开始移动
                // tslint:disable-next-line: member-ordering
                MainRoleDoll.prototype.startMove = function (moveVelocity, moveSpeed, forwarddRotate, moveType) {
                    if (this.targetPoint) {
                        //角色移动中  每次走一定的距离 没走到目标点前 不接受新的目标点
                        return;
                    }
                    // console.error("开始移动 startMove");
                    //获取方向 和 速度
                    var vel = moveVelocity;
                    //没有速度 
                    if (gameMathUtil_6.gameMathUtil.vec2SqrLength(vel) <= 0.001) {
                        // console.error("没有速度 ");
                        if (moveType == GameEnum_4.PlayerMoveType.jump) { //如果是原地跳
                            if (MainRoleDoll.canJump == false) {
                                MainRoleDoll.canJump = true;
                                if (RoleMgr_1.RoleMgr.needSynchronous) {
                                    // tslint:disable-next-line: no-shadowed-variable
                                    var pos_2 = m4m.poolv3();
                                    // tslint:disable-next-line: no-shadowed-variable
                                    var _Mpos_1 = this.model.localPosition;
                                    m4m.math.vec3Clone(_Mpos_1, pos_2);
                                    pos_2.y = 0;
                                    this.posInfo["pos"] = pos_2;
                                    this.posInfo["moveTime"] = 0;
                                    this.posInfo["moveType"] = moveType; //1走路  2跳  3跑(冲刺)
                                    this.posInfo["pingTime"] = Math.floor(PingTimeManager_2.PingTimeManager.Instance.timeQualityNum / 2); //PingTime
                                    // console.error("主玩家通知服务器同步的点 ", pos);
                                    WebsocketTool_3.WebsocketTool.Instance.GameManager_updataGame(this.posInfo);
                                    //主角 移动去目标点
                                    UiDataManager_4.UiDataManager.changeFunctionData(BindKeyName_4.BindKeyName.mainRoleToTargetPoint, this.posInfo);
                                }
                            }
                        }
                        return;
                    }
                    // console.error("11111");
                    var _m = this.model;
                    var _Mpos = _m.localPosition;
                    var realVel = MainRoleDoll._helpV3;
                    m4m.math.vec3Set(realVel, vel.x, 0, vel.y);
                    // realVel.x = vel.x;
                    // realVel.z = vel.y;
                    // realVel.y = 0;
                    m4m.math.quatTransformVector(forwarddRotate, realVel, realVel);
                    var pos = m4m.poolv3();
                    m4m.math.vec3Add(_Mpos, realVel, pos);
                    this.TargetPointArr.length = 0;
                    this.calcStartAndEnd(pos);
                    this.TargetPointArr.push(pos);
                    if (SceneObstacleMgr_3.SceneObstacleMgr.isEnable) {
                        //调整目标点,通过碰撞障碍
                        var currPos = MainRoleDoll._helpV2;
                        m4m.math.vec2Set(currPos, _Mpos.x, _Mpos.z);
                        var tPos = MainRoleDoll._helpV2v1;
                        m4m.math.vec2Set(tPos, pos.x, pos.z);
                        var hitPoint = MainRoleDoll._helpV3v1;
                        var tangPos = MainRoleDoll._helpV3v2;
                        // let ishited = SceneObstacleMgr.hitTestByLine(currPos, tPos, hitPoint, SceneObstacleMgr.hitMixGap, null, tangPos);
                        var ishited = SceneObstacleMgr_3.SceneObstacleMgr.calcLineCollisionPoint(currPos, tPos, tangPos, hitPoint);
                        if (ishited) {
                            // let arr: m4m.math.vector3[] = [];
                            // arr.push(m4m.poolv3(hitPoint));
                            m4m.math.vec3Clone(hitPoint, pos);
                            // arr.push(m4m.poolv3(tangPos));
                            this.TargetPointArr.length = 0;
                            this.TargetPointArr.push(pos);
                            var nextPos = m4m.poolv3(tangPos);
                            // this.nextPoint.push(nextPos);
                            this.TargetPointArr.push(nextPos);
                            // console.error("到边上碰撞的点 需要走另外的点", hitPoint, nextPos);
                            //....
                        }
                    }
                    this._nowSpeed = moveSpeed;
                    this._moveType = moveType;
                    //给目标点  
                    this.toPointFun();
                    // if (SceneObstacleMgr.isEnable) {
                    //     //调整目标点,通过碰撞障碍
                    //     let currPos = MainRoleDoll._helpV2;
                    //     m4m.math.vec2Set(currPos, _Mpos.x, _Mpos.z);
                    //     let tPos = MainRoleDoll._helpV2v1;
                    //     m4m.math.vec2Set(tPos, pos.x, pos.z);
                    //     let hitPoint = MainRoleDoll._helpV3v1;
                    //     let tangPos = MainRoleDoll._helpV3v2;
                    //     // let ishited = SceneObstacleMgr.hitTestByLine(currPos, tPos, hitPoint, SceneObstacleMgr.hitMixGap, null, tangPos);
                    //     let ishited = SceneObstacleMgr.calcLineCollisionPoint(currPos, tPos, tangPos, hitPoint);
                    //     if (ishited) {
                    //         // let arr: m4m.math.vector3[] = [];
                    //         // arr.push(m4m.poolv3(hitPoint));
                    //         m4m.math.vec3Clone(hitPoint, pos);
                    //         // arr.push(m4m.poolv3(tangPos));
                    //         this.nextPoint.length = 0;
                    //         let nextPos = m4m.poolv3(tangPos);
                    //         this.nextPoint.push(nextPos);
                    //         console.error("到边上碰撞的点 需要走另外的点", hitPoint, nextPos);
                    //         //....
                    //     }
                    // }
                    // pos.y = 0;//把高度拍扁
                    // this.targetPoint = pos;
                    // this.moveSpeed = moveSpeed;
                    // // 当前玩家到目标点的距离
                    // let mpos = MainRoleDoll._helpV3v3;
                    // m4m.math.vec3Set(mpos, _Mpos.x, 0, _Mpos.y);
                    // let distance = m4m.math.vec3Distance(mpos, this.targetPoint);
                    // let time = distance / this.moveSpeed;//到达的时间
                    // // console.error(time, "将要去的目标点 ", this.targetPoint, TimeUtil.realtimeSinceStartup - this.testTime);
                    // this.testTime = TimeUtil.realtimeSinceStartup;
                    // if (RoleMgr.needSynchronous) {
                    //     this.posInfo["pos"] = pos;
                    //     this.posInfo["moveTime"] = time;
                    //     this.posInfo["moveType"] = moveType;//1走路  2跳  3跑(冲刺)
                    //     // console.error("主玩家通知服务器同步的点 ",pos);
                    //     WebsocketTool.Instance.GameManager_updataGame(this.posInfo);
                    // }
                };
                MainRoleDoll.prototype.toPointFun = function () {
                    var pos = this.TargetPointArr.shift();
                    var _m = this.model;
                    var _Mpos = _m.localPosition;
                    pos.y = 0; //把高度拍扁
                    this.targetPoint = pos;
                    // console.error("切换了速度？？？", this._nowSpeed);
                    this.moveSpeed = this._nowSpeed;
                    // 当前玩家到目标点的距离
                    var mpos = MainRoleDoll._helpV3v3;
                    m4m.math.vec3Set(mpos, _Mpos.x, 0, _Mpos.z);
                    var distance = m4m.math.vec3Distance(mpos, this.targetPoint);
                    var time = distance / this.moveSpeed; //到达的时间
                    // console.error(time, "将要去的目标点 ", this.targetPoint, TimeUtil.realtimeSinceStartup - this.testTime);
                    this.testTime = TimeUtil_3.TimeUtil.realtimeSinceStartup;
                    this.sendToServerFun(pos, time);
                };
                //同步位置给服务器
                // tslint:disable-next-line: member-ordering
                MainRoleDoll.prototype.sendToServerFun = function (pos, time) {
                    if (RoleMgr_1.RoleMgr.needSynchronous) {
                        // console.error(time, "将要去的目标点 ", pos, TimeUtil.realtimeSinceStartup - this.testTime);
                        this.posInfo["pos"] = pos;
                        this.posInfo["moveTime"] = time;
                        this.posInfo["moveType"] = this._moveType; //1走路  2跳  3跑(冲刺)
                        this.posInfo["pingTime"] = Math.floor(PingTimeManager_2.PingTimeManager.Instance.timeQualityNum / 2); //PingTime
                        // console.error("主玩家通知服务器同步的点 ", pos);
                        WebsocketTool_3.WebsocketTool.Instance.GameManager_updataGame(this.posInfo);
                        //主角 移动去目标点
                        UiDataManager_4.UiDataManager.changeFunctionData(BindKeyName_4.BindKeyName.mainRoleToTargetPoint, this.posInfo);
                    }
                };
                //停止移动
                // tslint:disable-next-line: member-ordering
                MainRoleDoll.prototype.stop = function (trueStop) {
                    var _this = this;
                    if (trueStop === void 0) { trueStop = false; }
                    if (trueStop) { //强行停止 把当前位置同步给服务器
                        var _m = this.model;
                        var _Mpos = _m.localPosition;
                        // console.error("主玩家通知服务器停止移动并同步当前点 ");
                        this.sendToServerFun(_Mpos, 0);
                    }
                    this.moveSpeed = 0;
                    m4m.poolv3_del(this.targetPoint);
                    this.targetPoint = null;
                    // console.error("停下来了？");
                    setTimeout(function () {
                        if (_this.targetPoint == null && _this._animationCtr) {
                            if (_this.role.roleCtr.state.state == GameEnum_4.RoleActInput.Direction || _this.role.roleCtr.state.state == GameEnum_4.RoleActInput.SpeedUp) {
                                // this.playAnim("idle");
                                // console.error("停止");
                                _this.role.roleCtr.handleInput(GameEnum_4.RoleActInput.Direction_Release);
                            }
                        }
                    }, 50);
                };
                /**
                 * 根据距离和到达时间计算出行走的速度
                 * @param dt
                 * @returns
                 */
                // tslint:disable-next-line: member-ordering
                MainRoleDoll.prototype.updateMoveToTargetPoint = function (dt) {
                    if (!this.targetPoint) {
                        return;
                    }
                    var _m = this.model;
                    var _mPos = _m.localPosition;
                    var vePos = MainRoleDoll._helpV3v4;
                    m4m.math.vec3Clone(_mPos, vePos);
                    vePos.y = 0;
                    var currDist = m4m.math.vec3Distance(vePos, this.targetPoint);
                    var moveDist = dt * this.moveSpeed; //moveSpeed
                    // console.error("当前速度 ", this.moveSpeed);
                    //到达目标点
                    if (moveDist > currDist) {
                        this.targetPoint.y = _m.localPosition.y;
                        m4m.math.vec3Clone(this.targetPoint, _m.localPosition);
                        _m.localPosition = _m.localPosition;
                        this.stop();
                        if (this.TargetPointArr.length > 0) {
                            this.toPointFun();
                        }
                        // console.error("停下来的点 ", this.model.localPosition);
                    }
                    else {
                        var vel = MainRoleDoll._helpV3v5;
                        m4m.math.vec3Subtract(this.targetPoint, vePos, vel);
                        // m4m.math.vec3Normalize(vel, vel);
                        m4m.math.vec3ScaleByNum(vel, moveDist / currDist, vel);
                        this.moveByVelocity(vel.x, vel.z);
                    }
                    // console.error(moveDist , currDist,"根据距离和到达时间计算出行走的速度 ",this.model.localPosition);
                };
                // 计算各场景的起点终点, 不允许玩家越界
                // tslint:disable-next-line: cyclomatic-complexity
                MainRoleDoll.prototype.calcStartAndEnd = function (pos) {
                    if (GamePlayMgr_1.GamePlayMgr.curr == GameEnum_4.GamePlayType.woodenPeople) { //木头人起点线
                        // let game = GamePlayMgr.currGame as WoodenPeople;
                        // //如果在准备阶段
                        // if (GamePlayMgr.gameReadyState && game.getMoveStage(pos.z) > 0) {
                        //     pos.z = game.start;
                        // } else if (this.role.roleData.inGameState == InGameStatus.inGameWin && game.getMoveStage(pos.z) < 2) {
                        //     pos.z = game.finish;
                        // }
                    }
                    else {
                        //之后用这个通用处理方法
                        var game = GamePlayMgr_1.GamePlayMgr.currGame;
                        if (game == null) {
                            return;
                        }
                        var startArea = game.startArea(); //起始区域
                        var endArea = game.endArea(); //终点区域
                        if (startArea) {
                            //
                            var pooint1 = startArea[0];
                            var pooint2 = startArea[1];
                            var minX = Math.min(pooint1.x, pooint2.x);
                            var minZ = Math.min(pooint1.z, pooint2.z);
                            var maxX = Math.max(pooint1.x, pooint2.x);
                            var maxZ = Math.max(pooint1.z, pooint2.z);
                            // if (this.role.roleData.isMainPlayer()) {
                            //     console.error("是否在准备阶段 ", this.role.roleData.clientReadyState);
                            // }
                            //如果在准备阶段
                            if (GamePlayMgr_1.GamePlayMgr.gameReadyState) {
                                //如果是在准备阶段
                                if (pos.x > maxX) {
                                    pos.x = maxX;
                                }
                                if (pos.x < minX) {
                                    pos.x = minX;
                                }
                                if (pos.z > maxZ) {
                                    pos.z = maxZ;
                                }
                                if (pos.z < minZ) {
                                    pos.z = minZ;
                                }
                            }
                            if (GamePlayMgr_1.GamePlayMgr.curr == GameEnum_4.GamePlayType.glassBridge) { //玻离桥特殊处理
                                if (pos.z < minZ) {
                                    pos.z = minZ;
                                }
                            }
                        }
                        if (GamePlayMgr_1.GamePlayMgr.gameSettlementState) { //胜利结算
                            if (endArea) {
                                //
                                var pooint1 = endArea[0];
                                var pooint2 = endArea[1];
                                var minX = Math.min(pooint1.x, pooint2.x);
                                var minZ = Math.min(pooint1.z, pooint2.z);
                                var maxX = Math.max(pooint1.x, pooint2.x);
                                var maxZ = Math.max(pooint1.z, pooint2.z);
                                if (GamePlayMgr_1.GamePlayMgr.curr == GameEnum_4.GamePlayType.glassBridge) { //玻离桥特殊处理
                                    //如果已胜利 不让走出终点框区域
                                    //如果是在准备阶段
                                    if (pos.x > maxX) {
                                        pos.x = maxX;
                                    }
                                    if (pos.x < minX) {
                                        pos.x = minX;
                                    }
                                    if (pos.z > maxZ) {
                                        pos.z = maxZ;
                                    }
                                    if (pos.z < minZ) {
                                        pos.z = minZ;
                                    }
                                }
                            }
                        }
                    }
                };
                // tslint:disable-next-line: member-ordering
                MainRoleDoll.prototype.dispose = function () {
                    _super.prototype.dispose.call(this);
                };
                MainRoleDoll.canJump = false;
                MainRoleDoll._helpV2 = new m4m.math.vector2();
                MainRoleDoll._helpV2v1 = new m4m.math.vector2();
                MainRoleDoll._helpV3 = new m4m.math.vector3();
                MainRoleDoll._helpV3v1 = new m4m.math.vector3();
                MainRoleDoll._helpV3v2 = new m4m.math.vector3();
                MainRoleDoll._helpV3v3 = new m4m.math.vector3();
                MainRoleDoll._helpV3v4 = new m4m.math.vector3();
                MainRoleDoll._helpV3v5 = new m4m.math.vector3();
                return MainRoleDoll;
            }(RoleDoll_1.RoleDoll));
            exports_44("MainRoleDoll", MainRoleDoll);
        }
    };
});
System.register("Role/AI/RambleAI", [], function (exports_45, context_45) {
    "use strict";
    var RambleAI;
    var __moduleName = context_45 && context_45.id;
    return {
        setters: [],
        execute: function () {
            /**
             * 玩家闲逛
             */
            RambleAI = /** @class */ (function () {
                function RambleAI() {
                }
                Object.defineProperty(RambleAI, "Instance", {
                    get: function () {
                        if (!this._instance) {
                            this._instance = new RambleAI();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                RambleAI.prototype.enter = function (role) {
                    var d = role.AICalcData = {};
                    d[RambleAI._keyTimeCount] = 0;
                    d[RambleAI._keyChangeTime] = 5;
                };
                RambleAI.prototype.exit = function (role) {
                    var d = role.AICalcData;
                    delete d[RambleAI._keyTimeCount];
                    delete d[RambleAI._keyChangeTime];
                };
                RambleAI.prototype.update = function (role, dt) {
                    if (!role || !role.roleDoll) {
                        return;
                    }
                    //随意走来走去
                    var d = role.AICalcData;
                    d[RambleAI._keyTimeCount] -= dt;
                    var minTime = 2;
                    if (d[RambleAI._keyTimeCount] <= 0) {
                        d[RambleAI._keyTimeCount] = Math.random() * d[RambleAI._keyChangeTime];
                        if (d[RambleAI._keyTimeCount] < minTime) {
                            d[RambleAI._keyTimeCount] = minTime;
                        }
                        var v2 = role.moveVelocity;
                        m4m.math.vec2Set(v2, Math.random() * 2 - 1, Math.random() * 2 - 1);
                        m4m.math.vec2Normalize(v2, v2);
                    }
                    //
                    role.walk(dt);
                };
                return RambleAI;
            }());
            exports_45("RambleAI", RambleAI);
        }
    };
});
System.register("Role/AI/WoodenPeopleAI", [], function (exports_46, context_46) {
    "use strict";
    var WoodenPeopleAI;
    var __moduleName = context_46 && context_46.id;
    return {
        setters: [],
        execute: function () {
            /**
             * 玩家 木头人AI
             */
            WoodenPeopleAI = /** @class */ (function () {
                function WoodenPeopleAI() {
                }
                Object.defineProperty(WoodenPeopleAI, "Instance", {
                    get: function () {
                        if (!this._instance) {
                            this._instance = new WoodenPeopleAI();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                WoodenPeopleAI.prototype.exit = function (role) {
                    throw new Error("Method not implemented.");
                };
                WoodenPeopleAI.prototype.enter = function (role) {
                };
                WoodenPeopleAI.prototype.update = function (role, dt) {
                };
                return WoodenPeopleAI;
            }());
            exports_46("WoodenPeopleAI", WoodenPeopleAI);
        }
    };
});
System.register("Role/RoleAI", ["Role/AI/AiInterface", "Role/AI/RambleAI", "Role/AI/WoodenPeopleAI"], function (exports_47, context_47) {
    "use strict";
    var AiInterface_1, RambleAI_1, WoodenPeopleAI_1, RoleAI;
    var __moduleName = context_47 && context_47.id;
    return {
        setters: [
            function (AiInterface_1_1) {
                AiInterface_1 = AiInterface_1_1;
            },
            function (RambleAI_1_1) {
                RambleAI_1 = RambleAI_1_1;
            },
            function (WoodenPeopleAI_1_1) {
                WoodenPeopleAI_1 = WoodenPeopleAI_1_1;
            }
        ],
        execute: function () {
            /**
             * 角色AI
             */
            RoleAI = /** @class */ (function () {
                function RoleAI(role, _type) {
                    this._role = role;
                    this._type = _type;
                    this._AI = RoleAI.getAIByType(_type);
                    this._AI.enter(role);
                }
                RoleAI.getAIByType = function (_type) {
                    switch (_type) {
                        case AiInterface_1.AIType.Ramble: return RambleAI_1.RambleAI.Instance;
                        case AiInterface_1.AIType.WoodenPeople: return WoodenPeopleAI_1.WoodenPeopleAI.Instance;
                        default:
                    }
                };
                Object.defineProperty(RoleAI.prototype, "aiType", {
                    /** AI 类型 */
                    get: function () { return this._type; },
                    enumerable: false,
                    configurable: true
                });
                RoleAI.prototype.dispose = function () {
                    if (this._AI) {
                        this._AI.exit(this._role);
                    }
                    this._AI = null;
                };
                RoleAI.prototype.update = function (dt) {
                    this._AI.update(this._role, dt);
                };
                return RoleAI;
            }());
            exports_47("RoleAI", RoleAI);
        }
    };
});
System.register("Role/actStates/DieState", ["GameEnum", "Role/RoleAttrInfo"], function (exports_48, context_48) {
    "use strict";
    var GameEnum_5, RoleAttrInfo_1, DieState;
    var __moduleName = context_48 && context_48.id;
    return {
        setters: [
            function (GameEnum_5_1) {
                GameEnum_5 = GameEnum_5_1;
            },
            function (RoleAttrInfo_1_1) {
                RoleAttrInfo_1 = RoleAttrInfo_1_1;
            }
        ],
        execute: function () {
            DieState = /** @class */ (function () {
                function DieState() {
                    this.timeOut = 0;
                    this.state = GameEnum_5.RoleActInput.Die;
                    DieState.stateArr = [GameEnum_5.RoleActInput.Revive];
                }
                DieState.prototype.enter = function (_role) {
                    if (!_role) {
                        return;
                    }
                    console.error("切换死亡状态");
                    if (_role.roleData.defDiePerformance == RoleAttrInfo_1.GameDiePerformanceEnum.Die) {
                        _role.roleDoll.playAnim("Die");
                    }
                    else if (_role.roleData.defDiePerformance == RoleAttrInfo_1.GameDiePerformanceEnum.DropOutDie) {
                        _role.roleDoll.playAnim("TugOfWarFall3");
                    }
                    else if (_role.roleData.defDiePerformance == RoleAttrInfo_1.GameDiePerformanceEnum.Back) {
                        _role.roleDoll.playAnim("Die2");
                    }
                };
                // public handleInput(_role: Role, _input: RoleActInput): IRoleActState {
                //     return null;
                // }
                DieState.prototype.canChange = function (_input) {
                    return DieState.stateArr.indexOf(_input) != -1;
                };
                DieState.prototype.update = function (_role, dt) {
                };
                //死亡状态  可切换    站立
                DieState.stateArr = [];
                return DieState;
            }());
            exports_48("DieState", DieState);
        }
    };
});
System.register("Role/actStates/JumpState", ["PSDUI/UiDataManager", "Tools/gameMathUtil", "Audio/AudioEnum", "Audio/AudioPlayer", "Data/BindKeyName", "GameEnum", "Role/MainRoleDoll"], function (exports_49, context_49) {
    "use strict";
    var UiDataManager_5, gameMathUtil_7, AudioEnum_2, AudioPlayer_2, BindKeyName_5, GameEnum_6, MainRoleDoll_1, JumpState;
    var __moduleName = context_49 && context_49.id;
    return {
        setters: [
            function (UiDataManager_5_1) {
                UiDataManager_5 = UiDataManager_5_1;
            },
            function (gameMathUtil_7_1) {
                gameMathUtil_7 = gameMathUtil_7_1;
            },
            function (AudioEnum_2_1) {
                AudioEnum_2 = AudioEnum_2_1;
            },
            function (AudioPlayer_2_1) {
                AudioPlayer_2 = AudioPlayer_2_1;
            },
            function (BindKeyName_5_1) {
                BindKeyName_5 = BindKeyName_5_1;
            },
            function (GameEnum_6_1) {
                GameEnum_6 = GameEnum_6_1;
            },
            function (MainRoleDoll_1_1) {
                MainRoleDoll_1 = MainRoleDoll_1_1;
            }
        ],
        execute: function () {
            JumpState = /** @class */ (function () {
                function JumpState() {
                    this.timeOut = 0;
                    this.state = GameEnum_6.RoleActInput.Jump;
                    //上一帧y轴速度
                    this._prevJumpSpeed = 0;
                    this._droping = false;
                    //跳跃中
                    this._jumping = false;
                    JumpState.stateArr = [GameEnum_6.RoleActInput.TransferState, GameEnum_6.RoleActInput.Die, GameEnum_6.RoleActInput.DropOut];
                    JumpState.stateArr2 = [GameEnum_6.RoleActInput.Direction, GameEnum_6.RoleActInput.Direction_Release, GameEnum_6.RoleActInput.SpeedUp, GameEnum_6.RoleActInput.Jump, GameEnum_6.RoleActInput.DropOut, GameEnum_6.RoleActInput.PreparePull,
                        GameEnum_6.RoleActInput.RightPreparePull, GameEnum_6.RoleActInput.RightPulltheRope];
                }
                JumpState.prototype.enter = function (_role) {
                    _role.jumpVelocity = JumpState.jumpMaxVel;
                    _role.roleDoll.playAnim("Jump1");
                    this._droping = true;
                    this._jumping = true;
                };
                // public handleInput(_role: Role, _input: RoleActInput): IRoleActState {
                //     return null;
                // }
                JumpState.prototype.canChange = function (_input) {
                    if (this._jumping) {
                        return JumpState.stateArr.indexOf(_input) != -1;
                    }
                    return JumpState.stateArr2.indexOf(_input) != -1;
                };
                //开始退出当前行为状态
                JumpState.prototype.out = function () {
                };
                JumpState.prototype.update = function (_role, dt) {
                    var _this = this;
                    if (!_role || !_role.roleDoll || !this._droping) {
                        return;
                    }
                    //空中移动减速
                    //检查播放 跳跃动画
                    //跳到一定高度 
                    var currYVel = _role.jumpVelocity;
                    currYVel -= dt * gameMathUtil_7.gameMathUtil.G;
                    _role.jumpVelocity = currYVel;
                    var pos = _role.roleDoll.model.localPosition;
                    pos.y += currYVel * dt;
                    _role.roleDoll.model.localPosition = pos;
                    var shadowy = -pos.y + 0.06;
                    if (shadowy > 0.06) {
                        shadowy = 0.06;
                    }
                    _role.roleDoll.shadow.localPosition.y = shadowy;
                    _role.roleDoll.shadow.localPosition = _role.roleDoll.shadow.localPosition;
                    //播放下落动画
                    if (_role.jumpVelocity * this._prevJumpSpeed < 0) {
                        //AudioPlayer.play(AudioEnum.WoodLandNormal);
                        _role.roleDoll.playAnim("Jump2");
                    }
                    this._prevJumpSpeed = _role.jumpVelocity;
                    if (pos.y < 0) {
                        pos.y = 0;
                    }
                    var isOnGround = pos.y <= 0;
                    //移动 TODO
                    _role.walk(dt, _role.jumpMoveSpeedScale);
                    this._droping = true;
                    //落地结束 切换状态 到 -> standState
                    if (isOnGround && this._droping) {
                        this._droping = false;
                        this._prevJumpSpeed = 0;
                        // console.error("落地结束 切换状态 到 -> standState");
                        if (_role.roleData.isMainPlayer()) {
                            // console.error("落地 -> 玩家落地接触地面时的有音效");
                            AudioPlayer_2.AudioPlayer.play(AudioEnum_2.AudioEnum.WoodLandNormal);
                        }
                        // this._jumping = false;
                        //死亡
                        if (_role.roleData.inGameState == GameEnum_6.InGameStatus.inGameDead) {
                            //玩家 跳起后落地
                            UiDataManager_5.UiDataManager.changeFunctionData(BindKeyName_5.BindKeyName.roleJumpGround, { guid: _role.roleData.guid, pos: _role.roleDoll.model.localPosition });
                            //玩家已死亡 跳起落地处理
                            console.error("玩家已死亡 跳起落地处理");
                            UiDataManager_5.UiDataManager.changeFunctionData(BindKeyName_5.BindKeyName.dieStateRoleJumpGround, _role.roleData.guid);
                        }
                        else {
                            //播放落地动画
                            _role.roleDoll.playAnim("Jump3", true)
                                .then(function () {
                                _this._jumping = false;
                                // console.error("播放落地动画 完毕切回站立");
                                if (_role.roleData.isMainPlayer()) {
                                    MainRoleDoll_1.MainRoleDoll.canJump = false;
                                }
                                //玩家 跳起后落地
                                UiDataManager_5.UiDataManager.changeFunctionData(BindKeyName_5.BindKeyName.roleJumpGround, { guid: _role.roleData.guid, pos: _role.roleDoll.model.localPosition });
                                // console.error("当前玩家速度 ", _role.isRunSpeed, gameMathUtil.vec2SqrLength(_role.moveVelocity));
                                if (gameMathUtil_7.gameMathUtil.vec2SqrLength(_role.moveVelocity) >= 0.1) {
                                    if (_role.isRunSpeed) {
                                        _role.roleCtr.handleInput(GameEnum_6.RoleActInput.SpeedUp);
                                    }
                                    else {
                                        _role.roleCtr.handleInput(GameEnum_6.RoleActInput.Direction);
                                    }
                                }
                                else {
                                    //播放站立待机动画
                                    _role.roleCtr.handleInput(GameEnum_6.RoleActInput.Direction_Release);
                                }
                                // //死亡
                                // if (_role.roleData.inGameState == InGameStatus.inGameDead) {
                                //     _role.roleCtr.handleInput(RoleActInput.Die);
                                // } else {
                                // //播放站立待机动画
                                // _role.roleCtr.handleInput(RoleActInput.Direction_Release);
                                // }
                                // _role.roleCtr.state = StandState.Instance;
                                // _role.roleCtr.state.enter(_role);
                            });
                        }
                    }
                };
                JumpState.jumpMaxVel = 5;
                //跳 状态  可切换 
                JumpState.stateArr = [];
                //跳 状态完成  可切换 
                JumpState.stateArr2 = [];
                return JumpState;
            }());
            exports_49("JumpState", JumpState);
        }
    };
});
System.register("Role/actStates/DropOutState", ["PSDUI/UiDataManager", "Tools/gameMathUtil", "Data/BindKeyName", "GameEnum"], function (exports_50, context_50) {
    "use strict";
    var UiDataManager_6, gameMathUtil_8, BindKeyName_6, GameEnum_7, DropOutState;
    var __moduleName = context_50 && context_50.id;
    return {
        setters: [
            function (UiDataManager_6_1) {
                UiDataManager_6 = UiDataManager_6_1;
            },
            function (gameMathUtil_8_1) {
                gameMathUtil_8 = gameMathUtil_8_1;
            },
            function (BindKeyName_6_1) {
                BindKeyName_6 = BindKeyName_6_1;
            },
            function (GameEnum_7_1) {
                GameEnum_7 = GameEnum_7_1;
            }
        ],
        execute: function () {
            DropOutState = /** @class */ (function () {
                function DropOutState() {
                    this.timeOut = 0;
                    this.state = GameEnum_7.RoleActInput.DropOut;
                    // //退出当前状态
                    // private outing: boolean = false;
                    // private timeOut: number = 0;
                    //上一帧y轴速度
                    this._prevYSpeed = 0;
                    DropOutState.stateArr = [GameEnum_7.RoleActInput.Die];
                }
                DropOutState.prototype.enter = function (_role) {
                    _role.jumpVelocity = 0;
                    //检查播放动画 
                    // _role.roleDoll.playAnim("tugofwarfall_2");
                    _role.roleDoll.playAnim("TugOfWarFall2");
                    // this.timeOut = _role.roleConfigBase.standOutDelay;
                };
                DropOutState.prototype.canChange = function (_input) {
                    return DropOutState.stateArr.indexOf(_input) != -1;
                };
                DropOutState.prototype.update = function (_role, dt) {
                    if (!_role || !_role.roleDoll) {
                        return;
                    }
                    //空中移动减速
                    //检查播放 跳跃动画
                    //跳到一定高度 
                    var currYVel = _role.jumpVelocity;
                    currYVel -= dt * gameMathUtil_8.gameMathUtil.G;
                    _role.jumpVelocity = currYVel;
                    var pos = _role.roleDoll.model.localPosition;
                    pos.y += currYVel * dt;
                    _role.roleDoll.model.localPosition = pos;
                    // console.log(pos.y,(currYVel * dt));
                    // let shadowy = -pos.y + 0.02;
                    // if (shadowy > 0.02) {
                    //     shadowy = 0.02;
                    // }
                    // _role.roleDoll.shadow.localPosition.y = shadowy;
                    // _role.roleDoll.shadow.localPosition = _role.roleDoll.shadow.localPosition;
                    // //播放下落动画
                    // if (_role.jumpVelocity * this._prevYSpeed < 0) {
                    //     //AudioPlayer.play(AudioEnum.WoodLandNormal);
                    //     _role.roleDoll.playAnim("jump2");
                    // }
                    this._prevYSpeed = _role.jumpVelocity;
                    // if (pos.y < 0) { pos.y = 0; }
                    // let isOnGround = pos.y <= 0;
                    //玩家掉落
                    UiDataManager_6.UiDataManager.changeFunctionData(BindKeyName_6.BindKeyName.roleDropOut, { guid: _role.roleData.guid, y: pos.y });
                };
                //掉落  状态  可切换    死亡
                DropOutState.stateArr = [];
                return DropOutState;
            }());
            exports_50("DropOutState", DropOutState);
        }
    };
});
System.register("Role/actStates/PickingStates", ["GameEnum"], function (exports_51, context_51) {
    "use strict";
    var GameEnum_8, PickingStates;
    var __moduleName = context_51 && context_51.id;
    return {
        setters: [
            function (GameEnum_8_1) {
                GameEnum_8 = GameEnum_8_1;
            }
        ],
        execute: function () {
            PickingStates = /** @class */ (function () {
                /**
                 * 抠糖饼 状态
                 */
                function PickingStates() {
                    this.timeOut = 0;
                    this.state = GameEnum_8.RoleActInput.Picking;
                }
                PickingStates.prototype.enter = function (_role) {
                    if (!_role) {
                        return;
                    }
                    _role.roleDoll.playAnim("BuckleSugarCake");
                };
                PickingStates.prototype.canChange = function (_input) {
                    return PickingStates.stateArr.indexOf(_input) != -1;
                };
                PickingStates.prototype.update = function (_role, dt) {
                };
                //public canSwitch: boolean = true;
                PickingStates.stateArr = [GameEnum_8.RoleActInput.Die, GameEnum_8.RoleActInput.Direction, GameEnum_8.RoleActInput.WaitForDeath,
                    GameEnum_8.RoleActInput.Direction_Release, GameEnum_8.RoleActInput.Walk, GameEnum_8.RoleActInput.SpeedUp, GameEnum_8.RoleActInput.Jump];
                return PickingStates;
            }());
            exports_51("PickingStates", PickingStates);
        }
    };
});
System.register("Role/actStates/PreparePullState", ["GameEnum"], function (exports_52, context_52) {
    "use strict";
    var GameEnum_9, PreparePullState;
    var __moduleName = context_52 && context_52.id;
    return {
        setters: [
            function (GameEnum_9_1) {
                GameEnum_9 = GameEnum_9_1;
            }
        ],
        execute: function () {
            PreparePullState = /** @class */ (function () {
                function PreparePullState() {
                    this.timeOut = 0;
                    this.state = GameEnum_9.RoleActInput.PreparePull;
                }
                PreparePullState.prototype.enter = function (_role) {
                    if (!_role) {
                        return;
                    }
                    _role.roleDoll.playAnim("TugOfWarIdle");
                };
                PreparePullState.prototype.canChange = function (_input) {
                    var index = PreparePullState.stateArr.indexOf(_input);
                    return index != -1;
                };
                PreparePullState.prototype.update = function (_role, dt) {
                };
                // 拔绳子预备状态  可切换 发力拔绳子 状态   
                PreparePullState.stateArr = [GameEnum_9.RoleActInput.PulltheRope, GameEnum_9.RoleActInput.Direction_Release, GameEnum_9.RoleActInput.DropOut];
                return PreparePullState;
            }());
            exports_52("PreparePullState", PreparePullState);
        }
    };
});
System.register("Role/actStates/PulltheRopeState", ["GameEnum"], function (exports_53, context_53) {
    "use strict";
    var GameEnum_10, PulltheRopeState;
    var __moduleName = context_53 && context_53.id;
    return {
        setters: [
            function (GameEnum_10_1) {
                GameEnum_10 = GameEnum_10_1;
            }
        ],
        execute: function () {
            PulltheRopeState = /** @class */ (function () {
                function PulltheRopeState() {
                    this.timeOut = 0;
                    this.state = GameEnum_10.RoleActInput.PulltheRope;
                    PulltheRopeState.stateArr = [GameEnum_10.RoleActInput.PreparePull, GameEnum_10.RoleActInput.Direction_Release, GameEnum_10.RoleActInput.DropOut];
                }
                PulltheRopeState.prototype.enter = function (_role) {
                    if (!_role) {
                        return;
                    }
                    // tslint:disable-next-line: newline-per-chained-call
                    _role.roleDoll.playAnim("TugOfWar", true).then(function () {
                        _role.roleCtr.handleInput(GameEnum_10.RoleActInput.PreparePull);
                    });
                };
                PulltheRopeState.prototype.canChange = function (_input) {
                    var index = PulltheRopeState.stateArr.indexOf(_input);
                    return index != -1;
                };
                PulltheRopeState.prototype.update = function (_role, dt) {
                };
                //发力拔绳子 状态  可切换    拔绳子预备状态
                PulltheRopeState.stateArr = [];
                return PulltheRopeState;
            }());
            exports_53("PulltheRopeState", PulltheRopeState);
        }
    };
});
System.register("Role/actStates/ReviveState", ["GameEnum"], function (exports_54, context_54) {
    "use strict";
    var GameEnum_11, ReviveState;
    var __moduleName = context_54 && context_54.id;
    return {
        setters: [
            function (GameEnum_11_1) {
                GameEnum_11 = GameEnum_11_1;
            }
        ],
        execute: function () {
            ReviveState = /** @class */ (function () {
                function ReviveState() {
                    this.timeOut = 0;
                    this.state = GameEnum_11.RoleActInput.Revive;
                    ReviveState.stateArr = [GameEnum_11.RoleActInput.Direction_Release];
                }
                ReviveState.prototype.enter = function (_role) {
                    if (!_role) {
                        return;
                    }
                    // console.error("复活状态");
                    //检查播放 idle 动画 
                    _role.roleDoll.playAnim("Idle");
                };
                // public handleInput(_role: Role, _input: RoleActInput): IRoleActState {
                //     return null;
                // }
                ReviveState.prototype.canChange = function (_input) {
                    return ReviveState.stateArr.indexOf(_input) != -1;
                };
                ReviveState.prototype.update = function (_role, dt) {
                };
                //复活状态  可切换    站立
                ReviveState.stateArr = [];
                return ReviveState;
            }());
            exports_54("ReviveState", ReviveState);
        }
    };
});
System.register("Role/actStates/RightPreparePullState", ["GameEnum"], function (exports_55, context_55) {
    "use strict";
    var GameEnum_12, RightPreparePullState;
    var __moduleName = context_55 && context_55.id;
    return {
        setters: [
            function (GameEnum_12_1) {
                GameEnum_12 = GameEnum_12_1;
            }
        ],
        execute: function () {
            RightPreparePullState = /** @class */ (function () {
                function RightPreparePullState() {
                    this.timeOut = 0;
                    this.state = GameEnum_12.RoleActInput.RightPreparePull;
                }
                RightPreparePullState.prototype.enter = function (_role) {
                    if (!_role) {
                        return;
                    }
                    _role.roleDoll.playAnim("TugOfWarIdleReverse");
                };
                RightPreparePullState.prototype.canChange = function (_input) {
                    var index = RightPreparePullState.stateArr.indexOf(_input);
                    return index != -1;
                };
                RightPreparePullState.prototype.update = function (_role, dt) {
                };
                // 拔绳子预备状态  可切换 发力拔绳子 状态   
                RightPreparePullState.stateArr = [GameEnum_12.RoleActInput.Direction_Release, GameEnum_12.RoleActInput.DropOut, GameEnum_12.RoleActInput.RightPulltheRope];
                return RightPreparePullState;
            }());
            exports_55("RightPreparePullState", RightPreparePullState);
        }
    };
});
System.register("Role/actStates/RightPullTheRopeState", ["GameEnum"], function (exports_56, context_56) {
    "use strict";
    var GameEnum_13, RightPullTheRopeState;
    var __moduleName = context_56 && context_56.id;
    return {
        setters: [
            function (GameEnum_13_1) {
                GameEnum_13 = GameEnum_13_1;
            }
        ],
        execute: function () {
            RightPullTheRopeState = /** @class */ (function () {
                function RightPullTheRopeState() {
                    this.timeOut = 0;
                    this.state = GameEnum_13.RoleActInput.RightPulltheRope;
                }
                RightPullTheRopeState.prototype.enter = function (_role) {
                    if (!_role) {
                        return;
                    }
                    _role.roleDoll.playAnim("TugOfWarReverse", true)
                        .then(function () {
                        _role.roleCtr.handleInput(GameEnum_13.RoleActInput.RightPreparePull);
                    });
                };
                RightPullTheRopeState.prototype.canChange = function (_input) {
                    var index = RightPullTheRopeState.stateArr.indexOf(_input);
                    return index != -1;
                };
                RightPullTheRopeState.prototype.update = function (_role, dt) {
                };
                // 拔绳子预备状态  可切换 发力拔绳子 状态   
                RightPullTheRopeState.stateArr = [GameEnum_13.RoleActInput.Direction_Release, GameEnum_13.RoleActInput.DropOut, GameEnum_13.RoleActInput.RightPreparePull];
                return RightPullTheRopeState;
            }());
            exports_56("RightPullTheRopeState", RightPullTheRopeState);
        }
    };
});
System.register("Role/actStates/RunState", ["Audio/AudioEnum", "Audio/AudioPlayer", "GameEnum", "gamePlays/GamePlayMgr"], function (exports_57, context_57) {
    "use strict";
    var AudioEnum_3, AudioPlayer_3, GameEnum_14, GamePlayMgr_2, RunState;
    var __moduleName = context_57 && context_57.id;
    return {
        setters: [
            function (AudioEnum_3_1) {
                AudioEnum_3 = AudioEnum_3_1;
            },
            function (AudioPlayer_3_1) {
                AudioPlayer_3 = AudioPlayer_3_1;
            },
            function (GameEnum_14_1) {
                GameEnum_14 = GameEnum_14_1;
            },
            function (GamePlayMgr_2_1) {
                GamePlayMgr_2 = GamePlayMgr_2_1;
            }
        ],
        execute: function () {
            RunState = /** @class */ (function () {
                function RunState() {
                    this.timeOut = 0;
                    this.state = GameEnum_14.RoleActInput.SpeedUp;
                    RunState.stateArr = [GameEnum_14.RoleActInput.Picking, GameEnum_14.RoleActInput.TransferState, GameEnum_14.RoleActInput.WaitForDeath, GameEnum_14.RoleActInput.Walk, GameEnum_14.RoleActInput.Direction_Release,
                        GameEnum_14.RoleActInput.Attack, GameEnum_14.RoleActInput.Jump, GameEnum_14.RoleActInput.SpeedUp_Release, GameEnum_14.RoleActInput.Die, GameEnum_14.RoleActInput.DropOut, GameEnum_14.RoleActInput.PreparePull, GameEnum_14.RoleActInput.RightPreparePull,
                        GameEnum_14.RoleActInput.RightPulltheRope, GameEnum_14.RoleActInput.StrikeToFly];
                }
                RunState.prototype.enter = function (_role) {
                    if (!_role) {
                        return;
                    }
                    if (_role.roleData.isMainPlayer()) {
                        if (GamePlayMgr_2.GamePlayMgr.currGameType == GameEnum_14.GamePlayType.woodenPeople) {
                            AudioPlayer_3.AudioPlayer.play(AudioEnum_3.AudioEnum.WoodRunSand);
                        }
                        else {
                            AudioPlayer_3.AudioPlayer.play(AudioEnum_3.AudioEnum.WoodRunNormal);
                        }
                    }
                    if (_role.currWeapons == GameEnum_14.Weapons.bat) {
                        _role.roleDoll.playAnim("SwordRun");
                    }
                    else if (_role.currWeapons == GameEnum_14.Weapons.dao) {
                        _role.roleDoll.playAnim("Run1");
                    }
                    else {
                        _role.roleDoll.playAnim("Run1");
                    }
                    this.timeOut = _role.roleConfigBase.walkOutDelay;
                    // this.timeOut = 50;
                };
                // public handleInput(_role: Role, _input: RoleActInput): IRoleActState {
                //     // tslint:disable-next-line: no-this-assignment
                //     let result: IRoleActState = null;
                //     if (_input == RoleActInput.Attack) {
                //         result = AttackState.Instance;
                //     } else if (_input == RoleActInput.Jump) {
                //         result = JumpState.Instance;
                //     } else if (_input == RoleActInput.Direction_Release) {
                //         result = StandState.Instance;
                //     } else if (_input == RoleActInput.SpeedUp_Release) {
                //         //是否 还有 移动输入
                //         let hasDirMove = false;
                //         if (_role) {
                //             hasDirMove = gameMathUtil.vec2SqrLength(_role.moveVelocity) >= 0;
                //         }
                //         if (hasDirMove) {
                //             result = WalkState.Instance;
                //         } else {
                //             result = StandState.Instance;
                //         }
                //     }
                //     return result;
                // }
                RunState.prototype.canChange = function (_input) {
                    return RunState.stateArr.indexOf(_input) != -1;
                };
                RunState.prototype.update = function (_role, dt) {
                    if (!_role) {
                        return;
                    }
                    _role.walk(dt);
                };
                //跑 状态  可切换    站立  攻击  跳    走或站立
                RunState.stateArr = [];
                return RunState;
            }());
            exports_57("RunState", RunState);
        }
    };
});
System.register("Role/actStates/WalkState", ["Audio/AudioEnum", "Audio/AudioPlayer", "GameEnum", "gamePlays/GamePlayMgr"], function (exports_58, context_58) {
    "use strict";
    var AudioEnum_4, AudioPlayer_4, GameEnum_15, GamePlayMgr_3, WalkState;
    var __moduleName = context_58 && context_58.id;
    return {
        setters: [
            function (AudioEnum_4_1) {
                AudioEnum_4 = AudioEnum_4_1;
            },
            function (AudioPlayer_4_1) {
                AudioPlayer_4 = AudioPlayer_4_1;
            },
            function (GameEnum_15_1) {
                GameEnum_15 = GameEnum_15_1;
            },
            function (GamePlayMgr_3_1) {
                GamePlayMgr_3 = GamePlayMgr_3_1;
            }
        ],
        execute: function () {
            WalkState = /** @class */ (function () {
                function WalkState() {
                    this.timeOut = 0;
                    this.state = GameEnum_15.RoleActInput.Direction;
                    WalkState.stateArr = [GameEnum_15.RoleActInput.TransferState, GameEnum_15.RoleActInput.WaitForDeath, GameEnum_15.RoleActInput.Direction_Release, GameEnum_15.RoleActInput.SpeedUp, GameEnum_15.RoleActInput.Attack,
                        GameEnum_15.RoleActInput.Jump, GameEnum_15.RoleActInput.Die, GameEnum_15.RoleActInput.DropOut, GameEnum_15.RoleActInput.PreparePull, GameEnum_15.RoleActInput.RightPreparePull, GameEnum_15.RoleActInput.RightPulltheRope, GameEnum_15.RoleActInput.Picking,
                        GameEnum_15.RoleActInput.StrikeToFly];
                }
                // private timeOut: number = 0;
                WalkState.prototype.enter = function (_role) {
                    if (!_role) {
                        return;
                    }
                    // console.error("切回行走");
                    if (_role.roleData.isMainPlayer()) {
                        if (GamePlayMgr_3.GamePlayMgr.currGameType == GameEnum_15.GamePlayType.woodenPeople) {
                            AudioPlayer_4.AudioPlayer.play(AudioEnum_4.AudioEnum.WoodWalkSand);
                        }
                        else {
                            AudioPlayer_4.AudioPlayer.play(AudioEnum_4.AudioEnum.WoodWalkNormal);
                        }
                    }
                    if (_role.currWeapons == GameEnum_15.Weapons.bat) {
                        _role.roleDoll.playAnim("Walk1");
                    }
                    else if (_role.currWeapons == GameEnum_15.Weapons.dao) {
                        _role.roleDoll.playAnim("Walk1");
                    }
                    else {
                        _role.roleDoll.playAnim("Walk1");
                    }
                    this.timeOut = _role.roleConfigBase.walkOutDelay;
                    // this.timeOut = 50;
                };
                // public handleInput(_role: Role, _input: RoleActInput): IRoleActState {
                //     // tslint:disable-next-line: no-this-assignment
                //     let result: IRoleActState = null;
                //     if (_input == RoleActInput.Direction_Release) {
                //         result = StandState.Instance;
                //     } else if (_input == RoleActInput.SpeedUp) {
                //         result = RunState.Instance;
                //     } else if (_input == RoleActInput.Attack) {
                //         result = AttackState.Instance;
                //     } else if (_input == RoleActInput.Jump) {
                //         result = JumpState.Instance;
                //     }
                //     return result;
                // }
                WalkState.prototype.canChange = function (_input) {
                    var index = WalkState.stateArr.indexOf(_input);
                    return index != -1;
                };
                WalkState.prototype.update = function (_role, dt) {
                    if (!_role) {
                        return;
                    }
                    _role.walk(dt);
                };
                //行走 状态  可切换    站立  跑  攻击  跳
                WalkState.stateArr = [];
                return WalkState;
            }());
            exports_58("WalkState", WalkState);
        }
    };
});
System.register("Role/actStates/StandState", ["GameEnum"], function (exports_59, context_59) {
    "use strict";
    var GameEnum_16, StandState;
    var __moduleName = context_59 && context_59.id;
    return {
        setters: [
            function (GameEnum_16_1) {
                GameEnum_16 = GameEnum_16_1;
            }
        ],
        execute: function () {
            StandState = /** @class */ (function () {
                function StandState() {
                    this.timeOut = 0;
                    this.state = GameEnum_16.RoleActInput.Direction_Release;
                    StandState.stateArr = [GameEnum_16.RoleActInput.TransferState, GameEnum_16.RoleActInput.WaitForDeath, GameEnum_16.RoleActInput.Direction, GameEnum_16.RoleActInput.Attack, GameEnum_16.RoleActInput.Jump,
                        GameEnum_16.RoleActInput.Die, GameEnum_16.RoleActInput.DropOut, GameEnum_16.RoleActInput.PreparePull, GameEnum_16.RoleActInput.PulltheRope, GameEnum_16.RoleActInput.RightPreparePull, GameEnum_16.RoleActInput.RightPulltheRope, GameEnum_16.RoleActInput.Picking,
                        GameEnum_16.RoleActInput.StrikeToFly, GameEnum_16.RoleActInput.Direction_Release, GameEnum_16.RoleActInput.SpeedUp, GameEnum_16.RoleActInput.Walk];
                }
                StandState.prototype.enter = function (_role) {
                    // console.error("切回站立");
                    //检查播放 idle 动画 
                    if (_role.currWeapons == GameEnum_16.Weapons.bat) {
                        _role.roleDoll.playAnim("Idle");
                    }
                    else if (_role.currWeapons == GameEnum_16.Weapons.dao) {
                        _role.roleDoll.playAnim("Idle");
                    }
                    else {
                        _role.roleDoll.playAnim("Idle");
                    }
                    this.timeOut = _role.roleConfigBase.standOutDelay;
                    // this.timeOut = 20;
                };
                // public handleInput(_role: Role, _input: RoleActInput): IRoleActState {
                //     // tslint:disable-next-line: no-this-assignment
                //     let result: IRoleActState = null;
                //     switch (_input) {
                //         case RoleActInput.Direction:
                //             result = WalkState.Instance;
                //             break;
                //         case RoleActInput.Attack:
                //             result = AttackState.Instance;
                //             break;
                //         case RoleActInput.Jump:
                //             result = JumpState.Instance;
                //             break;
                //         default:
                //     }
                //     return result;
                // }
                StandState.prototype.canChange = function (_input) {
                    return StandState.stateArr.indexOf(_input) != -1;
                };
                StandState.prototype.update = function (_role, dt) {
                };
                //站立 状态  可切换    走  攻击  跳
                StandState.stateArr = [];
                return StandState;
            }());
            exports_59("StandState", StandState);
        }
    };
});
System.register("Role/actStates/StrikeToFlyState", ["Tools/gameMathUtil", "GameEnum"], function (exports_60, context_60) {
    "use strict";
    var gameMathUtil_9, GameEnum_17, StrikeToFlyState;
    var __moduleName = context_60 && context_60.id;
    return {
        setters: [
            function (gameMathUtil_9_1) {
                gameMathUtil_9 = gameMathUtil_9_1;
            },
            function (GameEnum_17_1) {
                GameEnum_17 = GameEnum_17_1;
            }
        ],
        execute: function () {
            StrikeToFlyState = /** @class */ (function () {
                function StrikeToFlyState() {
                    this.timeOut = 0;
                    this.state = GameEnum_17.RoleActInput.StrikeToFly;
                    //是否已经落地
                    this.isDroping = false;
                    //起点
                    this.startPoint = new m4m.math.vector3();
                    //落地点
                    this.endPoint = new m4m.math.vector3();
                    //向上加速度(需要更具时间计算出来)
                    this.upVelocity = 5;
                    StrikeToFlyState.stateArr = [GameEnum_17.RoleActInput.Direction_Release];
                }
                StrikeToFlyState.prototype.enter = function (_role, data) {
                    console.error("切换到击飞状态");
                    this.isDroping = false;
                    _role.roleDoll.playAnim("Jump2");
                    m4m.math.vec3Clone(_role.roleDoll.model.localPosition, this.startPoint);
                    m4m.math.vec3Clone(data.dropPoint, this.endPoint);
                    this.flyTime = data.flyTime;
                    this.currFlyTime = 0;
                    this.upVelocity = this.calcUpVelocity(this.flyTime);
                    _role.jumpVelocity = this.upVelocity;
                };
                StrikeToFlyState.prototype.canChange = function (_input) {
                    return StrikeToFlyState.stateArr.indexOf(_input) != -1;
                };
                StrikeToFlyState.prototype.update = function (_role, dt) {
                    if (!this.isDroping) { //还没落地
                        var currYVel = _role.jumpVelocity;
                        currYVel -= dt * gameMathUtil_9.gameMathUtil.G;
                        _role.jumpVelocity = currYVel;
                        var pos = _role.roleDoll.model.localPosition;
                        pos.y += currYVel * dt;
                        this.currFlyTime = Math.min(this.flyTime, this.currFlyTime + dt * 1000);
                        var v = this.currFlyTime / this.flyTime;
                        pos.x = this.startPoint.x + (this.endPoint.x - this.startPoint.x) * v;
                        pos.z = this.startPoint.z + (this.endPoint.z - this.startPoint.z) * v;
                        //落地判断
                        if (pos.y <= 0 && _role.jumpVelocity <= 0) {
                            pos.y = 0;
                            this.isDroping = true;
                            //播放落地动画
                            _role.roleDoll.playAnim("Jump3", true)
                                .then(function () {
                                _role.roleCtr.handleInput(GameEnum_17.RoleActInput.Direction_Release);
                            });
                        }
                        //阴影
                        var shadowy = -pos.y + 0.06;
                        if (shadowy > 0.06) {
                            shadowy = 0.06;
                        }
                        _role.roleDoll.shadow.localPosition.y = shadowy;
                        _role.roleDoll.shadow.localPosition = _role.roleDoll.shadow.localPosition;
                        _role.roleDoll.model.localPosition = pos;
                    }
                };
                //更具飞行时间计算出上升的速度
                StrikeToFlyState.prototype.calcUpVelocity = function (t) {
                    return t / 1000 * gameMathUtil_9.gameMathUtil.G * 0.5;
                };
                //
                StrikeToFlyState.stateArr = [];
                return StrikeToFlyState;
            }());
            exports_60("StrikeToFlyState", StrikeToFlyState);
        }
    };
});
System.register("Role/actStates/TransferState", ["GameEnum"], function (exports_61, context_61) {
    "use strict";
    var GameEnum_18, TransferState;
    var __moduleName = context_61 && context_61.id;
    return {
        setters: [
            function (GameEnum_18_1) {
                GameEnum_18 = GameEnum_18_1;
            }
        ],
        execute: function () {
            TransferState = /** @class */ (function () {
                function TransferState() {
                    this.timeOut = 0;
                    this.state = GameEnum_18.RoleActInput.TransferState;
                    TransferState.stateArr = [GameEnum_18.RoleActInput.PreparePull, GameEnum_18.RoleActInput.RightPreparePull, GameEnum_18.RoleActInput.Direction_Release];
                }
                TransferState.prototype.enter = function (_role) {
                    // console.error("切回站立");
                };
                TransferState.prototype.canChange = function (_input) {
                    return TransferState.stateArr.indexOf(_input) != -1;
                };
                TransferState.prototype.update = function (_role, dt) {
                };
                //
                TransferState.stateArr = [];
                return TransferState;
            }());
            exports_61("TransferState", TransferState);
        }
    };
});
System.register("Role/actStates/WaitForDeathState", ["GameEnum", "Role/RoleAttrInfo"], function (exports_62, context_62) {
    "use strict";
    var GameEnum_19, RoleAttrInfo_2, WaitForDeathState;
    var __moduleName = context_62 && context_62.id;
    return {
        setters: [
            function (GameEnum_19_1) {
                GameEnum_19 = GameEnum_19_1;
            },
            function (RoleAttrInfo_2_1) {
                RoleAttrInfo_2 = RoleAttrInfo_2_1;
            }
        ],
        execute: function () {
            WaitForDeathState = /** @class */ (function () {
                function WaitForDeathState() {
                    this.timeOut = 0;
                    this.state = GameEnum_19.RoleActInput.WaitForDeath;
                    this.start = false;
                    this.timeNum = 0;
                    WaitForDeathState.stateArr = [GameEnum_19.RoleActInput.Die, GameEnum_19.RoleActInput.DropOut];
                }
                WaitForDeathState.prototype.enter = function (_role) {
                    // console.error("切回站立");
                    this.start = true;
                    this.timeNum = 0;
                };
                WaitForDeathState.prototype.canChange = function (_input) {
                    return WaitForDeathState.stateArr.indexOf(_input) != -1;
                };
                WaitForDeathState.prototype.update = function (_role, dt) {
                    if (this.start) {
                        var roleData = _role.roleData;
                        if (roleData.defDiePerformance == RoleAttrInfo_2.GameDiePerformanceEnum.DropOutDie) {
                            //
                            //如果当前不是掉落状态机
                            if (_role.roleCtr.state.state != GameEnum_19.RoleActInput.DropOut) {
                                this.timeNum += dt * 1000;
                                if (this.timeNum >= this.timeOut) {
                                    this.start = false;
                                    // console.error("有玩家是掉落死亡！");
                                    _role.roleCtr.handleInput(GameEnum_19.RoleActInput.DropOut);
                                }
                            }
                        }
                        else {
                            //如果当前不是死亡状态机
                            if (_role.roleCtr.state.state != GameEnum_19.RoleActInput.Die) {
                                this.timeNum += dt * 1000;
                                if (this.timeNum >= this.timeOut) {
                                    this.start = false;
                                    _role.roleCtr.handleInput(GameEnum_19.RoleActInput.Die);
                                }
                            }
                        }
                    }
                };
                //等死 状态  可切换  死亡状态
                WaitForDeathState.stateArr = [];
                return WaitForDeathState;
            }());
            exports_62("WaitForDeathState", WaitForDeathState);
        }
    };
});
System.register("Role/RoleController", ["Data/Map", "PSDUI/newUiBase", "Tools/gameMathUtil", "Audio/AudioEnum", "Audio/AudioPlayer", "GameEnum", "gamePlays/GamePlayMgr", "Role/actStates/AttackState", "Role/actStates/DieState", "Role/actStates/DropOutState", "Role/actStates/JumpState", "Role/actStates/PickingStates", "Role/actStates/PreparePullState", "Role/actStates/PulltheRopeState", "Role/actStates/ReviveState", "Role/actStates/RightPreparePullState", "Role/actStates/RightPullTheRopeState", "Role/actStates/RunState", "Role/actStates/StandState", "Role/actStates/StrikeToFlyState", "Role/actStates/TransferState", "Role/actStates/WaitForDeathState", "Role/actStates/WalkState"], function (exports_63, context_63) {
    "use strict";
    var Map_5, newUiBase_1, gameMathUtil_10, AudioEnum_5, AudioPlayer_5, GameEnum_20, GamePlayMgr_4, AttackState_1, DieState_1, DropOutState_1, JumpState_1, PickingStates_1, PreparePullState_1, PulltheRopeState_1, ReviveState_1, RightPreparePullState_1, RightPullTheRopeState_1, RunState_1, StandState_1, StrikeToFlyState_1, TransferState_1, WaitForDeathState_1, WalkState_1, RoleController;
    var __moduleName = context_63 && context_63.id;
    return {
        setters: [
            function (Map_5_1) {
                Map_5 = Map_5_1;
            },
            function (newUiBase_1_1) {
                newUiBase_1 = newUiBase_1_1;
            },
            function (gameMathUtil_10_1) {
                gameMathUtil_10 = gameMathUtil_10_1;
            },
            function (AudioEnum_5_1) {
                AudioEnum_5 = AudioEnum_5_1;
            },
            function (AudioPlayer_5_1) {
                AudioPlayer_5 = AudioPlayer_5_1;
            },
            function (GameEnum_20_1) {
                GameEnum_20 = GameEnum_20_1;
            },
            function (GamePlayMgr_4_1) {
                GamePlayMgr_4 = GamePlayMgr_4_1;
            },
            function (AttackState_1_1) {
                AttackState_1 = AttackState_1_1;
            },
            function (DieState_1_1) {
                DieState_1 = DieState_1_1;
            },
            function (DropOutState_1_1) {
                DropOutState_1 = DropOutState_1_1;
            },
            function (JumpState_1_1) {
                JumpState_1 = JumpState_1_1;
            },
            function (PickingStates_1_1) {
                PickingStates_1 = PickingStates_1_1;
            },
            function (PreparePullState_1_1) {
                PreparePullState_1 = PreparePullState_1_1;
            },
            function (PulltheRopeState_1_1) {
                PulltheRopeState_1 = PulltheRopeState_1_1;
            },
            function (ReviveState_1_1) {
                ReviveState_1 = ReviveState_1_1;
            },
            function (RightPreparePullState_1_1) {
                RightPreparePullState_1 = RightPreparePullState_1_1;
            },
            function (RightPullTheRopeState_1_1) {
                RightPullTheRopeState_1 = RightPullTheRopeState_1_1;
            },
            function (RunState_1_1) {
                RunState_1 = RunState_1_1;
            },
            function (StandState_1_1) {
                StandState_1 = StandState_1_1;
            },
            function (StrikeToFlyState_1_1) {
                StrikeToFlyState_1 = StrikeToFlyState_1_1;
            },
            function (TransferState_1_1) {
                TransferState_1 = TransferState_1_1;
            },
            function (WaitForDeathState_1_1) {
                WaitForDeathState_1 = WaitForDeathState_1_1;
            },
            function (WalkState_1_1) {
                WalkState_1 = WalkState_1_1;
            }
        ],
        execute: function () {
            /**
             * 角色控制器
             * 基于优先状态机 ，行走 ，跳跃 ，攻击
             */
            RoleController = /** @class */ (function () {
                function RoleController(role) {
                    this.stateDic = new Map_5.cMap();
                    this._role = role;
                    this._state = this.getState(GameEnum_20.RoleActInput.Direction_Release);
                }
                Object.defineProperty(RoleController.prototype, "state", {
                    /** 当前状态 */
                    get: function () { return this._state; },
                    set: function (val) { this._state = val; },
                    enumerable: false,
                    configurable: true
                });
                RoleController.prototype.dispose = function () {
                    this._role = null;
                    this.stateDic.clear();
                };
                /** 输入 */
                // tslint:disable-next-line: cyclomatic-complexity
                RoleController.prototype.handleInput = function (_input, data) {
                    // let state = this.getState(_input);
                    // if (state) {
                    //     this.changeState(state);
                    // }
                    var canChangeState = this._state.canChange(_input, this._role);
                    // let st = "";
                    // // tslint:disable-next-line: switch-default
                    // switch (_input) {
                    //     case RoleActInput.Attack:
                    //         st = "攻击";
                    //         break;
                    //     case RoleActInput.Jump:
                    //         st = "跳";
                    //         break;
                    //     case RoleActInput.SpeedUp:
                    //         st = "跑";
                    //         break;
                    //     case RoleActInput.DropOut:
                    //         st = "掉落";
                    //         break;
                    //     case RoleActInput.Direction:
                    //         st = "走";
                    //         // tslint:disable-next-line: switch-final-break
                    //         break;
                    // }
                    if (this._role.roleData.isMainPlayer()) {
                        // console.log("当前状态", this._state.state, "是否需要切换状态", canChangeState, "切换的状态", _input);
                    }
                    //是否需要切换状态
                    if (canChangeState) {
                        if (this._role.roleData.isMainPlayer()) {
                            // tslint:disable-next-line: switch-default
                            switch (_input) {
                                case GameEnum_20.RoleActInput.Attack:
                                case GameEnum_20.RoleActInput.Jump:
                                case GameEnum_20.RoleActInput.SpeedUp:
                                case GameEnum_20.RoleActInput.Direction:
                                    if (newUiBase_1.newUiBase.signArr.length > 0) {
                                        // console.error("当前的UI列表会影响场景中的玩家操作 ", newUiBase.signArr);
                                        return;
                                    }
                                    // tslint:disable-next-line: switch-final-break
                                    break;
                            }
                            if (this._state.state == GameEnum_20.RoleActInput.Direction) {
                                if (GamePlayMgr_4.GamePlayMgr.currGameType == GameEnum_20.GamePlayType.woodenPeople) {
                                    AudioPlayer_5.AudioPlayer.stop(AudioEnum_5.AudioEnum.WoodWalkSand);
                                }
                                else {
                                    AudioPlayer_5.AudioPlayer.stop(AudioEnum_5.AudioEnum.WoodWalkNormal);
                                }
                            }
                            else if (this._state.state == GameEnum_20.RoleActInput.SpeedUp) {
                                if (GamePlayMgr_4.GamePlayMgr.currGameType == GameEnum_20.GamePlayType.woodenPeople) {
                                    AudioPlayer_5.AudioPlayer.stop(AudioEnum_5.AudioEnum.WoodRunSand);
                                }
                                else {
                                    AudioPlayer_5.AudioPlayer.stop(AudioEnum_5.AudioEnum.WoodRunNormal);
                                }
                            }
                            else if (this._state.state == GameEnum_20.RoleActInput.Attack) {
                                //停止攻击
                                this._role.isAttacking = false;
                            }
                        }
                        // let state: IRoleActState;
                        // // tslint:disable-next-line: switch-default
                        // switch (_input) {
                        //     case RoleActInput.Attack:
                        //         state = AttackState.Instance;
                        //         break;
                        //     case RoleActInput.Jump:
                        //         state = JumpState.Instance;
                        //         break;
                        //     case RoleActInput.Die:
                        //         state = DieState.Instance;
                        //         break;
                        //     case RoleActInput.Revive:
                        //         state = ReviveState.Instance;
                        //         break;
                        //     case RoleActInput.SpeedUp:
                        //         state = RunState.Instance;
                        //         break;
                        //     case RoleActInput.Direction_Release:
                        //         state = StandState.Instance;
                        //         break;
                        //     case RoleActInput.SpeedUp_Release:
                        //         //是否 还有 移动输入
                        //         let hasDirMove = false;
                        //         if (this._role) {
                        //             hasDirMove = gameMathUtil.vec2SqrLength(this._role.moveVelocity) >= 0;
                        //         }
                        //         if (hasDirMove) {
                        //             state = WalkState.Instance;
                        //         } else {
                        //             state = StandState.Instance;
                        //         }
                        //         break;
                        //     case RoleActInput.Direction:
                        //     case RoleActInput.Walk:
                        //         state = WalkState.Instance;
                        //         // tslint:disable-next-line: switch-final-break
                        //         break;
                        // }
                        var state = this.getState(_input);
                        if (state) {
                            if (_input == GameEnum_20.RoleActInput.WaitForDeath) {
                                state.timeOut = this._state.timeOut;
                            }
                            this.changeState(state, data);
                        }
                        else {
                            console.error("当前新增状态未设置！");
                        }
                    }
                };
                RoleController.prototype.update = function (dt) {
                    if (!this._state) {
                        return;
                    }
                    this._state.update(this._role, dt);
                };
                /** 切换状态 */
                RoleController.prototype.changeState = function (state, data) {
                    this.state = state;
                    this._state.enter(this._role, data);
                };
                /** 取对应状态返回 */
                // tslint:disable-next-line: cyclomatic-complexity
                RoleController.prototype.getState = function (stateType) {
                    var state;
                    if (this.stateDic.has(stateType)) {
                        state = this.stateDic.get(stateType);
                    }
                    else {
                        switch (stateType) {
                            case GameEnum_20.RoleActInput.DropOut: //掉落
                                state = new DropOutState_1.DropOutState();
                                break;
                            case GameEnum_20.RoleActInput.Attack:
                                state = new AttackState_1.AttackState();
                                break;
                            case GameEnum_20.RoleActInput.Jump:
                                state = new JumpState_1.JumpState();
                                break;
                            case GameEnum_20.RoleActInput.Die:
                                state = new DieState_1.DieState();
                                break;
                            case GameEnum_20.RoleActInput.WaitForDeath:
                                state = new WaitForDeathState_1.WaitForDeathState();
                                break;
                            case GameEnum_20.RoleActInput.TransferState:
                                state = new TransferState_1.TransferState();
                                break;
                            case GameEnum_20.RoleActInput.Revive:
                                state = new ReviveState_1.ReviveState();
                                break;
                            case GameEnum_20.RoleActInput.SpeedUp:
                                state = new RunState_1.RunState();
                                break;
                            case GameEnum_20.RoleActInput.Direction_Release:
                                state = new StandState_1.StandState();
                                break;
                            case GameEnum_20.RoleActInput.SpeedUp_Release:
                                //是否 还有 移动输入
                                var hasDirMove = false;
                                if (this._role) {
                                    hasDirMove = gameMathUtil_10.gameMathUtil.vec2SqrLength(this._role.moveVelocity) >= 0;
                                }
                                if (hasDirMove) {
                                    state = new WalkState_1.WalkState();
                                }
                                else {
                                    state = new StandState_1.StandState();
                                }
                                break;
                            case GameEnum_20.RoleActInput.Direction:
                            case GameEnum_20.RoleActInput.Walk:
                                state = new WalkState_1.WalkState();
                                break;
                            case GameEnum_20.RoleActInput.PreparePull:
                                state = new PreparePullState_1.PreparePullState();
                                break;
                            case GameEnum_20.RoleActInput.PulltheRope:
                                state = new PulltheRopeState_1.PulltheRopeState();
                                break;
                            case GameEnum_20.RoleActInput.RightPreparePull:
                                state = new RightPreparePullState_1.RightPreparePullState();
                                break;
                            case GameEnum_20.RoleActInput.RightPulltheRope:
                                state = new RightPullTheRopeState_1.RightPullTheRopeState();
                                break;
                            case GameEnum_20.RoleActInput.Picking:
                                state = new PickingStates_1.PickingStates();
                                break;
                            case GameEnum_20.RoleActInput.StrikeToFly:
                                state = new StrikeToFlyState_1.StrikeToFlyState();
                                break;
                            default:
                        }
                        this.stateDic.set(stateType, state);
                    }
                    return state;
                };
                return RoleController;
            }());
            exports_63("RoleController", RoleController);
        }
    };
});
System.register("Role/RoleData", ["Core/StageMgr", "GameEnum", "gamePlays/GamePlayMgr", "Role/RoleAttrInfo"], function (exports_64, context_64) {
    "use strict";
    var StageMgr_9, GameEnum_21, GamePlayMgr_5, RoleAttrInfo_3, RoleData;
    var __moduleName = context_64 && context_64.id;
    return {
        setters: [
            function (StageMgr_9_1) {
                StageMgr_9 = StageMgr_9_1;
            },
            function (GameEnum_21_1) {
                GameEnum_21 = GameEnum_21_1;
            },
            function (GamePlayMgr_5_1) {
                GamePlayMgr_5 = GamePlayMgr_5_1;
            },
            function (RoleAttrInfo_3_1) {
                RoleAttrInfo_3 = RoleAttrInfo_3_1;
            }
        ],
        execute: function () {
            /**
             * 角色的数据类
             */
            RoleData = /** @class */ (function () {
                function RoleData() {
                    // public roleID = 0;
                    this.maxLifeNum = 1;
                    //当前血量
                    this.CurHp = 0;
                    //最大血量
                    this.MaxHp = 0;
                    this.topUIVisible = false;
                    //默认直接播死亡
                    this.defDiePerformance = RoleAttrInfo_3.GameDiePerformanceEnum.Die;
                    //旋转角度
                    this.angle = 0;
                    //单机状态 不同步信息
                    this.isSingle = false;
                    //死亡时间
                    this.dieTime = 0;
                }
                Object.defineProperty(RoleData.prototype, "canMove", {
                    //是否可移动
                    get: function () {
                        return ((this.roleState == GameEnum_21.PlayerStatus.inGame ||
                            this.roleState == GameEnum_21.PlayerStatus.inRoom ||
                            this.roleState == GameEnum_21.PlayerStatus.inReady ||
                            this.inGameState == GameEnum_21.InGameStatus.inGameWin ||
                            this.inGameState == GameEnum_21.InGameStatus.inGame)
                            || this.isSingle) && this.roleClientState == GameEnum_21.PlayerClientState.canMove;
                        // return this.roleClientState == PlayerClientState.canMove;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(RoleData.prototype, "roleState", {
                    get: function () {
                        return this._roleState;
                    },
                    set: function (val) {
                        this._roleState = val;
                        //服务器通知游戏进行中 设置清掉准备状态
                        if (this._roleState == GameEnum_21.PlayerStatus.inGame) {
                            //暂时这样写 后续优化
                            GamePlayMgr_5.GamePlayMgr.gameReadyState = false;
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                //setData
                RoleData.prototype.setData = function (roleInfo) {
                    this.pos = roleInfo.pos;
                    this.angle = roleInfo.angle;
                    this.isSingle = roleInfo.isSingle;
                    this.roleState = roleInfo.roleState;
                    if (roleInfo.defDiePerformance != null) {
                        this.defDiePerformance = roleInfo.defDiePerformance;
                    }
                    if (roleInfo.isInit) //如果是初始化
                     {
                        //
                    }
                };
                //如果是主玩家
                RoleData.prototype.isMainPlayer = function () {
                    return this.guid == StageMgr_9.StageMgr.PlayerGUID;
                };
                RoleData.prototype.getRoleID = function () {
                    var roleId;
                    // tslint:disable-next-line: switch-default
                    switch (this.roleType) {
                        case RoleAttrInfo_3.RoleTypeEnum.Player:
                            roleId = 10004;
                            break;
                        case RoleAttrInfo_3.RoleTypeEnum.NPC:
                            roleId = 10002;
                    }
                    return roleId;
                };
                RoleData.prototype.getHpNormal = function () {
                    if (this.MaxHp == 0) {
                        return 0;
                    }
                    return this.CurHp / this.MaxHp;
                };
                RoleData.prototype.dispose = function () {
                    this.name = null;
                };
                return RoleData;
            }());
            exports_64("RoleData", RoleData);
        }
    };
});
System.register("Role/Role", ["RoleBase", "Tools/commTool", "Tools/DebugLineTool2d", "UIBase/metaUIManager", "Core/EffectMgr", "Core/StageMgr", "GameEnum", "Manager/UserDataManager", "Net/WebsocketTool", "Role/MainRoleDoll", "Role/RoleAI", "Role/RoleAttrInfo", "Role/RoleController", "Role/RoleData", "Role/RoleDoll", "Role/RoleMgr"], function (exports_65, context_65) {
    "use strict";
    var RoleBase_1, commTool_7, DebugLineTool2d_2, metaUIManager_3, EffectMgr_1, StageMgr_10, GameEnum_22, UserDataManager_1, WebsocketTool_4, MainRoleDoll_2, RoleAI_1, RoleAttrInfo_4, RoleController_1, RoleData_1, RoleDoll_2, RoleMgr_2, Role;
    var __moduleName = context_65 && context_65.id;
    return {
        setters: [
            function (RoleBase_1_1) {
                RoleBase_1 = RoleBase_1_1;
            },
            function (commTool_7_1) {
                commTool_7 = commTool_7_1;
            },
            function (DebugLineTool2d_2_1) {
                DebugLineTool2d_2 = DebugLineTool2d_2_1;
            },
            function (metaUIManager_3_1) {
                metaUIManager_3 = metaUIManager_3_1;
            },
            function (EffectMgr_1_1) {
                EffectMgr_1 = EffectMgr_1_1;
            },
            function (StageMgr_10_1) {
                StageMgr_10 = StageMgr_10_1;
            },
            function (GameEnum_22_1) {
                GameEnum_22 = GameEnum_22_1;
            },
            function (UserDataManager_1_1) {
                UserDataManager_1 = UserDataManager_1_1;
            },
            function (WebsocketTool_4_1) {
                WebsocketTool_4 = WebsocketTool_4_1;
            },
            function (MainRoleDoll_2_1) {
                MainRoleDoll_2 = MainRoleDoll_2_1;
            },
            function (RoleAI_1_1) {
                RoleAI_1 = RoleAI_1_1;
            },
            function (RoleAttrInfo_4_1) {
                RoleAttrInfo_4 = RoleAttrInfo_4_1;
            },
            function (RoleController_1_1) {
                RoleController_1 = RoleController_1_1;
            },
            function (RoleData_1_1) {
                RoleData_1 = RoleData_1_1;
            },
            function (RoleDoll_2_1) {
                RoleDoll_2 = RoleDoll_2_1;
            },
            function (RoleMgr_2_1) {
                RoleMgr_2 = RoleMgr_2_1;
            }
        ],
        execute: function () {
            Role = /** @class */ (function () {
                /**
                 * 角色 对象
                 * [数据,网络,渲染模型]
                 */
                function Role() {
                    /** 角色数据 */
                    this.roleData = new RoleData_1.RoleData();
                    /**跳跃 移速缩放 */
                    this.jumpMoveSpeedScale = 0.5;
                    /**奔跑 移速缩放 */
                    this.runMoveSpeed = 4.5;
                    /** 移动速度 */
                    this.moveSpeed = 3;
                    /** 当前武器 */
                    this.currWeapons = GameEnum_22.Weapons.none;
                    /** 当前武器模型 */
                    this.currWeaponsDoll = null;
                    /** 攻击 等待时间(s) */
                    this.attackStateWaitTime = 0;
                    /** 攻击间隔时间(s) */
                    this.attactIntervalTime = 0;
                    this.hasDestroy = false;
                    this._forwarddRotate = new m4m.math.quaternion();
                    this._moveVelocity = new m4m.math.vector2();
                    this._isAttacking = false;
                    //这一次攻击是否已经造成伤害
                    this._isDamage = false;
                    /** 当前速度 */
                    this._nowSpeed = 0;
                    //根据给出目标点 进行移动模式
                    this._isTarPointMove = true;
                }
                Object.defineProperty(Role.prototype, "isRunSpeed", {
                    /** 是否跑步速度 */
                    get: function () {
                        return this._nowSpeed == this.runMoveSpeed;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Role.prototype, "isTarPointMove", {
                    get: function () { return this._isTarPointMove; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Role.prototype, "roleConfigBase", {
                    get: function () { return this.config; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Role.prototype, "isAttacking", {
                    /** 是否攻击中 */
                    get: function () { return this._isAttacking; },
                    set: function (value) { this._isAttacking = value; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Role.prototype, "forwarddRotate", {
                    /**
                     * 前方旋转
                     */
                    get: function () { return this._forwarddRotate; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(Role.prototype, "moveVelocity", {
                    /**
                     * 移动 速度向量
                     */
                    get: function () { return this._moveVelocity; },
                    set: function (val) { m4m.math.vec2Clone(val, this._moveVelocity); },
                    enumerable: false,
                    configurable: true
                });
                // private skillMgr: ActorSkillMgr;
                // private buffMgr: ActorBuffMgr;
                // private hitMgr: ActorHit;
                Role.prototype.init = function (roleType, guid) {
                    return __awaiter(this, void 0, void 0, function () {
                        var roleResName, roleScale, data, _rd;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    // this.roleDoll = new RoleDoll();
                                    // this.roleDoll.role = this;
                                    this.roleData.roleType = roleType;
                                    this.roleID = this.roleData.getRoleID();
                                    this.roleData.guid = guid;
                                    //后续如果玩家间有不同速度 这是改掉
                                    this.moveSpeed = UserDataManager_1.UserDataManager.Instance.moveSpeed;
                                    this.runMoveSpeed = UserDataManager_1.UserDataManager.Instance.runSpeed;
                                    //角色控制器
                                    this.roleCtr = new RoleController_1.RoleController(this);
                                    roleResName = "";
                                    roleScale = 1;
                                    return [4 /*yield*/, RoleBase_1.RoleBase.getAllData()];
                                case 1:
                                    data = _a.sent();
                                    this.config = data.get(this.roleID);
                                    roleResName = this.config.name;
                                    roleScale = this.config.bodyScale;
                                    if (guid == StageMgr_10.StageMgr.PlayerGUID) {
                                        //主角玩家
                                        _rd = new MainRoleDoll_2.MainRoleDoll();
                                    }
                                    else {
                                        _rd = new RoleDoll_2.RoleDoll();
                                    }
                                    return [4 /*yield*/, _rd.init(roleResName)];
                                case 2:
                                    _a.sent();
                                    this.roleDoll = _rd;
                                    this.roleDoll.role = this;
                                    //设置玩家编号
                                    this.roleDoll.setNum(this.roleData.name);
                                    // this.initAnimTimeEvent();
                                    //缩放
                                    m4m.math.vec3SetAll(this.roleDoll.model.localScale, roleScale);
                                    this.roleDoll.model.localScale = this.roleDoll.model.localScale;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                Role.prototype.UpdateDebugDraw = function (dt) {
                    if (this.roleDoll) {
                        var cam = m4m.framework.sceneMgr.scene.mainCamera;
                        var canvas = metaUIManager_3.metaUIManager.ActiveSelf.overlay.canvas;
                        var pos = this.roleDoll.model.localPosition;
                        var sP = Role.helpV2V2;
                        commTool_7.commTool.calcuUIPosBy3DPos(cam, canvas, pos, sP);
                        //绘制圆点
                        DebugLineTool2d_2.DebugLineTool2d.drawCircle(sP, 5, 3, 6);
                        //
                        var eP = Role.helpV2v1;
                        var epV3 = Role.helpV3;
                        m4m.math.vec3Set(epV3, this._moveVelocity.x * dt, 0, this._moveVelocity.y * dt);
                        m4m.math.quatTransformVector(this.forwarddRotate, epV3, epV3);
                        m4m.math.vec3Add(epV3, pos, epV3);
                        commTool_7.commTool.calcuUIPosBy3DPos(cam, canvas, epV3, eP);
                        //绘制角色速度线
                        // DebugLineTool2d.drawLine(sP, eP, 3, 4);
                    }
                };
                // 更新
                Role.prototype.UpdateLogic = function (dt) {
                    // if (this.skillMgr) {
                    //     this.skillMgr.UpdateLogic(deltaTime);
                    // }
                    // if (this.buffMgr) {
                    //     this.buffMgr.UpdateLogic(deltaTime);
                    // }
                    if (this.roleAi) {
                        this.roleAi.update(dt);
                    }
                    this.attackUpdate(dt);
                    if (this.roleCtr) {
                        this.roleCtr.update(dt);
                    }
                    if (this.roleDoll) {
                        this.roleDoll.UpdateLogic(dt);
                    }
                    //死亡动画播放判定
                    this.dieStateOpinion(dt);
                };
                Role.prototype.dispose = function () {
                    if (this.hasDestroy) {
                        return;
                    }
                    this.hasDestroy = true;
                    // if (this.skillMgr) { this.skillMgr.OnDestroy(); }
                    // if (this.buffMgr) { this.buffMgr.OnDestroy(); }
                    if (this.roleDoll) {
                        this.roleDoll.dispose();
                    }
                    if (this.roleAi) {
                        this.roleAi.dispose();
                    }
                    if (this.roleCtr) {
                        this.roleCtr.dispose();
                    }
                    // this.skillMgr = null;
                    // this.buffMgr = null;
                    this.roleDoll = null;
                    this.roleCtr = null;
                    this.roleAi = null;
                    //父类回收
                    //GameObjectManager.RecycleLuaObject(this)
                    this.roleData.dispose();
                    this.roleData = null;
                };
                Role.prototype.setAI = function (aiType) {
                    this.roleAi = new RoleAI_1.RoleAI(this, aiType);
                };
                //初始化旋转
                Role.prototype.initRotate = function () {
                    this.localRotate = this.roleData.angle;
                };
                Object.defineProperty(Role.prototype, "localRotate", {
                    //设置旋转
                    set: function (angle) {
                        if (!this.roleDoll) {
                            return;
                        }
                        var m = this.roleDoll.model;
                        var rot = m.localRotate;
                        m4m.math.quatFromAxisAngle(Role.helpV3UP, angle, rot);
                        m.localRotate = rot;
                    },
                    enumerable: false,
                    configurable: true
                });
                //强行停止移动
                Role.prototype.stop = function (trueStop) {
                    if (trueStop === void 0) { trueStop = false; }
                    m4m.math.vec2SetAll(this.moveVelocity, 0);
                    if (this.roleDoll) {
                        this.roleDoll.stop(trueStop);
                    }
                };
                /**
                 * 角色行走
                 * @param dt
                 * @param scale 速度缩放
                 */
                Role.prototype.walk = function (dt, scale) {
                    if (scale === void 0) { scale = 1; }
                    if (!this.roleDoll) {
                        return;
                    }
                    // console.error("0000 ",this._moveVelocity);
                    if (this.roleDoll.canMove) {
                        //暂时处理 后续改掉  TODO 余群枝
                        var v2 = Role.helpV2;
                        m4m.math.vec2ScaleByNum(this._moveVelocity, scale, v2);
                        if (this._isTarPointMove) {
                            //根据算出的目标点进行移动
                            var mainRoledoll = this.roleDoll;
                            if (mainRoledoll && mainRoledoll.startMove) {
                                var moveType = GameEnum_22.PlayerMoveType.walk;
                                // console.log("当前行为状态 ", this.roleCtr.state.state);
                                // tslint:disable-next-line: switch-default
                                switch (this.roleCtr.state.state) {
                                    case GameEnum_22.RoleActInput.Direction:
                                        moveType = GameEnum_22.PlayerMoveType.walk;
                                        this._nowSpeed = this.moveSpeed;
                                        break;
                                    case GameEnum_22.RoleActInput.Jump:
                                        moveType = GameEnum_22.PlayerMoveType.jump;
                                        break;
                                    case GameEnum_22.RoleActInput.SpeedUp:
                                        moveType = GameEnum_22.PlayerMoveType.run;
                                        this._nowSpeed = this.runMoveSpeed;
                                        // tslint:disable-next-line: switch-final-break
                                        break;
                                }
                                mainRoledoll.startMove(v2, this._nowSpeed, this._forwarddRotate, moveType);
                            }
                        }
                        else {
                            this.roleDoll.walkStep(dt, v2, this._forwarddRotate);
                        }
                    }
                };
                /** 是否能攻击 */
                Role.prototype.canAttack = function () {
                    return this.currWeapons != GameEnum_22.Weapons.none && !this._isAttacking && this.attackStateWaitTime + this.attactIntervalTime <= 0;
                };
                /** 攻击 */
                Role.prototype.attack = function (prevState) {
                    this._isAttacking = true;
                    this._isDamage = false;
                    //根据上一个状态播放动画
                    var anim = null;
                    // if (prevState.state == RoleActInput.Direction_Release) {
                    anim = "SwordAttack";
                    // } else if (prevState.state == RoleActInput.Direction) {
                    //     anim = "SwordAttackWalk";
                    // } else if (prevState.state == RoleActInput.SpeedUp) {
                    //     anim = "SwordAttackRun";
                    // }
                    if (anim) {
                        this.roleDoll.playAnim(anim);
                        this.attackStateWaitTime = this.roleDoll.animationCtr.getStateTimeLength(anim);
                    }
                };
                Role.prototype.setHp = function (v) {
                    if (this.roleData.CurHp > v) {
                        this.hit(GameEnum_22.HitType.Bloom);
                    }
                    this.roleData.CurHp = v;
                };
                /** 角色受伤 */
                Role.prototype.hit = function (hitType) {
                    var v3Pos = new m4m.math.vector3(0, 0, 0);
                    EffectMgr_1.EffectMgr.setPlay(hitType, v3Pos, 1, null, this.roleDoll.model, null, false);
                };
                Role.prototype.die = function () {
                    this.roleCtr.handleInput(GameEnum_22.RoleActInput.Die);
                };
                Role.prototype.revive = function () {
                    this.roleCtr.handleInput(GameEnum_22.RoleActInput.Revive);
                };
                //掉落
                Role.prototype.dropOut = function () {
                    this.roleCtr.handleInput(GameEnum_22.RoleActInput.DropOut);
                };
                Role.prototype.jump = function () {
                    //计算移动朝向
                    m4m.math.vec2Clone(new m4m.math.vector2(1, 0), this.moveVelocity);
                    //每次移动固定的距离
                    var moveSpeed = 2;
                    m4m.math.vec2ScaleByNum(this.moveVelocity, moveSpeed, this.moveVelocity);
                    var mainRoledoll = this.roleDoll;
                    // if (mainRoledoll && mainRoledoll.startMove) {
                    //     mainRoledoll.startMove(this.moveVelocity, this.moveSpeed, this._forwarddRotate);
                    // }
                    this.roleCtr.handleInput(GameEnum_22.RoleActInput.Jump);
                };
                /** 切换武器 */
                Role.prototype.changeWeapons = function (weapon) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            // if (this.currWeaponsDoll) {
                            //     this.currWeaponsDoll.dispose();
                            //     this.currWeaponsDoll = null;
                            // }
                            this.currWeapons = weapon;
                            return [2 /*return*/];
                        });
                    });
                };
                // /** 根据当前手持武器获取对应状态需要播放的动画 */
                // public getWeaponsAnimByState(state: RoleActInput): string {
                //     switch (this.currWeapons) {
                //         case Weapons.none:
                //             if (state == RoleActInput.Direction_Release) {
                //                 return "Idle";
                //             } else if (state == RoleActInput.Direction) {
                //                 return "Walk";
                //             } else if (state == RoleActInput.SpeedUp) {
                //                 return "Run";
                //             }
                //             break;
                //         case Weapons.bat:
                //             if (state == RoleActInput.Direction_Release) {
                //                 return "";
                //             } else if (state == RoleActInput.Direction) {
                //                 return "";
                //             } else if (state == RoleActInput.SpeedUp) {
                //                 return "";
                //             }
                //             break;
                //         default:
                //     }
                //     return null;
                // }
                //死亡动画播放判定
                Role.prototype.dieStateOpinion = function (dt) {
                    // 
                    //如果当前玩家是死亡状态
                    if (this.roleData.inGameState == GameEnum_22.InGameStatus.inGameDead) {
                        //设置为等死状态
                        this.roleCtr.handleInput(GameEnum_22.RoleActInput.WaitForDeath);
                        // if (this.roleData.defDiePerformance == GameDiePerformanceEnum.DropOutDie) {
                        //     //
                        //     //如果当前不是掉落状态机
                        //     if (this.roleCtr.state.state != RoleActInput.DropOut) {
                        //         if (this.roleCtr.state.canSwitch) {
                        //             this.roleCtr.handleInput(RoleActInput.DropOut);
                        //         } else {
                        //             this.roleCtr.state.out();
                        //         }
                        //     }
                        // } else {
                        //     //如果当前不是死亡状态机
                        //     if (this.roleCtr.state.state != RoleActInput.Die) {
                        //         if (this.roleCtr.state.canSwitch) {
                        //             this.roleCtr.handleInput(RoleActInput.Die);
                        //         } else {
                        //             this.roleCtr.state.out();
                        //         }
                        //     }
                        // }
                    }
                    if (this.roleCtr.state.state == GameEnum_22.RoleActInput.Die) {
                        this.roleData.dieTime += dt;
                    }
                    else {
                        this.roleData.dieTime = 0;
                    }
                };
                Role.prototype.attackUpdate = function (dt) {
                    this.attackStateWaitTime -= dt;
                    if (this._isAttacking) {
                        if (!this._isDamage && this.attackStateWaitTime <= 0.4 && this.roleData.isMainPlayer()) {
                            this._isDamage = true;
                            //console.log("攻击造成伤害...");
                            //给服务器发送攻击消息
                            var role = new RoleAttrInfo_4.RoleServerInfo();
                            role.hitType = 1;
                            role.pos = this.roleDoll.model.localPosition;
                            role.rot = RoleMgr_2.RoleMgr.getRoleForwardAngle(this);
                            // console.log("你自己发起攻击:", role.hitType, role.pos.toString(), role.rot);
                            WebsocketTool_4.WebsocketTool.Instance.GameManager_updataGame(role);
                        }
                        if (this.attackStateWaitTime <= 0) {
                            this._isAttacking = false;
                            this.roleCtr.handleInput(GameEnum_22.RoleActInput.Direction_Release);
                            //console.log("攻击结束...");
                        }
                    }
                };
                Role.helpV2 = new m4m.math.vector2();
                Role.helpV2v1 = new m4m.math.vector2();
                Role.helpV2V2 = new m4m.math.vector2();
                Role.helpV3 = new m4m.math.vector3();
                Role.helpV3UP = new m4m.math.vector3(0, 1, 0);
                return Role;
            }());
            exports_65("Role", Role);
        }
    };
});
System.register("Net/DataEvents/HallConfigBaseEvent", [], function (exports_66, context_66) {
    "use strict";
    var HallConfigBaseEvent;
    var __moduleName = context_66 && context_66.id;
    return {
        setters: [],
        execute: function () {
            HallConfigBaseEvent = /** @class */ (function () {
                function HallConfigBaseEvent() {
                }
                /** 初始化全部数据*/
                HallConfigBaseEvent.Init = "Init";
                /** 批量加载数据*/
                HallConfigBaseEvent.ChangeList = "ChangeList";
                /** 大厅ID*/
                HallConfigBaseEvent.id = "id";
                /** 备注*/
                HallConfigBaseEvent.desc = "desc";
                /** 玩家列表*/
                HallConfigBaseEvent.players = "players";
                /** 游戏配置*/
                HallConfigBaseEvent.gameConfig = "gameConfig";
                /** 大厅状态*/
                HallConfigBaseEvent.hallStatus = "hallStatus";
                /** 房间最大人数*/
                HallConfigBaseEvent.maxPlayer = "maxPlayer";
                return HallConfigBaseEvent;
            }());
            exports_66("HallConfigBaseEvent", HallConfigBaseEvent);
        }
    };
});
System.register("Scene/SceneLoadManager", ["eventMgr", "events/sceneHideEvent", "events/sceneShowEvent", "PSDUI/UiDataManager", "SceneBase", "Audio/AudioPlayer", "Data/BindKeyName", "Manager/UIOpenOrHideManager", "Role/CameraViewInfo", "Role/RoleMgr"], function (exports_67, context_67) {
    "use strict";
    var eventMgr_7, sceneHideEvent_2, sceneShowEvent_2, UiDataManager_7, SceneBase_2, AudioPlayer_6, BindKeyName_7, UIOpenOrHideManager_3, CameraViewInfo_1, RoleMgr_3, SceneidEnum, SceneLoadManager;
    var __moduleName = context_67 && context_67.id;
    return {
        setters: [
            function (eventMgr_7_1) {
                eventMgr_7 = eventMgr_7_1;
            },
            function (sceneHideEvent_2_1) {
                sceneHideEvent_2 = sceneHideEvent_2_1;
            },
            function (sceneShowEvent_2_1) {
                sceneShowEvent_2 = sceneShowEvent_2_1;
            },
            function (UiDataManager_7_1) {
                UiDataManager_7 = UiDataManager_7_1;
            },
            function (SceneBase_2_1) {
                SceneBase_2 = SceneBase_2_1;
            },
            function (AudioPlayer_6_1) {
                AudioPlayer_6 = AudioPlayer_6_1;
            },
            function (BindKeyName_7_1) {
                BindKeyName_7 = BindKeyName_7_1;
            },
            function (UIOpenOrHideManager_3_1) {
                UIOpenOrHideManager_3 = UIOpenOrHideManager_3_1;
            },
            function (CameraViewInfo_1_1) {
                CameraViewInfo_1 = CameraViewInfo_1_1;
            },
            function (RoleMgr_3_1) {
                RoleMgr_3 = RoleMgr_3_1;
            }
        ],
        execute: function () {
            /**
             *场景ID常量
             */
            (function (SceneidEnum) {
                /** 单人游戏大厅 */
                SceneidEnum[SceneidEnum["BgTugOfWar"] = 1002] = "BgTugOfWar";
                SceneidEnum[SceneidEnum["Hall"] = 1003] = "Hall";
                SceneidEnum[SceneidEnum["WoodenPeople"] = 1004] = "WoodenPeople";
                SceneidEnum[SceneidEnum["SugarCake"] = 1005] = "SugarCake";
                SceneidEnum[SceneidEnum["GlassBridge"] = 1006] = "GlassBridge";
                SceneidEnum[SceneidEnum["Hoodle"] = 1007] = "Hoodle";
                SceneidEnum[SceneidEnum["squidGame"] = 1008] = "squidGame";
            })(SceneidEnum || (exports_67("SceneidEnum", SceneidEnum = {})));
            SceneLoadManager = /** @class */ (function () {
                function SceneLoadManager() {
                    //当前场景配置文件
                    this._sceneConfig = null;
                    //
                    eventMgr_7.EventMgr.addListener("camera_View_Success", this.setCameraViewInfoCom, this);
                }
                Object.defineProperty(SceneLoadManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new SceneLoadManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SceneLoadManager.prototype, "lastSceneID", {
                    // 获取上一个场景id
                    get: function () {
                        return this._lastSceneID;
                    },
                    enumerable: false,
                    configurable: true
                });
                //获取场景配置文件
                SceneLoadManager.prototype.getSceneConfig = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    if (!(this._sceneConfig == null)) return [3 /*break*/, 2];
                                    _a = this;
                                    return [4 /*yield*/, SceneBase_2.SceneBase.getDataByID(this._lastSceneID)];
                                case 1:
                                    _a._sceneConfig = (_b.sent());
                                    _b.label = 2;
                                case 2: return [2 /*return*/, this._sceneConfig];
                            }
                        });
                    });
                };
                SceneLoadManager.prototype.loadScene = function (sceneid) {
                    //开始切换场景
                    //停止声音
                    AudioPlayer_6.AudioPlayer.stopAll();
                    //让 摇杆 复位
                    UiDataManager_7.UiDataManager.changeFunctionData(BindKeyName_7.BindKeyName.joyReset, null);
                    //跳到新的场景 禁止移动
                    RoleMgr_3.RoleMgr.canMove(false, true);
                    //显示loading
                    // UIOpenOrHideManager.Instance.OpenLoadingView();
                    UIOpenOrHideManager_3.UIOpenOrHideManager.Instance.OpenTloadingView();
                    //清理其他角色
                    eventMgr_7.EventMgr.dispatchEvent("role_clear_Other", { data: "" });
                    //因常规状态场景都单独存在 加下一个场景前 释放上一个场景资源
                    if (this._lastSceneID) {
                        var _sceneHideEvent = new sceneHideEvent_2.SceneHideEvent();
                        _sceneHideEvent.sceneID = this._lastSceneID;
                        _sceneHideEvent.dispose = true;
                        console.error("释放 场景资源*****", this._lastSceneID);
                        eventMgr_7.EventMgr.dispatchEvent("scene_hide", _sceneHideEvent);
                    }
                    // console.error("显示 场景资源", sceneid);
                    var ev = new sceneShowEvent_2.SceneShowEvent();
                    ev.sceneID = sceneid;
                    eventMgr_7.EventMgr.dispatchEvent("scene_show", ev);
                    this._lastSceneID = sceneid;
                    this._sceneConfig = null;
                };
                /**
                 * 设置相机看向目标参数
                 * */
                SceneLoadManager.prototype.upDateCameraViewInfo = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var sceneID, conf, info;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    sceneID = this._lastSceneID;
                                    return [4 /*yield*/, this.getSceneConfig()];
                                case 1:
                                    conf = _a.sent();
                                    if (conf) {
                                        info = new CameraViewInfo_1.CameraViewInfo();
                                        info.camViewOffset = conf.camViewOffset;
                                        info.distance = conf.camDistance;
                                        info.tiltAngle = conf.tiltAngle;
                                        info.panAngle = conf.panAngle;
                                    }
                                    else {
                                        console.error("取场景配置出错！！！" + sceneID);
                                    }
                                    eventMgr_7.EventMgr.dispatchEvent("role_view", new eventMgr_7.EventGeneric({ info: info }));
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                //设置相机看向目标参数完成
                SceneLoadManager.prototype.setCameraViewInfoCom = function () {
                    console.error("设置相机看向目标参数完成");
                    //隐藏loading
                    // UIOpenOrHideManager.Instance.HideLoadingView();
                    UIOpenOrHideManager_3.UIOpenOrHideManager.Instance.HideTloadingView();
                    RoleMgr_3.RoleMgr.canMove(true);
                };
                return SceneLoadManager;
            }());
            exports_67("SceneLoadManager", SceneLoadManager);
        }
    };
});
System.register("Manager/GamingManager", ["PSDUI/UiDataManager", "Data/BindKeyName"], function (exports_68, context_68) {
    "use strict";
    var UiDataManager_8, BindKeyName_8, GamingManager;
    var __moduleName = context_68 && context_68.id;
    return {
        setters: [
            function (UiDataManager_8_1) {
                UiDataManager_8 = UiDataManager_8_1;
            },
            function (BindKeyName_8_1) {
                BindKeyName_8 = BindKeyName_8_1;
            }
        ],
        execute: function () {
            GamingManager = /** @class */ (function () {
                function GamingManager() {
                    //头顶血条显示类型 0 不显示, 1 只显示自己, 2 全都显示
                    this.hpBarVisible = 0;
                    this.data = [];
                }
                Object.defineProperty(GamingManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new GamingManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                GamingManager.prototype.init = function () {
                    this.roelgmaingBindFun = this.roelgmaingFun.bind(this);
                    UiDataManager_8.UiDataManager.bindFunctionData(BindKeyName_8.BindKeyName.roelgming, this.roelgmaingBindFun);
                };
                GamingManager.prototype.roelgmaingFun = function (list) {
                    this.data.length = 0;
                    this.datatype = null;
                    for (var key in list) {
                        var obj = list[key];
                        this.datatype = list;
                        this.data.push(obj);
                    }
                };
                GamingManager.prototype.dispose = function () {
                    this.data.length = 0;
                    this.datatype = null;
                };
                return GamingManager;
            }());
            exports_68("GamingManager", GamingManager);
        }
    };
});
System.register("Manager/WaitRoomManager", ["eventMgr", "PSDUI/UiDataManager", "Core/StageMgr", "Data/BindKeyName", "gamePlays/GamePlayMgr", "Net/DataEvents/HallConfigBaseEvent", "Net/WsDataManager", "Role/RoleAttrInfo", "Scene/SceneLoadManager", "Manager/GamingManager", "Manager/UIOpenOrHideManager"], function (exports_69, context_69) {
    "use strict";
    var eventMgr_8, UiDataManager_9, StageMgr_11, BindKeyName_9, GamePlayMgr_6, HallConfigBaseEvent_1, WsDataManager_3, RoleAttrInfo_5, SceneLoadManager_1, GamingManager_1, UIOpenOrHideManager_4, WaitRoomManager;
    var __moduleName = context_69 && context_69.id;
    return {
        setters: [
            function (eventMgr_8_1) {
                eventMgr_8 = eventMgr_8_1;
            },
            function (UiDataManager_9_1) {
                UiDataManager_9 = UiDataManager_9_1;
            },
            function (StageMgr_11_1) {
                StageMgr_11 = StageMgr_11_1;
            },
            function (BindKeyName_9_1) {
                BindKeyName_9 = BindKeyName_9_1;
            },
            function (GamePlayMgr_6_1) {
                GamePlayMgr_6 = GamePlayMgr_6_1;
            },
            function (HallConfigBaseEvent_1_1) {
                HallConfigBaseEvent_1 = HallConfigBaseEvent_1_1;
            },
            function (WsDataManager_3_1) {
                WsDataManager_3 = WsDataManager_3_1;
            },
            function (RoleAttrInfo_5_1) {
                RoleAttrInfo_5 = RoleAttrInfo_5_1;
            },
            function (SceneLoadManager_1_1) {
                SceneLoadManager_1 = SceneLoadManager_1_1;
            },
            function (GamingManager_1_1) {
                GamingManager_1 = GamingManager_1_1;
            },
            function (UIOpenOrHideManager_4_1) {
                UIOpenOrHideManager_4 = UIOpenOrHideManager_4_1;
            }
        ],
        execute: function () {
            //等待房间数据
            WaitRoomManager = /** @class */ (function () {
                function WaitRoomManager() {
                }
                Object.defineProperty(WaitRoomManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new WaitRoomManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //初始化
                WaitRoomManager.prototype.init = function () {
                    // console.error(WsDataManager.UserVarBaseData);
                    WsDataManager_3.WsDataManager.HallConfigBaseData.addEventListener(HallConfigBaseEvent_1.HallConfigBaseEvent.Init, this.waitRoomInfoFun.bind(this));
                    WsDataManager_3.WsDataManager.HallConfigBaseData.addEventListener(HallConfigBaseEvent_1.HallConfigBaseEvent.players, this.addPlayersFun.bind(this));
                };
                WaitRoomManager.prototype.addPlayersFun = function (data) {
                    //console.error(data);
                    for (var key in data) {
                        // console.log(`key:${i}`);
                        var GUID = key;
                        var roleData = data[key];
                        if (roleData == null) {
                            //移除玩家
                            eventMgr_8.EventMgr.dispatchEvent("role_remove", { data: GUID });
                        }
                        else {
                            //增加玩家
                            this.addRole(GUID, roleData);
                        }
                    }
                    var roleArr = JSON.parse(WsDataManager_3.WsDataManager.HallConfigBaseData.players);
                    // console.error("等待房间玩家列表数据", roleArr);
                    this.data = roleArr;
                    UiDataManager_9.UiDataManager.changeFunctionData(BindKeyName_9.BindKeyName.EyeVerify, roleArr);
                };
                WaitRoomManager.prototype.addRole = function (GUID, roleData) {
                    SceneLoadManager_1.SceneLoadManager.Instance.getSceneConfig()
                        .then(function (config) {
                        var setPos = roleData.pos;
                        var roleInfo = new RoleAttrInfo_5.RoleAttrInfo();
                        roleInfo.roleType = RoleAttrInfo_5.RoleTypeEnum.Player;
                        roleInfo.GUID = GUID;
                        roleInfo.pos = setPos;
                        roleInfo.angle = config.roleAngle;
                        roleInfo.roleState = roleData.playerInfo.status;
                        roleInfo.isInit = true;
                        if (roleData.num != null) {
                            roleInfo.num = roleData.num;
                        }
                        //console.log(roleData.num);
                        eventMgr_8.EventMgr.dispatchEvent("role_make", new eventMgr_8.EventGeneric({ roleInfo: roleInfo }));
                    });
                };
                WaitRoomManager.prototype.waitRoomInfoFun = function () {
                    //
                    GamePlayMgr_6.GamePlayMgr.ExitGame();
                    //显示loading
                    // UIOpenOrHideManager.Instance.OpenLoadingView();
                    UIOpenOrHideManager_4.UIOpenOrHideManager.Instance.OpenTloadingView();
                    //因大厅房间和单人大厅是同一场景
                    eventMgr_8.EventMgr.addListener("role_makeSuccess", this.onMakeEnd, this);
                    // console.error("等待房间数据更新", WsDataManager.HallConfigBaseData);
                    this.max = WsDataManager_3.WsDataManager.HallConfigBaseData.maxPlayer;
                    var roleArr = JSON.parse(WsDataManager_3.WsDataManager.HallConfigBaseData.players);
                    // console.error("等待房间玩家列表数据", roleArr);
                    this.data = roleArr;
                    for (var key in roleArr) {
                        var roleData = roleArr[key];
                        // console.log(` &&& `,roleData);
                        var GUID = roleData.playerInfo.token;
                        var isMain = GUID == StageMgr_11.StageMgr.PlayerGUID;
                        // let setPos = roleData.pos;
                        // //玩家旋转角度
                        // let rot = roleData.rot;
                        // let roleInfo = new RoleAttrInfo();
                        // roleInfo.roleType = RoleTypeEnum.Player;
                        // roleInfo.GUID = GUID;
                        // roleInfo.pos = setPos;
                        // roleInfo.angle = rot;
                        // roleInfo.roleState = roleData.playerInfo.status;
                        if (isMain) {
                            console.error("玩家ID " + GUID + " 进入等待房间");
                        }
                        // EventMgr.dispatchEvent("role_make", new EventGeneric<{ roleInfo: RoleAttrInfo }>({ roleInfo }));
                        this.addRole(GUID, roleData);
                    }
                };
                //角色创建完毕
                WaitRoomManager.prototype.onMakeEnd = function (ev) {
                    if (ev.data == StageMgr_11.StageMgr.PlayerGUID) {
                        console.error(ev.data, " 角色创建完毕 ", StageMgr_11.StageMgr.PlayerGUID);
                        //如果是主角创建完成
                        eventMgr_8.EventMgr.removeListener("role_makeSuccess", this.onMakeEnd, this);
                        //设置相机看向目标参数
                        SceneLoadManager_1.SceneLoadManager.Instance.upDateCameraViewInfo();
                        GamingManager_1.GamingManager.Instance.index = 1;
                        UIOpenOrHideManager_4.UIOpenOrHideManager.Instance.OpenGamingView();
                    }
                };
                return WaitRoomManager;
            }());
            exports_69("WaitRoomManager", WaitRoomManager);
        }
    };
});
System.register("Net/DataEvents/DarkFightConfigBaseEvent", [], function (exports_70, context_70) {
    "use strict";
    var DarkFightConfigBaseEvent;
    var __moduleName = context_70 && context_70.id;
    return {
        setters: [],
        execute: function () {
            DarkFightConfigBaseEvent = /** @class */ (function () {
                function DarkFightConfigBaseEvent() {
                }
                /** 初始化全部数据*/
                DarkFightConfigBaseEvent.Init = "Init";
                /** 批量加载数据*/
                DarkFightConfigBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                DarkFightConfigBaseEvent.id = "id";
                /** 备注*/
                DarkFightConfigBaseEvent.desc = "desc";
                /** 用户列表*/
                DarkFightConfigBaseEvent.players = "players";
                /** 每一步距离*/
                DarkFightConfigBaseEvent.stepDis = "stepDis";
                /** 下落高度*/
                DarkFightConfigBaseEvent.dropHeigth = "dropHeigth";
                /** 玩家初始HP*/
                DarkFightConfigBaseEvent.startHp = "startHp";
                /** 初始位置*/
                DarkFightConfigBaseEvent.startArea = "startArea";
                /** 活动区域*/
                DarkFightConfigBaseEvent.moveArea = "moveArea";
                /** 简单难度持续时间*/
                DarkFightConfigBaseEvent.easyMode = "easyMode";
                /** 困难难度开始时间*/
                DarkFightConfigBaseEvent.hardMode = "hardMode";
                /** 最小力度*/
                DarkFightConfigBaseEvent.powerMin = "powerMin";
                /** 最大力度*/
                DarkFightConfigBaseEvent.powerMax = "powerMax";
                /** 最小判定角度*/
                DarkFightConfigBaseEvent.agreeMin = "agreeMin";
                /** 最大判定角度*/
                DarkFightConfigBaseEvent.agreeMax = "agreeMax";
                /** 提前发送时间*/
                DarkFightConfigBaseEvent.advance = "advance";
                /** 游戏总时间*/
                DarkFightConfigBaseEvent.totleTime = "totleTime";
                /** 倒计时时长*/
                DarkFightConfigBaseEvent.countTime = "countTime";
                /** 游戏开始时间*/
                DarkFightConfigBaseEvent.gameTime = "gameTime";
                /** 游戏状态*/
                DarkFightConfigBaseEvent.gameStatus = "gameStatus";
                /** 倒计时开始时间*/
                DarkFightConfigBaseEvent.countDown = "countDown";
                /** 当前时间*/
                DarkFightConfigBaseEvent.nowTime = "nowTime";
                /** 结束时间*/
                DarkFightConfigBaseEvent.endTime = "endTime";
                /** 游戏场景ID*/
                DarkFightConfigBaseEvent.gameScene = "gameScene";
                return DarkFightConfigBaseEvent;
            }());
            exports_70("DarkFightConfigBaseEvent", DarkFightConfigBaseEvent);
        }
    };
});
System.register("Manager/GameRunningCountdownManager", ["eventMgr", "PSDUI/UiDataManager", "Time/CDManage", "Tools/FrameMgr", "Data/BindKeyName", "GameEnum"], function (exports_71, context_71) {
    "use strict";
    var eventMgr_9, UiDataManager_10, CDManage_2, FrameMgr_3, BindKeyName_10, GameEnum_23, GameRunningCountdownManager;
    var __moduleName = context_71 && context_71.id;
    return {
        setters: [
            function (eventMgr_9_1) {
                eventMgr_9 = eventMgr_9_1;
            },
            function (UiDataManager_10_1) {
                UiDataManager_10 = UiDataManager_10_1;
            },
            function (CDManage_2_1) {
                CDManage_2 = CDManage_2_1;
            },
            function (FrameMgr_3_1) {
                FrameMgr_3 = FrameMgr_3_1;
            },
            function (BindKeyName_10_1) {
                BindKeyName_10 = BindKeyName_10_1;
            },
            function (GameEnum_23_1) {
                GameEnum_23 = GameEnum_23_1;
            }
        ],
        execute: function () {
            //游戏进行至结束倒计时
            GameRunningCountdownManager = /** @class */ (function () {
                function GameRunningCountdownManager() {
                    this._startTime = 0;
                    //倒计时结束时间
                    this._countdownTime = 0;
                    this._start = false;
                    this.gapTime = 1; //每1秒 轮一次
                    this.newDaTime = 0;
                    this.gameState = 0;
                }
                Object.defineProperty(GameRunningCountdownManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new GameRunningCountdownManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 游戏开始倒计时 初始化
                 * @param startTime 开始走倒计时 时间
                 * @param countdownTime 倒计时毫秒数
                 * @param callback 结束回调
                 */
                GameRunningCountdownManager.prototype.init = function (startTime, countdownTime, callback) {
                    this._startTime = startTime;
                    this._countdownTime = startTime + countdownTime;
                    this.updateFun(0);
                    FrameMgr_3.FrameMgr.Add(this.updateFun, this);
                };
                GameRunningCountdownManager.prototype.updateFun = function (dt) {
                    var serverTime = CDManage_2.CDManage.Instance.serverTime();
                    if (this._start == false) {
                        if (serverTime >= this._startTime) {
                            this._start = true;
                            var time = Math.round((this._countdownTime - serverTime) / 1000);
                            // console.error("游戏进行至结束倒计时***** ", time);
                            //这里加时间改变 UI绑定方法
                            UiDataManager_10.UiDataManager.changeFunctionData(BindKeyName_10.BindKeyName.runningTimeCD, { time: time });
                        }
                    }
                    if (this._start) {
                        //需要开始
                        this.newDaTime += dt;
                        if (this.newDaTime >= this.gapTime) {
                            this.newDaTime = 0;
                            var time = Math.round((this._countdownTime - serverTime) / 1000);
                            // console.error("游戏进行至结束倒计时 ", time);
                            //这里加时间改变 UI绑定方法
                            UiDataManager_10.UiDataManager.changeFunctionData(BindKeyName_10.BindKeyName.runningTimeCD, { time: time });
                            if (time <= 0) {
                                eventMgr_9.EventMgr.dispatchEvent("game_state", {
                                    data: {
                                        gameState: GameEnum_23.GameState.over,
                                    },
                                });
                                // 时间到, 走回调
                                if (this.callback) {
                                    this.callback();
                                    this.callback = null;
                                }
                                this.stop();
                            }
                        }
                    }
                };
                GameRunningCountdownManager.prototype.stop = function () {
                    if (this._start) {
                        this._start = false;
                        FrameMgr_3.FrameMgr.Remove(this.updateFun, this);
                        this.newDaTime = 0;
                    }
                };
                return GameRunningCountdownManager;
            }());
            exports_71("GameRunningCountdownManager", GameRunningCountdownManager);
        }
    };
});
System.register("Manager/GameStartCountdownManager", ["eventMgr", "PSDUI/UiDataManager", "Time/CDManage", "Tools/FrameMgr", "Data/BindKeyName", "GameEnum"], function (exports_72, context_72) {
    "use strict";
    var eventMgr_10, UiDataManager_11, CDManage_3, FrameMgr_4, BindKeyName_11, GameEnum_24, GameStartCountdownManager;
    var __moduleName = context_72 && context_72.id;
    return {
        setters: [
            function (eventMgr_10_1) {
                eventMgr_10 = eventMgr_10_1;
            },
            function (UiDataManager_11_1) {
                UiDataManager_11 = UiDataManager_11_1;
            },
            function (CDManage_3_1) {
                CDManage_3 = CDManage_3_1;
            },
            function (FrameMgr_4_1) {
                FrameMgr_4 = FrameMgr_4_1;
            },
            function (BindKeyName_11_1) {
                BindKeyName_11 = BindKeyName_11_1;
            },
            function (GameEnum_24_1) {
                GameEnum_24 = GameEnum_24_1;
            }
        ],
        execute: function () {
            //游戏开始倒计时
            GameStartCountdownManager = /** @class */ (function () {
                function GameStartCountdownManager() {
                    this._startTime = 0;
                    //倒计时结束时间
                    this._countdownTime = 0;
                    this._start = false;
                    this.gapTime = 1; //每1秒 轮一次
                    this.newDaTime = 0;
                    this.gameState = 0;
                }
                Object.defineProperty(GameStartCountdownManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new GameStartCountdownManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 游戏开始倒计时 初始化
                 * @param startTime 开始走倒计时 时间
                 * @param countdownTime 倒计时毫秒数
                 * @param callback 结束回调
                 */
                GameStartCountdownManager.prototype.init = function (startTime, countdownTime, callback) {
                    this._startTime = startTime;
                    this._countdownTime = startTime + countdownTime;
                    this.callback = callback;
                    this.updateFun(0);
                    FrameMgr_4.FrameMgr.Add(this.updateFun, this);
                };
                GameStartCountdownManager.prototype.updateFun = function (dt) {
                    var serverTime = CDManage_3.CDManage.Instance.serverTime();
                    if (this._start == false) {
                        if (serverTime >= this._startTime) {
                            this._start = true;
                            var time = Math.round((this._countdownTime - serverTime) / 1000);
                            this.gameState = GameEnum_24.GameState.ready;
                            console.error("游戏开始倒计时***** ", time);
                            //这里加时间改变 UI绑定方法
                            UiDataManager_11.UiDataManager.changeFunctionData(BindKeyName_11.BindKeyName.startTimeCD, { gameState: this.gameState, time: time });
                        }
                    }
                    if (this._start) {
                        //需要开始
                        this.newDaTime += dt;
                        if (this.newDaTime >= this.gapTime) {
                            this.newDaTime = 0;
                            var time = Math.round((this._countdownTime - serverTime) / 1000);
                            this.gameState = GameEnum_24.GameState.ready;
                            console.error("游戏开始倒计时 ", time);
                            //这里加时间改变 UI绑定方法
                            // UiDataManager.changeFunctionData(BindKeyName.startTimeCD, { gameState: this.gameState, time });
                            if (time <= 3) {
                                UiDataManager_11.UiDataManager.changeFunctionData(BindKeyName_11.BindKeyName.readyTimeCD, { gameState: this.gameState, time: time });
                            }
                            else {
                                UiDataManager_11.UiDataManager.changeFunctionData(BindKeyName_11.BindKeyName.startTimeCD, { gameState: this.gameState, time: time });
                            }
                            if (time <= 0) {
                                //开始游戏进行的倒计时
                                eventMgr_10.EventMgr.dispatchEvent("game_state", {
                                    data: {
                                        gameState: GameEnum_24.GameState.match,
                                    },
                                });
                                // 时间到, 走回调
                                if (this.callback) {
                                    this.callback();
                                    this.callback = null;
                                }
                                this.stop();
                            }
                        }
                    }
                };
                GameStartCountdownManager.prototype.stop = function () {
                    if (this._start) {
                        this._start = false;
                        FrameMgr_4.FrameMgr.Remove(this.updateFun, this);
                        this.newDaTime = 0;
                    }
                };
                return GameStartCountdownManager;
            }());
            exports_72("GameStartCountdownManager", GameStartCountdownManager);
        }
    };
});
System.register("Manager/MeleeGameManager", ["eventMgr", "PSDUI/UiDataManager", "Time/CDManage", "Core/StageMgr", "Data/BindKeyName", "GameEnum", "gamePlays/GamePlayMgr", "Net/DataEvents/DarkFightConfigBaseEvent", "Net/WsDataManager", "Role/RoleAttrInfo", "Role/RoleMgr", "Manager/GameRunningCountdownManager", "Manager/GameStartCountdownManager", "Manager/UIOpenOrHideManager"], function (exports_73, context_73) {
    "use strict";
    var eventMgr_11, UiDataManager_12, CDManage_4, StageMgr_12, BindKeyName_12, GameEnum_25, GamePlayMgr_7, DarkFightConfigBaseEvent_1, WsDataManager_4, RoleAttrInfo_6, RoleMgr_4, GameRunningCountdownManager_1, GameStartCountdownManager_1, UIOpenOrHideManager_5, MeleeGameManager;
    var __moduleName = context_73 && context_73.id;
    return {
        setters: [
            function (eventMgr_11_1) {
                eventMgr_11 = eventMgr_11_1;
            },
            function (UiDataManager_12_1) {
                UiDataManager_12 = UiDataManager_12_1;
            },
            function (CDManage_4_1) {
                CDManage_4 = CDManage_4_1;
            },
            function (StageMgr_12_1) {
                StageMgr_12 = StageMgr_12_1;
            },
            function (BindKeyName_12_1) {
                BindKeyName_12 = BindKeyName_12_1;
            },
            function (GameEnum_25_1) {
                GameEnum_25 = GameEnum_25_1;
            },
            function (GamePlayMgr_7_1) {
                GamePlayMgr_7 = GamePlayMgr_7_1;
            },
            function (DarkFightConfigBaseEvent_1_1) {
                DarkFightConfigBaseEvent_1 = DarkFightConfigBaseEvent_1_1;
            },
            function (WsDataManager_4_1) {
                WsDataManager_4 = WsDataManager_4_1;
            },
            function (RoleAttrInfo_6_1) {
                RoleAttrInfo_6 = RoleAttrInfo_6_1;
            },
            function (RoleMgr_4_1) {
                RoleMgr_4 = RoleMgr_4_1;
            },
            function (GameRunningCountdownManager_1_1) {
                GameRunningCountdownManager_1 = GameRunningCountdownManager_1_1;
            },
            function (GameStartCountdownManager_1_1) {
                GameStartCountdownManager_1 = GameStartCountdownManager_1_1;
            },
            function (UIOpenOrHideManager_5_1) {
                UIOpenOrHideManager_5 = UIOpenOrHideManager_5_1;
            }
        ],
        execute: function () {
            //黑夜混战游戏数据
            MeleeGameManager = /** @class */ (function () {
                function MeleeGameManager() {
                    this.lifePlayer = {};
                }
                Object.defineProperty(MeleeGameManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new MeleeGameManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //初始化
                MeleeGameManager.prototype.init = function () {
                    WsDataManager_4.WsDataManager.DarkFightConfigBaseData.addEventListener(DarkFightConfigBaseEvent_1.DarkFightConfigBaseEvent.Init, this.meleeGamerInfoFun.bind(this));
                    WsDataManager_4.WsDataManager.DarkFightConfigBaseData.addEventListener(DarkFightConfigBaseEvent_1.DarkFightConfigBaseEvent.players, this.playersInfoUpDateFun.bind(this));
                    WsDataManager_4.WsDataManager.DarkFightConfigBaseData.addEventListener(DarkFightConfigBaseEvent_1.DarkFightConfigBaseEvent.gameTime, this.gameStartFun.bind(this));
                    WsDataManager_4.WsDataManager.DarkFightConfigBaseData.addEventListener(DarkFightConfigBaseEvent_1.DarkFightConfigBaseEvent.countDown, this.countDownTimeUpdateFun.bind(this));
                };
                MeleeGameManager.prototype.meleeGamerInfoFun = function () {
                    console.error("服务器消息: 黑夜大混战", WsDataManager_4.WsDataManager.DarkFightConfigBaseData);
                    this.initPlayer();
                    //进入黑夜大混战
                    GamePlayMgr_7.GamePlayMgr.RunGame(GameEnum_25.GamePlayType.melee);
                };
                //初始化所有玩家信息
                MeleeGameManager.prototype.initPlayer = function () {
                    //获取黑夜大混战
                    var players = JSON.parse(WsDataManager_4.WsDataManager.DarkFightConfigBaseData.players);
                    var role = __assign({}, players);
                    this.lifePlayer = players;
                    UiDataManager_12.UiDataManager.changeFunctionData(BindKeyName_12.BindKeyName.Scenario, role);
                };
                //玩家数据更新 (移动同步相关)
                MeleeGameManager.prototype.playersInfoUpDateFun = function (roleArr) {
                    //玩家死亡列表
                    var playerDeadList;
                    for (var guid in roleArr) {
                        // console.log(`key:${i}`);
                        var posInfo = roleArr[guid];
                        var roleServerInfo = new RoleAttrInfo_6.RoleServerInfo();
                        roleServerInfo.GUID = guid;
                        roleServerInfo.roleState = posInfo.playerInfo.status;
                        roleServerInfo.inGameStatus = posInfo.playerInfo.inGameStatus;
                        roleServerInfo.moveType = posInfo.moveType;
                        roleServerInfo.moveTime = posInfo.moveTime;
                        roleServerInfo.hp = posInfo.hp;
                        if (posInfo.moveTime == -1) { //归位
                            roleServerInfo.moveType = GameEnum_25.PlayerMoveType.homing;
                            roleServerInfo.pos = m4m.poolv3();
                            m4m.math.vec3Set(roleServerInfo.pos, posInfo.pos.x, posInfo.pos.y, posInfo.pos.z);
                            roleServerInfo.pos.y = 0;
                            eventMgr_11.EventMgr.dispatchEvent("role_Data_upDate", new eventMgr_11.EventGeneric({ data: roleServerInfo }));
                            continue;
                        }
                        else if (guid != StageMgr_12.StageMgr.PlayerGUID) { //其他玩家同步
                            roleServerInfo.pos = m4m.poolv3();
                            m4m.math.vec3Set(roleServerInfo.pos, posInfo.pos.x, posInfo.pos.y, posInfo.pos.z);
                            if (posInfo.hitType == 1) {
                                //console.log("玩家:", RoleMgr.getRoleByGUID(guid).roleData.name, "发起了攻击");
                                var role = RoleMgr_4.RoleMgr.getRoleByGUID(guid);
                                if (role) {
                                    role.roleCtr.handleInput(GameEnum_25.RoleActInput.Attack, role.roleCtr.state);
                                }
                            }
                        }
                        //判断玩家是死亡
                        if (posInfo.playerInfo.inGameStatus == GameEnum_25.InGameStatus.inGameDead && this.lifePlayer[guid]) {
                            if (!playerDeadList) {
                                playerDeadList = [guid];
                            }
                            else {
                                playerDeadList.push(guid);
                            }
                            delete this.lifePlayer[guid];
                        }
                        eventMgr_11.EventMgr.dispatchEvent("role_Data_upDate", new eventMgr_11.EventGeneric({ data: roleServerInfo }));
                    }
                    //发送其他玩家死亡
                    if (playerDeadList) {
                        UiDataManager_12.UiDataManager.changeFunctionData(BindKeyName_12.BindKeyName.gamePlayerDead, playerDeadList);
                        //EventMgr.dispatchEvent("game_Player_Dead", new EventGeneric<{ GUIDS: string[] }>({ GUIDS: playerDeadList }));
                    }
                };
                //加载资源完成游戏开始时间同步
                MeleeGameManager.prototype.gameStartFun = function (data) {
                    console.error("服务器消息: 服务器时间:", data);
                    //更新服务器时间
                    var serverTime = data;
                    CDManage_4.CDManage.Instance.setServerTime(serverTime);
                };
                //倒计时 开始时间先同步
                MeleeGameManager.prototype.countDownTimeUpdateFun = function (data) {
                    console.error("服务器消息: 开始时间:", data);
                    //停止之前的倒计时
                    GameStartCountdownManager_1.GameStartCountdownManager.Instance.stop();
                    GameRunningCountdownManager_1.GameRunningCountdownManager.Instance.stop();
                    //开始倒计时
                    var countdownTime = WsDataManager_4.WsDataManager.DarkFightConfigBaseData.countTime;
                    GameStartCountdownManager_1.GameStartCountdownManager.Instance.init(data, countdownTime, function () {
                        // 进行游戏倒计时
                        var runStartTime = WsDataManager_4.WsDataManager.DarkFightConfigBaseData.countDown + WsDataManager_4.WsDataManager.DarkFightConfigBaseData.countTime;
                        var countdownTime2 = WsDataManager_4.WsDataManager.DarkFightConfigBaseData.totleTime - 1000;
                        GameRunningCountdownManager_1.GameRunningCountdownManager.Instance.init(runStartTime, countdownTime2);
                    });
                    UIOpenOrHideManager_5.UIOpenOrHideManager.Instance.HidetxtbgView();
                };
                return MeleeGameManager;
            }());
            exports_73("MeleeGameManager", MeleeGameManager);
        }
    };
});
System.register("Net/DataEvents/ResultBaseEvent", [], function (exports_74, context_74) {
    "use strict";
    var ResultBaseEvent;
    var __moduleName = context_74 && context_74.id;
    return {
        setters: [],
        execute: function () {
            ResultBaseEvent = /** @class */ (function () {
                function ResultBaseEvent() {
                }
                /** 初始化全部数据*/
                ResultBaseEvent.Init = "Init";
                /** 批量加载数据*/
                ResultBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                ResultBaseEvent.id = "id";
                /** 游戏ID*/
                ResultBaseEvent.gameId = "gameId";
                /** 胜利用户列表*/
                ResultBaseEvent.winers = "winers";
                /** 失败用户列表*/
                ResultBaseEvent.losers = "losers";
                /** 结算时间*/
                ResultBaseEvent.resultTime = "resultTime";
                return ResultBaseEvent;
            }());
            exports_74("ResultBaseEvent", ResultBaseEvent);
        }
    };
});
System.register("Manager/ScoreboardManager", ["PSDUI/UiManager", "Manager/UIData/UiNames", "Manager/UIOpenOrHideManager"], function (exports_75, context_75) {
    "use strict";
    var UiManager_5, UiNames_3, UIOpenOrHideManager_6, ScoreboardManager;
    var __moduleName = context_75 && context_75.id;
    return {
        setters: [
            function (UiManager_5_1) {
                UiManager_5 = UiManager_5_1;
            },
            function (UiNames_3_1) {
                UiNames_3 = UiNames_3_1;
            },
            function (UIOpenOrHideManager_6_1) {
                UIOpenOrHideManager_6 = UIOpenOrHideManager_6_1;
            }
        ],
        execute: function () {
            ScoreboardManager = /** @class */ (function () {
                function ScoreboardManager() {
                    //面板是否打开
                    this.isOpen = false;
                    //是否胜利
                    this.isWin = true;
                    //你的排名
                    this.rank = 0;
                }
                Object.defineProperty(ScoreboardManager, "Instance", {
                    //分数
                    // public score: number = 0;
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ScoreboardManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 显示胜利面板
                 */
                ScoreboardManager.prototype.showWinBoard = function () {
                    this.isWin = true;
                    if (!UiManager_5.UiManager.isUiShow(UiNames_3.UiNames.countdown)) {
                        UIOpenOrHideManager_6.UIOpenOrHideManager.Instance.OpenCountdownView();
                    }
                    this.isOpen = true;
                };
                /**
                 * 显示失败面板
                 */
                ScoreboardManager.prototype.showLostBoard = function () {
                    this.isWin = false;
                    UIOpenOrHideManager_6.UIOpenOrHideManager.Instance.OpenCountdownView();
                    this.isOpen = true;
                };
                /**
                 * 关闭失败/胜利面板
                 */
                ScoreboardManager.prototype.closeBoard = function () {
                    UIOpenOrHideManager_6.UIOpenOrHideManager.Instance.HideCountdownView();
                    this.isOpen = false;
                };
                return ScoreboardManager;
            }());
            exports_75("ScoreboardManager", ScoreboardManager);
        }
    };
});
System.register("Manager/GameResultManager", ["eventMgr", "Core/StageMgr", "Net/DataEvents/ResultBaseEvent", "Net/WsDataManager", "Manager/ScoreboardManager"], function (exports_76, context_76) {
    "use strict";
    var eventMgr_12, StageMgr_13, ResultBaseEvent_1, WsDataManager_5, ScoreboardManager_1, GameResultManager;
    var __moduleName = context_76 && context_76.id;
    return {
        setters: [
            function (eventMgr_12_1) {
                eventMgr_12 = eventMgr_12_1;
            },
            function (StageMgr_13_1) {
                StageMgr_13 = StageMgr_13_1;
            },
            function (ResultBaseEvent_1_1) {
                ResultBaseEvent_1 = ResultBaseEvent_1_1;
            },
            function (WsDataManager_5_1) {
                WsDataManager_5 = WsDataManager_5_1;
            },
            function (ScoreboardManager_1_1) {
                ScoreboardManager_1 = ScoreboardManager_1_1;
            }
        ],
        execute: function () {
            //游戏结算统一调用
            GameResultManager = /** @class */ (function () {
                function GameResultManager() {
                }
                Object.defineProperty(GameResultManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new GameResultManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //初始化
                GameResultManager.prototype.init = function () {
                    //结算
                    WsDataManager_5.WsDataManager.ResultBaseData.addEventListener(ResultBaseEvent_1.ResultBaseEvent.Init, this.resultDataFun.bind(this));
                };
                //显示胜利结算面板
                GameResultManager.prototype.showResultPanle = function (lose, timeOut) {
                    if (lose == true) {
                        //如果自己在失败列表中
                        ScoreboardManager_1.ScoreboardManager.Instance.showLostBoard();
                    }
                    else {
                        var winers = JSON.parse(WsDataManager_5.WsDataManager.ResultBaseData.winers);
                        var myToken = StageMgr_13.StageMgr.PlayerGUID;
                        var myRank_1 = 0;
                        for (var key in winers) {
                            var player = winers[key];
                            if (player.token == myToken) {
                                myRank_1 = Number(key);
                            }
                        }
                        setTimeout(function () {
                            //弹出胜利面板
                            ScoreboardManager_1.ScoreboardManager.Instance.rank = myRank_1;
                            ScoreboardManager_1.ScoreboardManager.Instance.showWinBoard();
                        }, timeOut);
                    }
                };
                //结算
                GameResultManager.prototype.resultDataFun = function () {
                    console.error("服务器消息:  结算:", WsDataManager_5.WsDataManager.ResultBaseData);
                    eventMgr_12.EventMgr.dispatchEvent("game_result", {
                        data: {
                            resultData: WsDataManager_5.WsDataManager.ResultBaseData,
                        },
                    });
                };
                return GameResultManager;
            }());
            exports_76("GameResultManager", GameResultManager);
        }
    };
});
System.register("Net/DataEvents/GamesConfigBaseEvent", [], function (exports_77, context_77) {
    "use strict";
    var GamesConfigBaseEvent;
    var __moduleName = context_77 && context_77.id;
    return {
        setters: [],
        execute: function () {
            GamesConfigBaseEvent = /** @class */ (function () {
                function GamesConfigBaseEvent() {
                }
                /** 初始化全部数据*/
                GamesConfigBaseEvent.Init = "Init";
                /** 批量加载数据*/
                GamesConfigBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                GamesConfigBaseEvent.id = "id";
                /** 备注*/
                GamesConfigBaseEvent.desc = "desc";
                /** 绑定UI面板ID*/
                GamesConfigBaseEvent.UI = "UI";
                /** 链接游戏*/
                GamesConfigBaseEvent.gameUrl = "gameUrl";
                /** 大厅活动区域*/
                GamesConfigBaseEvent.moveArea = "moveArea";
                /** 最大人数*/
                GamesConfigBaseEvent.maxPlayer = "maxPlayer";
                /** 传递参数*/
                GamesConfigBaseEvent.gameData = "gameData";
                /** 游戏类名*/
                GamesConfigBaseEvent.gameClass = "gameClass";
                /** 场景id*/
                GamesConfigBaseEvent.sceneBase = "sceneBase";
                return GamesConfigBaseEvent;
            }());
            exports_77("GamesConfigBaseEvent", GamesConfigBaseEvent);
        }
    };
});
System.register("Manager/EnterGameManager", ["Net/DataEvents/GamesConfigBaseEvent", "Net/WsDataManager"], function (exports_78, context_78) {
    "use strict";
    var GamesConfigBaseEvent_1, WsDataManager_6, EnterGameManager;
    var __moduleName = context_78 && context_78.id;
    return {
        setters: [
            function (GamesConfigBaseEvent_1_1) {
                GamesConfigBaseEvent_1 = GamesConfigBaseEvent_1_1;
            },
            function (WsDataManager_6_1) {
                WsDataManager_6 = WsDataManager_6_1;
            }
        ],
        execute: function () {
            //进游戏场景数据
            EnterGameManager = /** @class */ (function () {
                function EnterGameManager() {
                }
                Object.defineProperty(EnterGameManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new EnterGameManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //初始化
                EnterGameManager.prototype.init = function () {
                    WsDataManager_6.WsDataManager.GamesConfigBaseData.addEventListener(GamesConfigBaseEvent_1.GamesConfigBaseEvent.Init, this.loadGameSceneFun.bind(this));
                };
                EnterGameManager.prototype.loadGameSceneFun = function () {
                    console.error("进游戏场景", WsDataManager_6.WsDataManager.GamesConfigBaseData);
                };
                return EnterGameManager;
            }());
            exports_78("EnterGameManager", EnterGameManager);
        }
    };
});
System.register("Core/blockchain/ConnectWalletManager", ["Manager/UIOpenOrHideManager", "Manager/UITipManager"], function (exports_79, context_79) {
    "use strict";
    var UIOpenOrHideManager_7, UITipManager_2, ConnectWalletManager;
    var __moduleName = context_79 && context_79.id;
    return {
        setters: [
            function (UIOpenOrHideManager_7_1) {
                UIOpenOrHideManager_7 = UIOpenOrHideManager_7_1;
            },
            function (UITipManager_2_1) {
                UITipManager_2 = UITipManager_2_1;
            }
        ],
        execute: function () {
            ConnectWalletManager = /** @class */ (function () {
                function ConnectWalletManager() {
                    this.M4M_SDK = window["M4M"];
                }
                Object.defineProperty(ConnectWalletManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ConnectWalletManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                ConnectWalletManager.prototype.init = function () {
                    this.Telegram = window["Telegram"];
                    this.Telegram.WebApp.initData;
                };
                ConnectWalletManager.prototype.loginToken = function (callBackFun) {
                    var count = Object.keys(this.Telegram.WebApp.initDataUnsafe).length;
                    if (count <= 0) {
                        var searchParams = new URLSearchParams(window.location.search);
                        var userId = searchParams.get("user_id");
                        var accessToken = searchParams.get("access_token");
                        callBackFun(userId);
                    }
                    else if (count > 0) {
                        callBackFun(this.Telegram.WebApp.initDataUnsafe.user.id);
                    }
                };
                ConnectWalletManager.prototype.onAccountsChanged = function (accounts) {
                    console.log("onAccountsChanged callback: ", accounts);
                    console.log("Switch wallet");
                };
                ConnectWalletManager.prototype.onChainChanged = function (chainId) {
                    console.log("onChainChanged callback: ", chainId);
                };
                ConnectWalletManager.prototype.onDisconnect = function (error) {
                    console.log("onDisconnect callback: ", error);
                    this.M4M_SDK.disconnect();
                };
                ConnectWalletManager.prototype.onError = function (error) {
                    console.log("onError callback: ", error);
                    console.log(error);
                };
                // 销毁钱包
                ConnectWalletManager.prototype.destroy = function () {
                    var _a, _b;
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0: return [4 /*yield*/, ((_b = (_a = this.wallet) === null || _a === void 0 ? void 0 : _a.destroy) === null || _b === void 0 ? void 0 : _b.call(_a))];
                                case 1:
                                    _c.sent();
                                    this.wallet = null;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                //是否连上钱包
                ConnectWalletManager.prototype.IsMetaMaskLinked = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var accounts;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.wallet.getAccounts(false)];
                                case 1:
                                    accounts = _a.sent();
                                    if (accounts === null || accounts === void 0 ? void 0 : accounts[0]) {
                                        // console.log("连上了钱包");
                                        return [2 /*return*/, true];
                                        // tslint:disable-next-line: unnecessary-else
                                    }
                                    else {
                                        // console.log("未连上钱包");
                                        return [2 /*return*/, false];
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                //登录账户
                ConnectWalletManager.prototype.loginAccount = function (callBackFun) {
                    var _this = this;
                    // tslint:disable-next-line: newline-per-chained-call
                    this.M4M_SDK.login(this.M4M_SDK.Connector_Types.Injected).then(function (res) {
                        console.log(res); // res  钱包对字符串的签名。后面可以发到后端进行验证，发放session cookie或者jwt
                        _this.M4M_SDK.connect({
                            handleAccountsChanged: _this.onAccountsChanged,
                            handleChainChanged: _this.onChainChanged,
                            handleDisconnect: _this.onDisconnect,
                            handleError: _this.onError,
                        });
                        // tslint:disable-next-line: newline-per-chained-call
                        _this.M4M_SDK.getInfo()
                            // tslint:disable-next-line: no-shadowed-variable
                            .then(function (res) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                // res.address 钱包地址
                                this.address = res.address;
                                if (callBackFun) {
                                    callBackFun(res);
                                }
                                if (res.chainId !== 80001) {
                                    // tslint:disable-next-line: newline-per-chained-call
                                    return [2 /*return*/, this.M4M_SDK.switchNetwork().then(function () { })];
                                }
                                return [2 /*return*/];
                            });
                        }); });
                        // tslint:disable-next-line: newline-per-chained-call
                    }).catch(function (error) {
                        console.log("签名错误信息", error);
                        if (error.code == 4001) {
                            UITipManager_2.UITipManager.Instance.tipPanelText = "Sorry, signature authorization failed";
                            UIOpenOrHideManager_7.UIOpenOrHideManager.Instance.OpenTipsTCView();
                        }
                    });
                };
                return ConnectWalletManager;
            }());
            exports_79("ConnectWalletManager", ConnectWalletManager);
        }
    };
});
System.register("Core/blockchain/apis", [], function (exports_80, context_80) {
    "use strict";
    var CHAIN_NAME, PLATFORM, apis;
    var __moduleName = context_80 && context_80.id;
    return {
        setters: [],
        execute: function () {
            exports_80("CHAIN_NAME", CHAIN_NAME = "TONtest");
            exports_80("PLATFORM", PLATFORM = "Telegram");
            apis = /** @class */ (function () {
                function apis() {
                    // tslint:disable-next-line: variable-name
                    this.gapIndex = 50;
                    this.API_HOST = 'https://apiv2-test.platwin.io/api/v1';
                    this.axios = window["axios"];
                }
                Object.defineProperty(apis, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new apis();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                apis.prototype.bind1WithWeb3Proof = function (params) {
                    return __awaiter(this, void 0, void 0, function () {
                        var url, res;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    url = "".concat(this.API_HOST, "/bind-addr");
                                    return [4 /*yield*/, this.axios.post(url, params, { headers: { authorization: "TG Robot Platwin Soda" } })];
                                case 1:
                                    res = _a.sent();
                                    if (res.error) {
                                        return [2 /*return*/, false];
                                    }
                                    return [2 /*return*/, true];
                            }
                        });
                    });
                };
                ;
                apis.prototype.getCurreny = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var url, res;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    url = 'http://192.168.15.82:9000/SelectUserCurrency';
                                    return [4 /*yield*/, this.axios.post(url, { playerName: '2' })];
                                case 1:
                                    res = _a.sent();
                                    console.error(res);
                                    if (res.error) {
                                        return [2 /*return*/, false];
                                    }
                                    return [2 /*return*/, res.data.data];
                            }
                        });
                    });
                };
                apis.prototype.getBindResult = function (params) {
                    return __awaiter(this, void 0, void 0, function () {
                        var url, res;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    url = "".concat(this.API_HOST, "/bind-attr?tid=").concat(params.tid);
                                    return [4 /*yield*/, this.axios.get(url)];
                                case 1:
                                    res = _a.sent();
                                    console.log("[core-account] getBindResult: ", params, res);
                                    if (res.error)
                                        return [2 /*return*/, []];
                                    return [2 /*return*/, res.data.data];
                            }
                        });
                    });
                };
                apis.prototype.unbind = function (params) {
                    return __awaiter(this, void 0, void 0, function () {
                        var url, res;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    params.platform = PLATFORM;
                                    params.chain_name = CHAIN_NAME;
                                    url = "".concat(this.API_HOST, "/unbind-addr");
                                    return [4 /*yield*/, this.axios.post(url, params, { headers: { authorization: "TG Robot Platwin Soda" } })];
                                case 1:
                                    res = _a.sent();
                                    console.debug("[core-account] unbindAddr: ", params, res);
                                    if (res.error)
                                        return [2 /*return*/, false];
                                    return [2 /*return*/, true];
                            }
                        });
                    });
                };
                return apis;
            }());
            exports_80("apis", apis);
        }
    };
});
System.register("Core/blockchain/ConnectWalletTonkeeper", ["Core/blockchain/apis"], function (exports_81, context_81) {
    "use strict";
    var apis_1, THEME, CHAIN, ConnectWalletTonkeeper;
    var __moduleName = context_81 && context_81.id;
    return {
        setters: [
            function (apis_1_1) {
                apis_1 = apis_1_1;
            }
        ],
        execute: function () {
            (function (THEME) {
                THEME["DARK"] = "DARK";
                THEME["LIGHT"] = "LIGHT";
            })(THEME || (THEME = {}));
            (function (CHAIN) {
                CHAIN["MAINNET"] = "-239";
                CHAIN["TESTNET"] = "-3";
            })(CHAIN || (CHAIN = {}));
            ConnectWalletTonkeeper = /** @class */ (function () {
                function ConnectWalletTonkeeper() {
                    this.bindData = [];
                    //m4m.__consTool.ConnectWalletTonkeeper.Instance.openHelp(e);
                    this.tid = '1';
                    this.bounceableTag = 17;
                    this.testOnlyTag = 128;
                    this.toByteMap = {};
                    // this.tonwebsdk = new this.TonWeb(new this.TonWeb.HttpProvider(NODE_API_URL, { apiKey: TONCENTER_API_KEY }));
                    this.tonkeeper = window["TON_CONNECT_UI"];
                    for (var ord = 0; ord <= 255; ord++) {
                        var s2 = ord.toString(16);
                        if (s2.length < 2) {
                            s2 = "0" + s2;
                        }
                        this.toByteMap[s2] = ord;
                    }
                }
                Object.defineProperty(ConnectWalletTonkeeper, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ConnectWalletTonkeeper();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                ConnectWalletTonkeeper.prototype.init = function () {
                    apis_1.apis.Instance.getCurreny();
                    this.TonWeb = window["TonWeb"];
                    this.Telegram = window["Telegram"];
                    this.Telegram.WebApp.initData;
                    //console.error(window["TelegramWebviewProxy"]);
                    //console.error(this.Telegram.WebApp.initData);
                    var count = Object.keys(this.Telegram.WebApp.initDataUnsafe).length;
                    if (count > 0) {
                        this.tid = this.Telegram.WebApp.initDataUnsafe.user.id;
                        console.error("this.tid", this.tid);
                    }
                };
                ConnectWalletTonkeeper.prototype.loginAccount = function (fun) {
                    return __awaiter(this, void 0, void 0, function () {
                        var walletConnectionSource, TonConnectUIData, connector, connectWallet, childNode;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    walletConnectionSource = {
                                        universalLink: "https://app.tonkeeper.com/ton-connect",
                                        bridgeUrl: "https://bridge.tonapi.io/bridge",
                                    };
                                    TonConnectUIData = {
                                        manifestUrl: "https://twa.soton-test.sonet.one/tonconnect-manifest.json",
                                        uiPreferences: { theme: THEME.LIGHT },
                                        walletsList: { wallets: ["Tonkeeper"] }
                                    };
                                    this.TonConnectUI = new this.tonkeeper.TonConnectUI(TonConnectUIData);
                                    connector = this.TonConnectUI.connector;
                                    connector.onStatusChange(function (walletInfo) { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            // update state/reactive variables to show updates in the ui
                                            console.error("update state/reactive variables to show updates in the ui");
                                            return [2 /*return*/];
                                        });
                                    }); });
                                    return [4 /*yield*/, this.TonConnectUI.connectWallet()];
                                case 1:
                                    connectWallet = _a.sent();
                                    if (ConnectWalletTonkeeper.element != null) {
                                        ConnectWalletTonkeeper.element = null;
                                        childNode = m4m.framework.sceneMgr.app.container.childNodes[m4m.framework.sceneMgr.app.container.childNodes.length - 1];
                                        m4m.framework.sceneMgr.app.container.removeChild(childNode);
                                    }
                                    this.TonWallet = this.TonConnectUI.wallet;
                                    if (!fun) return [3 /*break*/, 3];
                                    this.address = this.toUserFriendlyAddress(this.TonWallet.account.address, this.TonWallet.account.chain === CHAIN.TESTNET);
                                    // console.error("this.address", this.address);
                                    this.addressDisplay = this.address.substring(0, 4) + "..." + this.address.substr(-4);
                                    return [4 /*yield*/, this.handleBind()];
                                case 2:
                                    _a.sent();
                                    fun(this.address);
                                    fun = null;
                                    _a.label = 3;
                                case 3: return [2 /*return*/];
                            }
                        });
                    });
                };
                ConnectWalletTonkeeper.prototype.handleLogout = function () {
                    this.TonConnectUI.disconnect();
                };
                ConnectWalletTonkeeper.prototype.openHelp = function (url) {
                    if (ConnectWalletTonkeeper.element == null) {
                        ConnectWalletTonkeeper.element = document.createElement("div");
                        m4m.framework.sceneMgr.app.container.append(ConnectWalletTonkeeper.element);
                        ConnectWalletTonkeeper.element.style.width = "100%";
                        ConnectWalletTonkeeper.element.style.height = "100%";
                        ConnectWalletTonkeeper.element.style.position = "absolute";
                        ConnectWalletTonkeeper.element.style.left = "50%";
                        ConnectWalletTonkeeper.element.style.top = "50%";
                        ConnectWalletTonkeeper.element.style.transform = "translate(-50%, -50%)";
                        ConnectWalletTonkeeper.element.innerHTML = "\n            <div style=\"width: 100%;height: 25px;background: #ffffff\">\n                <div style=\"float: left;margin-left: 8px;\">Tonkeeper</div>\n                <div id=\"closeIframeBtn\" style=\"float: right;margin-right: 8px;\">X</div>\n            </div>\n            <iframe src=\"".concat(url, "\" style=\"width: calc(100% - 4px);height: calc(100% - 25px)\"></iframe>\n            ");
                        setTimeout(function () {
                            var div = document.getElementById("closeIframeBtn");
                            div.addEventListener("click", function () {
                                ConnectWalletTonkeeper.element = null;
                                var childNode = m4m.framework.sceneMgr.app.container.childNodes[m4m.framework.sceneMgr.app.container.childNodes.length - 1];
                                m4m.framework.sceneMgr.app.container.removeChild(childNode);
                                // console.error("关闭子窗体");
                            });
                        }, 1);
                    }
                };
                ConnectWalletTonkeeper.prototype.bind1WithWeb3Proof = function (params) {
                    var address = params.address, appid = params.appid, sig = params.sig, pubkey = params.pubkey;
                    return apis_1.apis.Instance.bind1WithWeb3Proof({
                        addr: address,
                        platform: apis_1.PLATFORM,
                        tid: appid,
                        sig: sig,
                        pubkey: pubkey,
                        chain_name: apis_1.CHAIN_NAME,
                    });
                };
                ConnectWalletTonkeeper.prototype.handleBind = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var params, resultData, res;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    params = {
                                        tid: this.tid, //
                                    };
                                    return [4 /*yield*/, apis_1.apis.Instance.getBindResult(params)];
                                case 1:
                                    resultData = _a.sent();
                                    if (!(resultData.length == 0)) return [3 /*break*/, 3];
                                    return [4 /*yield*/, this.bind1WithWeb3Proof({
                                            address: this.address,
                                            appid: this.tid,
                                        })];
                                case 2:
                                    res = _a.sent();
                                    // console.error("handleBind", res)
                                    if (res) {
                                        //console.error(`TON address "${this.addressDisplay}" has been bound to your Telegram account.`);
                                        this.getBind(); //refresh page
                                    }
                                    else {
                                        // message.error("Bind failed.");
                                        //console.error("Bind faile.");
                                    }
                                    _a.label = 3;
                                case 3: return [2 /*return*/];
                            }
                        });
                    });
                };
                ConnectWalletTonkeeper.prototype.getBind = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var params, res, item, item2;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    params = {
                                        // addr: address,
                                        tid: this.tid, //
                                    };
                                    return [4 /*yield*/, apis_1.apis.Instance.getBindResult(params)];
                                case 1:
                                    res = _a.sent();
                                    if (res.length === 0) {
                                        console.log(res);
                                    }
                                    else {
                                        this.bindData = res;
                                        if (Object.keys(res).length > 0) {
                                            item = res.find(function (item) {
                                                return item.addr !== _this.address &&
                                                    item.platform === apis_1.PLATFORM &&
                                                    item.tid === _this.tid;
                                            });
                                            if (item) {
                                                console.error("You've bound your wallet to ".concat(item.addr, " please unbind first!"));
                                            }
                                            if (!item) {
                                                item2 = res.find(function (item) {
                                                    return item.addr === _this.address &&
                                                        item.platform === apis_1.PLATFORM &&
                                                        item.tid === _this.tid;
                                                });
                                            }
                                        }
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                ConnectWalletTonkeeper.prototype.handleUnbind = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var _i, _a, item, res;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    _i = 0, _a = this.bindData;
                                    _b.label = 1;
                                case 1:
                                    if (!(_i < _a.length)) return [3 /*break*/, 4];
                                    item = _a[_i];
                                    return [4 /*yield*/, apis_1.apis.Instance.unbind({
                                            addr: item.addr,
                                            tid: this.tid,
                                        })];
                                case 2:
                                    res = _b.sent();
                                    _b.label = 3;
                                case 3:
                                    _i++;
                                    return [3 /*break*/, 1];
                                case 4: return [2 /*return*/];
                            }
                        });
                    });
                };
                ConnectWalletTonkeeper.prototype.toUserFriendlyAddress = function (hexAddress, testOnly) {
                    if (testOnly === void 0) { testOnly = false; }
                    var _a = this.parseHexAddress(hexAddress), wc = _a.wc, hex = _a.hex;
                    var tag = this.bounceableTag;
                    if (testOnly) {
                        tag |= this.testOnlyTag;
                    }
                    var addr = new Int8Array(34);
                    addr[0] = tag;
                    addr[1] = wc;
                    addr.set(hex, 2);
                    var addressWithChecksum = new Uint8Array(36);
                    addressWithChecksum.set(addr);
                    addressWithChecksum.set(this.crc16(addr), 34);
                    var addressBase64 = this.encode(addressWithChecksum);
                    return addressBase64.replace(/\+/g, "-").replace(/\//g, "_");
                };
                ConnectWalletTonkeeper.prototype.parseHexAddress = function (hexAddress) {
                    if (!hexAddress.includes(":")) {
                        throw new Error("Wrong address ".concat(hexAddress, ". Address must include \":\"."));
                    }
                    var parts = hexAddress.split(":");
                    if (parts.length !== 2) {
                        throw new Error("Wrong address ".concat(hexAddress, ". Address must include \":\" only once."));
                    }
                    var wc = parseInt(parts[0]);
                    if (wc !== 0 && wc !== -1) {
                        throw new Error("Wrong address ".concat(hexAddress, ". WC must be eq 0 or -1, but ").concat(wc, " received."));
                    }
                    var hex = parts[1];
                    if ((hex === null || hex === void 0 ? void 0 : hex.length) !== 64) {
                        throw new Error("Wrong address ".concat(hexAddress, ". Hex part must be 64bytes length, but ").concat(hex === null || hex === void 0 ? void 0 : hex.length, " received."));
                    }
                    return {
                        wc: wc,
                        hex: this.hexToBytes(hex)
                    };
                };
                ConnectWalletTonkeeper.prototype.hexToBytes = function (hex) {
                    hex = hex.toLowerCase();
                    var length2 = hex.length;
                    if (length2 % 2 !== 0) {
                        throw new Error("Hex string must have length a multiple of 2: " + hex);
                    }
                    var length = length2 / 2;
                    var result = new Uint8Array(length);
                    for (var i2 = 0; i2 < length; i2++) {
                        var doubled = i2 * 2;
                        var hexSubstring = hex.substring(doubled, doubled + 2);
                        if (!this.toByteMap.hasOwnProperty(hexSubstring)) {
                            throw new Error("Invalid hex character: " + hexSubstring);
                        }
                        result[i2] = this.toByteMap[hexSubstring];
                    }
                    return result;
                };
                ConnectWalletTonkeeper.prototype.crc16 = function (data) {
                    var poly = 4129;
                    var reg = 0;
                    var message = new Uint8Array(data.length + 2);
                    message.set(data);
                    for (var _i = 0, message_1 = message; _i < message_1.length; _i++) {
                        var byte = message_1[_i];
                        var mask = 128;
                        while (mask > 0) {
                            reg <<= 1;
                            if (Number(byte) & mask) {
                                reg += 1;
                            }
                            mask >>= 1;
                            if (reg > 65535) {
                                reg &= 65535;
                                reg ^= poly;
                            }
                        }
                    }
                    return new Uint8Array([Math.floor(reg / 256), reg % 256]);
                };
                ConnectWalletTonkeeper.prototype.encode = function (value, urlSafe) {
                    if (urlSafe === void 0) { urlSafe = false; }
                    var uint8Array;
                    if (value instanceof Uint8Array) {
                        uint8Array = value;
                    }
                    else {
                        if (typeof value !== "string") {
                            value = JSON.stringify(value);
                        }
                        uint8Array = this.decodeUTF8(value);
                    }
                    return this.encodeUint8Array(uint8Array, urlSafe);
                };
                ConnectWalletTonkeeper.prototype.decodeUTF8 = function (s2) {
                    if (typeof s2 !== "string")
                        throw new TypeError("expected string");
                    var i2, d = unescape(encodeURIComponent(s2)), b = new Uint8Array(d.length);
                    for (i2 = 0; i2 < d.length; i2++)
                        b[i2] = d.charCodeAt(i2);
                    return b;
                };
                ;
                ConnectWalletTonkeeper.prototype.encodeUint8Array = function (value, urlSafe) {
                    var encoded = this.encodeBase64(value);
                    if (!urlSafe) {
                        return encoded;
                    }
                    return encodeURIComponent(encoded);
                };
                ConnectWalletTonkeeper.prototype.encodeBase64 = function (arr) {
                    var i2, s2 = [], len = arr.length;
                    for (i2 = 0; i2 < len; i2++)
                        s2.push(String.fromCharCode(arr[i2]));
                    return btoa(s2.join(""));
                };
                ConnectWalletTonkeeper.prototype.sendTransaction = function (tx, text) {
                    return __awaiter(this, void 0, void 0, function () {
                        var num, _tx, resp, childNode, e_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    num = this.TonWeb.utils.toNano(tx.value).toString();
                                    _tx = {
                                        validUntil: Date.now() + 5 * 60 * 1000,
                                        network: CHAIN.MAINNET,
                                        messages: [
                                            {
                                                address: tx.to,
                                                amount: num,
                                                stateInit: tx.state_init || undefined,
                                                payload: tx.payload || undefined,
                                                text: text,
                                            },
                                        ],
                                    };
                                    return [4 /*yield*/, this.TonConnectUI.sendTransaction(_tx)];
                                case 1:
                                    resp = _a.sent();
                                    console.error("tonkeeper resp: ", resp.boc);
                                    if (ConnectWalletTonkeeper.element != null) {
                                        ConnectWalletTonkeeper.element = null;
                                        childNode = m4m.framework.sceneMgr.app.container.childNodes[m4m.framework.sceneMgr.app.container.childNodes.length - 1];
                                        m4m.framework.sceneMgr.app.container.removeChild(childNode);
                                    }
                                    return [2 /*return*/, resp];
                                case 2:
                                    e_1 = _a.sent();
                                    console.error("error", e_1);
                                    return [3 /*break*/, 3];
                                case 3: return [2 /*return*/];
                            }
                        });
                    });
                };
                ConnectWalletTonkeeper.prototype.send = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var _tx;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _tx = {
                                        value: "0.001",
                                        to: "EQAHlOFkEWgc4NcS5TK7z08u75GdFkXL6p5kx_mjOQONrybr",
                                        state_init: undefined,
                                        payload: undefined
                                    };
                                    return [4 /*yield*/, this.sendTransaction(_tx, "Transfer token")];
                                case 1: return [2 /*return*/, _a.sent()];
                            }
                        });
                    });
                };
                return ConnectWalletTonkeeper;
            }());
            exports_81("ConnectWalletTonkeeper", ConnectWalletTonkeeper);
        }
    };
});
System.register("Manager/GameDataEventInitManager", ["Manager/UserDataManager", "Manager/WaitRoomManager", "Manager/MeleeGameManager", "Manager/GamingManager", "Manager/GameResultManager", "Manager/EnterGameManager", "Core/blockchain/ConnectWalletManager", "Core/blockchain/ConnectWalletTonkeeper"], function (exports_82, context_82) {
    "use strict";
    var UserDataManager_2, WaitRoomManager_1, MeleeGameManager_1, GamingManager_2, GameResultManager_1, EnterGameManager_1, ConnectWalletManager_1, ConnectWalletTonkeeper_1, GameDataEventInitManager;
    var __moduleName = context_82 && context_82.id;
    return {
        setters: [
            function (UserDataManager_2_1) {
                UserDataManager_2 = UserDataManager_2_1;
            },
            function (WaitRoomManager_1_1) {
                WaitRoomManager_1 = WaitRoomManager_1_1;
            },
            function (MeleeGameManager_1_1) {
                MeleeGameManager_1 = MeleeGameManager_1_1;
            },
            function (GamingManager_2_1) {
                GamingManager_2 = GamingManager_2_1;
            },
            function (GameResultManager_1_1) {
                GameResultManager_1 = GameResultManager_1_1;
            },
            function (EnterGameManager_1_1) {
                EnterGameManager_1 = EnterGameManager_1_1;
            },
            function (ConnectWalletManager_1_1) {
                ConnectWalletManager_1 = ConnectWalletManager_1_1;
            },
            function (ConnectWalletTonkeeper_1_1) {
                ConnectWalletTonkeeper_1 = ConnectWalletTonkeeper_1_1;
            }
        ],
        execute: function () {
            GameDataEventInitManager = /** @class */ (function () {
                function GameDataEventInitManager() {
                }
                GameDataEventInitManager.init = function () {
                    UserDataManager_2.UserDataManager.Instance.init();
                    //等待房间
                    WaitRoomManager_1.WaitRoomManager.Instance.init();
                    //黑夜大混战游戏
                    MeleeGameManager_1.MeleeGameManager.Instance.init();
                    GamingManager_2.GamingManager.Instance.init();
                    GameResultManager_1.GameResultManager.Instance.init();
                    EnterGameManager_1.EnterGameManager.Instance.init();
                    ConnectWalletManager_1.ConnectWalletManager.Instance.init();
                    ConnectWalletTonkeeper_1.ConnectWalletTonkeeper.Instance.init();
                };
                return GameDataEventInitManager;
            }());
            exports_82("GameDataEventInitManager", GameDataEventInitManager);
        }
    };
});
System.register("Core/StageMgr", ["Data/Map", "eventMgr", "Scripts/CameraFollowCtr", "Time/TimeUtil", "Tools/engineParallel/parallelEngineTool", "Tools/engineParallel/spInterface", "Tools/FrameMgr", "Tools/LateUpdateMgr", "Tools/miniGame", "GameEnum", "GameMgr", "gamePlays/GamePlayMgr", "Manager/PerformanceTestMgr", "Manager/UIOpenOrHideManager", "Role/RoleMgr", "Scene/SceneMgr", "Core/EffectMgr", "Tools/PlatformUtil", "Tools/fontMgr", "Manager/GameDataEventInitManager", "Net/WsDataManager", "Net/PingTimeManager", "Net/WebsocketTool", "ActionBase"], function (exports_83, context_83) {
    "use strict";
    var Map_6, eventMgr_13, CameraFollowCtr_1, TimeUtil_4, parallelEngineTool_1, spInterface_5, FrameMgr_5, LateUpdateMgr_3, miniGame_3, GameEnum_26, GameMgr_15, GamePlayMgr_8, PerformanceTestMgr_1, UIOpenOrHideManager_8, RoleMgr_5, SceneMgr_1, EffectMgr_2, PlatformUtil_3, fontMgr_1, GameDataEventInitManager_1, WsDataManager_7, PingTimeManager_3, WebsocketTool_5, ActionBase_1, SDKRankRewardData, StageMgr;
    var __moduleName = context_83 && context_83.id;
    return {
        setters: [
            function (Map_6_1) {
                Map_6 = Map_6_1;
            },
            function (eventMgr_13_1) {
                eventMgr_13 = eventMgr_13_1;
            },
            function (CameraFollowCtr_1_1) {
                CameraFollowCtr_1 = CameraFollowCtr_1_1;
            },
            function (TimeUtil_4_1) {
                TimeUtil_4 = TimeUtil_4_1;
            },
            function (parallelEngineTool_1_1) {
                parallelEngineTool_1 = parallelEngineTool_1_1;
            },
            function (spInterface_5_1) {
                spInterface_5 = spInterface_5_1;
            },
            function (FrameMgr_5_1) {
                FrameMgr_5 = FrameMgr_5_1;
            },
            function (LateUpdateMgr_3_1) {
                LateUpdateMgr_3 = LateUpdateMgr_3_1;
            },
            function (miniGame_3_1) {
                miniGame_3 = miniGame_3_1;
            },
            function (GameEnum_26_1) {
                GameEnum_26 = GameEnum_26_1;
            },
            function (GameMgr_15_1) {
                GameMgr_15 = GameMgr_15_1;
            },
            function (GamePlayMgr_8_1) {
                GamePlayMgr_8 = GamePlayMgr_8_1;
            },
            function (PerformanceTestMgr_1_1) {
                PerformanceTestMgr_1 = PerformanceTestMgr_1_1;
            },
            function (UIOpenOrHideManager_8_1) {
                UIOpenOrHideManager_8 = UIOpenOrHideManager_8_1;
            },
            function (RoleMgr_5_1) {
                RoleMgr_5 = RoleMgr_5_1;
            },
            function (SceneMgr_1_1) {
                SceneMgr_1 = SceneMgr_1_1;
            },
            function (EffectMgr_2_1) {
                EffectMgr_2 = EffectMgr_2_1;
            },
            function (PlatformUtil_3_1) {
                PlatformUtil_3 = PlatformUtil_3_1;
            },
            function (fontMgr_1_1) {
                fontMgr_1 = fontMgr_1_1;
            },
            function (GameDataEventInitManager_1_1) {
                GameDataEventInitManager_1 = GameDataEventInitManager_1_1;
            },
            function (WsDataManager_7_1) {
                WsDataManager_7 = WsDataManager_7_1;
            },
            function (PingTimeManager_3_1) {
                PingTimeManager_3 = PingTimeManager_3_1;
            },
            function (WebsocketTool_5_1) {
                WebsocketTool_5 = WebsocketTool_5_1;
            },
            function (ActionBase_1_1) {
                ActionBase_1 = ActionBase_1_1;
            }
        ],
        execute: function () {
            SDKRankRewardData = /** @class */ (function () {
                function SDKRankRewardData() {
                }
                return SDKRankRewardData;
            }());
            exports_83("SDKRankRewardData", SDKRankRewardData);
            StageMgr = /** @class */ (function () {
                function StageMgr() {
                }
                Object.defineProperty(StageMgr, "inGame", {
                    //在游戏场景中
                    get: function () {
                        return GameMgr_15.GameMgr.gameState == 1;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(StageMgr, "PlayerGUID", {
                    /** palyer 的GUID */
                    get: function () { return this._playerGUID; },
                    enumerable: false,
                    configurable: true
                });
                StageMgr.init = function () {
                    //动态加载字体 
                    // tslint:disable-next-line: max-line-length
                    var useBufferMode = PlatformUtil_3.PlatformUtil.WXGetSystemPlatformType == PlatformUtil_3.PlatformType.iPhone && (miniGame_3.miniGame.miniType == miniGame_3.miniAPIType.qq || miniGame_3.miniGame.miniType == miniGame_3.miniAPIType.none); //解决qq 下 ios ，动态字体刷新bug
                    var isIosBol = PlatformUtil_3.PlatformUtil.WXGetSystemPlatformType == PlatformUtil_3.PlatformType.iPhone;
                    fontMgr_1.FontMgr.Instance.init(useBufferMode, isIosBol);
                    //
                    GameDataEventInitManager_1.GameDataEventInitManager.init();
                    // this.ReverseUserOrdersDic = new cMap<any>();
                    var scene = this.scene = m4m.framework.sceneMgr.scene;
                    //node
                    var _Root = parallelEngineTool_1.getSpTransform(scene.getRoot());
                    this.sceneRoot = parallelEngineTool_1.getSpTransform(new m4m.framework.transform());
                    //性能调试模式
                    if (GameMgr_15.GameMgr.performanceDebug) {
                        if (GameMgr_15.GameMgr.sceneHideDebug) {
                            this.sceneRoot.gameObject.visible = false;
                            GameMgr_15.GameMgr.testStr = "场景隐藏";
                        }
                    }
                    this.sceneRoot.name = "sceneRoot";
                    _Root.addChild(this.sceneRoot);
                    this.roleRoot = parallelEngineTool_1.getSpTransform(new m4m.framework.transform());
                    //性能调试模式
                    if (GameMgr_15.GameMgr.performanceDebug) {
                        if (GameMgr_15.GameMgr.roleModelHideDebug) {
                            this.roleRoot.gameObject.visible = false;
                            GameMgr_15.GameMgr.testStr = "角色隐藏";
                        }
                    }
                    this.roleRoot.name = "roleRoot";
                    _Root.addChild(this.roleRoot);
                    this.effectRoot = parallelEngineTool_1.getSpTransform(new m4m.framework.transform());
                    //性能调试模式
                    if (GameMgr_15.GameMgr.performanceDebug) {
                        if (GameMgr_15.GameMgr.effectHideDebug) {
                            this.effectRoot.gameObject.visible = false;
                            GameMgr_15.GameMgr.testStr = "特效隐藏";
                        }
                    }
                    this.effectRoot.name = "effectRoot";
                    _Root.addChild(this.effectRoot);
                    //
                    if (miniGame_3.miniGame.miniType != miniGame_3.miniAPIType.none) {
                        console.error(" SDKVersion : ".concat(miniGame_3.miniGame.wxSystemInfo.SDKVersion));
                    }
                    //性能设置
                    //time
                    TimeUtil_4.TimeUtil.init(GameMgr_15.GameMgr.app, GameMgr_15.GameMgr.limitFrame);
                    //渲染场景
                    SceneMgr_1.SceneMgr.init();
                    //角色管理器
                    RoleMgr_5.RoleMgr.init();
                    //特效管理器
                    EffectMgr_2.EffectMgr.init(this.effectRoot);
                    //广告 ID初始化
                    //性能测试 
                    if (GameMgr_15.GameMgr.performanceDebug) {
                        //PerformanceTestMgr.init();
                    }
                    //相机
                    this.cam_Light_Init();
                    //lateupdate
                    scene.onLateUpdate = LateUpdateMgr_3.LateUpdateMgr.onUpdate.bind(LateUpdateMgr_3.LateUpdateMgr);
                    this.inited = true;
                    //wx 引擎环境
                    parallelEngineTool_1.wxEngineEnvSet();
                    //update reg
                    FrameMgr_5.FrameMgr.Add(this.update, this);
                    LateUpdateMgr_3.LateUpdateMgr.Add(this.lateUpdate, this);
                    //事件
                    // EventMgr.addListener("battle_role_ready", this.onBattleRoleReady, this);
                    eventMgr_13.EventMgr.addListener("scene_visual_change", this.onSceneVisualChange, this);
                    //
                    // this.enterHall();
                    // this.connect();
                    //进入登录页面
                    this.enterLogin();
                    // window.onblur = () => {
                    //     console.error("小伙不要走，我要和你对决");
                    //     //浏览器窗口失去焦点
                    //     StageMgr.isBlur = true;
                    // };
                    // window.onfocus = () => {
                    //     console.error("亲，欢迎你回来");
                    //     StageMgr.isBlur = false;
                    // };
                };
                /** 登录服务器成功 */
                StageMgr.onLoginServerSuccess = function () {
                    //显示玩家头顶UI
                    // UIOpenOrHideManager.Instance.OpenGamingView();
                    //初始化UIloading界面
                    // UiManager.InitUi(UiNames.Circleloading);
                    //进入 大厅
                    // this.enterHall();
                    //进入 木头人
                    //this.enterWooden();
                    //信号显示
                    // UIOpenOrHideManager.Instance.OpensignalsView();
                    //开启 pingTime
                    PingTimeManager_3.PingTimeManager.Instance.pingTimeFun();
                    StageMgr._playerGUID = WsDataManager_7.WsDataManager.UserVarBaseData.token;
                    //动作配置文件加载暂写在这
                    ActionBase_1.ActionBase.getAllDataCallBack(function () {
                        //ActionBase.list;
                        var states = {};
                        var arr = [];
                        arr.push({ from: "__entry__", to: "Idle" });
                        ActionBase_1.ActionBase.list.forEach(function (value, key) {
                            // console.error(key);
                            var obj = {};
                            obj["clipName"] = key;
                            obj["speed"] = value.speed;
                            obj["normalizeTime"] = 1;
                            obj["mirror"] = value.mirror;
                            states[key] = obj;
                            var tra = { from: "__anyState__", to: key };
                            arr.push(tra);
                        });
                        StageMgr.actionBaseConfigObj["states"] = states;
                        StageMgr.actionBaseConfigObj["transitions"] = arr;
                        //进入单人大厅 
                        GamePlayMgr_8.GamePlayMgr.RunGame(GameEnum_26.GamePlayType.singleHall);
                    });
                    // //进入单人大厅 
                    // GamePlayMgr.RunGame(GamePlayType.singleHall);
                    //进入 扣糖饼
                    // this.enterSugar();
                    // //开启摇杆
                    // UIOpenOrHideManager.Instance.OpenRockerView();
                    //进入 拔河
                    // this.enterTug();
                    WebsocketTool_5.WebsocketTool.Instance.TicketManager_getAllTicketInfo(); // 通知服务器获取所有门票
                };
                /** 场景切换 */
                StageMgr.onSceneVisualChange = function (ev) {
                    console.log("\u573A\u666F\u5207\u6362 isShow : ".concat(ev.isShow, " , sceneID : ").concat(ev.sceneID, " , sceneType : ").concat(ev.sceneType));
                };
                /** 登录游戏页面 */
                StageMgr.enterLogin = function () {
                    // UIOpenOrHideManager.Instance.OpenTestView();
                    // UIOpenOrHideManager.Instance.OpenConnectWalletView();
                    UIOpenOrHideManager_8.UIOpenOrHideManager.Instance.HideTloadingView();
                    UIOpenOrHideManager_8.UIOpenOrHideManager.Instance.OpenRockerView();
                    UIOpenOrHideManager_8.UIOpenOrHideManager.Instance.OpenSteerView();
                };
                /** 进入 到大厅 */
                StageMgr.enterHall = function () {
                    //准备 大厅 场景 
                    // //准备角色
                    // //自己的角色
                    // let roleId = 10004;
                    //进入 大厅游戏
                    //GamePlayMgr.RunGame(GamePlayType.sugarCake);
                    GamePlayMgr_8.GamePlayMgr.RunGame(GameEnum_26.GamePlayType.hall);
                };
                StageMgr.enterSugar = function () {
                    //准备角色
                    // //自己的角色
                    //进入 扣糖饼
                    GamePlayMgr_8.GamePlayMgr.RunGame(GameEnum_26.GamePlayType.sugarCake);
                };
                // private static enterWooden() {
                //     //准备角色
                //     //自己的角色
                //     let roleInfo = new RoleAttrInfo();
                //     roleInfo.roleType = RoleTypeEnum.Player;
                //     roleInfo.GUID = StageMgr.PlayerGUID;
                //     EventMgr.dispatchEvent("role_make", new EventGeneric<{ roleInfo: RoleAttrInfo }>({ roleInfo }));
                //     //进入 木头人
                //     GamePlayMgr.RunGame(GamePlayType.woodenPeople);
                // }
                StageMgr.enterTug = function () {
                    //准备角色
                    //进入 拔河游戏
                    GamePlayMgr_8.GamePlayMgr.RunGame(GameEnum_26.GamePlayType.tugOfWar);
                };
                /** 等待 角色创建完毕 */
                StageMgr.waitRoleMakeSuc = function (GUID) {
                    if (GUID === void 0) { GUID = ""; }
                    var end;
                    var p = new Promise(function (resolve) {
                        end = resolve;
                    });
                    var obj = {
                        fun: function (ev) {
                            if (GUID && GUID != ev.data) {
                                return;
                            }
                            end();
                            eventMgr_13.EventMgr.removeListener("role_makeSuccess", obj.fun, obj);
                        },
                    };
                    eventMgr_13.EventMgr.addListener("role_makeSuccess", obj.fun, obj);
                    return p;
                };
                // /**
                //  * 等待场景的 可视状态变化
                //  * @param sceneID 场景ID
                //  * @param isShow 是否显示
                //  * @returns 
                //  */
                // public static waitSceneVisualChange(sceneID: number = NaN, isShow: boolean = null) {
                //     let end: Function;
                //     let p = new Promise((resolve) => {
                //         end = resolve;
                //     });
                //     let obj = {
                //         fun: (ev: SceneVisualEvent) => {
                //             if (!isNaN(sceneID) && sceneID != ev.sceneID) { return; }
                //             if (isShow != null && isShow != ev.isShow) { return; }
                //             end();
                //             EventMgr.removeListener("scene_visual_change", obj.fun, obj);
                //         },
                //     };
                //     EventMgr.addListener("scene_visual_change", obj.fun, obj);
                //     return p;
                // }
                //游戏场景加载
                StageMgr.loadGameScene = function (roleArr) {
                    //进入木头人场景
                    GamePlayMgr_8.GamePlayMgr.RunGame(GameEnum_26.GamePlayType.woodenPeople);
                };
                // //创建玩家模型角色
                // public static createRole(roleArr) {
                //     // for (let key in roleArr) {
                //     //     // console.log(`key:${i}`);
                //     //     let roleData = roleArr[key];
                //     //     this.onPlayerMake(roleId, roleData.id);
                //     // }
                //     for (let key in roleArr) {
                //         // console.log(`key:${i}`);
                //         let roleData = roleArr[key];
                //         // this.onPlayerMake(roleId, roleData.id);
                //         let GUID = roleData.playerInfo.token;
                //         let isMain = GUID == StageMgr.PlayerGUID;
                //         let setPos = roleData.pos;
                //         let roleInfo = new RoleAttrInfo();
                //         roleInfo.roleType = RoleTypeEnum.Player;
                //         roleInfo.GUID = GUID;
                //         // roleInfo.angle=rot;
                //         if (isMain) {
                //             console.error("玩家ID " + GUID + " 进入等待房间");
                //         }
                //         EventMgr.dispatchEvent("role_make", new EventGeneric<{ roleInfo: RoleAttrInfo }>({ roleInfo }));
                //     }
                // }
                // //玩家移动
                // public static moveRole(roleArr) {
                //     // for (let key in roleArr) {
                //     //     // console.log(`key:${i}`);
                //     //     let roleID = key;
                //     //     let str = roleArr[key];
                //     //     let isMain = roleID == MessageSendConversion.userID;
                //     //     if (isMain) {
                //     //         //
                //     //     } else {
                //     //         let player: Role = this.roleTestDic.get(roleID);
                //     //         let currentRole = player.roleDoll;
                //     //         // let strArr = str.split("+");
                //     //         let targetPoint = new m4m.math.vector3(str.x, str.y, str.z);
                //     //         currentRole.move(targetPoint);
                //     //     }
                //     // }
                //     for (let key in roleArr) {
                //         // console.log(`key:${i}`);
                //         let GUID = key;
                //         let posAngle = roleArr[key];
                //         console.error(posAngle);
                //         let isMain = GUID == StageMgr.PlayerGUID;
                //         if (isMain) {
                //             //
                //         } else {
                //             // let player: Role = this.roleTestDic.get(GUID);
                //             // let currentRole = player.roleDoll;
                //             // // let strArr = str.split("+");
                //             // let targetPoint = new m4m.math.vector3(str.x, str.y, str.z);
                //             // currentRole.move(targetPoint);
                //             let angle: number = posAngle.angle;
                //             let str = posAngle.pos;
                //             let data = new m4m.math.vector3(str.x, str.y, str.z);
                //             EventMgr.dispatchEvent("role_Data_upDate", new EventGeneric<{ GUID: string, data: any }>({ GUID, data }));
                //         }
                //     }
                // }
                StageMgr.setPos = function () {
                    var player = RoleMgr_5.RoleMgr.getRoleByGUID(StageMgr.PlayerGUID);
                    var currentRole = player.roleDoll;
                    var pos = currentRole.model.localPosition;
                    var targetPoint = new m4m.math.vector3(pos.x, pos.y, pos.z + 1);
                    // currentRole.startMove(targetPoint, 2);
                    // MessageSendConversion.updataGame(targetPoint);
                };
                // 创建 player 玩家 测试
                // tslint:disable-next-line: no-async-without-await
                StageMgr.onPlayerMake = function (roleId, uuid) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            return [2 /*return*/];
                        });
                    });
                };
                // /** 战斗角色准备完毕 */
                // private static onBattleRoleReady() {
                //     //
                //     console.log(`战斗角色准备完毕`);
                // }
                // public static startGame() {
                // }
                // /**
                //  * 开始进入游戏场景
                //  */
                // public static enterGame(sceneBlockId: number = 3) {
                //     // console.error("进游戏场景 开始进入场景 enterGame()");
                //     this.hasEnterGame = true;
                // }
                // /**
                //  * 切换场景
                //  */
                // public static changeScene() {
                // }
                // /**
                //  * 离开游戏场景
                //  */
                // public static leaveGame() {
                //     GameMgr.gameState = -1;
                //     //场景资源释放
                //     //关闭各系统
                //     //清理
                //     // //结束游戏前 清理一下
                //     this.hasEnterGame = false;
                // }
                //相机 灯光 初始化设置
                StageMgr.cam_Light_Init = function () {
                    var scene = this.scene;
                    scene.mainCamera.backgroundColor = new m4m.math.color(0, 98 / 255, 144 / 255, 0);
                    // scene.mainCamera.fov =0.523559  角度 30 的弧度值
                    scene.mainCamera.fov = 0.9075712110370514; // 角度值 52
                    //60 * Math.PI / 180;
                    scene.mainCamera.far = 1000;
                    scene.mainCamera.near = 0.2;
                    this.mainCam = parallelEngineTool_1.getSpTransform(scene.mainCamera.gameObject.transform).gameObject
                        .getFirstComponent(spInterface_5.spComponentType.camera);
                    var camCtr = parallelEngineTool_1.addSpCustomComp(this.mainCam.gameObject.transform, CameraFollowCtr_1.CameraFollowCtr);
                    //抖动问题
                    // LateUpdateMgr.Add(camCtr.stepUpdate, camCtr);
                    camCtr.distance = 0;
                    camCtr.tiltAngle = 0;
                    this.camCtr = camCtr;
                    parallelEngineTool_1.spAPP.setEnableFog(false);
                };
                //update
                StageMgr.update = function (delta) {
                    // //轮错误日志上报
                    // if (!this.inGame) {//不在游戏场景中
                    //     return;
                    // }
                    //性能分析用 ， 统计 平均帧率
                    if (GameMgr_15.GameMgr.performanceDebug) {
                        PerformanceTestMgr_1.PerformanceTestMgr.update(delta);
                    }
                };
                //lateUpdate
                StageMgr.lateUpdate = function (delta) {
                    if (this.camCtr) {
                        this.camCtr.step(); //相机位置计算更新
                    }
                    this.wxCamUpdate(delta);
                };
                //微信 相机同步
                StageMgr.wxCamUpdate = function (dt) {
                    var pCam = this.syncParallelEngineCamera;
                    if (pCam) {
                        var rawCam = this.scene.mainCamera;
                        pCam.fov = rawCam.fov;
                        var rawCamTran = rawCam.gameObject.transform;
                        var ptran = pCam.gameObject.transform;
                        ptran.localPosition = rawCamTran.localPosition;
                        ptran.localRotate = rawCamTran.localRotate;
                    }
                };
                StageMgr.inited = false;
                //钱包地址
                StageMgr.accountID = "";
                /**浏览器窗口失去焦点**/
                StageMgr.isBlur = false;
                StageMgr.needGuildBol = true;
                StageMgr.isFirstAutograph = true;
                StageMgr.blance = 0;
                StageMgr.allownce = 0;
                StageMgr.agreeAutographbol = true;
                StageMgr.ranktype = -1;
                StageMgr.haveTicketNum = 1;
                StageMgr.totalBoughtTicketNum = 0;
                StageMgr.ticketCostNum = 0;
                StageMgr.dailySQTnum = 0;
                StageMgr.weeklySQTnum = 0;
                StageMgr.monthlySQTnum = 0;
                StageMgr.dailyUSDTnum = 0;
                StageMgr.weeklyUSDTnum = 0;
                StageMgr.monthlyUSDTnum = 0;
                StageMgr.dailyrate = 0;
                StageMgr.weekrate = 0;
                StageMgr.monthrate = 0;
                StageMgr.levelType = 1;
                StageMgr.ticketType = GameEnum_26.TicketType.wooden;
                StageMgr.ReverseUserOrdersDic = new Map_6.cMap();
                StageMgr.canClickBol = false;
                StageMgr.SQTclaimableNum = 0;
                StageMgr.dailySQTclaimableNum = 0;
                StageMgr.weeklySQTclaimableNum = 0;
                StageMgr.monthlySQTclaimableNum = 0;
                StageMgr.derectionType = 0;
                StageMgr.currentRoundHasSlipedBol = false;
                StageMgr.tugOfWarProTime = 0;
                StageMgr.endGameBol = false;
                StageMgr.gotoPlayGameBol = false;
                //动作配置文件数据
                StageMgr.actionBaseConfigObj = {};
                StageMgr._evMakeRole = new eventMgr_13.EventGeneric({ roleId: -1, GUID: "'" });
                StageMgr._playerGUID = "";
                // tslint:disable-next-line: member-ordering
                StageMgr.roleTestDic = new Map_6.cMap();
                return StageMgr;
            }());
            exports_83("StageMgr", StageMgr);
        }
    };
});
System.register("Manager/TimeLineManager", [], function (exports_84, context_84) {
    "use strict";
    var TimeLineManager, TimeLine;
    var __moduleName = context_84 && context_84.id;
    return {
        setters: [],
        execute: function () {
            /**
             * 时间轴管理器
             */
            TimeLineManager = /** @class */ (function () {
                function TimeLineManager() {
                    this.timeLinePool = [];
                }
                Object.defineProperty(TimeLineManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new TimeLineManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 创建一个时间轴
                 * @param endRemove 时间轴结束后是否从池中移除
                 */
                TimeLineManager.prototype.createTimeLine = function (endRemove) {
                    var _this = this;
                    if (endRemove === void 0) { endRemove = true; }
                    var timeLine = new TimeLine();
                    this.timeLinePool.push(timeLine);
                    var stop = timeLine.stop.bind(timeLine);
                    timeLine["_stop"] = stop;
                    if (endRemove) {
                        timeLine.stop = function () {
                            stop();
                            var index = _this.timeLinePool.indexOf(timeLine);
                            if (index >= 0) {
                                _this.timeLinePool.splice(index, 1);
                            }
                        };
                    }
                    return timeLine;
                };
                /**
                 * 开始运行所有时间轴
                 */
                TimeLineManager.prototype.startAll = function () {
                    for (var _i = 0, _a = this.timeLinePool; _i < _a.length; _i++) {
                        var line = _a[_i];
                        line.start();
                    }
                };
                /**
                 * 强制停止所有时间轴
                 */
                TimeLineManager.prototype.stopAll = function () {
                    for (var _i = 0, _a = this.timeLinePool; _i < _a.length; _i++) {
                        var line = _a[_i];
                        line["_stop"]();
                    }
                };
                /**
                 * 强制停止所有时间轴, 并清理
                 */
                TimeLineManager.prototype.stopAndClaer = function () {
                    this.stopAll();
                    this.timeLinePool.length = 0;
                };
                return TimeLineManager;
            }());
            exports_84("TimeLineManager", TimeLineManager);
            /**
             * 时间轴
             */
            TimeLine = /** @class */ (function () {
                function TimeLine() {
                    this.map = {};
                    this.timer = null;
                    this.state = 0;
                }
                /**
                 * 获取时间轴状态, 0 未开启, 1 运行中, 2 结束
                 */
                TimeLine.prototype.getState = function () {
                    return this.state;
                };
                /**
                 * 开启时间轴
                 */
                TimeLine.prototype.start = function () {
                    var _this = this;
                    if (this.state == 1) {
                        console.error("时间轴正在运行");
                        return;
                    }
                    this.state = 1;
                    var keys = Object.keys(this.map);
                    var prevTime = 0;
                    var index = 0;
                    var f = function () {
                        var key = keys[index++];
                        if (!key) {
                            _this.stop();
                            return;
                        }
                        var nowTime = Number(key);
                        _this.timer = setTimeout(function () {
                            f();
                            _this.map[key]();
                        }, nowTime - prevTime);
                        prevTime = nowTime;
                    };
                    f();
                };
                /**
                 * 往当前时间轴添加事件
                 */
                TimeLine.prototype.add = function (time, callBack) {
                    if (this.state == 1) {
                        console.error("时间轴正在运行");
                        return;
                    }
                    this.map[time] = callBack;
                };
                /**
                 * 清理当前时间轴
                 */
                TimeLine.prototype.clear = function () {
                    if (this.state == 1) {
                        console.error("时间轴正在运行");
                        return;
                    }
                    this.state = 0;
                    this.map = {};
                };
                /**
                 * 强制停止当前时间轴
                 */
                TimeLine.prototype.stop = function () {
                    if (this.state == 1) {
                        this.state = 2;
                        clearTimeout(this.timer);
                    }
                };
                return TimeLine;
            }());
            exports_84("TimeLine", TimeLine);
        }
    };
});
System.register("Manager/ShowAttackManager", [], function (exports_85, context_85) {
    "use strict";
    var ShowAttackManager;
    var __moduleName = context_85 && context_85.id;
    return {
        setters: [],
        execute: function () {
            ShowAttackManager = /** @class */ (function () {
                function ShowAttackManager() {
                }
                Object.defineProperty(ShowAttackManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ShowAttackManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                return ShowAttackManager;
            }());
            exports_85("ShowAttackManager", ShowAttackManager);
        }
    };
});
System.register("gamePlays/MeleeGame", ["eventMgr", "PSDUI/UiDataManager", "Tools/FrameMgr", "Audio/AudioEnum", "Audio/AudioPlayer", "Core/StageMgr", "Data/BindKeyName", "GameEnum", "Manager/ScoreboardManager", "Manager/MeleeGameManager", "Manager/TimeLineManager", "Manager/UIOpenOrHideManager", "Net/WebsocketTool", "Net/WsDataManager", "Role/RoleAttrInfo", "Role/RoleMgr", "Scene/SceneLoadManager", "Manager/GamingManager", "Manager/ShowAttackManager"], function (exports_86, context_86) {
    "use strict";
    var eventMgr_14, UiDataManager_13, FrameMgr_6, AudioEnum_6, AudioPlayer_7, StageMgr_14, BindKeyName_13, GameEnum_27, ScoreboardManager_2, MeleeGameManager_2, TimeLineManager_1, UIOpenOrHideManager_9, WebsocketTool_6, WsDataManager_8, RoleAttrInfo_7, RoleMgr_6, SceneLoadManager_2, GamingManager_3, ShowAttackManager_1, MeleeGamePlayerState, MeleeGame;
    var __moduleName = context_86 && context_86.id;
    return {
        setters: [
            function (eventMgr_14_1) {
                eventMgr_14 = eventMgr_14_1;
            },
            function (UiDataManager_13_1) {
                UiDataManager_13 = UiDataManager_13_1;
            },
            function (FrameMgr_6_1) {
                FrameMgr_6 = FrameMgr_6_1;
            },
            function (AudioEnum_6_1) {
                AudioEnum_6 = AudioEnum_6_1;
            },
            function (AudioPlayer_7_1) {
                AudioPlayer_7 = AudioPlayer_7_1;
            },
            function (StageMgr_14_1) {
                StageMgr_14 = StageMgr_14_1;
            },
            function (BindKeyName_13_1) {
                BindKeyName_13 = BindKeyName_13_1;
            },
            function (GameEnum_27_1) {
                GameEnum_27 = GameEnum_27_1;
            },
            function (ScoreboardManager_2_1) {
                ScoreboardManager_2 = ScoreboardManager_2_1;
            },
            function (MeleeGameManager_2_1) {
                MeleeGameManager_2 = MeleeGameManager_2_1;
            },
            function (TimeLineManager_1_1) {
                TimeLineManager_1 = TimeLineManager_1_1;
            },
            function (UIOpenOrHideManager_9_1) {
                UIOpenOrHideManager_9 = UIOpenOrHideManager_9_1;
            },
            function (WebsocketTool_6_1) {
                WebsocketTool_6 = WebsocketTool_6_1;
            },
            function (WsDataManager_8_1) {
                WsDataManager_8 = WsDataManager_8_1;
            },
            function (RoleAttrInfo_7_1) {
                RoleAttrInfo_7 = RoleAttrInfo_7_1;
            },
            function (RoleMgr_6_1) {
                RoleMgr_6 = RoleMgr_6_1;
            },
            function (SceneLoadManager_2_1) {
                SceneLoadManager_2 = SceneLoadManager_2_1;
            },
            function (GamingManager_3_1) {
                GamingManager_3 = GamingManager_3_1;
            },
            function (ShowAttackManager_1_1) {
                ShowAttackManager_1 = ShowAttackManager_1_1;
            }
        ],
        execute: function () {
            /** 黑夜大混战玩家状态 */
            (function (MeleeGamePlayerState) {
                MeleeGamePlayerState[MeleeGamePlayerState["normal"] = 0] = "normal";
                MeleeGamePlayerState[MeleeGamePlayerState["dead"] = 1] = "dead";
            })(MeleeGamePlayerState || (exports_86("MeleeGamePlayerState", MeleeGamePlayerState = {})));
            /**
             * 黑夜大混战
             */
            MeleeGame = /** @class */ (function () {
                function MeleeGame() {
                    this.sceneInit = false;
                    this.mainRoleInit = false;
                    //玩家状态
                    this.playerState = MeleeGamePlayerState.normal;
                    this.shootPlayTime = 0;
                }
                MeleeGame.prototype.startArea = function () {
                    return null;
                };
                MeleeGame.prototype.endArea = function () {
                    return null;
                };
                MeleeGame.prototype.getGameType = function () {
                    return GameEnum_27.GamePlayType.hoodle;
                };
                MeleeGame.prototype.runGame = function () {
                    this.mainRoleInit = false;
                    this.sceneInit = false;
                    console.log("进入黑夜大混战");
                    this.serverConfig = WsDataManager_8.WsDataManager.DarkFightConfigBaseData;
                    eventMgr_14.EventMgr.addListener("role_makeSuccess", this.onMakeEnd, this);
                    eventMgr_14.EventMgr.addListener("game_result", this.gameResultFunc, this);
                    eventMgr_14.EventMgr.addListener("game_state", this.gameStateChangeFunc, this);
                    this.playerDeadBind = UiDataManager_13.UiDataManager.bindFunctionData(BindKeyName_13.BindKeyName.gamePlayerDead, this.playerDeadFunc.bind(this));
                    this.dieStateRoleJumpGroundBind = UiDataManager_13.UiDataManager.bindFunctionData(BindKeyName_13.BindKeyName.dieStateRoleJumpGround, this.dieStateRoleJumpGroundFunc.bind(this));
                    // 加载黑夜大混战场景
                    eventMgr_14.EventMgr.addListener("scene_visual_change", this.sceneChangeFun, this);
                    this.sceneID = SceneLoadManager_2.SceneidEnum.Hall;
                    SceneLoadManager_2.SceneLoadManager.Instance.loadScene(this.sceneID);
                    FrameMgr_6.FrameMgr.Add(this.Update, this);
                    this.initPlayers();
                    //太诡异的bgm了
                    AudioPlayer_7.AudioPlayer.playBGM(AudioEnum_6.AudioEnum.WoodenBg);
                    ShowAttackManager_1.ShowAttackManager.Instance.Attackstate = 0;
                    UiDataManager_13.UiDataManager.changeFunctionData(BindKeyName_13.BindKeyName.showAttackBtn, true);
                };
                MeleeGame.prototype.exitGame = function () {
                    console.log("退出黑夜大混战");
                    eventMgr_14.EventMgr.removeListener("role_makeSuccess", this.onMakeEnd, this);
                    eventMgr_14.EventMgr.removeListener("game_result", this.gameResultFunc, this);
                    eventMgr_14.EventMgr.removeListener("game_state", this.gameStateChangeFunc, this);
                    eventMgr_14.EventMgr.removeListener("scene_visual_change", this.sceneChangeFun, this);
                    UiDataManager_13.UiDataManager.unBindFunctionDataByBinder(this.playerDeadBind);
                    UiDataManager_13.UiDataManager.unBindFunctionDataByBinder(this.dieStateRoleJumpGroundBind);
                    TimeLineManager_1.TimeLineManager.Instance.stopAndClaer();
                    FrameMgr_6.FrameMgr.Remove(this.Update, this);
                    RoleMgr_6.RoleMgr.player.changeWeapons(GameEnum_27.Weapons.none);
                    UiDataManager_13.UiDataManager.changeFunctionData(BindKeyName_13.BindKeyName.showAttackBtn, false);
                    GamingManager_3.GamingManager.Instance.hpBarVisible = 0;
                    UIOpenOrHideManager_9.UIOpenOrHideManager.Instance.HideGamingView();
                };
                MeleeGame.prototype.Update = function (delta) {
                    this.shootPlayTime -= delta;
                };
                //角色创建完毕
                MeleeGame.prototype.onMakeEnd = function (ev) {
                    if (ev.data.startsWith("N:")) { //npc
                    }
                    else {
                        var role = RoleMgr_6.RoleMgr.getRoleByGUID(ev.data);
                        role.changeWeapons(GameEnum_27.Weapons.dao);
                        if (ev.data == StageMgr_14.StageMgr.PlayerGUID) {
                            console.error("黑夜大混战场游戏场景主角色创建完毕!");
                            this.mainRoleInit = true;
                            this.loadReadyFun();
                        }
                        //设置血量
                        role.roleData.MaxHp = role.roleData.CurHp = this.serverConfig.startHp;
                    }
                };
                //场景加载完成
                MeleeGame.prototype.sceneChangeFun = function (ev) {
                    if (ev.sceneID == this.sceneID && ev.isShow) {
                        eventMgr_14.EventMgr.removeListener("scene_visual_change", this.sceneChangeFun, this);
                        console.error("\u9ED1\u591C\u5927\u6DF7\u6218\u573A\u666F\u52A0\u8F7D\u5B8C\u6BD5 isShow : ".concat(ev.isShow, " , sceneID : ").concat(ev.sceneID, " , sceneType : ").concat(ev.sceneType));
                        this.sceneInit = true;
                        this.loadReadyFun();
                        //显示玩家头顶名称
                        GamingManager_3.GamingManager.Instance.hpBarVisible = 2;
                        UIOpenOrHideManager_9.UIOpenOrHideManager.Instance.OpenGamingView();
                    }
                };
                MeleeGame.prototype.loadReadyFun = function () {
                    //场景以及主角加载完成
                    if (this.mainRoleInit && this.sceneInit) {
                        //通知服务器 加载场景资源完成
                        WebsocketTool_6.WebsocketTool.Instance.RoomManager_readyForGame();
                        //设置相机看向目标参数
                        SceneLoadManager_2.SceneLoadManager.Instance.upDateCameraViewInfo();
                    }
                };
                //创建玩家
                MeleeGame.prototype.initPlayers = function () {
                    var _this = this;
                    SceneLoadManager_2.SceneLoadManager.Instance.getSceneConfig()
                        .then(function (config) {
                        //加载服务器玩家列表
                        var roleArr = JSON.parse(_this.serverConfig.players);
                        UiDataManager_13.UiDataManager.changeFunctionData(BindKeyName_13.BindKeyName.roelgming, roleArr);
                        for (var key in roleArr) {
                            // console.error(`key:${key}`);
                            var roleData = roleArr[key];
                            var GUID = roleData.playerInfo.token;
                            var isMain = GUID == StageMgr_14.StageMgr.PlayerGUID;
                            var setPos = roleData.pos;
                            var roleInfo = new RoleAttrInfo_7.RoleAttrInfo();
                            roleInfo.roleType = RoleAttrInfo_7.RoleTypeEnum.Player;
                            roleInfo.GUID = GUID;
                            roleInfo.pos = setPos;
                            roleInfo.angle = config.roleAngle;
                            if (roleData.num != null) {
                                roleInfo.num = roleData.num;
                            }
                            roleInfo.defDiePerformance = RoleAttrInfo_7.GameDiePerformanceEnum.Die;
                            roleInfo.roleState = roleData.playerInfo.status;
                            if (isMain) {
                                _this.selfNum = roleInfo.num.toString();
                            }
                            eventMgr_14.EventMgr.dispatchEvent("role_make", new eventMgr_14.EventGeneric({ roleInfo: roleInfo }));
                        }
                    });
                };
                //服务器调用 游戏状态改变
                MeleeGame.prototype.gameStateChangeFunc = function (ev) {
                    this.gameState = ev.data.gameState;
                };
                /** 游戏中玩家死亡 */
                MeleeGame.prototype.playerDeadFunc = function (list) {
                    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                        var guid = list_1[_i];
                        this.playerDead(guid);
                    }
                };
                //测试玩家被击飞,在控制台手动调用
                MeleeGame.prototype.testFly = function (num, offset, time) {
                    console.error("玩家被击飞:", num, offset, time);
                    var role = RoleMgr_6.RoleMgr.getRoleByNum(num);
                    m4m.math.vec3Add(role.roleDoll.model.localPosition, offset, offset);
                    role.roleCtr.handleInput(GameEnum_27.RoleActInput.StrikeToFly, {
                        dropPoint: offset,
                        flyTime: time,
                    });
                };
                //玩家已死亡 跳起落地处理
                MeleeGame.prototype.dieStateRoleJumpGroundFunc = function (guid) {
                    var _role = RoleMgr_6.RoleMgr.getRoleByGUID(guid);
                    _role.roleCtr.handleInput(GameEnum_27.RoleActInput.Die);
                };
                //有玩家死亡
                MeleeGame.prototype.playerDead = function (guid) {
                    //玩家
                    var player = RoleMgr_6.RoleMgr.getRoleByGUID(guid);
                    player.roleData.inGameState = GameEnum_27.InGameStatus.inGameDead;
                    //设置玩家状态为死亡状态
                    if (guid == StageMgr_14.StageMgr.PlayerGUID) {
                        this.playerState = MeleeGamePlayerState.dead;
                        setTimeout(function () {
                            ScoreboardManager_2.ScoreboardManager.Instance.rank = 0;
                            ScoreboardManager_2.ScoreboardManager.Instance.showLostBoard();
                        }, 2000);
                    }
                    //发送玩家死亡的消息
                    UiDataManager_13.UiDataManager.changeFunctionData(BindKeyName_13.BindKeyName.playerDead, guid);
                };
                /** 服务器结算 */
                MeleeGame.prototype.gameResultFunc = function (ev) {
                    this.isResulted = true;
                    //判断是否有未到达终点的玩家
                    var losers = JSON.parse(ev.data.resultData.losers);
                    var lifePlayer = MeleeGameManager_2.MeleeGameManager.Instance.lifePlayer;
                    //最后死亡的人数
                    var deadCount = 0;
                    for (var key in losers) {
                        var token = losers[key].token;
                        //在生还列表中
                        var player = lifePlayer[token];
                        if (player) {
                            this.playerDead(token);
                            delete lifePlayer[token];
                            deadCount++;
                        }
                    }
                    if (this.playerState == MeleeGamePlayerState.normal) {
                        // console.error("你胜利了");
                        var rank_1 = 0;
                        var winers = JSON.parse(ev.data.resultData.winers);
                        var myToken = StageMgr_14.StageMgr.PlayerGUID;
                        for (var key in winers) {
                            var player = winers[key];
                            if (player.token == myToken) {
                                rank_1 = Number(key);
                            }
                        }
                        setTimeout(function () {
                            //弹出胜利面板
                            RoleMgr_6.RoleMgr.canMove(false);
                            ScoreboardManager_2.ScoreboardManager.Instance.rank = rank_1;
                            ScoreboardManager_2.ScoreboardManager.Instance.showWinBoard();
                        }, 1500);
                    }
                };
                //播放射击音效, 开播100毫秒内不允许再次播放
                MeleeGame.prototype.playGunshoot = function () {
                    if (this.shootPlayTime <= 0) {
                        this.shootPlayTime = 0.1;
                        AudioPlayer_7.AudioPlayer.stop(AudioEnum_6.AudioEnum.WoodenGunshoot);
                        AudioPlayer_7.AudioPlayer.play(AudioEnum_6.AudioEnum.WoodenGunshoot);
                    }
                };
                return MeleeGame;
            }());
            exports_86("MeleeGame", MeleeGame);
        }
    };
});
System.register("gamePlays/PlayGameType", [], function (exports_87, context_87) {
    "use strict";
    var PlayGameType;
    var __moduleName = context_87 && context_87.id;
    return {
        setters: [],
        execute: function () {
            PlayGameType = /** @class */ (function () {
                function PlayGameType() {
                }
                //木头人
                PlayGameType.Wood = "WoodMan";
                //糖饼
                PlayGameType.SugarCookies = "Honeycomb";
                //拨河
                PlayGameType.DialRiver = "TugOfWar";
                //砍人
                PlayGameType.CutPeople = "CutPeople";
                //弹珠
                PlayGameType.Marbles = "Marbles";
                //玻璃桥
                PlayGameType.GlassBridge = "GlassBridge";
                //鱿鱼游戏
                PlayGameType.SquidGame = "SquidGame";
                //黑夜大混战
                PlayGameType.DarkFight = "GreatChampionship";
                //小锦标赛
                PlayGameType.MiniChampionship = "MiniChampionship";
                //大锦标赛
                PlayGameType.GreatChampionship = "GreatChampionship";
                return PlayGameType;
            }());
            exports_87("PlayGameType", PlayGameType);
        }
    };
});
System.register("gamePlays/SingleHall", ["eventMgr", "PSDUI/UiDataManager", "Tools/FrameMgr", "Core/StageMgr", "Data/BindKeyName", "GameEnum", "Role/RoleAttrInfo", "Role/RoleMgr", "Scene/SceneLoadManager", "Scene/SceneMgr"], function (exports_88, context_88) {
    "use strict";
    var eventMgr_15, UiDataManager_14, FrameMgr_7, StageMgr_15, BindKeyName_14, GameEnum_28, RoleAttrInfo_8, RoleMgr_7, SceneLoadManager_3, SceneMgr_2, SingleHall, JinbuduiState;
    var __moduleName = context_88 && context_88.id;
    return {
        setters: [
            function (eventMgr_15_1) {
                eventMgr_15 = eventMgr_15_1;
            },
            function (UiDataManager_14_1) {
                UiDataManager_14 = UiDataManager_14_1;
            },
            function (FrameMgr_7_1) {
                FrameMgr_7 = FrameMgr_7_1;
            },
            function (StageMgr_15_1) {
                StageMgr_15 = StageMgr_15_1;
            },
            function (BindKeyName_14_1) {
                BindKeyName_14 = BindKeyName_14_1;
            },
            function (GameEnum_28_1) {
                GameEnum_28 = GameEnum_28_1;
            },
            function (RoleAttrInfo_8_1) {
                RoleAttrInfo_8 = RoleAttrInfo_8_1;
            },
            function (RoleMgr_7_1) {
                RoleMgr_7 = RoleMgr_7_1;
            },
            function (SceneLoadManager_3_1) {
                SceneLoadManager_3 = SceneLoadManager_3_1;
            },
            function (SceneMgr_2_1) {
                SceneMgr_2 = SceneMgr_2_1;
            }
        ],
        execute: function () {
            SingleHall = /** @class */ (function () {
                function SingleHall() {
                    this._evRoleSetPos = new eventMgr_15.EventGeneric({ GUID: "", pos: new m4m.math.vector3() });
                    this._evRoleSetRot = new eventMgr_15.EventGeneric({ GUID: "", yAngle: 0 });
                    this.mainRoleInit = false;
                    this.sceneInit = false;
                    this.canTestBol = false;
                    this.testGUID = "N:0001";
                    this.roleInit = true;
                }
                SingleHall.prototype.startArea = function () {
                    return null;
                };
                SingleHall.prototype.endArea = function () {
                    return null;
                };
                SingleHall.prototype.getGameType = function () {
                    return GameEnum_28.GamePlayType.singleHall;
                };
                SingleHall.prototype.runGame = function () {
                    this.mainRoleInit = false;
                    this.sceneInit = false;
                    this.canTestBol = false;
                    //每次移动一步的距离
                    RoleMgr_7.RoleMgr.moveDistance = 1;
                    // throw new Error("Method not implemented.");
                    console.error("进入单人大厅场景");
                    eventMgr_15.EventMgr.addListener("scene_visual_change", this.sceneChangeFun, this);
                    //因大厅房间和单人大厅是同一场景
                    // EventMgr.addListener("role_makeSuccess", this.onMakeEnd, this);
                    this.roleMakeSuccessFunBind = this.roleMakeSuccessFun.bind(this);
                    //角色创建完毕
                    UiDataManager_14.UiDataManager.bindFunctionData(BindKeyName_14.BindKeyName.roleMakeSuccess, this.roleMakeSuccessFunBind);
                    //侦听购票成功 进入对应游戏
                    UiDataManager_14.UiDataManager.bindFunctionData(BindKeyName_14.BindKeyName.buyTicketSuccessToGame, this.buyTicketSuccessToGameFunBind);
                    this.initSingleHall();
                    this.npcLocalPosition = new m4m.math.vector3(0, 0, -17);
                    FrameMgr_7.FrameMgr.Add(this.UpDateFun, this);
                    // this._ev.data = false;
                    // EventMgr.dispatchEvent("rocker_View_TouchEnable", this._ev);
                    eventMgr_15.EventMgr.dispatchEvent("rocker_View_FocusResetState", null);
                };
                // tslint:disable-next-line: member-ordering
                SingleHall.prototype.roleMakeSuccessFun = function (data) {
                    // console.error(data, "  ++++++++++   ", StageMgr.PlayerGUID);
                    if (data == StageMgr_15.StageMgr.PlayerGUID) {
                        // EventMgr.removeListener("role_makeSuccess", this.onMakeEnd, this);
                        // this._evRoleSetPos.data.GUID = StageMgr.PlayerGUID;
                        // m4m.math.vec3Set(this._evRoleSetPos.data.pos, 0, 0, -10);
                        // EventMgr.dispatchEvent("role_setPos", this._evRoleSetPos);
                        // setTimeout(() => {
                        //     this._evRoleSetRot.data.GUID = StageMgr.PlayerGUID;
                        //     this._evRoleSetRot.data.yAngle = 90;
                        //     EventMgr.dispatchEvent("role_setYRotate", this._evRoleSetRot);
                        // }, 10000);
                        var role = RoleMgr_7.RoleMgr.getRoleByGUID(StageMgr_15.StageMgr.PlayerGUID);
                        role.roleData.inGameState = GameEnum_28.InGameStatus.outGame;
                        role.roleCtr.handleInput(GameEnum_28.RoleActInput.Revive);
                        if (!this.roleInit) {
                            role.roleDoll.setNum("00");
                        }
                        this.roleInit = false;
                        this.mainRoleInit = true;
                        this.loadReadyFun();
                        this.canTestBol = true;
                    }
                    if (data == this.testGUID) {
                        var npc = RoleMgr_7.RoleMgr.getRoleByGUID(this.testGUID);
                        //播放持枪动画
                        npc.roleDoll.playAnim("IdleTakeTheGun");
                        // npc.roleDoll.playAnim("Pistol");
                        //暂时这么处理脸
                        var model = npc.roleDoll.model;
                        // console.error("model: ", model);
                        model.find("Npc_lian01").gameObject.visible = false;
                        model.find("NPC_lian02").gameObject.visible = false;
                        model.find("shouqiang").gameObject.visible = false;
                        model.find("wp_chongfengqiang").gameObject.visible = true;
                    }
                };
                // //角色创建完毕
                // public onMakeEnd(ev: EventGeneric<string>) {
                //     console.error(ev.data, "  ++++++++++   ", StageMgr.PlayerGUID);
                //     if (ev.data == StageMgr.PlayerGUID) {
                //         // EventMgr.removeListener("role_makeSuccess", this.onMakeEnd, this);
                //         // this._evRoleSetPos.data.GUID = StageMgr.PlayerGUID;
                //         // m4m.math.vec3Set(this._evRoleSetPos.data.pos, 0, 0, -10);
                //         // EventMgr.dispatchEvent("role_setPos", this._evRoleSetPos);
                //         // setTimeout(() => {
                //         //     this._evRoleSetRot.data.GUID = StageMgr.PlayerGUID;
                //         //     this._evRoleSetRot.data.yAngle = 90;
                //         //     EventMgr.dispatchEvent("role_setYRotate", this._evRoleSetRot);
                //         // }, 10000);
                //         this.mainRoleInit = true;
                //         this.loadReadyFun();
                //         this.canTestBol = true;
                //     }
                //     if (ev.data == this.testGUID) {
                //         let npc = RoleMgr.getRoleByGUID(this.testGUID);
                //         //播放持枪动画
                //         npc.roleDoll.playAnim("idle1");
                //         //暂时这么处理脸
                //         let model = npc.roleDoll.model;
                //         console.error("model: ", model);
                //         model.find("Npc_lian01").gameObject.visible = false;
                //         model.find("NPC_lian02").gameObject.visible = false;
                //     }
                // }
                SingleHall.prototype.exitGame = function () {
                    //退出当前场景 禁止移动
                    RoleMgr_7.RoleMgr.canMove(false);
                    //让 摇杆 复位
                    UiDataManager_14.UiDataManager.changeFunctionData(BindKeyName_14.BindKeyName.joyReset, null);
                    //角色创建完毕
                    UiDataManager_14.UiDataManager.unBindFunctionData(BindKeyName_14.BindKeyName.roleMakeSuccess, this.roleMakeSuccessFunBind);
                    //隐藏大厅UI界面
                    // UIOpenOrHideManager.Instance.HideHallView();
                    // EventMgr.removeListener("role_makeSuccess", this.onMakeEnd, this);
                    console.error("退出单人大厅场景");
                    FrameMgr_7.FrameMgr.Remove(this.UpDateFun, this);
                };
                //场景加载完毕
                SingleHall.prototype.sceneChangeFun = function (ev) {
                    if (ev.sceneID == SceneLoadManager_3.SceneidEnum.Hall && ev.isShow) {
                        eventMgr_15.EventMgr.removeListener("scene_visual_change", this.sceneChangeFun, this);
                        console.error("\u573A\u666F\u52A0\u8F7D\u5B8C\u6BD5 isShow : ".concat(ev.isShow, " , sceneID : ").concat(ev.sceneID, " , sceneType : ").concat(ev.sceneType));
                        this.sceneInit = true;
                        //金币数量控制
                        var scene = SceneMgr_2.SceneMgr.getSceneByID(ev.sceneID);
                        this.sceneModel = scene.model;
                        this.setJinbuduiState(JinbuduiState.man);
                        this.loadReadyFun();
                    }
                };
                SingleHall.prototype.loadReadyFun = function () {
                    console.error("单人大厅场景111");
                    //场景以及主角加载完成
                    if (this.mainRoleInit && this.sceneInit) {
                        console.error("单人大厅场景222");
                        // //设置玩家相机
                        // StageMgr.camCtr.distance = 10;
                        // StageMgr.camCtr.tiltAngle = 7;
                        // StageMgr.camCtr.panAngle = 0;
                        // StageMgr.mainCam.fov = commTool.toRadian * 32;
                        //设置相机看向目标参数
                        SceneLoadManager_3.SceneLoadManager.Instance.upDateCameraViewInfo();
                        //是否需要新手引导
                        if (StageMgr_15.StageMgr.needGuildBol) {
                            //后续增加新手引导流程 q区分 pc 和移动端
                            // if (PlatformUtil.getTypeByBrowser() == PlatformType.PC) {
                            //     UIOpenOrHideManager.Instance.OpenTutorialpcView();
                            // } else {
                            //     UIOpenOrHideManager.Instance.OpenTutorialmbView();
                            // }
                            StageMgr_15.StageMgr.needGuildBol = false;
                        }
                        else {
                            // //打开大厅UI界面
                            // UIOpenOrHideManager.Instance.OpenHallView();
                        }
                    }
                };
                // public static test() {
                //     //角色
                //     let roleInfo = new RoleAttrInfo();
                //     roleInfo.roleType = RoleTypeEnum.Player;
                //     roleInfo.GUID = StageMgr.PlayerGUID;
                //     roleInfo.pos = new m4m.math.vector3(0, 0, -15);
                //     roleInfo.angle = 40;
                //     EventMgr.dispatchEvent("role_make", new EventGeneric<{ roleInfo: RoleAttrInfo }>({ roleInfo }));
                // }
                //单人游戏大厅
                SingleHall.prototype.initSingleHall = function () {
                    var sceneID = SceneLoadManager_3.SceneidEnum.Hall;
                    // //单人大厅
                    // let ev = new SceneShowEvent();
                    // ev.sceneID = sceneID;
                    // EventMgr.dispatchEvent("scene_show", ev);
                    //单人大厅
                    SceneLoadManager_3.SceneLoadManager.Instance.loadScene(sceneID);
                    SceneLoadManager_3.SceneLoadManager.Instance.getSceneConfig()
                        .then(function (config) {
                        //角色
                        var roleInfo = new RoleAttrInfo_8.RoleAttrInfo();
                        roleInfo.roleType = RoleAttrInfo_8.RoleTypeEnum.Player;
                        roleInfo.GUID = StageMgr_15.StageMgr.PlayerGUID;
                        roleInfo.pos = new m4m.math.vector3(0, 0, -10);
                        roleInfo.angle = config.roleAngle; //正面看向玩家
                        roleInfo.isSingle = true;
                        roleInfo.isInit = true;
                        eventMgr_15.EventMgr.dispatchEvent("role_make", new eventMgr_15.EventGeneric({ roleInfo: roleInfo }));
                        // //测试添加一个npc
                        // roleInfo = new RoleAttrInfo();
                        // roleInfo.roleType = RoleTypeEnum.NPC;
                        // roleInfo.GUID = this.testGUID;
                        // roleInfo.pos = new m4m.math.vector3(0, 0, -17);
                        // EventMgr.dispatchEvent("role_make", new EventGeneric<{ roleInfo: RoleAttrInfo }>({ roleInfo }));
                    });
                    //model.find("NPC_lian03").gameObject.visible = false;
                    // //移动到一个位置
                    // this._evRoleSetPos.data.GUID = testGUID;
                    // m4m.math.vec3Set(this._evRoleSetPos.data.pos, 0, 0, -18);
                    // EventMgr.dispatchEvent("role_setPos", this._evRoleSetPos);
                };
                SingleHall.prototype.UpDateFun = function () {
                    var role = RoleMgr_7.RoleMgr.getRoleByGUID(StageMgr_15.StageMgr.PlayerGUID);
                    if (role && role.roleDoll) {
                        var rolePos = RoleMgr_7.RoleMgr.getRoleByGUID(StageMgr_15.StageMgr.PlayerGUID).roleDoll.model.localPosition;
                        var currDist = m4m.math.vec3Distance(rolePos, this.npcLocalPosition);
                        if (this.canTestBol) {
                            // console.error("玩家位置：", rolePos, "  currDist:", currDist);
                            if (currDist <= 2) {
                                this.canTestBol = false;
                                // UIOpenOrHideManager.Instance.OpenstageselectView();
                                // StageMgr.levelType = GameType.greatChampionship;
                                // WebsocketTool.Instance.TicketManager_getTicketWithOutWallet(1, PlayGameType.GreatChampionship);
                                // WebsocketTool.Instance.TicketManager_useTickToGameRoom(PlayGameType.GreatChampionship);
                                //UIOpenOrHideManager.Instance.OpenJoingameView();
                                // //首次需要先签名
                                // if (StageMgr.isFirstAutograph) {
                                //     StageMgr.ethSignTypedData();
                                //     StageMgr.isFirstAutograph = false;
                                // } else {
                                //     UIOpenOrHideManager.Instance.OpenJoingameView();
                                // }
                            }
                        }
                        if (currDist >= 3) {
                            this.canTestBol = true;
                        }
                    }
                };
                //设置金猪存钱罐状态
                SingleHall.prototype.setJinbuduiState = function (state) {
                    if (!this.sceneModel) {
                        return;
                    }
                    switch (state) {
                        case JinbuduiState.shao:
                            this.sceneModel.find(JinbuduiState.shao).gameObject.visible = true;
                            this.sceneModel.find(JinbuduiState.banman).gameObject.visible = false;
                            this.sceneModel.find(JinbuduiState.man).gameObject.visible = false;
                            break;
                        case JinbuduiState.banman:
                            this.sceneModel.find(JinbuduiState.shao).gameObject.visible = false;
                            this.sceneModel.find(JinbuduiState.banman).gameObject.visible = true;
                            this.sceneModel.find(JinbuduiState.man).gameObject.visible = false;
                            break;
                        case JinbuduiState.man:
                            this.sceneModel.find(JinbuduiState.shao).gameObject.visible = false;
                            this.sceneModel.find(JinbuduiState.banman).gameObject.visible = false;
                            this.sceneModel.find(JinbuduiState.man).gameObject.visible = true;
                            break;
                        default:
                    }
                };
                return SingleHall;
            }());
            exports_88("SingleHall", SingleHall);
            //金猪存钱罐状态
            (function (JinbuduiState) {
                JinbuduiState["shao"] = "jinbudui_shao";
                JinbuduiState["banman"] = "jinbudui_banman";
                JinbuduiState["man"] = "jinbudui_man";
            })(JinbuduiState || (exports_88("JinbuduiState", JinbuduiState = {})));
        }
    };
});
System.register("gamePlays/GamePlayMgr", ["GameEnum", "gamePlays/MeleeGame", "gamePlays/SingleHall"], function (exports_89, context_89) {
    "use strict";
    var GameEnum_29, MeleeGame_1, SingleHall_1, GamePlayMgr;
    var __moduleName = context_89 && context_89.id;
    return {
        setters: [
            function (GameEnum_29_1) {
                GameEnum_29 = GameEnum_29_1;
            },
            function (MeleeGame_1_1) {
                MeleeGame_1 = MeleeGame_1_1;
            },
            function (SingleHall_1_1) {
                SingleHall_1 = SingleHall_1_1;
            }
        ],
        execute: function () {
            GamePlayMgr = /** @class */ (function () {
                /**
                 * 游戏玩法控制 管理器
                 */
                function GamePlayMgr() {
                }
                GamePlayMgr.tryGet = function (_type) {
                    return this._cacheMap[_type];
                };
                Object.defineProperty(GamePlayMgr, "curr", {
                    /** 当前 在的游戏 */
                    get: function () { return this._curr; },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(GamePlayMgr, "currGame", {
                    get: function () {
                        return this.tryGet(this._curr);
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * 开始 游戏
                 * @param _type
                 */
                GamePlayMgr.RunGame = function (_type) {
                    if (this._curr) {
                        this.ExitGame();
                    }
                    var gpCtr = this.tryGet(_type);
                    this._curr = _type;
                    this.currGameType = _type;
                    switch (_type) {
                        // case GamePlayType.hall: gpCtr = new Hall(); break;
                        case GameEnum_29.GamePlayType.singleHall:
                            gpCtr = new SingleHall_1.SingleHall();
                            break;
                        case GameEnum_29.GamePlayType.melee:
                            gpCtr = new MeleeGame_1.MeleeGame();
                            break;
                        default:
                    }
                    //开始游戏的准备状态
                    GamePlayMgr.gameReadyState = true;
                    GamePlayMgr.gameSettlementState = false;
                    gpCtr.runGame();
                    this._cacheMap[_type] = gpCtr;
                };
                /**
                 * 退出 当前游戏
                 */
                GamePlayMgr.ExitGame = function () {
                    if (!this._curr) {
                        return;
                    }
                    var gpCtr = this.tryGet(this._curr);
                    delete this._cacheMap[this._curr];
                    this._curr = null;
                    if (!gpCtr) {
                        return;
                    }
                    gpCtr.exitGame();
                };
                /** 游戏结算状态 */
                GamePlayMgr.gameSettlementState = false;
                /** 游戏开始准备状态 */
                GamePlayMgr.gameReadyState = false;
                GamePlayMgr.currGameType = null;
                GamePlayMgr._cacheMap = {};
                GamePlayMgr._curr = null;
                return GamePlayMgr;
            }());
            exports_89("GamePlayMgr", GamePlayMgr);
        }
    };
});
System.register("Manager/InputManager", ["PSDUI/UiDataManager", "Data/BindKeyName", "GameMgr"], function (exports_90, context_90) {
    "use strict";
    var UiDataManager_15, BindKeyName_15, GameMgr_16, InputManager;
    var __moduleName = context_90 && context_90.id;
    return {
        setters: [
            function (UiDataManager_15_1) {
                UiDataManager_15 = UiDataManager_15_1;
            },
            function (BindKeyName_15_1) {
                BindKeyName_15 = BindKeyName_15_1;
            },
            function (GameMgr_16_1) {
                GameMgr_16 = GameMgr_16_1;
            }
        ],
        execute: function () {
            InputManager = /** @class */ (function () {
                function InputManager() {
                }
                InputManager.init = function () {
                    GameMgr_16.GameMgr.inputMgr.addPointListener(m4m.event.PointEventEnum.PointMove, this.onMove, this);
                    GameMgr_16.GameMgr.inputMgr.addPointListener(m4m.event.PointEventEnum.PointDown, this.onDown, this);
                    GameMgr_16.GameMgr.inputMgr.addPointListener(m4m.event.PointEventEnum.PointUp, this.onUp, this);
                };
                InputManager.addUpCallBackFun = function (callBackFun) {
                    this.CallBackList.push(callBackFun);
                };
                InputManager.removeUpCallBackFun = function (callBackFun) {
                    var index = this.CallBackList.indexOf(callBackFun);
                    if (index != -1) {
                        this.CallBackList.splice(index, 1);
                    }
                };
                InputManager.onDown = function (_a) {
                    var x = _a[0], y = _a[1];
                    this.isDonw = true;
                    this.lastPoint_x = x;
                    this.lastPoint_y = y;
                    this.downPointX = x;
                    this.downPointY = y;
                    this.lastPos.x = x;
                    this.lastPos.y = y;
                };
                InputManager.onUp = function (_a) {
                    var x = _a[0], y = _a[1];
                    this.isDonw = false;
                    this.upPointX = x;
                    this.upPointY = y;
                    // console.error("弹起坐标", x, y);
                    this.onHorizTouch = null;
                    this.onDragTouch = null;
                    UiDataManager_15.UiDataManager.changeFunctionData(BindKeyName_15.BindKeyName.clickSlide, { upPointX: this.upPointX, upPointY: this.upPointY, downPointX: this.downPointX, downPointY: this.downPointY });
                    this.CallBackList.forEach(function (callBackFun) {
                        if (callBackFun) {
                            callBackFun();
                        }
                    });
                };
                InputManager.onMove = function (_a) {
                    var x = _a[0], y = _a[1];
                    // // console.error("移动--- ", x, y)
                    if (!this.isDonw) {
                        return;
                    }
                    if (this.onHorizTouch) { //横向滑动
                        var len = Math.abs(this.lastPoint_x - x);
                        if (len > 0.1) {
                            var dir = Math.sign(this.lastPoint_x - x);
                            this.onHorizTouch(dir * len);
                            // console.error("滑动 ", dir * len);
                        }
                    }
                    if (this.onDragTouch) { //竖向滑动
                        var foo = this.lastPoint_y - y;
                        if (Math.abs(foo) > 0.1) {
                            this.onDragTouch(foo);
                        }
                    }
                    this.lastPoint_x = x;
                    this.lastPoint_y = y;
                };
                // tslint:disable-next-line: variable-name
                InputManager.lastPoint_x = -1;
                // tslint:disable-next-line: variable-name
                InputManager.lastPoint_y = 0;
                //按下的起点
                InputManager.downPointX = -1;
                InputManager.downPointY = 0;
                //弹起的坐标点
                InputManager.upPointX = -1;
                InputManager.upPointY = 0;
                InputManager.CallBackList = new Array();
                InputManager.isDonw = false;
                InputManager.lastPos = new m4m.math.vector3();
                return InputManager;
            }());
            exports_90("InputManager", InputManager);
        }
    };
});
System.register("Tool/datGUITool", ["Data/rtree", "eventMgr", "events/sceneHideEvent", "events/sceneShowEvent", "PSDUI/UiManager", "Time/TimeUtil", "Tools/commTool", "Tools/DebugLineTool2d", "Tools/engineParallel/parallelEngineTool", "Tools/FrameMgr", "Tools/LateUpdateMgr", "Tools/miniGame", "Tools/Over3dModelMgr", "UIBase/metaUIManager", "Audio/AudioPlayer", "Core/EffectMgr", "Core/GameLogic", "Core/StageMgr", "GameMgr", "Role/RoleMgr", "Scene/SceneCamAvoidObsCtr", "Scene/SceneObstacleMgr"], function (exports_91, context_91) {
    "use strict";
    var rtree_1, eventMgr_16, sceneHideEvent_3, sceneShowEvent_3, UiManager_6, TimeUtil_5, commTool_8, DebugLineTool2d_3, parallelEngineTool_2, FrameMgr_8, LateUpdateMgr_4, miniGame_4, Over3dModelMgr_1, metaUIManager_4, AudioPlayer_8, EffectMgr_3, GameLogic_4, StageMgr_16, GameMgr_17, RoleMgr_8, SceneCamAvoidObsCtr_3, SceneObstacleMgr_4, DatGUITool, SetContent;
    var __moduleName = context_91 && context_91.id;
    return {
        setters: [
            function (rtree_1_1) {
                rtree_1 = rtree_1_1;
            },
            function (eventMgr_16_1) {
                eventMgr_16 = eventMgr_16_1;
            },
            function (sceneHideEvent_3_1) {
                sceneHideEvent_3 = sceneHideEvent_3_1;
            },
            function (sceneShowEvent_3_1) {
                sceneShowEvent_3 = sceneShowEvent_3_1;
            },
            function (UiManager_6_1) {
                UiManager_6 = UiManager_6_1;
            },
            function (TimeUtil_5_1) {
                TimeUtil_5 = TimeUtil_5_1;
            },
            function (commTool_8_1) {
                commTool_8 = commTool_8_1;
            },
            function (DebugLineTool2d_3_1) {
                DebugLineTool2d_3 = DebugLineTool2d_3_1;
            },
            function (parallelEngineTool_2_1) {
                parallelEngineTool_2 = parallelEngineTool_2_1;
            },
            function (FrameMgr_8_1) {
                FrameMgr_8 = FrameMgr_8_1;
            },
            function (LateUpdateMgr_4_1) {
                LateUpdateMgr_4 = LateUpdateMgr_4_1;
            },
            function (miniGame_4_1) {
                miniGame_4 = miniGame_4_1;
            },
            function (Over3dModelMgr_1_1) {
                Over3dModelMgr_1 = Over3dModelMgr_1_1;
            },
            function (metaUIManager_4_1) {
                metaUIManager_4 = metaUIManager_4_1;
            },
            function (AudioPlayer_8_1) {
                AudioPlayer_8 = AudioPlayer_8_1;
            },
            function (EffectMgr_3_1) {
                EffectMgr_3 = EffectMgr_3_1;
            },
            function (GameLogic_4_1) {
                GameLogic_4 = GameLogic_4_1;
            },
            function (StageMgr_16_1) {
                StageMgr_16 = StageMgr_16_1;
            },
            function (GameMgr_17_1) {
                GameMgr_17 = GameMgr_17_1;
            },
            function (RoleMgr_8_1) {
                RoleMgr_8 = RoleMgr_8_1;
            },
            function (SceneCamAvoidObsCtr_3_1) {
                SceneCamAvoidObsCtr_3 = SceneCamAvoidObsCtr_3_1;
            },
            function (SceneObstacleMgr_4_1) {
                SceneObstacleMgr_4 = SceneObstacleMgr_4_1;
            }
        ],
        execute: function () {
            DatGUITool = /** @class */ (function () {
                /**
                 * datGUI  调试GUI 工具
                 * dat使用教程 @see http://workshop.chromeexperiments.com/examples/gui/#1--Basic-Usage
                 */
                function DatGUITool() {
                }
                DatGUITool.getGUI = function () {
                    if (this._currGUI) {
                        this.clear();
                    }
                    this._currGUI = new dat.GUI();
                    return this._currGUI;
                };
                DatGUITool.getTitleName = function (text) {
                    var idx = text.indexOf("\n");
                    if (idx == -1) {
                        return "";
                    }
                    return text.substring(0, 2);
                };
                DatGUITool.ckOpenEvent = function (innerText, map) {
                    var name = this.getTitleName(innerText);
                    var fun = map[name];
                    if (fun) {
                        fun();
                    }
                };
                DatGUITool.makeOpenClose = function () {
                    var _this = this;
                    var dom = dat.dom.dom;
                    var oldCloseFun = dom.addClass;
                    dom.addClass = function (elem, className) {
                        oldCloseFun(elem, className);
                        if (className == "closed") {
                            _this.ckOpenEvent(elem.innerText, _this.TitleCloseEventMap);
                        }
                    };
                    var oldOpenFun = dom.removeClass;
                    dom.removeClass = function (elem, className) {
                        oldOpenFun(elem, className);
                        if (className == "closed") {
                            _this.ckOpenEvent(elem.innerText, _this.TitleOpenEventMap);
                        }
                    };
                };
                /** 注册 title 点击 open */
                DatGUITool.onTitleOpen = function (titleName, cb) {
                    this.TitleOpenEventMap[titleName] = cb;
                };
                /** 注册 title 点击 close */
                DatGUITool.onTitleClose = function (titleName, cb) {
                    this.TitleCloseEventMap[titleName] = cb;
                };
                DatGUITool.clear = function () {
                    if (!this._currGUI) {
                        return;
                    }
                    var selfEle = this._currGUI.domElement;
                    selfEle.parentElement.removeChild(selfEle);
                    this._currGUI = null;
                };
                /** 使用样例 */
                DatGUITool.example = function () {
                    if (!dat) {
                        return;
                    }
                    var FizzyText = function () {
                        this.message = "dat.gui";
                        this.speed = 0.8;
                        this.displayOutline = false;
                        this.explode = function () { console.log("do explode"); };
                        // Define render logic ...
                    };
                    var text = new FizzyText();
                    var gui = this.getGUI();
                    gui.add(text, "message");
                    gui.add(text, "speed", -5, 5);
                    gui.add(text, "displayOutline");
                    gui.add(text, "explode");
                    var folderF = gui.addFolder("Folder");
                };
                //游戏运行调试
                DatGUITool.runGameGUI = function () {
                    if (miniGame_4.miniGame.miniType != miniGame_4.miniAPIType.none || !dat) {
                        return;
                    }
                    var obj = this.runGameContent;
                    if (!this.runGameContent) {
                        obj = this.runGameContent = new SetContent();
                    }
                    var gui = this.runGameDatGUIObj = new dat.GUI({ closeOnTop: true, name: "runGameGUI" });
                    gui.close();
                    gui.add(obj, "title")
                        .listen();
                    var folderDebug = gui.addFolder("调试"); //----------------------------------------
                    //--------------------------全局设置-----------------------------
                    folderDebug.add(obj, "switchLOG")
                        .name("显示LOG");
                    folderDebug.add(obj, "switchFPS") //fps
                        .name("显示FPS");
                    folderDebug.add(obj, "switchDrawCall") //drawcall
                        .name("显示DrawCall数量");
                    // folderDebug.add(GameMgr, "debugModeBattle")  //调试模式
                    //     .listen()
                    //     .name("战斗调试模式");
                    folderDebug.add(obj, "openVconsole") //打开 虚拟 console
                        .listen()
                        .name("打开VConsole");
                    folderDebug.add(obj, "enableDebugDraw") //开启 debug绘制
                        .listen()
                        .name("debug绘制");
                    folderDebug.add(obj, "enablePickUI") //拣选UI节点
                        .listen()
                        .name("拣选UI节点");
                    //----------------UI 点选--------------------------------
                    var uiPickFolder = this.uiPickFolder = folderDebug.addFolder("UI选中");
                    uiPickFolder.add(obj, "pickUIVisiable") //
                        .listen()
                        .name("显示UI");
                    uiPickFolder.add(obj, "pickUIName") //
                        .listen()
                        .name("UI名字");
                    uiPickFolder.add(obj, "pickUIPos") //
                        .listen()
                        .name("UI世界坐标");
                    uiPickFolder.add(obj, "pickUIPivot") //
                        .listen()
                        .name("UI锚点");
                    uiPickFolder.add(obj, "pickUILayout") //
                        .listen()
                        .name("UI对齐状态(像素)");
                    uiPickFolder.add(obj, "pickUILayoutPerc") //
                        .listen()
                        .name("UI对齐状态(百分比)");
                    uiPickFolder.add(obj, "pickUIComponents") //
                        .listen()
                        .name("UI挂在的组件");
                    uiPickFolder.add(obj, "pickUIPath") //
                        .listen()
                        .name("UI全局路径");
                    folderDebug.add(obj, "enableRayHitScene") //拣选UI节点
                        .listen()
                        .name("射线碰场景");
                    var rayHitSceneFolder = this.rayHitSceneFolder = folderDebug.addFolder("射线点中");
                    rayHitSceneFolder.add(obj, "pickModelVisiable") //显示模型
                        .listen()
                        .name("显示模型");
                    rayHitSceneFolder.add(obj, "isRayHitMesh") //碰撞mesh
                        .listen()
                        .name("碰撞mesh");
                    rayHitSceneFolder.add(obj, "isRayHitMakePoint") //是否打点
                        .listen()
                        .name("是否打点");
                    rayHitSceneFolder.add(obj, "rayHitLayer", -1, 31, 1) //限制layer
                        .listen()
                        .name("限制layer");
                    rayHitSceneFolder.add(obj, "rayHitTranName") //hit节点名
                        .listen()
                        .name("hit节点名");
                    rayHitSceneFolder.add(obj, "rayHitPosition") //hit坐标
                        .listen()
                        .name("hit坐标");
                    rayHitSceneFolder.add(obj, "rayHitTranLayer") //hit节点Layer
                        .listen()
                        .name("hit节点Layer");
                    rayHitSceneFolder.add(obj, "rayHitTranGlobalPath") //全局路径
                        .listen()
                        .name("全局路径");
                    //--------------------------------------------------------------
                    //---------------------------------------------------------------
                    // let folderCam = folderDebug.addFolder("相机");
                    // // folderCam.open();
                    // let camCtr = stageMgr.camCtr;
                    // let cam = m4m.framework.sceneMgr.app.getScene().mainCamera;
                    // folderCam.add(camCtr, "_pause"); //暂停开关
                    // folderCam.add(obj, "syncCameraPos"); //相机设置位置
                    // folderCam.add(cam, "opvalue", 0, 1); //正交 0  和 透视模式1
                    // folderCam.add(cam, "fov", 0, Math.PI, 0.01);
                    // folderCam.add(cam, "far");
                    // folderCam.add(cam, "near");
                    // folderCam.add(cam, "size", 1, 2048, 1);
                    // folderCam.add(obj, "distance", 1, 1000, 1);        //相机跟随距离
                    // folderCam.add(obj, "Yangle", 0, 360, 1);
                    // folderCam.add(obj, "elevationAngle", 0, 360, 1);
                    // folderCam.add(obj, "testView"); //俯视测试视角
                    //------------------------------------------------------------------------------------------
                    //
                    var folderLogic = gui.addFolder("逻辑"); //----------------------------------------
                    folderLogic.add(GameMgr_17.GameMgr, "openWalletBol") //拣选UI节点
                        .listen()
                        .name("钱包模式");
                    var folderLogicUI = folderLogic.addFolder("UI逻辑"); //----------------------------------------
                    folderLogicUI.add(obj, "rockerResetState") //摇杆页面状态释放
                        .listen()
                        .name("摇杆页面状态释放");
                    folderLogicUI.add(obj, "rockerTouchEnable") //摇杆页面触摸开启
                        .listen()
                        .name("摇杆页面触摸开启");
                    var folderModelsHide = folderLogic.addFolder("场景可见性"); //----------------------------------------
                    folderModelsHide.add(obj, "sceneVisible") //显示场景
                        .name("显示场景");
                    folderModelsHide.add(obj, "roleVisible") //显示角色
                        .name("显示角色");
                    folderModelsHide.add(obj, "effectVisible") //显示特效
                        .name("显示特效");
                    var folderBattle = folderLogic.addFolder("战斗"); //----------------------------------------
                    folderBattle.add(obj, "battleSpeed", 0, 3, 0.5) //战斗播放速度
                        .name("战斗播放速度");
                    // let folderGuide = folderLogic.addFolder("引导");    //引导
                    // folderGuide.add(obj, "guideType", obj["guideTypeKMap"])
                    //     .name("引导类型");
                    // folderGuide.add(obj, "guideTypeID")
                    //     .listen()
                    //     .name("引导类型ID");
                    // folderGuide.add(obj, "addGuide")
                    //     .name("添加引导");
                    var folderPlayerCam = folderLogic.addFolder("palyer相机");
                    folderPlayerCam.add(obj, "playerCamFOV", 5, 180)
                        .name("相机FOV");
                    folderPlayerCam.add(obj, "playerCamTilt", 0, 90)
                        .name("相机跟随 斜角度");
                    folderPlayerCam.add(obj, "playerCamPan", 0, 360)
                        .name("相机跟随 环绕角度");
                    folderPlayerCam.add(obj, "playerCamDistance", 0, 50)
                        .name("相机跟随 距离");
                    var folderCamAvoidObs = folderLogic.addFolder("相机避障");
                    folderCamAvoidObs.add(SceneCamAvoidObsCtr_3.SceneCamAvoidObsCtr, "active")
                        .name("激活");
                    folderCamAvoidObs.add(SceneCamAvoidObsCtr_3.SceneCamAvoidObsCtr, "_enableCkObs")
                        .name("开启检查障碍");
                    folderCamAvoidObs.add(SceneCamAvoidObsCtr_3.SceneCamAvoidObsCtr, "_moveSpeed", 0, 10)
                        .listen()
                        .name("相机移动速度");
                    folderCamAvoidObs.add(SceneCamAvoidObsCtr_3.SceneCamAvoidObsCtr, "minDistance", 0, 10)
                        .listen()
                        .name("最小距离");
                    folderCamAvoidObs.add(SceneCamAvoidObsCtr_3.SceneCamAvoidObsCtr, "baseDistance", 1, 50)
                        .listen()
                        .name("基础距离");
                    folderCamAvoidObs.add(SceneCamAvoidObsCtr_3.SceneCamAvoidObsCtr, "_currDistance", 0, 50)
                        .listen()
                        .name("当前距离");
                    //游戏逻辑
                    var folderGame = gui.addFolder("资源"); //----------------------------------------
                    var folderRole = folderGame.addFolder("角色"); //----------------------------------------
                    // folderRole.add(obj, "slotIDs") //插孔id 列表(使用 , 分割)
                    //     .name("位置ID列表 `,`分割");
                    // folderRole.add(obj, "roleIDs") //角色id 列表(使用 , 分割)
                    //     .name("角色ID列表 `,`分割");
                    // let folderRoleBattle = folderRole.addFolder("*战斗中*");//----------------------------------------
                    // folderRoleBattle.open();
                    // folderRoleBattle.add(obj, "showRole")  //加载角色
                    //     .name("展示角色");
                    // folderRoleBattle.add(obj, "clearRole")  //清理角色
                    //     .name("清理角色");
                    // folderRoleBattle.add(obj, "animStateName", obj.stateNameList)  //动画状态名
                    //     .name("动画状态名");
                    // folderRoleBattle.add(obj, "playAnim")  //播放动画
                    //     .name("播放动画");
                    // folderRoleBattle.add(obj, "testAnimEvent")  //动画事件测试
                    //     .name("动画事件测试");
                    // let folderOffset = folderRoleBattle.addFolder("全局偏移");//----------------------------------------
                    // folderOffset.add(obj, "Offset_X") //偏移 X
                    //     .name("偏移 X");
                    // folderOffset.add(obj, "Offset_Y") //偏移 Y
                    //     .name("偏移 Y");
                    // folderOffset.add(obj, "Offset_Z") //偏移 Z
                    //     .name("偏移 Z");
                    // let folderRolePrepare = folderRole.addFolder("*预备中*");//----------------------------------------
                    // folderRolePrepare.add(obj, "prepareAttach")  //附加到
                    //     .name("附加角色");
                    // folderRolePrepare.add(obj, "prepareRemove")  //删除
                    //     .name("移除角色");
                    // folderRolePrepare.add(obj, "prepareOver")  //浮空
                    //     .name("浮空角色");
                    // folderRolePrepare.add(obj, "prepareClear")  //清理全部
                    //     .name("清理全部角色");
                    // let folderRoleShowRoom = folderRole.addFolder("*陈列室中*");//----------------------------------------
                    // folderRoleShowRoom.add(obj, "showRoomAttach")  //附加到
                    //     .name("附加角色");
                    // folderRoleShowRoom.add(obj, "showRoomClear")  //清理
                    //     .name("清理角色");
                    // folderRoleShowRoom.add(obj, "showRoomEuler", 0, 360)  //旋转 欧拉角
                    //     .name("旋转");
                    // let folderRshowRAdjustUI = folderRoleShowRoom.addFolder("*通过UI坐标调整*");
                    // folderRshowRAdjustUI.add(obj, "aboveUiPosX")
                    //     .name("UI坐标 X");
                    // folderRshowRAdjustUI.add(obj, "aboveUiPosY")
                    //     .name("UI坐标 Y");
                    // folderRshowRAdjustUI.add(obj, "doAdjustUI")
                    //     .name("调整UI坐标");
                    // let folderRoleAboveUi = folderRole.addFolder("*UI上角色*");//----------------------------------------
                    // folderRoleAboveUi.add(obj, "aboveUiPosX")  //UI 之上的 坐标X
                    //     .name("坐标X");
                    // folderRoleAboveUi.add(obj, "aboveUiPosY")  //UI 之上的 坐标Y
                    //     .name("坐标Y");
                    // folderRoleAboveUi.add(obj, "aboveScale", 0.0001, 10)  //UI 之上的 缩放
                    //     .name("缩放");
                    // folderRoleAboveUi.add(obj, "aboveUiAttach")  //附加到
                    //     .name("附加角色");
                    // folderRoleAboveUi.add(obj, "aboveUiClear")  //清理
                    //     .name("清理角色");
                    var folderUI = folderGame.addFolder("UI"); //----------------------------------------
                    folderUI.add(obj, "UIName")
                        .name("UI名字");
                    folderUI.add(obj, "showUI")
                        .name("显示UI");
                    folderUI.add(obj, "hideUI")
                        .name("隐藏UI");
                    var folderUIShader = folderUI.addFolder("shader效果");
                    folderUIShader.add(obj, "onlyLabel") //仅 开启 label
                        .name("仅label");
                    folderUIShader.add(obj, "forceNewMaterial") //给UI 创建新的材质
                        .name("创建新的材质");
                    folderUIShader.add(obj, "UIShaderName", obj["uiShaderList"])
                        .name("shader名字");
                    folderUIShader.add(obj, "UIShaderChange")
                        .name("切换shader");
                    var folderOver3dUI = folderUI.addFolder("UI上3d"); //UI上3d
                    folderOver3dUI.add(obj, "Over3dUIAdd") //UI上3d 添加 模型
                        .name("添加");
                    folderOver3dUI.add(obj, "Over3dUIRemove") //UI上 删除 之前的模型
                        .name("清理全部");
                    folderOver3dUI.add(obj, "aboveUiPosX") //UI上 坐标 x
                        .name("UI坐标X");
                    folderOver3dUI.add(obj, "aboveUiPosY") //UI上 坐标 y
                        .name("UI坐标Y");
                    var folderScene = folderGame.addFolder("场景"); //----------------------------------------
                    folderScene.add(obj, "sceneId") //场景id
                        .name("场景ID");
                    folderScene.add(obj, "showScene") //加载场景
                        .name("展示场景");
                    folderScene.add(obj, "obstacleName") //障碍名
                        .name("障碍Res名");
                    folderScene.add(obj, "showObstacle") //显示 场景障碍
                        .name("展示障碍");
                    var folderEffect = folderGame.addFolder("特效"); //----------------------------------------
                    folderEffect.add(obj, "effectName") //特效名
                        .name("特效资源名");
                    folderEffect.add(obj, "EffPos_X") //特效位置x
                        .step(0.1)
                        .name("坐标 X");
                    folderEffect.add(obj, "EffPos_Y") //特效位置y
                        .step(0.1)
                        .name("坐标 Y");
                    folderEffect.add(obj, "EffPos_Z") //特效位置z
                        .step(0.1)
                        .name("坐标 Z");
                    folderEffect.add(obj, "EffSecal") //特效位置z
                        .step(0.1)
                        .name("缩放");
                    folderEffect.add(obj, "EffEuler_X") //特效位置z
                        .step(0.1)
                        .name("旋转 X");
                    folderEffect.add(obj, "EffEuler_Y") //特效位置z
                        .step(0.1)
                        .name("旋转 Y");
                    folderEffect.add(obj, "EffEuler_Z") //特效位置z
                        .step(0.1)
                        .name("旋转 Z");
                    folderEffect.add(obj, "playEndRemove") //特效位置z
                        .name("是否播放完回调");
                    folderEffect.add(obj, "isEffOverUI") //显示在UI上
                        .name("显示在UI上");
                    var effOverUIFolder = this.effOverUIFolder = folderEffect.addFolder("UI位置");
                    effOverUIFolder.add(obj, "EffUIPosX")
                        .name("UI坐标 X");
                    effOverUIFolder.add(obj, "EffUIPosY")
                        .name("UI坐标 Y");
                    folderEffect.add(obj, "showEffect") //加载特效
                        .name("展示特效");
                    folderEffect.add(obj, "clearEffect") //清理特效
                        .name("清理特效");
                    // let folderSceneShow = folderGame.addFolder("场景演出");//----------------------------------------
                    // folderSceneShow.add(obj, "pubDoorShow")     //酒馆 抽卡开门
                    //     .name("酒馆开门");
                    // let folderSummonMeteor = folderSceneShow.addFolder("十连流星");
                    // folderSummonMeteor.add(ScenePerformMgr, "_meteorAirFriction", 0, 1)
                    //     .name("摩擦系数");
                    // folderSummonMeteor.add(ScenePerformMgr, "_meteorExplodeYRate", 0, 1)
                    //     .name("爆点Y率 位置");
                    // folderSummonMeteor.add(ScenePerformMgr, "_meteorStartSpeed")
                    //     .name("初始飞行速度");
                    // folderSummonMeteor.add(ScenePerformMgr, "_meteorSpeed")
                    //     .name("飞行速度");
                    // folderSummonMeteor.add(ScenePerformMgr, "_meteorbackSp")
                    //     .name("转向率");
                    // folderSummonMeteor.add(ScenePerformMgr, "_meteorGap")
                    //     .name("分布间隔");
                    // folderSummonMeteor.add(obj, "summonMeteorShow")     //十连流星
                    //     .name("播放");
                    var folderAudio = folderGame.addFolder("音频"); //----------------------------------------
                    folderAudio.add(obj, "audioTypeID")
                        .listen()
                        .name("音频ID");
                    folderAudio.add(obj, "audioVolume", 0, 1)
                        .name("音量(volume)");
                    folderAudio.add(obj, "audioPlay")
                        .name("播放(play)");
                    folderAudio.add(obj, "audioStop")
                        .name("停止(stop)");
                    folderAudio.add(obj, "audioPause")
                        .name("暂停(pause)");
                    //--------------------------------测试------------------------------
                    var folderTest = gui.addFolder("测试"); //----------------------------------------
                    folderTest.add(obj, "testCutUIView")
                        .name("筛选可见UI");
                    // let folderPolygon = folderTest.addFolder("UI矢量多边形");
                    // folderPolygon.add(obj, "aboveUiPosX")
                    //     .name("UI坐标X");
                    // folderPolygon.add(obj, "aboveUiPosY")
                    //     .name("UI坐标Y");
                    // folderPolygon.add(obj, "aboveScale")
                    //     .name("UI缩放");
                    // folderPolygon.add(obj, "uiPolygonPoint")
                    //     .name("点坐标");
                    // folderPolygon.add(obj, "addUIPolygonPoint")
                    //     .name("添加点");
                    // folderPolygon.add(obj, "clearUIPolygonPoint")
                    //     .name("清理");
                    //dom
                    this.makeOpenClose();
                    //openTitle event
                    this.onTitleOpen("角色", function () {
                        GameMgr_17.GameMgr.debugModeBattle = true; //强制开启调试
                        console.warn("debugModeBattle  \u6218\u6597\u8C03\u8BD5\u5F00\u542F");
                    });
                    // this.onTitleOpen("引导", () => {
                    //     // GuideMgr.DebugPrint = true; //强制开启调试
                    //     // GameMgr.debugGuide = true; //强制开启调试
                    //     console.warn(`DebugPrint  引导调试debug 开启`);
                    // });
                };
                DatGUITool.viewResourceGUI = function () {
                    // if (wxTool.wx || !dat) { return; }
                    // let obj = setViewResContent.instance;
                    // // let gui = this.getGUI();
                    // let gui = this.viewResourceGUIObj = new dat.GUI();
                    // gui.add(obj, "title");
                    // gui.add(obj, "backGameGUI");
                    // gui.add(obj, "resType", obj.PathList, "角色");
                    // gui.add(obj, "resName");
                    // gui.add(obj, "viewModel");
                };
                DatGUITool.TitleOpenEventMap = {};
                DatGUITool.TitleCloseEventMap = {};
                return DatGUITool;
            }());
            exports_91("DatGUITool", DatGUITool);
            SetContent = /** @class */ (function () {
                function SetContent() {
                    // public get enablePreparePick() { return this._enablePreparePick; }
                    // public set enablePreparePick(val) {
                    //     this._enablePreparePick = val;
                    //     let ev = new EventBase(val);
                    //     // EventMgr.dispatchEvent("prepare_pick_enable", ev);
                    // }
                    this.stateNameList = ["show", "showidle", "dead", "dizzy", "hit1", "idle", "run", "skill1", "skill2", "skill3", "skill4", "jumpskill1", "jumpskill2"];
                    // playerCamFOV
                    this._playerCamFOV = 30;
                    this.title = "游戏运行调试";
                    this.isshowFps = false;
                    this.isshowLog = false;
                    this.isshowDrawCall = false;
                    this.sceneId = 2001;
                    this.slotIDs = "1,2,3,4,5,6,7,8,9,10,11,12";
                    this.roleIDs = "3021,3035,4322";
                    this._roleOffset = new m4m.math.vector3();
                    this._isEffOverUI = false;
                    this.EffUIPosX = 500;
                    this.EffUIPosY = 300;
                    this._effPos = new m4m.math.vector3(0, 0, 0);
                    this._effEuler = new m4m.math.vector3(0, 0, 0);
                    this.effectName = "fx_pp";
                    this._effScale = 1;
                    this.playEndRemove = false;
                    this.UIName = "Playgame";
                    this.animStateName = "idle";
                    this.lastEffId = -1;
                    this.lastUIName = "";
                    this._showRoomEuler = 0;
                    this._battleSpeed = 1;
                    this._enablePreparePick = false;
                    this._isShowUIByEvent = false;
                    this._makeThouched = false;
                    this.aboveUiPosX = 640;
                    this.aboveUiPosY = 360;
                    this.aboveScale = 1;
                    // tslint:disable-next-line: max-line-length
                    this.uiShaderList = ["shader/defuifont", "shader/defmaskuifont", "shader/defui", "shader/defmaskui", "grey_ui.shader.json", "grey_mask_ui.shader.json", "mul_color_flow_font.shader.json"]; //ui shader 列表
                    this.UIShaderName = "grey_ui.shader.json";
                    this.Over3dList = [];
                    this.onlyLabel = false;
                    this.forceNewMaterial = false;
                    this.uiPolygonPoint = "[0,0,200,30,250,50,100,100,20,70]";
                    this._enableDebugDraw = false;
                    this._enablePickUI = false;
                    this._enableRayHitScene = false;
                    this._pickUIContinuity = [];
                    this._DrawLineInited = false;
                    this._pickDrawLineInited = false;
                    this.pickUIName = "";
                    this.pickUIComponents = "";
                    this.pickUIPath = "";
                    this.pickUIPos = "";
                    this.pickUIPivot = "";
                    this.pickUILayout = "";
                    this.pickUILayoutPerc = "";
                    this._audioTypeID = "1000";
                    this._audioVolume = 1;
                    this._playerCamTile = 0;
                    this._playerCamPan = 0;
                    this._playerCamDistance = 0;
                    this.obstacleName = "";
                    this.isRayHitMesh = true;
                    this.isRayHitMakePoint = true;
                    this.rayHitLayer = -1;
                    this.rayHitTranName = "";
                    this.rayHitTranLayer = "";
                    this.rayHitTranGlobalPath = "";
                    this.rayHitPosition = "";
                    this._sceneVisible = true;
                    this._roleVisible = true;
                    this._effectVisible = true;
                    this._rockerTouchEnable = true;
                    // for (let key in CGID) {
                    //     if (!isNaN(Number(key))) { continue; }
                    //     this.guideTypeKMap[key] = Number(CGID[key]);
                    // }
                    FrameMgr_8.FrameMgr.Add(this.update, this);
                    LateUpdateMgr_4.LateUpdateMgr.Add(this.lateUpdate, this);
                }
                Object.defineProperty(SetContent.prototype, "EffSecal", {
                    get: function () { return this._effScale; },
                    set: function (v) { this._effScale = v; this.refreashEffectScale(); },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "Offset_X", {
                    get: function () { return this._roleOffset.x; },
                    set: function (v) { this._roleOffset.x = v; this.refreashRoleOffset(); },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "Offset_Y", {
                    get: function () { return this._roleOffset.y; },
                    set: function (v) { this._roleOffset.y = v; this.refreashRoleOffset(); },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "Offset_Z", {
                    get: function () { return this._roleOffset.z; },
                    set: function (v) { this._roleOffset.z = v; this.refreashRoleOffset(); },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "EffPos_X", {
                    get: function () { return this._effPos.x; },
                    set: function (v) { this._effPos.x = v; this.refreashEffectPos(); },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "EffPos_Y", {
                    get: function () { return this._effPos.y; },
                    set: function (v) { this._effPos.y = v; this.refreashEffectPos(); },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "EffPos_Z", {
                    get: function () { return this._effPos.z; },
                    set: function (v) { this._effPos.z = v; this.refreashEffectPos(); },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "EffEuler_X", {
                    get: function () { return this._effEuler.x; },
                    set: function (v) { this._effEuler.x = v; this.refreashEffectEuler(); },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "EffEuler_Y", {
                    get: function () { return this._effEuler.y; },
                    set: function (v) { this._effEuler.y = v; this.refreashEffectEuler(); },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "EffEuler_Z", {
                    get: function () { return this._effEuler.z; },
                    set: function (v) { this._effEuler.z = v; this.refreashEffectEuler(); },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "battleSpeed", {
                    get: function () { return this._battleSpeed; },
                    set: function (v) {
                        this._battleSpeed = v;
                        TimeUtil_5.TimeUtil.timeScale = v;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "testUI", {
                    // private set showRoomEuler(v) { this._showRoomEuler = v; this.refreashShowRoompaltformEuler(); }
                    // private get showRoomEuler() { return this._showRoomEuler; }
                    get: function () {
                        if (!this._testUI) {
                            var imgTran = m4m.framework.TransformUtil.Create2DPrimitive(m4m.framework.Primitive2DType.Image2D, m4m.framework.sceneMgr.app);
                            imgTran.width = imgTran.height = 200;
                            imgTran.pivot = new m4m.math.vector2(0.5, 0.5);
                            var img = imgTran.getComponent("image2D");
                            img.color = new m4m.math.color(1, 1, 1, 0.4);
                            //text
                            var textTran = new m4m.framework.transform2D();
                            var opt = m4m.framework.layoutOption;
                            textTran.layoutState = opt.H_CENTER | opt.V_CENTER;
                            imgTran.addChild(textTran);
                            textTran.width = textTran.height = 200;
                            var textLab = textTran.addComponent("label");
                            textLab["_fontName"] = "defFont.font.json";
                            textLab.horizontalType = m4m.framework.HorizontalType.Center;
                            textLab.horizontalOverflow = true;
                            textLab.fontsize = 30;
                            textLab.text = "\u6D4B\u8BD5 UI \n \u951A\u70B9\u5728\u4E2D\u95F4";
                            UiManager_6.UiManager.overlay.canvas.addChild(imgTran);
                            //leaper add
                            this._testUI = imgTran.addComponent("uiRenderLeaper");
                        }
                        return this._testUI;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "UICanvas", {
                    // public get guideTypeID() { return this._guideTypeID; }
                    // public set guideTypeID(val) {
                    //     if (isNaN(Number(val))) {
                    //         this._guideTypeID = "";
                    //         return;
                    //     }
                    //     this._guideTypeID = val;
                    // }
                    // public get guideType() { return this._guideType; }
                    // public set guideType(val) {
                    //     this._guideType = val;
                    //     this.guideTypeID = val.toString();
                    // }
                    get: function () {
                        if (!this._canvas) {
                            var uiLay = this.OverLay2D;
                            if (uiLay) {
                                this._canvas = uiLay.canvas;
                            }
                        }
                        return this._canvas;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "OverLay2D", {
                    get: function () {
                        if (!this._overLay2d) {
                            var lays = m4m.framework.sceneMgr.scene.mainCamera.getOverLays();
                            var uiLay = void 0;
                            for (var i = 0, len = lays.length; i < len; i++) {
                                if (lays[i] instanceof (m4m.framework.overlay2D)) {
                                    uiLay = lays[i];
                                    break;
                                }
                            }
                            this._overLay2d = uiLay;
                        }
                        return this._overLay2d;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "playerCamFOV", {
                    get: function () {
                        return this._playerCamFOV;
                    },
                    set: function (val) {
                        this._playerCamFOV = val;
                        var cam = m4m.framework.sceneMgr.scene.mainCamera;
                        if (!cam) {
                            return;
                        }
                        cam.fov = val * commTool_8.commTool.toRadian;
                    },
                    enumerable: false,
                    configurable: true
                });
                ;
                Object.defineProperty(SetContent.prototype, "audioTypeID", {
                    get: function () { return this._audioTypeID; },
                    set: function (val) {
                        if (isNaN(Number(val))) {
                            return;
                        }
                        this._audioTypeID = val;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "audioVolume", {
                    get: function () { return this._audioVolume; },
                    set: function (val) {
                        AudioPlayer_8.AudioPlayer.setVolume(Number(this.audioTypeID), val);
                        this._audioVolume = val;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "isEffOverUI", {
                    // public get guideTypeID() { return this._guideTypeID; }
                    // public set guideTypeID(val) {
                    //     if (isNaN(Number(val))) {
                    //         this._guideTypeID = "";
                    //         return;
                    //     }
                    //     this._guideTypeID = val;
                    // }
                    // public get guideType() { return this._guideType; }
                    // public set guideType(val) {
                    //     this._guideType = val;
                    //     this.guideTypeID = val.toString();
                    // }
                    get: function () {
                        return this._isEffOverUI;
                    },
                    set: function (val) {
                        this._isEffOverUI = val;
                        val ? DatGUITool.effOverUIFolder.open() : DatGUITool.effOverUIFolder.close();
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "pickUIVisiable", {
                    get: function () {
                        if (!this._currPickedUI) {
                            return false;
                        }
                        return this._currPickedUI.visible;
                    },
                    set: function (val) {
                        if (!this._currPickedUI) {
                            return;
                        }
                        this._currPickedUI.visible = val;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "pickModelVisiable", {
                    get: function () {
                        if (!this._currPickedModel) {
                            return false;
                        }
                        return this._currPickedModel.gameObject.visible;
                    },
                    set: function (val) {
                        if (!this._currPickedModel) {
                            return;
                        }
                        this._currPickedModel.gameObject.visible = val;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "enableDebugDraw", {
                    get: function () { return this._enableDebugDraw; },
                    set: function (enable) {
                        if (this._enableDebugDraw == enable) {
                            return;
                        }
                        this._enableDebugDraw = enable;
                        enable ? this.doEnableDrawLine() : this.doDisableDrawLine();
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "enablePickUI", {
                    get: function () { return this._enablePickUI; },
                    set: function (enable) {
                        if (this._enablePickUI == enable) {
                            return;
                        }
                        this._enablePickUI = enable;
                        enable ? this.doEnablePickUI() : this.doDisablePickUI();
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "enableRayHitScene", {
                    get: function () { return this._enableRayHitScene; },
                    set: function (enable) {
                        if (this._enableRayHitScene == enable) {
                            return;
                        }
                        this._enableRayHitScene = enable;
                        enable ? this.doEnableRayHit() : this.doDisableRayHit();
                    },
                    enumerable: false,
                    configurable: true
                });
                SetContent.prototype.update = function (dt) {
                    if (this._DrawLineInited) {
                        DebugLineTool2d_3.DebugLineTool2d.update();
                        if (this._pickDrawLineInited) {
                            var _t = this._currPickedUI;
                            if (_t) {
                                var tWpos = _t.getWorldTranslate();
                                var tp = _t.pivot;
                                DebugLineTool2d_3.DebugLineTool2d.drawRect(tWpos.x - (tp.x * _t.width), tWpos.y - (tp.y * _t.height), _t.width, _t.height, 5, 1, 0.8);
                            }
                        }
                    }
                };
                SetContent.prototype.lateUpdate = function (dt) {
                };
                SetContent.prototype.drawLineInit = function () {
                    if (this._DrawLineInited) {
                        return;
                    }
                    var lay2d = this.OverLay2D;
                    var lineRoot = this._lineRoot = new m4m.framework.transform2D();
                    lineRoot.name = "drawLineRoot";
                    var opt = m4m.framework.layoutOption;
                    lineRoot.layoutState = opt.BOTTOM | opt.LEFT | opt.RIGHT | opt.TOP;
                    lay2d.canvas.addChild(lineRoot);
                    DebugLineTool2d_3.DebugLineTool2d.init(lineRoot);
                    this._DrawLineInited = true;
                };
                SetContent.prototype.pickUIDrawLineInit = function () {
                    if (this._pickDrawLineInited) {
                        return;
                    }
                    this.drawLineInit();
                    var lay2d = this.OverLay2D;
                    var opt = m4m.framework.layoutOption;
                    var p = this._pickLineRoot = new m4m.framework.transform2D();
                    p.layoutState = opt.BOTTOM | opt.LEFT | opt.RIGHT | opt.TOP;
                    lay2d.canvas.addChild(p);
                    commTool_8.commTool.makeUIEventDiscard(p);
                    this._pickDrawLineInited = true;
                };
                SetContent.prototype.switchFPS = function () {
                    if (this.isshowFps) {
                        m4m.framework.sceneMgr.app.closeFps();
                    }
                    else {
                        m4m.framework.sceneMgr.app.showFps();
                    }
                    this.isshowFps = !this.isshowFps;
                };
                SetContent.prototype.switchLOG = function () {
                    if (this.isshowLog) {
                        this.closeLOG();
                    }
                    else {
                        this.showLOG();
                    }
                    this.isshowLog = !this.isshowLog;
                };
                SetContent.prototype.closeLOG = function () {
                    this.world2D.transform.visible = false;
                };
                SetContent.prototype.showLOG = function () {
                    if (!this.world2D) {
                        this.world2D = new m4m.framework.transform2D();
                        var g_this = this;
                        this.TextUI = this.world2D.addComponent("label");
                        this.world2D.transform.width = 1000;
                        this.world2D.transform.height = 1000;
                        this.TextUI.transform.width = 700;
                        this.TextUI.transform.width = 700;
                        this.TextUI.fontsize = 24;
                        this.world2D.transform.localTranslate = new m4m.math.vector2(100, -300);
                        console.error = function () {
                            try {
                                var str = "";
                                for (var i = 0; i < arguments.length; i++) {
                                    var item = arguments[i];
                                    str += g_this.stringify(item) + ", ";
                                }
                                // console.error(str);
                                g_this.TextUI.text += "\n" + str;
                            }
                            catch (e) {
                                console.error("console.error()函数解析对象出现异常: ");
                            }
                        };
                        console.error("href", window.location.href);
                        console.error("search", window.location.search);
                        console.error("hash", window.location.hash);
                        metaUIManager_4.metaUIManager.ActiveSelf.poplayer.addChild(this.world2D);
                    }
                    else {
                        this.world2D.transform.visible = true;
                    }
                };
                /**
                 * 序列化对象, 注意, 序列化的结果不是json字符串
                 * @param obj 对象
                 * @param level 最大序列化层级, 默认1级
                 * @param maxLen 限制字符串最大长度, 无限制则设置为-1
                 */
                SetContent.prototype.stringify = function (obj, level, maxLen, append) {
                    if (level === void 0) { level = 3; }
                    if (maxLen === void 0) { maxLen = 5000; }
                    if (append === void 0) { append = ""; }
                    if (obj === null) {
                        return "null";
                    }
                    var type = typeof obj;
                    if (type == "string") {
                        return '"' + obj + '"';
                    }
                    else if (type == "undefined") {
                        return "undefined";
                    }
                    else if (type == "bigint" || type == "boolean" || type == "number" || type == "symbol") {
                        return obj;
                    }
                    else if (type == "function") {
                        return "function() { [code] }";
                    }
                    if (level == 0) {
                        return "[object: Object]";
                    }
                    var str = "";
                    var isArr = Array.isArray(obj);
                    if (isArr) {
                        str += "[\n";
                        for (var _i = 0, obj_1 = obj; _i < obj_1.length; _i++) {
                            var item = obj_1[_i];
                            if (maxLen > -1 && str.length > maxLen) {
                                return str + "\n对象数据太大了.....";
                            }
                            str += append + "    " + this.stringify(item, level - 1, maxLen, append + "    ") + ",\n";
                        }
                        str += append + "]";
                    }
                    else {
                        str += "{\n";
                        for (var key in obj) {
                            if (maxLen > -1 && str.length > maxLen) {
                                return str + "\n对象数据太大了.....";
                            }
                            var item = obj[key];
                            str += append + '    "' + key + '": ' + this.stringify(item, level - 1, maxLen, append + "    ") + ",\n";
                        }
                        str += append + "}";
                    }
                    return str;
                };
                SetContent.prototype.switchDrawCall = function () {
                    if (this.isshowDrawCall) {
                        m4m.framework.sceneMgr.app.closeDrawCall();
                    }
                    else {
                        m4m.framework.sceneMgr.app.showDrawCall();
                    }
                    this.isshowDrawCall = !this.isshowDrawCall;
                };
                SetContent.prototype.showScene = function () {
                    //关闭 上一个场景
                    var _sceneHideEvent = new sceneHideEvent_3.SceneHideEvent();
                    _sceneHideEvent.sceneID = this.lastShowSceneId;
                    _sceneHideEvent.dispose = true;
                    eventMgr_16.EventMgr.dispatchEvent("scene_hide", _sceneHideEvent);
                    //显示目标场景
                    var sceneShowEvent = new sceneShowEvent_3.SceneShowEvent();
                    sceneShowEvent.sceneID = this.sceneId;
                    this.lastShowSceneId = this.sceneId;
                    eventMgr_16.EventMgr.dispatchEvent("scene_show", sceneShowEvent);
                };
                SetContent.prototype.showObstacle = function () {
                    SceneObstacleMgr_4.SceneObstacleMgr.show(this.obstacleName);
                };
                SetContent.prototype.getSlotRoleIDS = function () {
                    var result = [];
                    //显示目标场景
                    var _sIds = JSON.parse("[".concat(this.slotIDs, "]"));
                    var _trIds = JSON.parse("[".concat(this.roleIDs, "]"));
                    var _trIdLen = _trIds.length;
                    if (_trIdLen < 1) {
                        _trIds.push(1);
                        _trIdLen = 1;
                    }
                    _sIds.forEach(function (v, i) {
                        var realRID = _trIds[i % _trIdLen];
                        result.push([v, realRID]);
                    });
                    return result;
                };
                SetContent.prototype.showRole = function () {
                    // //关闭 上一个
                    this.clearRole();
                    // //显示目标场景
                    // let battleRoleInitEvent = new RoleBattleInitEvent();
                    // let arr = this.getSlotRoleIDS();
                    // arr.forEach((v) => {
                    //     battleRoleInitEvent.battleRoleIDMap[v[0]] = v[1];
                    // });
                    // EventMgr.dispatchEvent("battle_role_init", battleRoleInitEvent);
                    // //头像显示打卡
                    // let ev = new EventBase();
                    // ev.data = true;
                    // EventMgr.dispatchEvent("battle_role_top_visibale", ev);
                };
                SetContent.prototype.clearRole = function () {
                    // EventMgr.dispatchEvent("battle_role_clear", new EventBase());
                };
                SetContent.prototype.refreashRoleOffset = function () {
                    StageMgr_16.StageMgr.roleRoot.localPosition = this._roleOffset;
                };
                SetContent.prototype.refreashEffectPos = function () {
                    var p = this.getEffectContainer();
                    p.localPosition = this._effPos;
                };
                SetContent.prototype.refreashEffectScale = function () {
                    var p = this.getEffectContainer();
                    m4m.math.vec3SetAll(p.localScale, this._effScale);
                    p.localScale = p.localScale;
                };
                SetContent.prototype.refreashEffectEuler = function () {
                    var q = SetContent.helpQuat;
                    var e = this._effEuler;
                    m4m.math.quatFromEulerAngles(e.x, e.y, e.z, q);
                    var p = this.getEffectContainer();
                    p.localRotate = q;
                };
                SetContent.prototype.getEffectContainer = function () {
                    if (!this._effectContainer) {
                        this._effectContainer = parallelEngineTool_2.getSpTransform(new m4m.framework.transform());
                        this._effectContainer.name = "_effectContainer";
                        parallelEngineTool_2.getSpTransform(m4m.framework.sceneMgr.scene.getRoot())
                            .addChild(this._effectContainer);
                    }
                    return this._effectContainer;
                };
                SetContent.prototype.showEffect = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var p, _a, uiPos, v3Pos, v3Euler, _b;
                        var _this = this;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    //清理历史
                                    this.clearEffect();
                                    this.refreashEffectEuler();
                                    if (!!this._isEffOverUI) return [3 /*break*/, 2];
                                    this.refreashEffectPos();
                                    this.refreashEffectScale();
                                    p = this.getEffectContainer();
                                    m4m.math.vec3SetAll(SetContent.helpV3, 0);
                                    _a = this;
                                    return [4 /*yield*/, EffectMgr_3.EffectMgr.setPlay(this.effectName, SetContent.helpV3, 1, null, p)];
                                case 1:
                                    _a.lastEffId = _c.sent();
                                    return [3 /*break*/, 4];
                                case 2:
                                    uiPos = SetContent.helpV2;
                                    v3Pos = SetContent.helpV3;
                                    v3Euler = SetContent.helpV3v1;
                                    m4m.math.vec3Set(v3Euler, this.EffEuler_X, this.EffEuler_Y, this.EffEuler_Z);
                                    m4m.math.vec2Set(uiPos, this.EffUIPosX, this.EffUIPosY);
                                    Over3dModelMgr_1.Over3dModelMgr.get3dPos(uiPos, v3Pos);
                                    //UI 上显示特效
                                    _b = this;
                                    return [4 /*yield*/, EffectMgr_3.EffectMgr.setPlay(this.effectName, v3Pos, this.EffSecal, v3Euler)];
                                case 3:
                                    //UI 上显示特效
                                    _b.lastEffId = _c.sent();
                                    //设置layer ，跳转到第二个相机去渲染
                                    EffectMgr_3.EffectMgr.effectLayerChange(this.lastEffId, GameLogic_4.GameLogic.layerIndexOverUI3d);
                                    _c.label = 4;
                                case 4:
                                    if (this.playEndRemove) {
                                        EffectMgr_3.EffectMgr.onPlayEndRemove(this.lastEffId, function () { alert("\u7279\u6548 \uFF1A".concat(_this.effectName, " \u64AD\u653E\u5B8C\u6BD5\uFF01")); });
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                SetContent.prototype.clearEffect = function () {
                    //清理改回 默认层级
                    EffectMgr_3.EffectMgr.effectLayerChange(this.lastEffId, GameLogic_4.GameLogic.layerIndexDefault);
                    EffectMgr_3.EffectMgr.setStop(this.lastEffId);
                };
                SetContent.prototype.showUI = function () {
                    if (this.lastUIName == this.UIName) {
                        return;
                    }
                    //清理历史
                    this.hideUI();
                    //
                    if (!this._isShowUIByEvent) {
                        UiManager_6.UiManager.showUi(this.UIName);
                    }
                    else {
                        var eventStr = "UI_".concat(this.UIName, "_Show");
                        eventMgr_16.EventMgr.dispatchEvent(eventStr, null);
                    }
                    this.lastUIName = this.UIName;
                };
                SetContent.prototype.hideUI = function () {
                    if (!this.lastUIName) {
                        return;
                    }
                    if (!this._isShowUIByEvent) {
                        UiManager_6.UiManager.hideUi(this.UIName);
                    }
                    else {
                        var eventStr = "UI_".concat(this.lastUIName, "_Hide");
                        eventMgr_16.EventMgr.dispatchEvent(eventStr, null);
                    }
                    this.lastUIName = "";
                };
                // public prepareAttach() {
                //     this.SlotRoleEventAct("prepare_role_attach");
                // }
                // public prepareRemove() {
                //     this.SlotRoleEventAct("prepare_role_remove");
                // }
                // public prepareOver() {
                //     this.SlotRoleEventAct("prepare_role_over");
                // }
                // /**
                //  * 方便 派发slotRoleEvent
                //  * @param evStr 
                //  * @param maxLen 
                //  * @param data 
                //  */
                // public SlotRoleEventAct(evStr: string, maxLen = 6, data?) {
                //     let _ev = new SlotRoleEvent();
                //     if (data) {
                //         _ev.data = data;
                //     }
                //     let arr = this.getSlotRoleIDS();
                //     arr.length = arr.length > maxLen ? maxLen : arr.length;
                //     arr.forEach((v) => {
                //         _ev.slotId = v[0];
                //         _ev.roleId = v[1];
                //         EventMgr.dispatchEvent(evStr as any, _ev);
                //     });
                // }
                // public prepareClear() {
                //     EventMgr.dispatchEvent("prepare_role_clear", new EventBase());
                // }
                // public playAnim() {
                //     this.SlotRoleEventAct("battle_role_playAnim", 13, this.animStateName);
                // }
                // public showRoomAttach() {
                //     this.SlotRoleEventAct("showRoom_role_attach", 10);
                //     this.tryMakeThouchRotate();
                // }
                // /** 构建一个 角色旋转 全屏触控板 */
                // public tryMakeThouchRotate() {
                //     if (this._makeThouched) { return; }
                //     this._makeThouched = true;
                //     // let root = UiManager.overlay.canvas.getRoot();
                //     let root = this.UICanvas.getRoot();
                //     let touchPadTran = new m4m.framework.transform2D();
                //     touchPadTran.name = `test_fillTouchPadTran`;
                //     touchPadTran.width = 500; touchPadTran.height = 500;
                //     let lop = m4m.framework.layoutOption;
                //     touchPadTran.layoutState = lop.LEFT | lop.V_CENTER;
                //     let img = touchPadTran.addComponent("image2D") as m4m.framework.image2D;
                //     img.sprite = m4m.framework.sceneMgr.app.getAssetMgr()
                //         .getDefaultSprite("white_sprite");
                //     img.color = new m4m.math.color(1, 1, 1, 0.3);
                //     root.addChild(touchPadTran);
                //     let tPad = touchPadTran.addComponent("touchPad") as touchPad;
                //     //监听输出
                //     let starEuler = 165;
                //     this.showRoomEuler = starEuler;
                //     let rotSpeed = 3;
                //     tPad.onValueChange = (x, y) => {
                //         this.showRoomEuler = starEuler - x * rotSpeed;
                //     };
                // }
                // public showRoomClear() {
                //     EventMgr.dispatchEvent("showRoom_role_clear", new EventBase());
                // }
                // public refreashShowRoompaltformEuler() {
                //     this.SlotRoleEventAct("showRoom_role_euler", 1, this._showRoomEuler);
                // }
                SetContent.prototype.testAnimEvent = function () {
                    RoleMgr_8.RoleMgr["testAnimEvent"]();
                };
                SetContent.prototype.openVconsole = function () {
                    if (window["eruda"]) {
                        window["eruda"].init();
                    }
                };
                SetContent.prototype.testCutUIView = function () {
                    //new  一个R树
                    var _rtree = new rtree_1.RTree(1000000);
                    var _canvas = this.UICanvas;
                    var _uiRoot = _canvas.getRoot();
                    var _color = new m4m.math.color(0.5, 0.5, 0.5, 0.3);
                    var _color1 = new m4m.math.color(1, 1, 1, 1);
                    var transIdxArr = [];
                    //遍历 所有UI
                    //构建树 
                    commTool_8.commTool.forEachTransform2DTree(_uiRoot, function (t) {
                        if (t.renderer) {
                            var _idx = transIdxArr.length;
                            transIdxArr.push(t);
                            t.renderer.color = _color;
                            //插入 数据到 树
                            var wpos = t.getWorldTranslate();
                            var w = t.width;
                            var h = t.height;
                            var x = wpos.x - w * t.pivot.x;
                            var y = wpos.y - h * t.pivot.y;
                            _rtree.insert(new m4m.math.rect(x, y, w, h), _idx);
                        }
                    });
                    var arr = [];
                    var idx = _rtree.searchExtend(new m4m.math.rect(0, 0, _canvas.pixelWidth, _canvas.pixelHeight), arr);
                    arr.forEach(function (i) {
                        var t = transIdxArr[i];
                        if (t.renderer) {
                            t.renderer.color = _color1;
                        }
                    });
                    //属性
                    _uiRoot.markDirty();
                    _uiRoot.updateTran(true);
                };
                // public pubDoorShow() {
                //     let colorType = Math.floor(Math.random() * 3);
                //     let ev = new EventBase(colorType);
                //     EventMgr.dispatchEvent("perform_pubDoorShow_start", ev);
                // }
                // public summonMeteorShow() {
                //     let colorType = Math.floor(Math.random() * 3);
                //     let ev = new ArrayTypeEvent<number>(colorType);
                //     for (let i = 0; i < 10; i++) {
                //         ev.array[i] = Math.floor(Math.random() * 3);
                //     }
                //     EventMgr.dispatchEvent("perform_summonMeteorShow_start", ev);
                // }
                // public aboveUiAttach() {
                //     this.SlotRoleEventAct("aboveUI_role_attach", 1);
                //     //设置位置
                //     let ev = new EventGeneric<{ slotId: number; uiPos: m4m.math.vector2; roleScale?: number; roleRotate?: m4m.math.quaternion; }>();
                //     ev.data = {
                //         slotId: 1,
                //         uiPos: new m4m.math.vector2(this.aboveUiPosX, this.aboveUiPosY),
                //         roleScale: this.aboveScale,
                //     };
                //     EventMgr.dispatchEvent("aboveUI_role_transform", ev);
                //     //test ui
                //     let uiTran = this.testUI.transform;
                //     m4m.math.vec2Clone(ev.data.uiPos, uiTran.localTranslate);
                //     uiTran.markDirty();
                //     this.testUI.swLeapDisplay(true);
                // }
                // public aboveUiClear() {
                //     EventMgr.dispatchEvent("aboveUI_role_clear", new EventBase());
                // }
                SetContent.prototype.Over3dUIAdd = function () {
                    var scene = m4m.framework.sceneMgr.scene;
                    var root = scene.getRoot();
                    var model = m4m.framework.TransformUtil.CreatePrimitive(m4m.framework.PrimitiveType.Cube, scene.app);
                    var uiPos = SetContent.helpV2;
                    m4m.math.vec2Set(uiPos, this.aboveUiPosX, this.aboveUiPosY);
                    var spTran = parallelEngineTool_2.getSpTransform(model);
                    parallelEngineTool_2.getSpTransform(root)
                        .addChild(spTran);
                    Over3dModelMgr_1.Over3dModelMgr.setModelToUI(spTran);
                    var v3Pos = SetContent.helpV3;
                    Over3dModelMgr_1.Over3dModelMgr.get3dPos(uiPos, v3Pos);
                    spTran.setWorldPosition(v3Pos);
                    //tranform 修改
                    m4m.math.vec3SetAll(model.localScale, 1);
                    var Rfun = Math.random;
                    model.localEulerAngles = new m4m.math.vector3(Rfun() * 360, Rfun() * 360, Rfun() * 360);
                    this.Over3dList.push(spTran);
                };
                SetContent.prototype.Over3dUIRemove = function () {
                    this.Over3dList.forEach(function (v) {
                        Over3dModelMgr_1.Over3dModelMgr.recoveryModel(v);
                        v.getParent()
                            .removeChild(v);
                    });
                    this.Over3dList.length = 0;
                };
                // public doAdjustUI() {
                //     let ev = new EventGeneric<{ slotId: number; uiPos: m4m.math.vector2; }>();
                //     ev.data = {
                //         slotId: 1,
                //         uiPos: new m4m.math.vector2(this.aboveUiPosX, this.aboveUiPosY),
                //     };
                //     let uiTran = this.testUI.transform;
                //     this.testUI.swLeapDisplay(false);
                //     m4m.math.vec2Clone(ev.data.uiPos, uiTran.localTranslate);
                //     uiTran.markDirty();
                //     EventMgr.dispatchEvent("showRoom_scene_adjustUI", ev);
                // }
                SetContent.prototype.UIShaderChange = function () {
                    var _this = this;
                    var _canvas = this.UICanvas;
                    var _uiRoot = _canvas.getRoot();
                    //遍历 所有UI
                    //构建树 
                    // let realSName = `${this.UIShaderName}.shader.json`;
                    var realSName = "".concat(this.UIShaderName);
                    var assetMgr = m4m.framework.sceneMgr.app.getAssetMgr();
                    commTool_8.commTool.forEachTransform2DTree(_uiRoot, function (t) {
                        // let a: m4m.framework.image2D;
                        var r = t.renderer;
                        if (r && !_this.onlyLabel || r instanceof (m4m.framework.label)) {
                            commTool_8.commTool.setUIShader(realSName, r, _this.forceNewMaterial);
                        }
                    });
                };
                SetContent.prototype.addUIPolygonPoint = function () {
                    var point;
                    try {
                        point = JSON.parse(this.uiPolygonPoint);
                    }
                    catch (err) {
                        alert("\u70B9 \u6570\u636E\u683C\u5F0F\u4E0D\u6B63\u786E , \u9700\u8981\u4E00\u4E2A\u957F\u5EA6\u4E3A2 \u7684\u500D\u6570\u7684json\u6570\u7EC4\u3002");
                        return;
                    }
                    //过滤 输入的数据
                    var count = Math.floor(point.length / 2);
                    point.length = count * 2;
                    //调整 testUI 的位置
                    var ui = this.testUI;
                    m4m.math.vec2Set(ui.transform.localTranslate, this.aboveUiPosX, this.aboveUiPosY);
                    m4m.math.vec2Set(ui.transform.localScale, this.aboveScale, this.aboveScale);
                    ui.transform.markDirty();
                    //获取 uiPolygon
                    var uiPol = ui.transform.getFirstComponentInChildren("uiPolygon");
                    if (!uiPol) { //添加一个 uiPolygon 组件
                        var opt = m4m.framework.layoutOption;
                        var uiPolTrans = new m4m.framework.transform2D();
                        ui.transform.addChild(uiPolTrans);
                        uiPolTrans.layoutState = opt.LEFT | opt.RIGHT | opt.TOP | opt.BOTTOM;
                        uiPol = uiPolTrans.transform.addComponent("uiPolygon");
                    }
                    //uiPolygon 改颜色
                    uiPol.color = new m4m.math.color(0, 1, 0.5, 0.5);
                    var v2 = SetContent.helpV2;
                    for (var i = 0; i < count; i++) {
                        var m = (i * 2);
                        m4m.math.vec2Set(v2, point[m + 0], point[m + 1]);
                        //添加点 数据（少于3 个点不渲染）
                        uiPol.addPoint(v2);
                    }
                };
                SetContent.prototype.clearUIPolygonPoint = function () {
                    var ui = this.testUI;
                    var tran = ui.transform;
                    var uiPol = tran.getFirstComponentInChildren("uiPolygon");
                    if (!uiPol) {
                        return;
                    }
                    //清理 所有点
                    uiPol.clearPoint();
                };
                // public addGuide() {
                //     let ev = new EventGeneric<number>(Number(this.guideTypeID));
                //     EventMgr.dispatchEvent("guide_run", ev);
                // }
                SetContent.prototype.doEnableDrawLine = function () {
                    this.drawLineInit();
                    this._lineRoot.visible = true;
                    GameMgr_17.GameMgr.Draw2dDebug = true;
                };
                SetContent.prototype.doDisableDrawLine = function () {
                    if (this._lineRoot) {
                        this._lineRoot.visible = false;
                    }
                    GameMgr_17.GameMgr.Draw2dDebug = false;
                };
                //开启 拣选 UI
                SetContent.prototype.doEnablePickUI = function () {
                    this.pickUIDrawLineInit();
                    this._pickLineRoot.visible = true;
                    DatGUITool.uiPickFolder.open();
                    //监听点击
                    var ipt = m4m.framework.sceneMgr.app.getInputMgr();
                    ipt.addPointListener(m4m.event.PointEventEnum.PointDown, this.onPickUIclick, this);
                };
                //关闭 拣选UI
                SetContent.prototype.doDisablePickUI = function () {
                    if (this._pickLineRoot) {
                        this._pickLineRoot.visible = false;
                    }
                    DatGUITool.uiPickFolder.close();
                    var ipt = m4m.framework.sceneMgr.app.getInputMgr();
                    ipt.removePointListener(m4m.event.PointEventEnum.PointDown, this.onPickUIclick, this);
                };
                //开启 RayHit
                SetContent.prototype.doEnableRayHit = function () {
                    if (!this._rayHitRoot) {
                        this._rayHitRoot = (new m4m.framework.transform()).gameObject;
                        this._rayHitRoot.transform.name = "_rayHitRoot";
                        //不接受射线
                        this._rayHitRoot.layer = m4m.framework.cullingmaskutil.maskTolayer(m4m.framework.CullingMask.IgnoreRaycast);
                        var scene = m4m.framework.sceneMgr.scene;
                        scene.addChild(this._rayHitRoot.transform);
                    }
                    this._rayHitRoot.visible = true;
                    DatGUITool.rayHitSceneFolder.open();
                    //监听点击
                    var ipt = m4m.framework.sceneMgr.app.getInputMgr();
                    ipt.addPointListener(m4m.event.PointEventEnum.PointDown, this.onRayHit, this);
                };
                //关闭 RayHit
                SetContent.prototype.doDisableRayHit = function () {
                    this._rayHitRoot.visible = false;
                    DatGUITool.rayHitSceneFolder.close();
                    var ipt = m4m.framework.sceneMgr.app.getInputMgr();
                    ipt.removePointListener(m4m.event.PointEventEnum.PointDown, this.onRayHit, this);
                };
                //射线碰撞场景
                SetContent.prototype.onRayHit = function (_a) {
                    var x = _a[0], y = _a[1];
                    console.error("onRayHit : ".concat(x, " , ").concat(y, " "));
                    //场景 中发射 射线
                    var s = m4m.framework.sceneMgr.scene;
                    var mainCam = s.mainCamera;
                    var sPos = SetContent.helpV2;
                    m4m.math.vec2Set(sPos, x, y);
                    var ray = mainCam.creatRayByScreen(sPos, s.app);
                    var pickInfo = SetContent.helpPickInfo;
                    var lMask = m4m.framework.CullingMask.everything;
                    if (!isNaN(this.rayHitLayer) && this.rayHitLayer != -1) {
                        var rl = this.rayHitLayer;
                        rl = rl < 0 ? 0 : rl > 31 ? 31 : rl;
                        lMask = m4m.framework.cullingmaskutil.layerToMask(rl);
                    }
                    lMask = lMask ^ m4m.framework.CullingMask.IgnoreRaycast;
                    var ishited = s.pick(ray, pickInfo, this.isRayHitMesh, s.getRoot(), lMask);
                    this.rayHitTranName = "";
                    this.rayHitTranLayer = "";
                    this.rayHitTranGlobalPath = "";
                    this.rayHitPosition = "";
                    this._currPickedModel = null;
                    if (ishited) {
                        this._currPickedModel = pickInfo.pickedtran;
                        this.rayHitTranName = pickInfo.pickedtran.name;
                        this.rayHitTranLayer = "".concat(pickInfo.pickedtran.gameObject.layer);
                        this.rayHitTranGlobalPath = "".concat(commTool_8.commTool.get3DPathStr(pickInfo.pickedtran));
                        var hitPos = SetContent.helpV3;
                        m4m.math.vec3Clone(pickInfo.hitposition, hitPos);
                        m4m.math.vec3Set(hitPos, Math.abs(hitPos.x) < 0.001 ? 0 : hitPos.x, Math.abs(hitPos.y) < 0.001 ? 0 : hitPos.y, Math.abs(hitPos.z) < 0.001 ? 0 : hitPos.z);
                        this.rayHitPosition = "".concat(hitPos.x.toFixed(2), ",").concat(hitPos.y.toFixed(2), ",").concat(hitPos.z.toFixed(2));
                        if (this.isRayHitMakePoint) {
                            var sphere = m4m.framework.TransformUtil.CreatePrimitive(m4m.framework.PrimitiveType.Sphere, s.app);
                            sphere.gameObject.layer = this._rayHitRoot.layer;
                            var sNum = 0.1;
                            sphere.localScale = new m4m.math.vector3(sNum, sNum, sNum);
                            this._rayHitRoot.transform.addChild(sphere);
                            sphere.localPosition = pickInfo.hitposition;
                        }
                    }
                };
                SetContent.prototype.onPickUIclick = function (_a) {
                    var _this = this;
                    var x = _a[0], y = _a[1];
                    this.pickUIName = "";
                    this.pickUIPath = "";
                    this.pickUIComponents = "";
                    this._currPickedUI = null;
                    var lay2d = this.OverLay2D;
                    //转换成 UI 坐标
                    var sPos = SetContent.helpV2;
                    m4m.math.vec2Set(sPos, x, y);
                    var mPos = SetContent.helpV2v1;
                    lay2d.calScreenPosToModelPos(sPos, mPos);
                    // commTool.screenPosToUIpos();
                    //遍历 所有
                    var canvas = this.UICanvas;
                    var uiRoot = canvas.getRoot();
                    var target;
                    var firstTrans;
                    var contnuIdx = 0;
                    commTool_8.commTool.forEachTransform2DTree(uiRoot, function (val) {
                        if (val.visible && val != _this._pickLineRoot) {
                            //匹配点击区域
                            var b = val.ContainsCanvasPoint(mPos);
                            if (b) {
                                console.log(val.name);
                                var lastID = _this._pickUIContinuity[contnuIdx];
                                var currID = val.insId.getInsID();
                                if (lastID == null || lastID != currID) {
                                    _this._pickUIContinuity[contnuIdx] = currID;
                                    _this._pickUIContinuity.length = contnuIdx + 1;
                                    target = val;
                                    return true; //中断 遍历
                                }
                                contnuIdx++;
                                if (!firstTrans) {
                                    firstTrans = val;
                                }
                            }
                        }
                    });
                    if (!firstTrans) {
                        console.warn(" \u6CA1\u6709\u83B7\u53D6\u5230\u4EFB\u4F55\u4E00\u4E2A ui \u8282\u70B9");
                        return;
                    }
                    if (!target) {
                        //切换一个轮回了
                        target = firstTrans;
                        this._pickUIContinuity.length = 1;
                    }
                    this.pickUIVisiable = target.visible;
                    this.pickUIName = target.name;
                    this.pickUIPos = JSON.stringify(target.getWorldTranslate());
                    this.pickUIPivot = JSON.stringify(target.pivot);
                    this.pickUILayout = this.getUIlayoutStr(target.layoutState);
                    this.pickUILayoutPerc = this.getUIlayoutStr(target.layoutPercentState);
                    // this.pickUIPath = JSON.stringify(this.getUIPath(target));
                    this.pickUIPath = commTool_8.commTool.getUIPathStr(target);
                    var compNames = target.components.map(function (val) { return val.comp["constructor"].name; }); //获取组件 类名
                    this.pickUIComponents = JSON.stringify(compNames);
                    this._currPickedUI = target;
                };
                SetContent.prototype.getUIlayoutStr = function (layout) {
                    var str = "";
                    var lo = m4m.framework.layoutOption;
                    var arr = [lo.BOTTOM, lo.H_CENTER, lo.LEFT, lo.RIGHT, lo.TOP, lo.V_CENTER];
                    arr.forEach(function (val) {
                        if (val & layout) {
                            str += "".concat(m4m.framework.layoutOption[val], ";");
                        }
                    });
                    return str;
                };
                SetContent.prototype.audioPlay = function () {
                    AudioPlayer_8.AudioPlayer.play(Number(this.audioTypeID));
                };
                SetContent.prototype.audioStop = function () {
                    AudioPlayer_8.AudioPlayer.stop(Number(this.audioTypeID));
                };
                SetContent.prototype.audioPause = function () {
                    AudioPlayer_8.AudioPlayer.pause(Number(this.audioTypeID));
                };
                Object.defineProperty(SetContent.prototype, "playerCamTilt", {
                    get: function () {
                        return this._playerCamTile;
                    },
                    set: function (val) {
                        var camCtr = StageMgr_16.StageMgr.camCtr;
                        this._playerCamTile = val;
                        camCtr.tiltAngle = val;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "playerCamPan", {
                    get: function () {
                        return this._playerCamPan;
                    },
                    set: function (val) {
                        var camCtr = StageMgr_16.StageMgr.camCtr;
                        this._playerCamPan = val;
                        camCtr.panAngle = val;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "playerCamDistance", {
                    get: function () {
                        return this._playerCamDistance;
                    },
                    set: function (val) {
                        var camCtr = StageMgr_16.StageMgr.camCtr;
                        this._playerCamDistance = val;
                        camCtr.distance = val;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "sceneVisible", {
                    get: function () { return this._sceneVisible; },
                    set: function (val) {
                        this._sceneVisible = val;
                        StageMgr_16.StageMgr.sceneRoot.gameObject.visible = val;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "roleVisible", {
                    get: function () { return this._roleVisible; },
                    set: function (val) {
                        this._roleVisible = val;
                        StageMgr_16.StageMgr.roleRoot.gameObject.visible = val;
                    },
                    enumerable: false,
                    configurable: true
                });
                Object.defineProperty(SetContent.prototype, "effectVisible", {
                    get: function () { return this._effectVisible; },
                    set: function (val) {
                        this._effectVisible = val;
                        StageMgr_16.StageMgr.effectRoot.gameObject.visible = val;
                    },
                    enumerable: false,
                    configurable: true
                });
                SetContent.prototype.rockerResetState = function () {
                    eventMgr_16.EventMgr.dispatchEvent("rocker_View_FocusResetState", null);
                };
                Object.defineProperty(SetContent.prototype, "rockerTouchEnable", {
                    get: function () { return this._rockerTouchEnable; },
                    set: function (val) {
                        this._rockerTouchEnable = val;
                        eventMgr_16.EventMgr.dispatchEvent("rocker_View_TouchEnable", new eventMgr_16.EventGeneric(this._rockerTouchEnable));
                    },
                    enumerable: false,
                    configurable: true
                });
                SetContent.helpV2 = new m4m.math.vector2();
                SetContent.helpV2v1 = new m4m.math.vector2();
                SetContent.helpV3 = new m4m.math.vector3();
                SetContent.helpV3v1 = new m4m.math.vector3();
                SetContent.helpQuat = new m4m.math.quaternion();
                SetContent.helpPickInfo = new m4m.framework.pickinfo();
                return SetContent;
            }());
        }
    };
});
System.register("GameMgr", ["Data/ExcelDataBase", "PSDUI/UiManager", "Tools/engineParallel/spInterface", "Tools/FrameMgr", "Tools/miniGame", "Tools/PlatformUtil", "UIBase/uiMgr", "Audio/AudioEnum", "Audio/AudioPlayer", "Manager/InputManager", "Tool/datGUITool"], function (exports_92, context_92) {
    "use strict";
    var ExcelDataBase_1, UiManager_7, spInterface_6, FrameMgr_9, miniGame_5, PlatformUtil_4, uiMgr_1, AudioEnum_7, AudioPlayer_9, InputManager_1, datGUITool_1, gState, GameMgr;
    var __moduleName = context_92 && context_92.id;
    return {
        setters: [
            function (ExcelDataBase_1_1) {
                ExcelDataBase_1 = ExcelDataBase_1_1;
            },
            function (UiManager_7_1) {
                UiManager_7 = UiManager_7_1;
            },
            function (spInterface_6_1) {
                spInterface_6 = spInterface_6_1;
            },
            function (FrameMgr_9_1) {
                FrameMgr_9 = FrameMgr_9_1;
            },
            function (miniGame_5_1) {
                miniGame_5 = miniGame_5_1;
            },
            function (PlatformUtil_4_1) {
                PlatformUtil_4 = PlatformUtil_4_1;
            },
            function (uiMgr_1_1) {
                uiMgr_1 = uiMgr_1_1;
            },
            function (AudioEnum_7_1) {
                AudioEnum_7 = AudioEnum_7_1;
            },
            function (AudioPlayer_9_1) {
                AudioPlayer_9 = AudioPlayer_9_1;
            },
            function (InputManager_1_1) {
                InputManager_1 = InputManager_1_1;
            },
            function (datGUITool_1_1) {
                datGUITool_1 = datGUITool_1_1;
            }
        ],
        execute: function () {
            (function (gState) {
                /** 游戏开始运行前 */
                gState[gState["beforeRuning"] = 0] = "beforeRuning";
                /** 游戏运行状态 */
                gState[gState["gameRuning"] = 1] = "gameRuning";
                /** 游戏暂停状态 */
                gState[gState["gamePaused"] = 2] = "gamePaused";
                /** 游戏结束 */
                gState[gState["gameStop"] = -1] = "gameStop";
            })(gState || (exports_92("gState", gState = {})));
            GameMgr = /** @class */ (function () {
                /** 并行接入性能引擎 */
                function GameMgr() {
                }
                Object.defineProperty(GameMgr, "hasWxEngine", {
                    get: function () { return window["engine"] != null; },
                    enumerable: false,
                    configurable: true
                });
                /** 获取 UIManager */
                GameMgr.getUImgr = function () {
                    return this.isNewVerUIMgr ? UiManager_7.UiManager : uiMgr_1.uiMgr;
                };
                GameMgr.init = function (app) {
                    // //debug gui 
                    if (this.debugGUIEnable) {
                        datGUITool_1.DatGUITool.runGameGUI();
                    }
                    //按钮开启 路径回调 功能
                    m4m.framework.button.enablePathDispatch = true;
                    m4m.framework.button.onPath = this.onButtonClickCallBackFun.bind(this);
                    m4m.framework.transform.prototype["checkToTop"] = function () { }; //检查 去掉优化
                    // if(this.developModel){
                    //     consTool.init();
                    // }
                    this.app = app;
                    this.appUpdateFun = this.app["update"];
                    this.assetMgr = this.app.getAssetMgr();
                    //加载的资源由.bin  .txt  文件   后缀都加上了.js     (.bin.js    .txt.js)
                    // m4m.framework.assetMgr.useBinJs = true;
                    //优化设置
                    this.app.markNotify = function () { }; //不需要广播
                    var pType = PlatformUtil_4.PlatformUtil.WXGetSystemPlatformType;
                    var ismobilePhone = pType != PlatformUtil_4.PlatformType.PC; //是手机
                    if (ismobilePhone) {
                        //app.OffOrientationUpdate = true; //不需要方向检测UPdate , 会监听屏幕旋转
                    }
                    this.app.getScene().autoCollectlightCamera = false; //手动管理 灯光和相机的收集
                    // this.app.isFrustumCulling = false; //剔除不需要
                    this.inputMgr = this.app.getInputMgr();
                    this.app.addUserCode(FrameMgr_9.FrameMgr.name); //帧管理对象创建
                    if (m4m["CDNURL"]) {
                        this._CDNURL = m4m["CDNURL"];
                    }
                    //设置 加载URL 
                    this.platformLoadUrlSet();
                    this.engineParallel = miniGame_5.miniGame.engineParallel;
                    //
                    this.resPolicyInit();
                    //excel url overload
                    ExcelDataBase_1.ExcelDataBase.excelData = GameMgr.ExcelConfigPath;
                    ExcelDataBase_1.ExcelDataBase.excelSplitData = GameMgr.ExcelSplitConfigPath;
                    InputManager_1.InputManager.init();
                };
                //按钮被点击回调
                GameMgr.onButtonClickCallBackFun = function (pathStr) {
                    //如果是  点击操作行为
                    if (pathStr.indexOf("PointerClick") != -1) {
                        AudioPlayer_9.AudioPlayer.play(AudioEnum_7.AudioEnum.WoodButtonNormal);
                    }
                };
                /** 引擎暂停 */
                GameMgr.enginePause = function () {
                    this.app["update"] = this.nullFun;
                    console.error("引擎暂停");
                };
                /** 引擎恢复运行 */
                GameMgr.engineReplay = function () {
                    this.app["update"] = this.appUpdateFun;
                    console.error("引擎恢复运行");
                };
                Object.defineProperty(GameMgr, "gamePaused", {
                    /** 游戏场景暂停 */
                    get: function () {
                        return this.gameState == gState.gamePaused;
                    },
                    set: function (v) {
                        if (v) {
                            if (this.gameState == gState.gamePaused) {
                                return;
                            }
                            this.beforPausedState = this.gameState;
                            this.gameState = gState.gamePaused;
                        }
                        else {
                            var s = this.beforPausedState == null ? gState.gameRuning : this.beforPausedState;
                            this.gameState = s;
                        }
                    },
                    enumerable: false,
                    configurable: true
                });
                //获取 storge 或者 服务器上的数据
                GameMgr.downLoadData = function () {
                };
                // //震动开关
                // static get swSound() { return saveTool.swSound; };
                // static set swSound(val) { saveTool.swSound = val; };
                // static get swVibrate() { return saveTool.swVibrate; };
                // static set swVibrate(val) { saveTool.swVibrate = val; };
                //-----------------
                GameMgr.platformLoadUrlSet = function () {
                    var reso = "Resources/";
                    var quality = "";
                    switch (PlatformUtil_4.PlatformUtil.systemQuality) { //性能高中低
                        case PlatformUtil_4.SystemQualityType.low:
                            quality = "low";
                            break;
                        case PlatformUtil_4.SystemQualityType.middle:
                        case PlatformUtil_4.SystemQualityType.high:
                            quality = "middle";
                            break;
                        default:
                            quality = "low";
                    }
                    var pType = PlatformUtil_4.PlatformUtil.WXGetSystemPlatformType;
                    var platformFolder = pType == PlatformUtil_4.PlatformType.iPhone ? "IOS" : pType == PlatformUtil_4.PlatformType.Android ? "ANDROID" : "PC";
                    GameMgr.scenePath = "res/art/scene/";
                    GameMgr.rolePath = "res/art/role/";
                    GameMgr.itemPath = "res/art/item/";
                    GameMgr.effectPath = "res/art/fx/";
                    if (this.useTestCreate) { //设置 testCreat 加载工具 的 替换路径
                        this.pathReplaceMap[GameMgr.scenePath] = "res/TESTAsset/scene/";
                        this.pathReplaceMap[GameMgr.rolePath] = "res/TESTAsset/role/";
                        this.pathReplaceMap[GameMgr.itemPath] = "res/TESTAsset/item/";
                        // this.pathReplaceMap[GameMgr.effectPath] = `res/TESTAsset/fx/`;
                    }
                    // //因如果切换了高低性能  加载的资源路径发生改变 需重置原来存的路径
                    // EnterGamePreloadManager.Instance.init();
                };
                Object.defineProperty(GameMgr, "CDNURL", {
                    get: function () { return this._CDNURL; },
                    enumerable: false,
                    configurable: true
                });
                /** 微信资源路径 有壳模式 */
                GameMgr.wxResHasShell = function (path) {
                    return this._wxLoadHasShellMap[path] != null;
                };
                /**
                 * 资源类型策略
                 * @param resName 资源名字
                 */
                GameMgr.engineTypePolicy = function (resName) {
                    if (!this._hasPolicy) {
                        return GameMgr.engineParallel;
                    }
                    var result = this._resPolicyMap[resName];
                    if (result == null) {
                        result = GameMgr.engineParallel;
                    }
                    return result;
                };
                /**
                 * 角色路径策略
                 * @param resName 资源名
                 */
                GameMgr.rolePath_Policy = function (resName) {
                    return this.getPolicyPath(resName, this.rolePath, this.rolePathWXEngine);
                };
                /**
                 * 单个物品 路径策略
                 * @param resName 资源名
                 */
                GameMgr.itemPath_Policy = function (resName) {
                    return this.getPolicyPath(resName, this.itemPath, this.itemPathWXEngine);
                };
                /**
                 * 场景路径策略
                 * @param resName 资源名
                 */
                GameMgr.scenePath_Policy = function (resName) {
                    return this.getPolicyPath(resName, this.scenePath, this.scenePathWXEngine);
                };
                /** 资源类型平台策略 */
                GameMgr.getPolicyPath = function (resName, m4mPath, wxPath) {
                    var result = "";
                    var _type = this.engineTypePolicy(resName);
                    switch (_type) {
                        case spInterface_6.engineParallelType.none:
                            result = m4mPath;
                            break;
                        case spInterface_6.engineParallelType.wxEngine:
                            result = wxPath;
                            break;
                        default: result = "";
                    }
                    return result;
                };
                GameMgr.resPolicyInit = function () {
                    //m4m
                    var _gdlist = this.m4mPolicyList;
                    for (var i = 0, len = _gdlist.length; i < len; i++) {
                        this._resPolicyMap[_gdlist[i]] = spInterface_6.engineParallelType.none;
                        this._hasPolicy = true;
                    }
                    //weChat
                    _gdlist = this._weChatPolicyList;
                    for (var i = 0, len = _gdlist.length; i < len; i++) {
                        this._resPolicyMap[_gdlist[i]] = spInterface_6.engineParallelType.wxEngine;
                        this._hasPolicy = true;
                    }
                    //wx
                    this.wxResHasShellInit();
                };
                GameMgr.wxResHasShellInit = function () {
                    this._wxLoadHasShellMap[this.rolePathWXEngineConvert] = true;
                    this._wxLoadHasShellMap[this.scenePathWXEngineConvert] = true;
                };
                //布阵场景ID
                GameMgr.campSceneID = 4001;
                //英雄详情场景ID
                GameMgr.heroDetailsSceneID = 3002;
                /** 标记为 帧动画骨骼 */
                GameMgr.isKFAnimtionTag = "__isKFAnimtionTag__";
                /** 是否使用 testCreat 新加载资源工具 */
                GameMgr.useTestCreate = false;
                /** 性能调试模式 */
                GameMgr.performanceDebug = false;
                /** 性能调试开启 */
                GameMgr.perfDebugStart = false;
                /** 性能调试结果输出 */
                GameMgr.perfDebugOutput = false;
                /** 场景隐藏调试 */
                GameMgr.sceneHideDebug = false;
                /** 角色模型隐藏调试 */
                GameMgr.roleModelHideDebug = false;
                /** 特效隐藏调试 */
                GameMgr.effectHideDebug = false;
                /** UI隐藏调试 */
                GameMgr.uiHideDebug = false;
                GameMgr.testStr = "全显示状态";
                /** 调试GUI 开启 */
                GameMgr.debugGUIEnable = false;
                /**  显示 2d绘制 调试线框 */
                GameMgr.Draw2dDebug = false;
                /** 无敌模式调试 */
                GameMgr.godModeDebug = false;
                /** 和平模式调试（角色都不扣血） */
                GameMgr.peaceModeDebug = false;
                /** 调试 战斗 */
                GameMgr.debugModeBattle = false;
                // /** 调试 引导 */
                // public static debugGuide: boolean = false;
                GameMgr.gameState = gState.beforeRuning;
                //单机版本测试
                GameMgr.isSingleTest = false;
                //鱿鱼游戏单机版本测试
                GameMgr.issquidgameSingleTest = false;
                /** 强制清理UI */
                GameMgr.ClearBol = false;
                /** 强制清理 场景 和 资源 */
                GameMgr.forceClearScene = true;
                /** 声音打开 */
                GameMgr.soundOn = "soundOn";
                /** 震动 场景 和 资源 */
                GameMgr.shockOn = "shockOn";
                // /** 光效 */
                // static rayOn = "rayOn";
                // /** 雾效 */
                // static fogOn = "fogOn";
                /** 高画质 */
                GameMgr.highQuality = "highQuality";
                //分享试用鲨鱼id
                GameMgr.trySharkID = -1;
                //单机开始
                GameMgr.standAlone = 0; //单人开始分享试用 0 竞技开始分享试用 1  升级界面分享试用 2
                /** 游戏语言 */
                GameMgr.language = "zh";
                //浮窗任务是否完成
                GameMgr.windowBol = false;
                GameMgr.resPlat = "PC";
                //分享类型  是否已始化过
                GameMgr.shareInited = false;
                //需要暂停   stopPage 面板 和  mapPage 面板打开时  为true
                GameMgr.realityPaused = false;
                //第一个场景加载时间
                GameMgr.firstSceneLoadTime = 0;
                //游戏场景加载时间
                GameMgr.gameSceneLoadTime = 0;
                //加载场景用时记录
                GameMgr.SceneLoadTimeNum = 0;
                GameMgr.gameName = "hungrysharkevo"; //"hungerShark";
                GameMgr.isNewAuth = false; //是否是 新授权登录（需要点击 微信登录 按钮） 的用户
                GameMgr.developModel = false; //debuge 模式
                GameMgr.maxLoadingCount = 100; //max loading progress lines count
                GameMgr.cubeLayer = 8; //cube terrain layer number
                GameMgr.limitDtime = 0.06; //dTime limit
                //品质框通用命名 如果一个UI中有重复的 会在命名后加 a  b  c来区分
                GameMgr.qualityIconName = ".atlas.json_frame";
                //职业图标通用命名 如果一个UI中有重复的 会在命名后加 a  b  c来区分
                GameMgr.professionalIconName = ".atlas.json_ui_icon";
                //阵营通用命名 如果一个UI中有重复的 会在命名后加 a  b  c来区分
                GameMgr.campIconName = ".atlas.json_ui_campmark";
                GameMgr.CampMark = "ui_CampMark_";
                GameMgr.atlasPath = "res/art/atlas/"; //图集
                GameMgr.UIPath = "res/art/ui/"; //UI
                GameMgr.configPath = "res/config/"; //配置
                GameMgr.sceneObstaclePath = "res/obstacleJson/"; //场景障碍配置
                GameMgr.ExcelConfigPath = "res/config/ExcelData/"; //Excel 配置
                GameMgr.ExcelSplitConfigPath = "res/config/ExcelDataSplit/"; //Excel 拆分 配置
                GameMgr.TexPath = "res/art/texture/"; //贴图
                // static readonly UIPath = `Resources/props/TESTAsset/ui/`; //UI
                GameMgr.EquipIcon = "res/art/EquipIcon/"; //装备图
                GameMgr.HeroIcon = "res/art/HeroIcon/"; //npc头像图
                GameMgr.GoodsIcon = "res/art/GoodsIcon/"; //物品图
                GameMgr.PiecesIcon = "res/art/PiecesIcon/"; //碎片图
                GameMgr.SkillIcon = "res/art/SkillIcon/"; //技能图
                GameMgr.WeaponIcon = "res/art/WeaponIcon/"; //宝石图
                GameMgr.tipscon = "res/art/tips/"; //提示说明
                GameMgr.RechargeGZ = "res/art/RechargeGZ/"; //贵族特权界面的特权说明
                GameMgr.MythicalCreatureIcon = "res/art/MythicalCreatureIcon/"; //魔兽图
                //
                GameMgr.Icon = "res/art/Icon/"; //
                //头像框
                GameMgr.head = "res/art/head/";
                GameMgr.MapPic = "res/art/mapImg/"; //地图图片
                GameMgr.MapCloud = "res/art/mapCloud/"; //云图片
                GameMgr.GuideImg = "res/art/guideImg/"; //引导相关图片资源
                //新英雄推荐签到背景图
                GameMgr.Newhero = "res/art/texture/Newhero/"; //贵族特权界面的特权说明
                /** 音频目录 */
                GameMgr.AudioPath = "res/art/audio/";
                GameMgr.SugarCakePolygon = "res/polygonTool/"; //扣糖饼的形状配置
                GameMgr.shaderPath = "res/shaders/"; //shader 资源
                GameMgr.bgPath = "Resources/img/bg/"; //背景图
                // public static readonly iconPath = `Resources/icon/`; //图标
                GameMgr.fontPath = "Resources/font/"; //字体
                // public static readonly terrainPath = `Resources/terrain/`; //场景地形障碍
                // public static readonly spawnerPath = `Resources/spawner/`; //场景怪生成配置
                GameMgr.PFiconPath = "Resources/PFicon/"; //图鉴
                // public static readonly onShelfIcon = `Resources/onShelfIcon/`; //新鲨鱼上架
                GameMgr.strangeHeadPath = "Resources/strangeHead/"; //微信陌生人头像目录  wxgame目录下
                GameMgr.progressTipicon = "Resources/progressTipicon/"; //初始进游戏加载界面
                GameMgr.DNS_AND_PORT = "";
                GameMgr.REPORT_SERVER = "";
                /**特效资源路径 微信引擎  */
                GameMgr.fxPathWXEngine = "Assets/Resources/Prefabs/effect/"; //
                /** shader 微信引擎*/
                GameMgr.shaderPathWXEngine = "Assets/shaders/"; //
                /** 角色资源路径 微信引擎 */
                GameMgr.rolePathWXEngine = "Assets/Resources/Prefabs/Role/";
                /** 物品资源路径 微信引擎 */
                GameMgr.itemPathWXEngine = "Assets/Resources/Prefabs/Item/";
                /** 场景 微信引擎 */
                GameMgr.scenePathWXEngine = "Assets/Resources/Prefabs/Scene/";
                //Convert res path
                /** 角色资源路径 微信引擎 Convert */
                GameMgr.rolePathWXEngineConvert = "FromToolConvert/Role/";
                /** 场景 微信引擎 Convert*/
                GameMgr.scenePathWXEngineConvert = "FromToolConvert/Scene/";
                // 是否启用钱包
                GameMgr.openWalletBol = false;
                //是否钱包交互跳转loading
                GameMgr.connectWalletLoadingBool = true;
                /** testCrete 使用 资源路径重定向Map  */
                GameMgr.pathReplaceMap = {
                // "res/art/role/": "res/TESTAsset/role/",
                // "res/art/scene/": "res/TESTAsset/scene/",
                // "res/art/item/": "res/TESTAsset/item/",
                };
                GameMgr.isNewVerUIMgr = true;
                GameMgr.nullFun = function () { };
                GameMgr._CDNURL = "";
                //----------------- tags
                // static readonly t_BossIntro = "BossIntro";
                //资源政策
                /** 强制指定走 m4m 模式的资源列表 */
                GameMgr.m4mPolicyList = [
                // //role
                ];
                /** 强制指定走 weChat 模式的资源列表 */
                GameMgr._weChatPolicyList = [""];
                GameMgr._hasPolicy = false; //有政策
                GameMgr._resPolicyMap = {};
                GameMgr._wxLoadHasShellMap = {};
                return GameMgr;
            }());
            exports_92("GameMgr", GameMgr);
        }
    };
});
System.register("Common/CommonCell", ["Data/Cell"], function (exports_93, context_93) {
    "use strict";
    var Cell_1, CommonCell;
    var __moduleName = context_93 && context_93.id;
    return {
        setters: [
            function (Cell_1_1) {
                Cell_1 = Cell_1_1;
            }
        ],
        execute: function () {
            CommonCell = /** @class */ (function (_super) {
                __extends(CommonCell, _super);
                function CommonCell() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                CommonCell.prototype.pointerDownFun = function () {
                    // console.error(this.cellData.data);
                    if (this.cellData.showTip) { //如果需要显示
                        var worldPos = this.transform.getWorldTranslate();
                        // TipsToolManager.Instance.pos = worldPos;
                        // TipsToolManager.Instance.cellWidth = this.cellData.width;
                        // TipsToolManager.Instance.cellHeight = this.cellData.height;
                        // // console.error("如果需要显示Tips");
                        // TipsToolManager.Instance.ShowItemTips(this.cellData.data);
                    }
                };
                CommonCell = __decorate([
                    m4m.reflect.node2DComponent
                ], CommonCell);
                return CommonCell;
            }(Cell_1.Cell));
            exports_93("CommonCell", CommonCell);
        }
    };
});
System.register("Common/SliderComponentExtend", ["Data/SliderComponent", "Manager/InputManager"], function (exports_94, context_94) {
    "use strict";
    var SliderComponent_1, InputManager_2, SliderComponentExtend;
    var __moduleName = context_94 && context_94.id;
    return {
        setters: [
            function (SliderComponent_1_1) {
                SliderComponent_1 = SliderComponent_1_1;
            },
            function (InputManager_2_1) {
                InputManager_2 = InputManager_2_1;
            }
        ],
        execute: function () {
            SliderComponentExtend = /** @class */ (function (_super) {
                __extends(SliderComponentExtend, _super);
                function SliderComponentExtend() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.offsetPercent = 0.6;
                    _this.offsetWidth = 0;
                    //最大阶段值
                    _this.maxNum = -1;
                    return _this;
                }
                Object.defineProperty(SliderComponentExtend.prototype, "transWidth", {
                    get: function () {
                        if (this._transWidth == null) {
                            this._transWidth = this.progressbar.transform.width - this.btn.transform.width + this.offsetWidth;
                        }
                        return this._transWidth;
                    },
                    enumerable: false,
                    configurable: true
                });
                //按钮 按下
                SliderComponentExtend.prototype.btnDown_event = function () {
                    // console.error("按钮 按下");
                    InputManager_2.InputManager.onHorizTouch = this.onHorizTouchFun.bind(this);
                };
                /****设置值
                 * maxNum 如果有设置值 需传入小于等于maxNum的值
                 * maxNum 默认值 -1   需传入百分比值 0.x
                */
                SliderComponentExtend.prototype.setValue = function (value) {
                    var percentValue;
                    if (this.maxNum == -1) {
                        if (value > 1) {
                            console.error("SliderComponentExtend 当前需设置百分比值 " + value);
                            return;
                        }
                        percentValue = value;
                    }
                    else {
                        percentValue = value / this.maxNum;
                    }
                    if (percentValue < 0) {
                        percentValue = 0;
                    }
                    else if (percentValue > 1) {
                        percentValue = 1;
                    }
                    var setX = percentValue * this.transWidth;
                    this.reshPosFun(setX);
                };
                SliderComponentExtend.prototype.reshPosFun = function (setX) {
                    this.btn.transform.setLayoutValue(m4m.framework.layoutOption.LEFT, setX);
                    var sliderVale = setX / this.transWidth;
                    // console.error("滑动 ", sliderVale);
                    this.progressbar.value = sliderVale;
                    if (this.callBackFun) {
                        this.callBackFun(sliderVale);
                    }
                };
                SliderComponentExtend.prototype.onHorizTouchFun = function (moveX) {
                    // console.error("滑动 ", moveX);
                    var xx = this.btn.transform.getLayoutValue(m4m.framework.layoutOption.LEFT);
                    var setX = xx - moveX * this.offsetPercent;
                    if (setX < 0) {
                        setX = 0;
                    }
                    else if (setX > this.transWidth) {
                        setX = this.transWidth;
                    }
                    this.reshPosFun(setX);
                };
                SliderComponentExtend = __decorate([
                    m4m.reflect.node2DComponent
                ], SliderComponentExtend);
                return SliderComponentExtend;
            }(SliderComponent_1.SliderComponent));
            exports_94("SliderComponentExtend", SliderComponentExtend);
        }
    };
});
System.register("Core/Pick3DModelsMgr", ["eventMgr", "events/PickModeEvent", "Tools/commTool", "Tools/engineParallel/spInterface", "Core/StageMgr"], function (exports_95, context_95) {
    "use strict";
    var eventMgr_17, PickModeEvent_1, commTool_9, spInterface_7, StageMgr_17, Pick3DModelsMgr;
    var __moduleName = context_95 && context_95.id;
    return {
        setters: [
            function (eventMgr_17_1) {
                eventMgr_17 = eventMgr_17_1;
            },
            function (PickModeEvent_1_1) {
                PickModeEvent_1 = PickModeEvent_1_1;
            },
            function (commTool_9_1) {
                commTool_9 = commTool_9_1;
            },
            function (spInterface_7_1) {
                spInterface_7 = spInterface_7_1;
            },
            function (StageMgr_17_1) {
                StageMgr_17 = StageMgr_17_1;
            }
        ],
        execute: function () {
            Pick3DModelsMgr = /** @class */ (function () {
                /** 场景中拣选 3D 模型管理器 */
                function Pick3DModelsMgr() {
                }
                /** 初始化 */
                Pick3DModelsMgr.init = function () {
                    //
                    eventMgr_17.EventMgr.addListener("pick_mode_enable", this.onEnablePickMode, this);
                    eventMgr_17.EventMgr.addListener("pick_mode_disable", this.onDisablePickMode, this);
                };
                /** 启用 拣选模式 */
                Pick3DModelsMgr.onEnablePickMode = function (ev) {
                    if (ev.mode == null) {
                        return;
                    }
                    // this.disablePickMode();
                    var _scene = m4m.framework.sceneMgr.scene;
                    var ipt = _scene.app.getInputMgr();
                    var pEv = m4m.event.PointEventEnum;
                    switch (ev.mode) {
                        case PickModeEvent_1.PickMode.pick_role_down:
                            ipt.addPointListener(pEv.PointDown, this.onPointDown, this);
                            break;
                        case PickModeEvent_1.PickMode.pick_role_up:
                            ipt.addPointListener(pEv.PointUp, this.onPointUp, this);
                            break;
                        case PickModeEvent_1.PickMode.prepare_Role_drag:
                            ipt.addPointListener(pEv.PointMove, this.onPointMove, this);
                            break;
                        default: var temp = null;
                    }
                    this._lastPickMode = ev.mode;
                };
                Pick3DModelsMgr.onDisablePickMode = function () {
                    this.disablePickMode();
                };
                Pick3DModelsMgr.disablePickMode = function () {
                    var _scene = m4m.framework.sceneMgr.scene;
                    var ipt = _scene.app.getInputMgr();
                    var pEv = m4m.event.PointEventEnum;
                    ipt.removePointListener(pEv.PointDown, this.onPointDown, this);
                    ipt.removePointListener(pEv.PointMove, this.onPointMove, this);
                    ipt.removePointListener(pEv.PointUp, this.onPointUp, this);
                    this._lastPickMode = -1;
                };
                Pick3DModelsMgr.onPointDown = function (_a) {
                    var x = _a[0], y = _a[1];
                    var v2 = this.helpV2;
                    m4m.math.vec2Set(v2, x, y);
                    // console.log(`x : ${x} , y :${y}`);
                    this.tryPickRole(v2, true);
                };
                Pick3DModelsMgr.onPointUp = function (_a) {
                    var x = _a[0], y = _a[1];
                    var v2 = this.helpV2;
                    m4m.math.vec2Set(v2, x, y);
                    // console.log(`x : ${x} , y :${y}`);
                    this.tryPickRole(v2, false);
                };
                Pick3DModelsMgr.onPointMove = function (_a) {
                    var x = _a[0], y = _a[1];
                    var v2 = this.helpV2;
                    m4m.math.vec2Set(v2, x, y);
                    this.pickPlane(v2);
                };
                Pick3DModelsMgr.tryPickRole = function (spos, isdown) {
                    var _scene = m4m.framework.sceneMgr.scene;
                    var cam = _scene.mainCamera;
                    var ray = cam.creatRayByScreen(spos, _scene.app);
                    var root = StageMgr_17.StageMgr.roleRoot;
                    var len = root.childrenCount;
                    var hitTrans;
                    var currAABB = this.helpAABB;
                    var needHighPrecision = false; //是否需要高精度检测（检测mesh）
                    for (var i = 0; i < len; i++) {
                        var _c = root.getChildByIdx(i);
                        commTool_9.commTool.cloneAABB(_c, currAABB);
                        var isH = ray.intersectAABB(currAABB);
                        if (isH) {
                            if (needHighPrecision) {
                                if (_c.engineType == spInterface_7.engineParallelType.none) {
                                    var mr = _c.gameObject.getFirstComponent(spInterface_7.spComponentType.skinMeshRenderer);
                                    var isHMesh = mr.rawHandle.mesh.intersects(ray, mr.gameObject.transform.getWorldMatrix(), this.helpInfo);
                                    if (!isHMesh) {
                                        continue;
                                    }
                                }
                            }
                            hitTrans = _c;
                            break;
                        }
                    }
                    if (hitTrans) {
                        this._evPickedRole.data.GoId = hitTrans.gameObject.getID();
                        m4m.math.vec2Clone(spos, this._evPickedRole.data.pos);
                        if (isdown) {
                            eventMgr_17.EventMgr.dispatchEvent("picked_role_Down", this._evPickedRole);
                        }
                        else {
                            eventMgr_17.EventMgr.dispatchEvent("picked_role_Up", this._evPickedRole);
                        }
                        // let aabb: m4m.framework.aabb = currAABB;
                        // console.log(`is picked :  ${hitTrans.name} , aabb range : ${m4m.math.vec3Distance(aabb.minimum, aabb.maximum)}`);
                        //调试显示
                        // {
                        //     let min = m4m.framework.TransformUtil.CreatePrimitive(m4m.framework.PrimitiveType.Cube, _scene.app);
                        //     m4m.math.vec3SetAll(min.localScale, 0.2);
                        //     m4m.math.vec3Clone(aabb.minimum, min.localPosition);
                        //     _scene.addChild(min);
                        //     let max = m4m.framework.TransformUtil.CreatePrimitive(m4m.framework.PrimitiveType.Cube, _scene.app);
                        //     m4m.math.vec3SetAll(max.localScale, 0.2);
                        //     m4m.math.vec3Clone(aabb.maximum, max.localPosition);
                        //     _scene.addChild(max);
                        // }
                    }
                };
                Pick3DModelsMgr.pickPlane = function (spos) {
                    var _scene = m4m.framework.sceneMgr.scene;
                    var cam = _scene.mainCamera;
                    var ray = cam.creatRayByScreen(spos, _scene.app);
                    var v3 = this.helpV3;
                    var ishit = ray.intersectPlane(this.preparePlaneCPoint, this.preparePlaneNormal, v3);
                    if (ishit) {
                        m4m.math.vec3Clone(v3, this._evMove.data);
                        eventMgr_17.EventMgr.dispatchEvent("pick_Plane_move", this._evMove);
                    }
                };
                Pick3DModelsMgr.helpV2 = new m4m.math.vector2();
                Pick3DModelsMgr.helpV3 = new m4m.math.vector3();
                Pick3DModelsMgr.helpInfo = new m4m.framework.pickinfo();
                Pick3DModelsMgr.helpAABB = new m4m.framework.aabb(m4m.poolv3(), m4m.poolv3());
                Pick3DModelsMgr.preparePlaneNormal = new m4m.math.vector3(0, -1, 0);
                Pick3DModelsMgr.preparePlaneCPoint = new m4m.math.vector3(0, 209.2, 0);
                Pick3DModelsMgr._lastPickMode = -1;
                Pick3DModelsMgr._evPickedRole = new eventMgr_17.EventGeneric();
                Pick3DModelsMgr._evMove = new eventMgr_17.EventGeneric();
                return Pick3DModelsMgr;
            }());
            exports_95("Pick3DModelsMgr", Pick3DModelsMgr);
        }
    };
});
System.register("Core/blockchain/BlockSubscriptionIndex", [], function (exports_96, context_96) {
    "use strict";
    var BlockSubscriptionIndex;
    var __moduleName = context_96 && context_96.id;
    return {
        setters: [],
        execute: function () {
            BlockSubscriptionIndex = /** @class */ (function () {
                function BlockSubscriptionIndex(tonweb, lastProcessedMasterchainBlockNumber, onTransaction, indexApiUrl, indexApiKey) {
                    this.tonweb = tonweb;
                    this.lastProcessedMasterchainBlockNumber = lastProcessedMasterchainBlockNumber; // saved in DB; last masterchain block number that your service processed
                    this.onTransaction = onTransaction;
                    this.indexApiUrl = indexApiUrl;
                    this.indexApiKey = indexApiKey;
                }
                BlockSubscriptionIndex.prototype.start = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var getTransactionsByMasterchainSeqno, isProcessing, tick;
                        var _this = this;
                        return __generator(this, function (_a) {
                            getTransactionsByMasterchainSeqno = function (masterchainBlockNumber) {
                                var headers = {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json',
                                    'X-API-Key': _this.indexApiKey
                                };
                                console.error(_this.indexApiUrl + 'getTransactionsByMasterchainSeqno?seqno=' + masterchainBlockNumber);
                                return fetch(_this.indexApiUrl + 'getTransactionsByMasterchainSeqno?seqno=' + masterchainBlockNumber, {
                                    method: 'GET',
                                    headers: headers,
                                })
                                    .then(function (response) { return response.json(); })
                                    .then(function (response) { return response.error ? Promise.reject(response.error) : response; });
                            };
                            isProcessing = false;
                            tick = function () { return __awaiter(_this, void 0, void 0, function () {
                                var masterchainInfo, lastMasterchainBlockNumber, masterchainBlockNumber, transactions, _i, transactions_1, tx, e_2;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0:
                                            if (isProcessing)
                                                return [2 /*return*/];
                                            isProcessing = true;
                                            _a.label = 1;
                                        case 1:
                                            _a.trys.push([1, 9, , 10]);
                                            return [4 /*yield*/, this.tonweb.provider.getMasterchainInfo()];
                                        case 2:
                                            masterchainInfo = _a.sent();
                                            lastMasterchainBlockNumber = masterchainInfo.last.seqno;
                                            if (!(lastMasterchainBlockNumber > this.lastProcessedMasterchainBlockNumber)) return [3 /*break*/, 8];
                                            masterchainBlockNumber = this.lastProcessedMasterchainBlockNumber + 1;
                                            return [4 /*yield*/, getTransactionsByMasterchainSeqno(masterchainBlockNumber)];
                                        case 3:
                                            transactions = _a.sent();
                                            console.error('Got masterchain block ' + masterchainBlockNumber + ' and related shard blocks');
                                            _i = 0, transactions_1 = transactions;
                                            _a.label = 4;
                                        case 4:
                                            if (!(_i < transactions_1.length)) return [3 /*break*/, 7];
                                            tx = transactions_1[_i];
                                            return [4 /*yield*/, this.onTransaction(tx)];
                                        case 5:
                                            _a.sent();
                                            _a.label = 6;
                                        case 6:
                                            _i++;
                                            return [3 /*break*/, 4];
                                        case 7:
                                            this.lastProcessedMasterchainBlockNumber = masterchainBlockNumber; // save in DB
                                            _a.label = 8;
                                        case 8: return [3 /*break*/, 10];
                                        case 9:
                                            e_2 = _a.sent();
                                            console.error(e_2);
                                            return [3 /*break*/, 10];
                                        case 10:
                                            isProcessing = false;
                                            return [2 /*return*/];
                                    }
                                });
                            }); };
                            setInterval(tick, 1000); // new masterchain block created every ~5 seconds
                            return [2 /*return*/];
                        });
                    });
                };
                return BlockSubscriptionIndex;
            }());
            exports_96("BlockSubscriptionIndex", BlockSubscriptionIndex);
        }
    };
});
System.register("Core/blockchain/DepositsJettons", ["Core/blockchain/BlockSubscriptionIndex", "Core/blockchain/ConnectWalletTonkeeper"], function (exports_97, context_97) {
    "use strict";
    var BlockSubscriptionIndex_1, ConnectWalletTonkeeper_2, IS_TESTNET, TONCENTER_API_KEY, NODE_API_URL, INDEX_API_URL, MY_HOT_WALLET_ADDRESS, DepositsJettons;
    var __moduleName = context_97 && context_97.id;
    return {
        setters: [
            function (BlockSubscriptionIndex_1_1) {
                BlockSubscriptionIndex_1 = BlockSubscriptionIndex_1_1;
            },
            function (ConnectWalletTonkeeper_2_1) {
                ConnectWalletTonkeeper_2 = ConnectWalletTonkeeper_2_1;
            }
        ],
        execute: function () {
            IS_TESTNET = true;
            exports_97("TONCENTER_API_KEY", TONCENTER_API_KEY = IS_TESTNET ? '0b6ec5b0242bd7bdd6c24a2dc2cf1c8246713a5adefddbd09fb4c69608ecd901' : 'YOUR_MAINNET_API_KEY'); // obtain on https://toncenter.com
            exports_97("NODE_API_URL", NODE_API_URL = IS_TESTNET ? 'https://testnet.toncenter.com/api/v2/jsonRPC' : 'https://toncenter.com/api/v2/jsonRPC');
            exports_97("INDEX_API_URL", INDEX_API_URL = IS_TESTNET ? 'https://testnet.toncenter.com/api/index/' : 'https://toncenter.com/api/index/');
            exports_97("MY_HOT_WALLET_ADDRESS", MY_HOT_WALLET_ADDRESS = 'EQB7AhB4fP7SWtnfnIMcVUkwIgVLKqijlcpjNEPUVontypON');
            DepositsJettons = /** @class */ (function () {
                function DepositsJettons() {
                    this.jettons = {};
                    this.jettonsInfo = {
                        'jUSDC': {
                            address: 'EQB-MPwrd1G6WKNkLz_VnV6WqBDd142KMQv-g1O-8QUA3728',
                            decimals: 6,
                            hasStandardInternalTransfer: true,
                            minDepositAmount: '1' // minimum amount to deposit in units
                        },
                        'KOTE': {
                            address: 'EQBlU_tKISgpepeMFT9t3xTDeiVmo25dW_4vUOl6jId_BNIj',
                            decimals: 9,
                            hasStandardInternalTransfer: true,
                            minDepositAmount: '1' // minimum amount to deposit in units
                        }
                    };
                    this.userIdToTonWallet = {};
                    this.userIdToJettonWallet = {};
                    this.depositsRequests = [];
                    this.isProcessing = false;
                    this.TonWeb = window["TonWeb"];
                    this.tonwebsdk = new this.TonWeb(new this.TonWeb.HttpProvider(NODE_API_URL, { apiKey: TONCENTER_API_KEY }));
                    this.TopUpAmount = this.TonWeb.utils.toNano('0.05'); //0.05TON;
                    for (var jettonInfoName in this.jettonsInfo) {
                        var jettonInfo = this.jettonsInfo[jettonInfoName];
                        this.jettons[jettonInfoName] = new this.TonWeb.token.jetton.JettonMinter(this.tonwebsdk.provider, { address: jettonInfo.address });
                    }
                }
                Object.defineProperty(DepositsJettons, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new DepositsJettons();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                DepositsJettons.prototype.initWallet = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var masterchainInfo, lastMasterchainBlockNumber, blockSubscription;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: 
                                // console.error("newKeyPair", this.TonWeb.utils.newKeyPair());
                                return [4 /*yield*/, this.createDepositWallet(ConnectWalletTonkeeper_2.ConnectWalletTonkeeper.Instance.tid, this.TonWeb.utils.newKeyPair())];
                                case 1:
                                    // console.error("newKeyPair", this.TonWeb.utils.newKeyPair());
                                    _a.sent(); // generate new keypair for user deposit wallet
                                    console.error('To deposit send jettons to address ' + (this.userIdToTonWallet[0]).address.toString(true, true, true));
                                    return [4 /*yield*/, this.tonwebsdk.provider.getMasterchainInfo()];
                                case 2:
                                    masterchainInfo = _a.sent();
                                    lastMasterchainBlockNumber = masterchainInfo.last.seqno;
                                    console.error("Starts from ".concat(lastMasterchainBlockNumber, " masterchain block"));
                                    blockSubscription = new BlockSubscriptionIndex_1.BlockSubscriptionIndex(this.tonwebsdk, lastMasterchainBlockNumber, this.onTransaction, INDEX_API_URL, TONCENTER_API_KEY);
                                    return [4 /*yield*/, blockSubscription.start()];
                                case 3:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                DepositsJettons.prototype.createDepositWallet = function (userId, keyPair) {
                    return __awaiter(this, void 0, void 0, function () {
                        var wallet, address, _a, _b, _c, _i, jettonName, jetton, jettonAddress;
                        return __generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    wallet = this.createWallet(keyPair);
                                    console.error("wallet", wallet);
                                    return [4 /*yield*/, wallet.getAddress()];
                                case 1:
                                    address = _d.sent();
                                    console.error("user ".concat(userId, " deposit wallet is ") + address.toString(true, true, true));
                                    this.userIdToTonWallet[userId] = { address: address, keyPair: keyPair };
                                    _a = this.jettons;
                                    _b = [];
                                    for (_c in _a)
                                        _b.push(_c);
                                    _i = 0;
                                    _d.label = 2;
                                case 2:
                                    if (!(_i < _b.length)) return [3 /*break*/, 5];
                                    _c = _b[_i];
                                    if (!(_c in _a)) return [3 /*break*/, 4];
                                    jettonName = _c;
                                    jetton = this.jettons[jettonName];
                                    return [4 /*yield*/, jetton.getJettonWalletAddress(address)];
                                case 3:
                                    jettonAddress = _d.sent();
                                    console.error("user ".concat(userId, " underlying ").concat(jettonName, " jetton-wallet is ") + jettonAddress.toString(true, true, true));
                                    if (!this.userIdToJettonWallet[userId]) {
                                        this.userIdToJettonWallet[userId] = {};
                                    }
                                    this.userIdToJettonWallet[userId][jettonName] = jettonAddress;
                                    _d.label = 4;
                                case 4:
                                    _i++;
                                    return [3 /*break*/, 2];
                                case 5: return [2 /*return*/, address];
                            }
                        });
                    });
                };
                DepositsJettons.prototype.createWallet = function (keyPair) {
                    // console.error("this.tonwebsdk.provider", this.tonwebsdk.provider);
                    var WalletClass = this.tonwebsdk.wallet.all.v3R2;
                    var wallet = new WalletClass(this.tonwebsdk.provider, {
                        publicKey: keyPair.publicKey
                    });
                    // console.error("wallet", wallet);
                    return wallet;
                };
                DepositsJettons.prototype.onTransaction = function (tx) {
                    return __awaiter(this, void 0, void 0, function () {
                        var found, jettonInfo, jettonWalletAddress, jettonWallet, jettonBalance;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.findDepositAddress(tx.account)];
                                case 1:
                                    found = _a.sent();
                                    if (!found) return [3 /*break*/, 4];
                                    return [4 /*yield*/, this.validateJettonTransfer(tx, found.jettonName)];
                                case 2:
                                    if (!(_a.sent())) {
                                        return [2 /*return*/];
                                    }
                                    jettonInfo = this.jettonsInfo[found.jettonName];
                                    jettonWalletAddress = this.userIdToJettonWallet[found.userId][found.jettonName];
                                    jettonWallet = new this.TonWeb.token.jetton.JettonWallet(this.tonwebsdk.provider, { address: jettonWalletAddress });
                                    return [4 /*yield*/, jettonWallet.getData()];
                                case 3:
                                    jettonBalance = (_a.sent()).balance;
                                    if (new this.TonWeb.utils.BN(jettonInfo.minDepositAmount).gt(jettonBalance)) {
                                        console.error('not enough jettons');
                                        return [2 /*return*/, false];
                                    }
                                    console.error(found.jettonName + ' jetton deposit of user ' + found.userId + ' detected');
                                    // Your need create Toncoin top-up queue (see `withdrawals.js`) from you reserve wallet to user deposit wallet
                                    // You will send `TOP_UP_AMOUNT` small amount of Toncoins to deposit wallet. It's amount for gas to transfer jetton.
                                    // Add withdrawal request to top-up queue here:
                                    // topUpRequests.push({
                                    //     amount: TOP_UP_AMOUNT,
                                    //     toAddress: userIdToTonWallet[found.userId].address
                                    // });
                                    this.depositsRequests.push({
                                        jettonName: found.jettonName,
                                        userId: found.userId
                                    });
                                    _a.label = 4;
                                case 4: return [2 /*return*/];
                            }
                        });
                    });
                };
                DepositsJettons.prototype.findDepositAddress = function (addressString) {
                    var address = new this.TonWeb.utils.Address(addressString).toString(false);
                    for (var userId in this.userIdToJettonWallet) {
                        for (var jettonInfoName in this.jettonsInfo) {
                            var jettonWalletAddress = this.userIdToJettonWallet[userId][jettonInfoName].toString(false);
                            if (address === jettonWalletAddress) {
                                return { userId: userId, jettonName: jettonInfoName };
                            }
                        }
                    }
                    return null;
                };
                DepositsJettons.prototype.validateJettonTransfer = function (txFromIndex, jettonName) {
                    return __awaiter(this, void 0, void 0, function () {
                        var jettonInfo, sourceAddress, result, tx, msgBody, cell, slice, op, queryId, amount, from, e_3;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 4, , 5]);
                                    jettonInfo = this.jettonsInfo[jettonName];
                                    sourceAddress = txFromIndex.in_msg.source;
                                    if (!sourceAddress) {
                                        // external message - not related to jettons
                                        return [2 /*return*/, false];
                                    }
                                    return [4 /*yield*/, this.tonwebsdk.provider.getTransactions(txFromIndex.account, 1, txFromIndex.lt, txFromIndex.hash)];
                                case 1:
                                    result = _a.sent();
                                    if (result.length < 1) {
                                        throw new Error('no transaction in node');
                                    }
                                    tx = result[0];
                                    // You can check `in_msg` and `out_msgs` parameters between `txFromIndex` and `tx` from node
                                    if (tx.out_msgs.length === 1 && new this.TonWeb.utils.Address(tx.out_msgs[0].destination).toString(false) === new this.TonWeb.utils.Address(tx.in_msg.source).toString(false)) {
                                        return [2 /*return*/, false]; // bounced message - error in transaction
                                    }
                                    if (!jettonInfo.hasStandardInternalTransfer) return [3 /*break*/, 3];
                                    if (!tx.in_msg.msg_data ||
                                        tx.in_msg.msg_data['@type'] !== 'msg.dataRaw' ||
                                        !tx.in_msg.msg_data.body) {
                                        // no in_msg or in_msg body
                                        return [2 /*return*/, false];
                                    }
                                    msgBody = this.TonWeb.utils.base64ToBytes(tx.in_msg.msg_data.body);
                                    cell = this.TonWeb.boc.Cell.oneFromBoc(msgBody);
                                    slice = cell.beginParse();
                                    op = slice.loadUint(32);
                                    if (!op.eq(new this.TonWeb.utils.BN(0x178d4519)))
                                        return [2 /*return*/]; // op == internal_transfer_notification
                                    queryId = slice.loadUint(64);
                                    amount = slice.loadCoins();
                                    from = slice.loadAddress();
                                    return [4 /*yield*/, this.jettons[jettonName].getJettonWalletAddress(new this.TonWeb.utils.Address(from))];
                                case 2:
                                    if ((_a.sent()).toString(false) !== new this.TonWeb.utils.Address(sourceAddress).toString(false)) {
                                        // fake transfer - IT IS VERY IMPORTANT TO DO THIS CHECK
                                        return [2 /*return*/, false];
                                    }
                                    _a.label = 3;
                                case 3: return [2 /*return*/, true];
                                case 4:
                                    e_3 = _a.sent();
                                    console.error(e_3);
                                    return [2 /*return*/, false];
                                case 5: return [2 /*return*/];
                            }
                        });
                    });
                };
                DepositsJettons.prototype.processDeposit = function (request) {
                    return __awaiter(this, void 0, void 0, function () {
                        var userTonWallet, keyPair, wallet, toncoinBalance, _a, _b, jettonWalletAddress, jettonWallet, jettonBalance, jettonInfo, seqno, transfer, _c, _d;
                        var _e;
                        return __generator(this, function (_f) {
                            switch (_f.label) {
                                case 0:
                                    userTonWallet = this.userIdToTonWallet[request.userId];
                                    keyPair = userTonWallet.keyPair;
                                    wallet = this.createWallet(keyPair);
                                    _b = (_a = this.TonWeb.utils.BN).bind;
                                    return [4 /*yield*/, this.tonwebsdk.provider.getBalance(userTonWallet.address.toString(true, true, true))];
                                case 1:
                                    toncoinBalance = new (_b.apply(_a, [void 0, _f.sent()]))();
                                    if (new this.TonWeb.utils.BN(this.TopUpAmount).gt(toncoinBalance)) {
                                        return [2 /*return*/, false]; // wait for Toncoins top-up for gas to transfer jettons
                                    }
                                    jettonWalletAddress = this.userIdToJettonWallet[request.userId][request.jettonName];
                                    jettonWallet = new this.TonWeb.token.jetton.JettonWallet(this.tonwebsdk.provider, { address: jettonWalletAddress });
                                    return [4 /*yield*/, jettonWallet.getData()];
                                case 2:
                                    jettonBalance = (_f.sent()).balance;
                                    jettonInfo = this.jettonsInfo[request.jettonName];
                                    if (new this.TonWeb.utils.BN(jettonInfo.minDepositAmount).gt(jettonBalance)) {
                                        console.log('not enough jettons');
                                        return [2 /*return*/, false];
                                    }
                                    return [4 /*yield*/, wallet.methods.seqno().call()];
                                case 3:
                                    seqno = (_f.sent()) || 0;
                                    _d = (_c = wallet.methods).transfer;
                                    _e = {
                                        secretKey: keyPair.secretKey,
                                        toAddress: jettonWalletAddress,
                                        amount: 0,
                                        seqno: seqno,
                                        sendMode: 128 + 32
                                    };
                                    return [4 /*yield*/, jettonWallet.createTransferBody({
                                            queryId: seqno,
                                            jettonAmount: jettonBalance,
                                            toAddress: new this.TonWeb.utils.Address(MY_HOT_WALLET_ADDRESS),
                                            responseAddress: new this.TonWeb.utils.Address(MY_HOT_WALLET_ADDRESS)
                                        })];
                                case 4: return [4 /*yield*/, _d.apply(_c, [(_e.payload = _f.sent(),
                                            _e)])];
                                case 5:
                                    transfer = _f.sent();
                                    // IMPORTANT:
                                    // We send all Toncoin balance from deposit wallet and destroy deposit wallet smart contract.
                                    // After destroy deposit wallet account will be `unitialized`.
                                    // Don't worry, you can always deploy it again with the next transfer (and then immediately destroy it).
                                    // TON has a micro fee for storage, which is occasionally debited from the balance of smart contracts simply for the fact that it's data is stored in the blockchain.
                                    // If there is nothing on the balance, then after a while the account will be frozen.
                                    // To avoid this and to be able to always use this address for this user, we destroy the account after each transfer.
                                    // Destroyed accounts do not store data and therefore do not pay for storage.
                                    return [4 /*yield*/, transfer.send()];
                                case 6:
                                    // IMPORTANT:
                                    // We send all Toncoin balance from deposit wallet and destroy deposit wallet smart contract.
                                    // After destroy deposit wallet account will be `unitialized`.
                                    // Don't worry, you can always deploy it again with the next transfer (and then immediately destroy it).
                                    // TON has a micro fee for storage, which is occasionally debited from the balance of smart contracts simply for the fact that it's data is stored in the blockchain.
                                    // If there is nothing on the balance, then after a while the account will be frozen.
                                    // To avoid this and to be able to always use this address for this user, we destroy the account after each transfer.
                                    // Destroyed accounts do not store data and therefore do not pay for storage.
                                    _f.sent();
                                    // Jetton-wallet contract has automatic Toncoin balance replenishment during transfer -
                                    // at the time the jettons arrive, the jetton-wallet contract always leaves a small Toncoin amount on the balance, enough to store for about a year.
                                    //
                                    // In case of freezing, if the balance of jetton on the jetton-wallet contract is zero, then the incoming jettons will unfreeze it.
                                    //
                                    // However, a case is possible when a user sent too few jettons, your service did not transfer jettons to a hot wallet, and then this jetton-wallet was frozen.
                                    // In this case, the user can be offered to unfreeze his deposit address on his own by https://unfreezer.ton.org/
                                    return [2 /*return*/, true];
                            }
                        });
                    });
                };
                DepositsJettons.prototype.processDepositsTick = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var request, e_4;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!this.depositsRequests.length)
                                        return [2 /*return*/]; // nothing to withdraw
                                    if (this.isProcessing)
                                        return [2 /*return*/];
                                    this.isProcessing = true;
                                    console.log(this.depositsRequests.length + ' requests');
                                    request = this.depositsRequests[0];
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 3, , 4]);
                                    return [4 /*yield*/, this.processDeposit(request)];
                                case 2:
                                    if (_a.sent()) {
                                        this.depositsRequests.shift(); // delete first request from queue
                                    }
                                    return [3 /*break*/, 4];
                                case 3:
                                    e_4 = _a.sent();
                                    console.error(e_4);
                                    return [3 /*break*/, 4];
                                case 4:
                                    this.isProcessing = false;
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                return DepositsJettons;
            }());
            exports_97("DepositsJettons", DepositsJettons);
        }
    };
});
System.register("Core/blockchain/BlockSubscriptionRaw", ["Core/blockchain/DepositsJettons"], function (exports_98, context_98) {
    "use strict";
    var DepositsJettons_1, BlockSubscriptionRaw;
    var __moduleName = context_98 && context_98.id;
    return {
        setters: [
            function (DepositsJettons_1_1) {
                DepositsJettons_1 = DepositsJettons_1_1;
            }
        ],
        execute: function () {
            BlockSubscriptionRaw = /** @class */ (function () {
                function BlockSubscriptionRaw(tonweb, startMasterchainBlockNumber, onTransaction) {
                    this.tonweb = tonweb;
                    this.startMasterchainBlockNumber = startMasterchainBlockNumber;
                    this.onTransaction = onTransaction;
                }
                BlockSubscriptionRaw.prototype.start = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var onBlock, storage, blockSubscribe;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    onBlock = function (blockHeader) { return __awaiter(_this, void 0, void 0, function () {
                                        var workchain, shardId, blockNumber, blockTransactions, shortTransactions, _i, shortTransactions_1, shortTx;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0:
                                                    workchain = blockHeader.id.workchain;
                                                    shardId = blockHeader.id.shard;
                                                    blockNumber = blockHeader.id.seqno;
                                                    console.error('Got block ', workchain + ':' + shardId + ':' + blockNumber);
                                                    return [4 /*yield*/, this.tonweb.provider.getBlockTransactions(workchain, shardId, blockNumber)];
                                                case 1:
                                                    blockTransactions = _a.sent();
                                                    shortTransactions = blockTransactions.transactions;
                                                    _i = 0, shortTransactions_1 = shortTransactions;
                                                    _a.label = 2;
                                                case 2:
                                                    if (!(_i < shortTransactions_1.length)) return [3 /*break*/, 5];
                                                    shortTx = shortTransactions_1[_i];
                                                    return [4 /*yield*/, this.onTransaction(shortTx, blockHeader)];
                                                case 3:
                                                    _a.sent();
                                                    _a.label = 4;
                                                case 4:
                                                    _i++;
                                                    return [3 /*break*/, 2];
                                                case 5: return [2 /*return*/];
                                            }
                                        });
                                    }); };
                                    storage = new DepositsJettons_1.DepositsJettons.Instance.TonWeb.InMemoryBlockStorage(function (log) { return console.error('DB: ' + log); });
                                    blockSubscribe = new DepositsJettons_1.DepositsJettons.Instance.TonWeb.BlockSubscription(this.tonweb.provider, storage, onBlock, {
                                        startMcBlockNumber: this.startMasterchainBlockNumber
                                    });
                                    return [4 /*yield*/, blockSubscribe.start()];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                return BlockSubscriptionRaw;
            }());
            exports_98("BlockSubscriptionRaw", BlockSubscriptionRaw);
        }
    };
});
System.register("Core/blockchain/Deposits", ["Core/blockchain/BlockSubscriptionIndex"], function (exports_99, context_99) {
    "use strict";
    var BlockSubscriptionIndex_2, IS_TESTNET, TONCENTER_API_KEY, NODE_API_URL, INDEX_API_URL, MY_HOT_WALLET_ADDRESS, Deposits;
    var __moduleName = context_99 && context_99.id;
    return {
        setters: [
            function (BlockSubscriptionIndex_2_1) {
                BlockSubscriptionIndex_2 = BlockSubscriptionIndex_2_1;
            }
        ],
        execute: function () {
            exports_99("IS_TESTNET", IS_TESTNET = true);
            exports_99("TONCENTER_API_KEY", TONCENTER_API_KEY = IS_TESTNET ? '0b6ec5b0242bd7bdd6c24a2dc2cf1c8246713a5adefddbd09fb4c69608ecd901' : '0b6ec5b0242bd7bdd6c24a2dc2cf1c8246713a5adefddbd09fb4c69608ecd901'); // obtain on https://toncenter.com
            // You can use your own instance of TON-HTTP-API or public toncenter.com
            exports_99("NODE_API_URL", NODE_API_URL = IS_TESTNET ? 'https://testnet.toncenter.com/api/v2/jsonRPC' : 'https://toncenter.com/api/v2/jsonRPC');
            exports_99("INDEX_API_URL", INDEX_API_URL = IS_TESTNET ? 'https://testnet.toncenter.com/api/index/' : 'https://toncenter.com/api/index/');
            exports_99("MY_HOT_WALLET_ADDRESS", MY_HOT_WALLET_ADDRESS = 'EQB7AhB4fP7SWtnfnIMcVUkwIgVLKqijlcpjNEPUVontypON');
            Deposits = /** @class */ (function () {
                function Deposits() {
                    var _this = this;
                    /**
                     * @param tx    {Object}
                     * @return {Promise<void>}
                     */
                    this.processDeposit = function (tx) { return __awaiter(_this, void 0, void 0, function () {
                        var balance, _a, _b, keyPair, depositWallet, seqno, transfer;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    _b = (_a = this.TonWeb.utils.BN).bind;
                                    return [4 /*yield*/, this.tonwebsdk.provider.getBalance(tx.address.account_address)];
                                case 1:
                                    balance = new (_b.apply(_a, [void 0, _c.sent()]))();
                                    if (!balance.gt(new this.TonWeb.utils.BN(0))) return [3 /*break*/, 5];
                                    keyPair = this.TonWeb.utils.nacl.sign.keyPair();
                                    depositWallet = this.createWallet(keyPair);
                                    return [4 /*yield*/, depositWallet.methods.seqno().call()];
                                case 2:
                                    seqno = _c.sent();
                                    return [4 /*yield*/, depositWallet.methods.transfer({
                                            secretKey: keyPair.secretKey,
                                            toAddress: MY_HOT_WALLET_ADDRESS,
                                            amount: 0,
                                            seqno: seqno,
                                            payload: '123',
                                            sendMode: 128 + 32, // mode 128 is used for messages that are to carry all the remaining balance; mode 32 means that the current account must be destroyed if its resulting balance is zero;
                                        })];
                                case 3:
                                    transfer = _c.sent();
                                    // IMPORTANT:
                                    // We send all balance from deposit wallet to hot wallet and destroy deposit wallet smart contract.
                                    // After destroy deposit wallet account will be `unitialized`.
                                    // Don't worry, you can always deploy it again with the next transfer (and then immediately destroy it).
                                    // TON has a micro fee for storage, which is occasionally debited from the balance of smart contracts simply for the fact that it's data is stored in the blockchain.
                                    // If there is nothing on the balance, then after a while the account will be frozen.
                                    // To avoid this and to be able to always use this address for this user, we destroy the account after each transfer.
                                    // Destroyed accounts do not store data and therefore do not pay for storage.
                                    return [4 /*yield*/, transfer.send()];
                                case 4:
                                    // IMPORTANT:
                                    // We send all balance from deposit wallet to hot wallet and destroy deposit wallet smart contract.
                                    // After destroy deposit wallet account will be `unitialized`.
                                    // Don't worry, you can always deploy it again with the next transfer (and then immediately destroy it).
                                    // TON has a micro fee for storage, which is occasionally debited from the balance of smart contracts simply for the fact that it's data is stored in the blockchain.
                                    // If there is nothing on the balance, then after a while the account will be frozen.
                                    // To avoid this and to be able to always use this address for this user, we destroy the account after each transfer.
                                    // Destroyed accounts do not store data and therefore do not pay for storage.
                                    _c.sent();
                                    _c.label = 5;
                                case 5: return [2 /*return*/];
                            }
                        });
                    }); };
                    this.onTransaction = function (tx) { return __awaiter(_this, void 0, void 0, function () {
                        var result, txFromNode;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    // ATTENTION: ALWAYS CHECK THAT THERE WERE NO OUTGOING MESSAGES.
                                    // It is important to check that Toncoins did not bounce back in case of an error.
                                    // To do this, we check that there was only an incoming message and there were no outgoing messages.
                                    if (tx.out_msgs.length > 0) {
                                        return [2 /*return*/];
                                    }
                                    return [4 /*yield*/, this.isDepositAddress(tx.account)];
                                case 1:
                                    if (!_a.sent()) return [3 /*break*/, 4];
                                    return [4 /*yield*/, this.tonwebsdk.provider.getTransactions(tx.account, 1, tx.lt, tx.hash)];
                                case 2:
                                    result = _a.sent();
                                    if (result.length < 1) {
                                        throw new Error('no transaction in node');
                                    }
                                    txFromNode = result[0];
                                    // You can check `in_msg` and `out_msgs` parameters between `tx` and `txFromNode`
                                    return [4 /*yield*/, this.processDeposit(txFromNode)];
                                case 3:
                                    // You can check `in_msg` and `out_msgs` parameters between `tx` and `txFromNode`
                                    _a.sent(); // use tx from your own node
                                    _a.label = 4;
                                case 4: return [2 /*return*/];
                            }
                        });
                    }); };
                    this.TonWeb = window["TonWeb"];
                    this.tonwebsdk = new this.TonWeb(new this.TonWeb.HttpProvider(NODE_API_URL, { apiKey: TONCENTER_API_KEY }));
                }
                Object.defineProperty(Deposits, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new Deposits();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                /**
                 * @param   address {string}
                 * @return {boolean}
                 */
                Deposits.prototype.isDepositAddress = function (address) {
                    return __awaiter(this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            new this.TonWeb.Address(address).toString(true, true, true); // convert address to you form
                            // more about address forms - https://ton.org/docs/#/howto/step-by-step?id=_1-smart-contract-addresses
                            // check in DB that this address is one of deposit addresses of your service
                            return [2 /*return*/, false];
                        });
                    });
                };
                Deposits.prototype.createWallet = function (keyPair) {
                    var WalletClass = this.tonwebsdk.wallet.all.v3R2;
                    var wallet = new WalletClass(this.tonwebsdk.provider, {
                        publicKey: keyPair.publicKey
                    });
                    return wallet;
                };
                Deposits.prototype.init = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var masterchainInfo, lastMasterchainBlockNumber, blockSubscription;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.tonwebsdk.provider.getMasterchainInfo()];
                                case 1:
                                    masterchainInfo = _a.sent();
                                    lastMasterchainBlockNumber = masterchainInfo.last.seqno;
                                    console.log("Starts from ".concat(lastMasterchainBlockNumber, " masterchain block"));
                                    blockSubscription = new BlockSubscriptionIndex_2.BlockSubscriptionIndex(this.tonwebsdk, lastMasterchainBlockNumber, this.onTransaction, INDEX_API_URL, TONCENTER_API_KEY);
                                    return [4 /*yield*/, blockSubscription.start()];
                                case 2:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                return Deposits;
            }());
            exports_99("Deposits", Deposits);
        }
    };
});
System.register("Core/blockchain/Jetton", [], function (exports_100, context_100) {
    "use strict";
    var TonWeb, _a, JettonMinter, JettonWallet, tonweb, getJettonBalance;
    var __moduleName = context_100 && context_100.id;
    return {
        setters: [],
        execute: function () {
            exports_100("TonWeb", TonWeb = window["TonWeb"]);
            _a = TonWeb.token.jetton, JettonMinter = _a.JettonMinter, JettonWallet = _a.JettonWallet;
            exports_100("tonweb", tonweb = new TonWeb(new TonWeb.HttpProvider("https://testnet.toncenter.com/api/v2/jsonRPC", {
                apiKey: "0b6ec5b0242bd7bdd6c24a2dc2cf1c8246713a5adefddbd09fb4c69608ecd901",
            })));
            exports_100("getJettonBalance", getJettonBalance = function (jettonAddr, owner) { return __awaiter(void 0, void 0, void 0, function () {
                var minter, walletAddr, jettonWallet, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, new JettonMinter(tonweb.provider, {
                                adminAddress: new TonWeb.Address(owner),
                                jettonContentUri: "",
                                jettonWalletCodeHex: "",
                                address: jettonAddr,
                            })];
                        case 1:
                            minter = _a.sent();
                            return [4 /*yield*/, minter.getJettonWalletAddress(new TonWeb.Address(owner))];
                        case 2:
                            walletAddr = _a.sent();
                            jettonWallet = new JettonWallet(tonweb.provider, {
                                address: walletAddr,
                            });
                            return [4 /*yield*/, jettonWallet.getData()];
                        case 3:
                            data = _a.sent();
                            // console.log("getJettonBalance", data.balance.toNumber());
                            return [2 /*return*/, Number(data.balance)];
                    }
                });
            }); });
        }
    };
});
System.register("Core/blockchain/Withdrawals", [], function (exports_101, context_101) {
    "use strict";
    var isMainnet, TonWeb, tonweb, BN, Deposits;
    var __moduleName = context_101 && context_101.id;
    return {
        setters: [],
        execute: function () {
            exports_101("isMainnet", isMainnet = false);
            exports_101("TonWeb", TonWeb = window["TonWeb"]);
            exports_101("tonweb", tonweb = isMainnet ?
                new TonWeb(new TonWeb.HttpProvider('https://toncenter.com/api/v2/jsonRPC', { apiKey: 'YOUR_MAINNET_API_KEY' })) :
                new TonWeb(new TonWeb.HttpProvider('https://testnet.toncenter.com/api/v2/jsonRPC', { apiKey: '0b6ec5b0242bd7bdd6c24a2dc2cf1c8246713a5adefddbd09fb4c69608ecd901' })));
            exports_101("BN", BN = TonWeb.utils.BN);
            Deposits = /** @class */ (function () {
                function Deposits() {
                    this.TonWeb = window["TonWeb"];
                    // this.tonwebsdk = new this.TonWeb(new this.TonWeb.HttpProvider(NODE_API_URL, { apiKey: TONCENTER_API_KEY }));
                }
                Object.defineProperty(Deposits, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new Deposits();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                return Deposits;
            }());
            exports_101("Deposits", Deposits);
        }
    };
});
System.register("Data/CommonUIUtils", ["Tools/commTool", "GameMgr"], function (exports_102, context_102) {
    "use strict";
    var commTool_10, GameMgr_18, CommonUIUtils;
    var __moduleName = context_102 && context_102.id;
    return {
        setters: [
            function (commTool_10_1) {
                commTool_10 = commTool_10_1;
            },
            function (GameMgr_18_1) {
                GameMgr_18 = GameMgr_18_1;
            }
        ],
        execute: function () {
            CommonUIUtils = /** @class */ (function () {
                function CommonUIUtils() {
                }
                CommonUIUtils.replaceUIUrl = function (icon) {
                    var trueIcon = icon;
                    if (icon.indexOf(CommonUIUtils.uiRepUrl) != -1) {
                        trueIcon = icon.replace(CommonUIUtils.uiRepUrl, "res/art/");
                    }
                    return trueIcon;
                };
                CommonUIUtils.getSprite = function (spriteStr) {
                    var spriteIcon = GameMgr_18.GameMgr.assetMgr.getAssetByName(spriteStr);
                    return spriteIcon;
                };
                /** 快速创建一个 imgSpriteArrange 对象 */
                CommonUIUtils.getImgSpriteArrange = function (img, hlayout, vlayout) {
                    if (hlayout === void 0) { hlayout = m4m.framework.layoutOption.LEFT; }
                    if (vlayout === void 0) { vlayout = m4m.framework.layoutOption.V_CENTER; }
                    var imgNum = commTool_10.commTool.makeImgSpriteArrange(img);
                    img.transform.visible = false;
                    var initX = img.transform.getLayoutValue(hlayout);
                    imgNum.transform.layoutState = vlayout | hlayout;
                    imgNum.transform.setLayoutValue(hlayout, initX);
                    return imgNum;
                };
                CommonUIUtils.uiRepUrl = "ui://";
                CommonUIUtils.showAmounts = [];
                CommonUIUtils.skinAmounts = [];
                return CommonUIUtils;
            }());
            exports_102("CommonUIUtils", CommonUIUtils);
        }
    };
});
System.register("Data/RankPrizeData", [], function (exports_103, context_103) {
    "use strict";
    var RankPrizeData;
    var __moduleName = context_103 && context_103.id;
    return {
        setters: [],
        execute: function () {
            //排行榜 数据
            RankPrizeData = /** @class */ (function () {
                function RankPrizeData() {
                    this.SQTawardDataArr = new Array();
                    this.USDTawardDataArr = new Array();
                }
                return RankPrizeData;
            }());
            exports_103("RankPrizeData", RankPrizeData);
        }
    };
});
System.register("Data/RankPrizeInfoData", [], function (exports_104, context_104) {
    "use strict";
    var RankPrizeInfoData;
    var __moduleName = context_104 && context_104.id;
    return {
        setters: [],
        execute: function () {
            //排行榜 奖励信息数据
            RankPrizeInfoData = /** @class */ (function () {
                function RankPrizeInfoData() {
                    this.awardDescribeStr = "";
                    this.awardNum = 0;
                }
                RankPrizeInfoData.prototype.setSQTData = function (index, topNum, awardNum) {
                    // tslint:disable-next-line: switch-default
                    switch (index) {
                        case 0:
                            this.awardDescribeStr = "Participation rewards(SQT) claimed";
                            break;
                        case 1:
                            this.awardDescribeStr = "Participation rewards(SQT) claimable";
                            break;
                        case 2:
                            this.awardDescribeStr = "Participation rewards(SQT) claim in total";
                            break;
                        case 3:
                            this.awardDescribeStr = "Top ".concat(topNum, " rewards(SQT) claimed");
                            break;
                        case 4:
                            this.awardDescribeStr = "Top ".concat(topNum, " rewards(SQT) claimable ");
                            break;
                        case 5:
                            this.awardDescribeStr = "Top ".concat(topNum, " rewards(SQT) claim in total");
                            break;
                        case 6:
                            this.awardDescribeStr = "Top ".concat(topNum, " rewards(SQT) locked ");
                    }
                    this.awardNum = awardNum;
                };
                RankPrizeInfoData.prototype.setUSDTData = function (index, awardNum) {
                    // tslint:disable-next-line: switch-default
                    switch (index) {
                        case 0:
                            this.awardDescribeStr = "Bonus(USDT) claimed";
                            break;
                        case 1:
                            this.awardDescribeStr = "Bonus(USDT) claimable";
                            break;
                        case 2:
                            this.awardDescribeStr = "Bonus(USDT) claim in total";
                    }
                    this.awardNum = awardNum;
                };
                return RankPrizeInfoData;
            }());
            exports_104("RankPrizeInfoData", RankPrizeInfoData);
        }
    };
});
System.register("Manager/ShootManager", ["Tools/FrameMgr", "Tools/gameMathUtil", "Audio/AudioEnum", "Audio/AudioPlayer"], function (exports_105, context_105) {
    "use strict";
    var FrameMgr_10, gameMathUtil_11, AudioEnum_8, AudioPlayer_10, ShootManager;
    var __moduleName = context_105 && context_105.id;
    return {
        setters: [
            function (FrameMgr_10_1) {
                FrameMgr_10 = FrameMgr_10_1;
            },
            function (gameMathUtil_11_1) {
                gameMathUtil_11 = gameMathUtil_11_1;
            },
            function (AudioEnum_8_1) {
                AudioEnum_8 = AudioEnum_8_1;
            },
            function (AudioPlayer_10_1) {
                AudioPlayer_10 = AudioPlayer_10_1;
            }
        ],
        execute: function () {
            //播开播声音
            ShootManager = /** @class */ (function () {
                function ShootManager() {
                    this.shootCount = 0;
                    this.gapTime = 0; //每XX秒 轮一次
                    this.newDaTime = 0;
                    this.max = 0.28;
                    this.min = 0.06;
                    //
                    FrameMgr_10.FrameMgr.Add(this.update, this);
                }
                Object.defineProperty(ShootManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new ShootManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //开枪 
                ShootManager.prototype.playShootFun = function (num) {
                    this.shootCount = num;
                    this.gapTime = gameMathUtil_11.gameMathUtil.RandRange(this.min, this.max);
                };
                ShootManager.prototype.update = function (dt) {
                    if (this.shootCount <= 0) {
                        return;
                    }
                    this.newDaTime += dt;
                    if (this.newDaTime >= this.gapTime) {
                        this.newDaTime = 0;
                        this.gapTime = gameMathUtil_11.gameMathUtil.RandRange(this.min, this.max);
                        this.shootCount--;
                        AudioPlayer_10.AudioPlayer.play(AudioEnum_8.AudioEnum.WoodenGunshoot);
                    }
                };
                return ShootManager;
            }());
            exports_105("ShootManager", ShootManager);
        }
    };
});
System.register("Net/DataEvents/WoodConfigBaseEvent", [], function (exports_106, context_106) {
    "use strict";
    var WoodConfigBaseEvent;
    var __moduleName = context_106 && context_106.id;
    return {
        setters: [],
        execute: function () {
            WoodConfigBaseEvent = /** @class */ (function () {
                function WoodConfigBaseEvent() {
                }
                /** 初始化全部数据*/
                WoodConfigBaseEvent.Init = "Init";
                /** 批量加载数据*/
                WoodConfigBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                WoodConfigBaseEvent.id = "id";
                /** 备注*/
                WoodConfigBaseEvent.desc = "desc";
                /** 用户列表*/
                WoodConfigBaseEvent.players = "players";
                /** 每一步距离*/
                WoodConfigBaseEvent.stepDis = "stepDis";
                /** 下落高度*/
                WoodConfigBaseEvent.dropHeigth = "dropHeigth";
                /** 初始位置*/
                WoodConfigBaseEvent.startArea = "startArea";
                /** 结束位置*/
                WoodConfigBaseEvent.finishArea = "finishArea";
                /** 活动区域*/
                WoodConfigBaseEvent.moveArea = "moveArea";
                /** NPC位置*/
                WoodConfigBaseEvent.npcPos = "npcPos";
                /** NPC旋转*/
                WoodConfigBaseEvent.npcRot = "npcRot";
                /** 长度*/
                WoodConfigBaseEvent.soundLen = "soundLen";
                /** 长度*/
                WoodConfigBaseEvent.headTime = "headTime";
                /** 最小间隔*/
                WoodConfigBaseEvent.minInterval = "minInterval";
                /** 间隔浮动范围*/
                WoodConfigBaseEvent.intervalPlus = "intervalPlus";
                /** 提前发送时间*/
                WoodConfigBaseEvent.advance = "advance";
                /** 游戏总时间*/
                WoodConfigBaseEvent.totleTime = "totleTime";
                /** 倒计时时长*/
                WoodConfigBaseEvent.countTime = "countTime";
                /** 游戏开始时间*/
                WoodConfigBaseEvent.gameTime = "gameTime";
                /** 游戏状态*/
                WoodConfigBaseEvent.gameStatus = "gameStatus";
                /** 倒计时开始时间*/
                WoodConfigBaseEvent.countDown = "countDown";
                /** 当前时间*/
                WoodConfigBaseEvent.nowTime = "nowTime";
                /** 结束时间*/
                WoodConfigBaseEvent.endTime = "endTime";
                /** 游戏场景ID*/
                WoodConfigBaseEvent.gameScene = "gameScene";
                return WoodConfigBaseEvent;
            }());
            exports_106("WoodConfigBaseEvent", WoodConfigBaseEvent);
        }
    };
});
System.register("Net/DataEvents/WoodSongDataEvent", [], function (exports_107, context_107) {
    "use strict";
    var WoodSongDataEvent;
    var __moduleName = context_107 && context_107.id;
    return {
        setters: [],
        execute: function () {
            WoodSongDataEvent = /** @class */ (function () {
                function WoodSongDataEvent() {
                }
                /** 初始化全部数据*/
                WoodSongDataEvent.Init = "Init";
                /** 批量加载数据*/
                WoodSongDataEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                WoodSongDataEvent.id = "id";
                /** 播放歌曲ID*/
                WoodSongDataEvent.playSound = "playSound";
                /** 播放时间*/
                WoodSongDataEvent.playSoundTime = "playSoundTime";
                /** 停止时间*/
                WoodSongDataEvent.stopSoundTime = "stopSoundTime";
                return WoodSongDataEvent;
            }());
            exports_107("WoodSongDataEvent", WoodSongDataEvent);
        }
    };
});
System.register("Manager/WoodenPeopleManager", ["eventMgr", "PSDUI/UiDataManager", "Time/CDManage", "Core/StageMgr", "Data/BindKeyName", "GameEnum", "gamePlays/GamePlayMgr", "Net/DataEvents/WoodConfigBaseEvent", "Net/DataEvents/WoodSongDataEvent", "Net/WsDataManager", "Role/RoleAttrInfo", "Manager/GameRunningCountdownManager", "Manager/GameStartCountdownManager"], function (exports_108, context_108) {
    "use strict";
    var eventMgr_18, UiDataManager_16, CDManage_5, StageMgr_18, BindKeyName_16, GameEnum_30, GamePlayMgr_9, WoodConfigBaseEvent_1, WoodSongDataEvent_1, WsDataManager_9, RoleAttrInfo_9, GameRunningCountdownManager_2, GameStartCountdownManager_2, WoodenPeopleManager;
    var __moduleName = context_108 && context_108.id;
    return {
        setters: [
            function (eventMgr_18_1) {
                eventMgr_18 = eventMgr_18_1;
            },
            function (UiDataManager_16_1) {
                UiDataManager_16 = UiDataManager_16_1;
            },
            function (CDManage_5_1) {
                CDManage_5 = CDManage_5_1;
            },
            function (StageMgr_18_1) {
                StageMgr_18 = StageMgr_18_1;
            },
            function (BindKeyName_16_1) {
                BindKeyName_16 = BindKeyName_16_1;
            },
            function (GameEnum_30_1) {
                GameEnum_30 = GameEnum_30_1;
            },
            function (GamePlayMgr_9_1) {
                GamePlayMgr_9 = GamePlayMgr_9_1;
            },
            function (WoodConfigBaseEvent_1_1) {
                WoodConfigBaseEvent_1 = WoodConfigBaseEvent_1_1;
            },
            function (WoodSongDataEvent_1_1) {
                WoodSongDataEvent_1 = WoodSongDataEvent_1_1;
            },
            function (WsDataManager_9_1) {
                WsDataManager_9 = WsDataManager_9_1;
            },
            function (RoleAttrInfo_9_1) {
                RoleAttrInfo_9 = RoleAttrInfo_9_1;
            },
            function (GameRunningCountdownManager_2_1) {
                GameRunningCountdownManager_2 = GameRunningCountdownManager_2_1;
            },
            function (GameStartCountdownManager_2_1) {
                GameStartCountdownManager_2 = GameStartCountdownManager_2_1;
            }
        ],
        execute: function () {
            //木头人游戏数据
            WoodenPeopleManager = /** @class */ (function () {
                function WoodenPeopleManager() {
                    //胜利玩家列表
                    this.winPlayer = [];
                    //活着的玩家列表
                    this.lifePlayer = {};
                }
                Object.defineProperty(WoodenPeopleManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new WoodenPeopleManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //初始化
                WoodenPeopleManager.prototype.init = function () {
                    WsDataManager_9.WsDataManager.WoodConfigBaseData.addEventListener(WoodConfigBaseEvent_1.WoodConfigBaseEvent.Init, this.woodenPeopleInfoFun.bind(this));
                    WsDataManager_9.WsDataManager.WoodConfigBaseData.addEventListener(WoodConfigBaseEvent_1.WoodConfigBaseEvent.players, this.playersInfoUpDateFun.bind(this));
                    WsDataManager_9.WsDataManager.WoodConfigBaseData.addEventListener(WoodConfigBaseEvent_1.WoodConfigBaseEvent.gameTime, this.gameStartFun.bind(this));
                    WsDataManager_9.WsDataManager.WoodConfigBaseData.addEventListener(WoodConfigBaseEvent_1.WoodConfigBaseEvent.countDown, this.countDownTimeUpdateFun.bind(this));
                    WsDataManager_9.WsDataManager.WoodSongDataData.addEventListener(WoodSongDataEvent_1.WoodSongDataEvent.Init, this.soundTimeUpdateFun.bind(this));
                };
                //初始化所有玩家信息
                WoodenPeopleManager.prototype.initLifePlayer = function () {
                    var players = JSON.parse(WsDataManager_9.WsDataManager.WoodConfigBaseData.players);
                    var role = __assign({}, players);
                    this.lifePlayer = players;
                    this.winPlayer.length = 0;
                    UiDataManager_16.UiDataManager.changeFunctionData(BindKeyName_16.BindKeyName.Scenario, role);
                };
                WoodenPeopleManager.prototype.woodenPeopleInfoFun = function () {
                    console.error("服务器消息: 木头人: 木头人游戏", WsDataManager_9.WsDataManager.WoodConfigBaseData);
                    this.initLifePlayer();
                    //进入木头人游戏
                    GamePlayMgr_9.GamePlayMgr.RunGame(GameEnum_30.GamePlayType.woodenPeople);
                    var generic = new eventMgr_18.EventGeneric();
                    generic.data = { config: WsDataManager_9.WsDataManager.WoodConfigBaseData };
                    eventMgr_18.EventMgr.dispatchEvent("game_config", generic);
                };
                //玩家数据更新 (移动同步相关)
                WoodenPeopleManager.prototype.playersInfoUpDateFun = function (info) {
                    //玩家死亡列表
                    var playerDeadList;
                    //胜利玩家列表
                    var playerWinList;
                    var roleArr = info;
                    // console.error("玩家数据更新", roleArr);
                    for (var key in roleArr) {
                        // console.log(`key:${i}`);
                        var GUID = key;
                        var posInfo = roleArr[key];
                        var isMain = GUID == StageMgr_18.StageMgr.PlayerGUID;
                        var roleServerInfo = new RoleAttrInfo_9.RoleServerInfo();
                        if (isMain) {
                            //
                            // console.error("主玩家数据",posInfo);
                        }
                        else {
                            var str = posInfo.pos;
                            var pos = m4m.poolv3();
                            pos.x = str.x;
                            pos.y = str.y;
                            pos.z = str.z;
                            roleServerInfo.pos = pos;
                            //到目标点用的时间
                            var moveTime = posInfo.moveTime;
                            roleServerInfo.moveTime = moveTime;
                            //移动类型  走  跑  跳 等
                            var moveType = posInfo.moveType;
                            roleServerInfo.moveType = moveType;
                        }
                        roleServerInfo.GUID = GUID;
                        roleServerInfo.roleState = posInfo.playerInfo.status;
                        roleServerInfo.inGameStatus = posInfo.playerInfo.inGameStatus;
                        var data = roleServerInfo;
                        // 
                        eventMgr_18.EventMgr.dispatchEvent("role_Data_upDate", new eventMgr_18.EventGeneric({ data: data }));
                        //判断玩家是死亡
                        if (posInfo.playerInfo.inGameStatus == GameEnum_30.InGameStatus.inGameDead && this.lifePlayer[GUID]) {
                            if (!playerDeadList) {
                                playerDeadList = [GUID];
                            }
                            else {
                                playerDeadList.push(GUID);
                            }
                            delete this.lifePlayer[GUID];
                        }
                        else if (posInfo.playerInfo.inGameStatus == GameEnum_30.InGameStatus.inGameWin && this.winPlayer.indexOf(GUID) == -1) { //判断玩家是否胜利
                            if (!playerWinList) {
                                playerWinList = [posInfo];
                            }
                            else {
                                playerWinList.push(posInfo);
                            }
                            this.winPlayer.push(GUID);
                        }
                    }
                    //发送其他玩家死亡
                    if (playerDeadList) {
                        UiDataManager_16.UiDataManager.changeFunctionData(BindKeyName_16.BindKeyName.gamePlayerDead, playerDeadList);
                        //EventMgr.dispatchEvent("game_Player_Dead", new EventGeneric<{ GUIDS: string[] }>({ GUIDS: playerDeadList }));
                    }
                    //发送其他玩家胜利
                    if (playerWinList) {
                        UiDataManager_16.UiDataManager.changeFunctionData(BindKeyName_16.BindKeyName.WoodIntegral, playerWinList);
                    }
                };
                //加载资源完成游戏开始时间同步
                WoodenPeopleManager.prototype.gameStartFun = function (data) {
                    console.error("服务器消息: 木头人: 服务器时间:", data);
                    //更新服务器时间
                    var serverTime = data;
                    CDManage_5.CDManage.Instance.setServerTime(serverTime);
                    // let generic = new EventGeneric<{ time: number }>();
                    // generic.data = { time: serverTime };
                    // EventMgr.dispatchEvent("Wooden_serverTime", generic);
                };
                //倒计时 开始时间先同步
                WoodenPeopleManager.prototype.countDownTimeUpdateFun = function (data) {
                    console.error("服务器消息: 木头人: 开始时间:", data);
                    //停止之前的倒计时
                    GameStartCountdownManager_2.GameStartCountdownManager.Instance.stop();
                    GameRunningCountdownManager_2.GameRunningCountdownManager.Instance.stop();
                    //开始倒计时
                    var countdownTime = WsDataManager_9.WsDataManager.WoodConfigBaseData.countTime;
                    GameStartCountdownManager_2.GameStartCountdownManager.Instance.init(data, countdownTime, function () {
                        // 进行游戏倒计时
                        var runStartTime = WsDataManager_9.WsDataManager.WoodConfigBaseData.countDown + WsDataManager_9.WsDataManager.WoodConfigBaseData.countTime;
                        var countdownTime2 = WsDataManager_9.WsDataManager.WoodConfigBaseData.totleTime - 1000;
                        GameRunningCountdownManager_2.GameRunningCountdownManager.Instance.init(runStartTime, countdownTime2);
                    });
                };
                //声音 开始 和 停止
                WoodenPeopleManager.prototype.soundTimeUpdateFun = function () {
                    if (WsDataManager_9.WsDataManager.WoodSongDataData.playSound != 0) {
                        // console.error("服务器消息: 音效id:", WsDataManager.WoodSongDataData.playSound, "开始时间:", WsDataManager.WoodSongDataData.playSoundTime);
                        eventMgr_18.EventMgr.dispatchEvent("game_wooden_audioTime", {
                            data: {
                                playSound: WsDataManager_9.WsDataManager.WoodSongDataData.playSound,
                                playSoundTime: WsDataManager_9.WsDataManager.WoodSongDataData.playSoundTime,
                            },
                        });
                    }
                    else {
                        // console.error("服务器消息: 音效结束时间:", WsDataManager.WoodSongDataData.stopSoundTime);
                        eventMgr_18.EventMgr.dispatchEvent("game_wooden_audioStopTime", {
                            data: {
                                stopSoundTime: WsDataManager_9.WsDataManager.WoodSongDataData.stopSoundTime,
                            },
                        });
                    }
                };
                return WoodenPeopleManager;
            }());
            exports_108("WoodenPeopleManager", WoodenPeopleManager);
        }
    };
});
System.register("Net/HeartBeatManager", ["Time/CTimer", "Time/TimeUtil"], function (exports_109, context_109) {
    "use strict";
    var CTimer_2, TimeUtil_6, HeartBeatManager;
    var __moduleName = context_109 && context_109.id;
    return {
        setters: [
            function (CTimer_2_1) {
                CTimer_2 = CTimer_2_1;
            },
            function (TimeUtil_6_1) {
                TimeUtil_6 = TimeUtil_6_1;
            }
        ],
        execute: function () {
            //心跳管理
            HeartBeatManager = /** @class */ (function () {
                function HeartBeatManager() {
                    //每10秒
                    CTimer_2.CTimer.Instance.loopTimeUpdate(10000, this.updateFun.bind(this));
                }
                Object.defineProperty(HeartBeatManager, "Instance", {
                    get: function () {
                        if (this._instance == null) {
                            this._instance = new HeartBeatManager();
                        }
                        return this._instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                //心跳  同步服务器时间
                HeartBeatManager.prototype.SyncServerTime = function () {
                    var gameTime = Math.floor(TimeUtil_6.TimeUtil.realtimeSinceStartup / 1000);
                    console.error("当前游戏启动时间秒 " + gameTime);
                };
                HeartBeatManager.prototype.updateFun = function () {
                    // 
                    this.SyncServerTime();
                };
                return HeartBeatManager;
            }());
            exports_109("HeartBeatManager", HeartBeatManager);
        }
    };
});
// import { NetWebscoket } from "./NetWebsocket";
// export class MessageSendConversion {
//     //登录
//     public static login(userName: string, password: string) {
//         let mess = `{"currentType":null,"type":null,"callTime":"0001-01-01T00:00:00","callid":0,"timeout":0,"className":"LoginManager","functionName":"login","argsType":null,
//         "args":["${userName}","${password}"],"returnType":null,"returnValue":null}`;
//         NetWebscoket.Instance.sendStr(mess);
//     }
//     /**
//      * 进入房间
//      * @param userName 玩家ID 暂用
//      * @param roomType 房间类型
//      */
//     public static addToRoom(roomType: number = 1) {
//         // tslint:disable-next-line: max-line-length
//         let mess = `{"currentType":null,"type":null,"callTime":"0001-01-01T00:00:00","callid":0,"timeout":0,"className":"RoomManager","functionName":"addToRoom","argsType":null,
//         "args":["${roomType}"],"returnType":null,"returnValue":null}`;
//         NetWebscoket.Instance.sendStr(mess);
//     }
//     /***
//      * 进游戏场景资源加载完成
//      * readyForGame
//      */
//     public static loadReadyForGame() {
//         let mess = `{"currentType":null,"type":null,"callTime":"0001-01-01T00:00:00","callid":0,"timeout":0,"className":"RoomManager","functionName":"readyForGame","argsType":null,
//         "args":["test22212021/10/12 20:38:55","test222"],"returnType":null,"returnValue":null}`;
//         NetWebscoket.Instance.sendStr(mess);
//     }
//     /***
//      * 发送更新玩家信息
//      * updataGame
//      */
//     public static updataGame(pos: gd3d.math.vector3, yAngle: number) {
//         // let mess = `{"currentType":null,"type":null,"callTime":"0001-01-01T00:00:00","callid":0,"timeout":0,"className":"GameManager","functionName":"updataGame","argsType":null,
//         // "args":["房间IDfdggfdgfdgdfdg",{"pos":{"x":${pos.x},"y":${pos.y},"z":${pos.z}}}],"returnType":null,"returnValue":null}`;
//         let posA = {};
//         posA["pos"] = pos;
//         posA["angle"] = yAngle;
//         let jsonText = JSON.stringify(posA);
//         let mess = `{"currentType":null,"type":null,"callTime":"0001-01-01T00:00:00","callid":0,"timeout":0,"className":"GameManager","functionName":"updataGame","argsType":null,
//         "args":[${jsonText}],"returnType":null,"returnValue":null}`;
//         NetWebscoket.Instance.sendStr(mess);
//     }
// }
System.register("Net/DataEvents/BattleListBaseEvent", [], function (exports_110, context_110) {
    "use strict";
    var BattleListBaseEvent;
    var __moduleName = context_110 && context_110.id;
    return {
        setters: [],
        execute: function () {
            BattleListBaseEvent = /** @class */ (function () {
                function BattleListBaseEvent() {
                }
                /** 初始化全部数据*/
                BattleListBaseEvent.Init = "Init";
                /** 批量加载数据*/
                BattleListBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                BattleListBaseEvent.id = "id";
                /** 关卡*/
                BattleListBaseEvent.checkpoint = "checkpoint";
                /** 关卡ID*/
                BattleListBaseEvent.checkpointID = "checkpointID";
                /** 场数*/
                BattleListBaseEvent.total = "total";
                /** 胜场*/
                BattleListBaseEvent.wins = "wins";
                /** 玩家ID*/
                BattleListBaseEvent.userID = "userID";
                /** 最佳战绩*/
                BattleListBaseEvent.bestAchievement = "bestAchievement";
                return BattleListBaseEvent;
            }());
            exports_110("BattleListBaseEvent", BattleListBaseEvent);
        }
    };
});
System.register("Net/DataEvents/CookieConfigBaseEvent", [], function (exports_111, context_111) {
    "use strict";
    var CookieConfigBaseEvent;
    var __moduleName = context_111 && context_111.id;
    return {
        setters: [],
        execute: function () {
            CookieConfigBaseEvent = /** @class */ (function () {
                function CookieConfigBaseEvent() {
                }
                /** 初始化全部数据*/
                CookieConfigBaseEvent.Init = "Init";
                /** 批量加载数据*/
                CookieConfigBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                CookieConfigBaseEvent.id = "id";
                /** 备注*/
                CookieConfigBaseEvent.desc = "desc";
                /** 用户列表*/
                CookieConfigBaseEvent.players = "players";
                /** 每一步距离*/
                CookieConfigBaseEvent.stepDis = "stepDis";
                /** 下落高度*/
                CookieConfigBaseEvent.dropHeigth = "dropHeigth";
                /** 初始位置*/
                CookieConfigBaseEvent.startArea = "startArea";
                /** 活动区域*/
                CookieConfigBaseEvent.moveArea = "moveArea";
                /** NPC举例*/
                CookieConfigBaseEvent.npcDis = "npcDis";
                /** 开始抖动的起始时间*/
                CookieConfigBaseEvent.shakeStartTime = "shakeStartTime";
                /** 抖动过渡时间(从开始到最大值的时间)*/
                CookieConfigBaseEvent.shakeTime = "shakeTime";
                /** 最低抖动值*/
                CookieConfigBaseEvent.shakeMinValue = "shakeMinValue";
                /** 抖动的最大值*/
                CookieConfigBaseEvent.shakeMaxValue = "shakeMaxValue";
                /** 最小抖动频率*/
                CookieConfigBaseEvent.shakeMinFrequency = "shakeMinFrequency";
                /** 最大抖动频率*/
                CookieConfigBaseEvent.shakeMaxFrequency = "shakeMaxFrequency";
                /** 针头宽度*/
                CookieConfigBaseEvent.needleWidth = "needleWidth";
                /** 线条碰撞宽度*/
                CookieConfigBaseEvent.lineCollisionWidth = "lineCollisionWidth";
                /** 长度*/
                CookieConfigBaseEvent.cookLen = "cookLen";
                /** 提前发送时间*/
                CookieConfigBaseEvent.advance = "advance";
                /** 游戏总时间*/
                CookieConfigBaseEvent.totleTime = "totleTime";
                /** 倒计时时长*/
                CookieConfigBaseEvent.countTime = "countTime";
                /** 游戏开始时间*/
                CookieConfigBaseEvent.gameTime = "gameTime";
                /** 游戏状态*/
                CookieConfigBaseEvent.gameStatus = "gameStatus";
                /** 倒计时开始时间*/
                CookieConfigBaseEvent.countDown = "countDown";
                /** 当前时间*/
                CookieConfigBaseEvent.nowTime = "nowTime";
                /** 结束时间*/
                CookieConfigBaseEvent.endTime = "endTime";
                /** 游戏场景ID*/
                CookieConfigBaseEvent.gameScene = "gameScene";
                return CookieConfigBaseEvent;
            }());
            exports_111("CookieConfigBaseEvent", CookieConfigBaseEvent);
        }
    };
});
System.register("Net/DataEvents/CookieDailyRankEvent", [], function (exports_112, context_112) {
    "use strict";
    var CookieDailyRankEvent;
    var __moduleName = context_112 && context_112.id;
    return {
        setters: [],
        execute: function () {
            CookieDailyRankEvent = /** @class */ (function () {
                function CookieDailyRankEvent() {
                }
                /** 初始化全部数据*/
                CookieDailyRankEvent.Init = "Init";
                /** 批量加载数据*/
                CookieDailyRankEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                CookieDailyRankEvent.id = "id";
                /** 积分*/
                CookieDailyRankEvent.point = "point";
                /** 胜场*/
                CookieDailyRankEvent.win = "win";
                /** 败场*/
                CookieDailyRankEvent.lose = "lose";
                /** 总场次*/
                CookieDailyRankEvent.total = "total";
                /** 总页数*/
                CookieDailyRankEvent.totalPage = "totalPage";
                /** 自身名次*/
                CookieDailyRankEvent.selfRank = "selfRank";
                return CookieDailyRankEvent;
            }());
            exports_112("CookieDailyRankEvent", CookieDailyRankEvent);
        }
    };
});
System.register("Net/DataEvents/CookieDailyRankLastEvent", [], function (exports_113, context_113) {
    "use strict";
    var CookieDailyRankLastEvent;
    var __moduleName = context_113 && context_113.id;
    return {
        setters: [],
        execute: function () {
            CookieDailyRankLastEvent = /** @class */ (function () {
                function CookieDailyRankLastEvent() {
                }
                /** 初始化全部数据*/
                CookieDailyRankLastEvent.Init = "Init";
                /** 批量加载数据*/
                CookieDailyRankLastEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                CookieDailyRankLastEvent.id = "id";
                /** 积分*/
                CookieDailyRankLastEvent.point = "point";
                /** 胜场*/
                CookieDailyRankLastEvent.win = "win";
                /** 败场*/
                CookieDailyRankLastEvent.lose = "lose";
                /** 总场次*/
                CookieDailyRankLastEvent.total = "total";
                /** 结算时间*/
                CookieDailyRankLastEvent.resultTime = "resultTime";
                /** 名次*/
                CookieDailyRankLastEvent.rank = "rank";
                return CookieDailyRankLastEvent;
            }());
            exports_113("CookieDailyRankLastEvent", CookieDailyRankLastEvent);
        }
    };
});
System.register("Net/DataEvents/CookieDailyRankLogEvent", [], function (exports_114, context_114) {
    "use strict";
    var CookieDailyRankLogEvent;
    var __moduleName = context_114 && context_114.id;
    return {
        setters: [],
        execute: function () {
            CookieDailyRankLogEvent = /** @class */ (function () {
                function CookieDailyRankLogEvent() {
                }
                /** 初始化全部数据*/
                CookieDailyRankLogEvent.Init = "Init";
                /** 批量加载数据*/
                CookieDailyRankLogEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                CookieDailyRankLogEvent.id = "id";
                /** 积分*/
                CookieDailyRankLogEvent.point = "point";
                /** 胜场*/
                CookieDailyRankLogEvent.win = "win";
                /** 败场*/
                CookieDailyRankLogEvent.lose = "lose";
                /** 总场次*/
                CookieDailyRankLogEvent.total = "total";
                /** 结算时间*/
                CookieDailyRankLogEvent.resultTime = "resultTime";
                /** 名次*/
                CookieDailyRankLogEvent.rank = "rank";
                return CookieDailyRankLogEvent;
            }());
            exports_114("CookieDailyRankLogEvent", CookieDailyRankLogEvent);
        }
    };
});
System.register("Net/DataEvents/CookieGameDataEvent", [], function (exports_115, context_115) {
    "use strict";
    var CookieGameDataEvent;
    var __moduleName = context_115 && context_115.id;
    return {
        setters: [],
        execute: function () {
            CookieGameDataEvent = /** @class */ (function () {
                function CookieGameDataEvent() {
                }
                /** 初始化全部数据*/
                CookieGameDataEvent.Init = "Init";
                /** 批量加载数据*/
                CookieGameDataEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                CookieGameDataEvent.id = "id";
                /** 糖饼ID*/
                CookieGameDataEvent.cookieID = "cookieID";
                /** 最大血量*/
                CookieGameDataEvent.maxHp = "maxHp";
                /** 当前血量*/
                CookieGameDataEvent.hp = "hp";
                /** 缩放*/
                CookieGameDataEvent.scale = "scale";
                /** 旋转*/
                CookieGameDataEvent.rot = "rot";
                /** 游戏数据*/
                CookieGameDataEvent.dataJson = "dataJson";
                return CookieGameDataEvent;
            }());
            exports_115("CookieGameDataEvent", CookieGameDataEvent);
        }
    };
});
System.register("Net/DataEvents/CookieMonthlyRankEvent", [], function (exports_116, context_116) {
    "use strict";
    var CookieMonthlyRankEvent;
    var __moduleName = context_116 && context_116.id;
    return {
        setters: [],
        execute: function () {
            CookieMonthlyRankEvent = /** @class */ (function () {
                function CookieMonthlyRankEvent() {
                }
                /** 初始化全部数据*/
                CookieMonthlyRankEvent.Init = "Init";
                /** 批量加载数据*/
                CookieMonthlyRankEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                CookieMonthlyRankEvent.id = "id";
                /** 积分*/
                CookieMonthlyRankEvent.point = "point";
                /** 胜场*/
                CookieMonthlyRankEvent.win = "win";
                /** 败场*/
                CookieMonthlyRankEvent.lose = "lose";
                /** 总场次*/
                CookieMonthlyRankEvent.total = "total";
                /** 总页数*/
                CookieMonthlyRankEvent.totalPage = "totalPage";
                /** 自身名次*/
                CookieMonthlyRankEvent.selfRank = "selfRank";
                return CookieMonthlyRankEvent;
            }());
            exports_116("CookieMonthlyRankEvent", CookieMonthlyRankEvent);
        }
    };
});
System.register("Net/DataEvents/CookieMonthlyRankLastEvent", [], function (exports_117, context_117) {
    "use strict";
    var CookieMonthlyRankLastEvent;
    var __moduleName = context_117 && context_117.id;
    return {
        setters: [],
        execute: function () {
            CookieMonthlyRankLastEvent = /** @class */ (function () {
                function CookieMonthlyRankLastEvent() {
                }
                /** 初始化全部数据*/
                CookieMonthlyRankLastEvent.Init = "Init";
                /** 批量加载数据*/
                CookieMonthlyRankLastEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                CookieMonthlyRankLastEvent.id = "id";
                /** 积分*/
                CookieMonthlyRankLastEvent.point = "point";
                /** 胜场*/
                CookieMonthlyRankLastEvent.win = "win";
                /** 败场*/
                CookieMonthlyRankLastEvent.lose = "lose";
                /** 总场次*/
                CookieMonthlyRankLastEvent.total = "total";
                /** 结算时间*/
                CookieMonthlyRankLastEvent.resultTime = "resultTime";
                /** 名次*/
                CookieMonthlyRankLastEvent.rank = "rank";
                return CookieMonthlyRankLastEvent;
            }());
            exports_117("CookieMonthlyRankLastEvent", CookieMonthlyRankLastEvent);
        }
    };
});
System.register("Net/DataEvents/CookieMonthlyRankLogEvent", [], function (exports_118, context_118) {
    "use strict";
    var CookieMonthlyRankLogEvent;
    var __moduleName = context_118 && context_118.id;
    return {
        setters: [],
        execute: function () {
            CookieMonthlyRankLogEvent = /** @class */ (function () {
                function CookieMonthlyRankLogEvent() {
                }
                /** 初始化全部数据*/
                CookieMonthlyRankLogEvent.Init = "Init";
                /** 批量加载数据*/
                CookieMonthlyRankLogEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                CookieMonthlyRankLogEvent.id = "id";
                /** 积分*/
                CookieMonthlyRankLogEvent.point = "point";
                /** 胜场*/
                CookieMonthlyRankLogEvent.win = "win";
                /** 败场*/
                CookieMonthlyRankLogEvent.lose = "lose";
                /** 总场次*/
                CookieMonthlyRankLogEvent.total = "total";
                /** 结算时间*/
                CookieMonthlyRankLogEvent.resultTime = "resultTime";
                /** 名次*/
                CookieMonthlyRankLogEvent.rank = "rank";
                return CookieMonthlyRankLogEvent;
            }());
            exports_118("CookieMonthlyRankLogEvent", CookieMonthlyRankLogEvent);
        }
    };
});
System.register("Net/DataEvents/CookieTotleRankEvent", [], function (exports_119, context_119) {
    "use strict";
    var CookieTotleRankEvent;
    var __moduleName = context_119 && context_119.id;
    return {
        setters: [],
        execute: function () {
            CookieTotleRankEvent = /** @class */ (function () {
                function CookieTotleRankEvent() {
                }
                /** 初始化全部数据*/
                CookieTotleRankEvent.Init = "Init";
                /** 批量加载数据*/
                CookieTotleRankEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                CookieTotleRankEvent.id = "id";
                /** 积分*/
                CookieTotleRankEvent.point = "point";
                /** 胜场*/
                CookieTotleRankEvent.win = "win";
                /** 败场*/
                CookieTotleRankEvent.lose = "lose";
                /** 总场次*/
                CookieTotleRankEvent.total = "total";
                /** 总页数*/
                CookieTotleRankEvent.totalPage = "totalPage";
                /** 自身名次*/
                CookieTotleRankEvent.selfRank = "selfRank";
                return CookieTotleRankEvent;
            }());
            exports_119("CookieTotleRankEvent", CookieTotleRankEvent);
        }
    };
});
System.register("Net/DataEvents/CookieWeeklyRankEvent", [], function (exports_120, context_120) {
    "use strict";
    var CookieWeeklyRankEvent;
    var __moduleName = context_120 && context_120.id;
    return {
        setters: [],
        execute: function () {
            CookieWeeklyRankEvent = /** @class */ (function () {
                function CookieWeeklyRankEvent() {
                }
                /** 初始化全部数据*/
                CookieWeeklyRankEvent.Init = "Init";
                /** 批量加载数据*/
                CookieWeeklyRankEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                CookieWeeklyRankEvent.id = "id";
                /** 积分*/
                CookieWeeklyRankEvent.point = "point";
                /** 胜场*/
                CookieWeeklyRankEvent.win = "win";
                /** 败场*/
                CookieWeeklyRankEvent.lose = "lose";
                /** 总场次*/
                CookieWeeklyRankEvent.total = "total";
                /** 总页数*/
                CookieWeeklyRankEvent.totalPage = "totalPage";
                /** 自身名次*/
                CookieWeeklyRankEvent.selfRank = "selfRank";
                return CookieWeeklyRankEvent;
            }());
            exports_120("CookieWeeklyRankEvent", CookieWeeklyRankEvent);
        }
    };
});
System.register("Net/DataEvents/CookieWeeklyRankLastEvent", [], function (exports_121, context_121) {
    "use strict";
    var CookieWeeklyRankLastEvent;
    var __moduleName = context_121 && context_121.id;
    return {
        setters: [],
        execute: function () {
            CookieWeeklyRankLastEvent = /** @class */ (function () {
                function CookieWeeklyRankLastEvent() {
                }
                /** 初始化全部数据*/
                CookieWeeklyRankLastEvent.Init = "Init";
                /** 批量加载数据*/
                CookieWeeklyRankLastEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                CookieWeeklyRankLastEvent.id = "id";
                /** 积分*/
                CookieWeeklyRankLastEvent.point = "point";
                /** 胜场*/
                CookieWeeklyRankLastEvent.win = "win";
                /** 败场*/
                CookieWeeklyRankLastEvent.lose = "lose";
                /** 总场次*/
                CookieWeeklyRankLastEvent.total = "total";
                /** 结算时间*/
                CookieWeeklyRankLastEvent.resultTime = "resultTime";
                /** 名次*/
                CookieWeeklyRankLastEvent.rank = "rank";
                return CookieWeeklyRankLastEvent;
            }());
            exports_121("CookieWeeklyRankLastEvent", CookieWeeklyRankLastEvent);
        }
    };
});
System.register("Net/DataEvents/CookieWeeklyRankLogEvent", [], function (exports_122, context_122) {
    "use strict";
    var CookieWeeklyRankLogEvent;
    var __moduleName = context_122 && context_122.id;
    return {
        setters: [],
        execute: function () {
            CookieWeeklyRankLogEvent = /** @class */ (function () {
                function CookieWeeklyRankLogEvent() {
                }
                /** 初始化全部数据*/
                CookieWeeklyRankLogEvent.Init = "Init";
                /** 批量加载数据*/
                CookieWeeklyRankLogEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                CookieWeeklyRankLogEvent.id = "id";
                /** 积分*/
                CookieWeeklyRankLogEvent.point = "point";
                /** 胜场*/
                CookieWeeklyRankLogEvent.win = "win";
                /** 败场*/
                CookieWeeklyRankLogEvent.lose = "lose";
                /** 总场次*/
                CookieWeeklyRankLogEvent.total = "total";
                /** 结算时间*/
                CookieWeeklyRankLogEvent.resultTime = "resultTime";
                /** 名次*/
                CookieWeeklyRankLogEvent.rank = "rank";
                return CookieWeeklyRankLogEvent;
            }());
            exports_122("CookieWeeklyRankLogEvent", CookieWeeklyRankLogEvent);
        }
    };
});
System.register("Net/DataEvents/DailyRankEvent", [], function (exports_123, context_123) {
    "use strict";
    var DailyRankEvent;
    var __moduleName = context_123 && context_123.id;
    return {
        setters: [],
        execute: function () {
            DailyRankEvent = /** @class */ (function () {
                function DailyRankEvent() {
                }
                /** 初始化全部数据*/
                DailyRankEvent.Init = "Init";
                /** 批量加载数据*/
                DailyRankEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                DailyRankEvent.id = "id";
                /** 积分*/
                DailyRankEvent.point = "point";
                /** 胜场*/
                DailyRankEvent.win = "win";
                /** 败场*/
                DailyRankEvent.lose = "lose";
                /** 总场次*/
                DailyRankEvent.total = "total";
                /** 总页数*/
                DailyRankEvent.totalPage = "totalPage";
                /** 自身名次*/
                DailyRankEvent.selfRank = "selfRank";
                return DailyRankEvent;
            }());
            exports_123("DailyRankEvent", DailyRankEvent);
        }
    };
});
System.register("Net/DataEvents/DailyRankLastEvent", [], function (exports_124, context_124) {
    "use strict";
    var DailyRankLastEvent;
    var __moduleName = context_124 && context_124.id;
    return {
        setters: [],
        execute: function () {
            DailyRankLastEvent = /** @class */ (function () {
                function DailyRankLastEvent() {
                }
                /** 初始化全部数据*/
                DailyRankLastEvent.Init = "Init";
                /** 批量加载数据*/
                DailyRankLastEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                DailyRankLastEvent.id = "id";
                /** 积分*/
                DailyRankLastEvent.point = "point";
                /** 胜场*/
                DailyRankLastEvent.win = "win";
                /** 败场*/
                DailyRankLastEvent.lose = "lose";
                /** 总场次*/
                DailyRankLastEvent.total = "total";
                /** 结算时间*/
                DailyRankLastEvent.resultTime = "resultTime";
                /** 名次*/
                DailyRankLastEvent.rank = "rank";
                return DailyRankLastEvent;
            }());
            exports_124("DailyRankLastEvent", DailyRankLastEvent);
        }
    };
});
System.register("Net/DataEvents/DailyRankLogEvent", [], function (exports_125, context_125) {
    "use strict";
    var DailyRankLogEvent;
    var __moduleName = context_125 && context_125.id;
    return {
        setters: [],
        execute: function () {
            DailyRankLogEvent = /** @class */ (function () {
                function DailyRankLogEvent() {
                }
                /** 初始化全部数据*/
                DailyRankLogEvent.Init = "Init";
                /** 批量加载数据*/
                DailyRankLogEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                DailyRankLogEvent.id = "id";
                /** 积分*/
                DailyRankLogEvent.point = "point";
                /** 胜场*/
                DailyRankLogEvent.win = "win";
                /** 败场*/
                DailyRankLogEvent.lose = "lose";
                /** 总场次*/
                DailyRankLogEvent.total = "total";
                /** 结算时间*/
                DailyRankLogEvent.resultTime = "resultTime";
                /** 名次*/
                DailyRankLogEvent.rank = "rank";
                return DailyRankLogEvent;
            }());
            exports_125("DailyRankLogEvent", DailyRankLogEvent);
        }
    };
});
System.register("Net/DataEvents/DialRiverConfigBaseEvent", [], function (exports_126, context_126) {
    "use strict";
    var DialRiverConfigBaseEvent;
    var __moduleName = context_126 && context_126.id;
    return {
        setters: [],
        execute: function () {
            DialRiverConfigBaseEvent = /** @class */ (function () {
                function DialRiverConfigBaseEvent() {
                }
                /** 初始化全部数据*/
                DialRiverConfigBaseEvent.Init = "Init";
                /** 批量加载数据*/
                DialRiverConfigBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                DialRiverConfigBaseEvent.id = "id";
                /** 备注*/
                DialRiverConfigBaseEvent.desc = "desc";
                /** 用户列表*/
                DialRiverConfigBaseEvent.players = "players";
                /** 每一步距离*/
                DialRiverConfigBaseEvent.stepDis = "stepDis";
                /** 下落高度*/
                DialRiverConfigBaseEvent.dropHeigth = "dropHeigth";
                /** 初始位置*/
                DialRiverConfigBaseEvent.startArea = "startArea";
                /** 活动区域*/
                DialRiverConfigBaseEvent.moveArea = "moveArea";
                /** 左边分组人员*/
                DialRiverConfigBaseEvent.leftTeam = "leftTeam";
                /** 最小的分*/
                DialRiverConfigBaseEvent.minPoint = "minPoint";
                /** 最大得分*/
                DialRiverConfigBaseEvent.maxPoint = "maxPoint";
                /** 简单难度持续时间*/
                DialRiverConfigBaseEvent.easyMode = "easyMode";
                /** 困难难度开始时间*/
                DialRiverConfigBaseEvent.hardMode = "hardMode";
                /** 最小判定时间*/
                DialRiverConfigBaseEvent.checkMin = "checkMin";
                /** 最大判定时间*/
                DialRiverConfigBaseEvent.checkMax = "checkMax";
                /** 最小等待时间*/
                DialRiverConfigBaseEvent.waitMin = "waitMin";
                /** 最大等待时间*/
                DialRiverConfigBaseEvent.waitMax = "waitMax";
                /** 演出时长*/
                DialRiverConfigBaseEvent.showTimeMax = "showTimeMax";
                /** 演出最小时长*/
                DialRiverConfigBaseEvent.showTimeMin = "showTimeMin";
                /** 最小判定角度*/
                DialRiverConfigBaseEvent.agreeMin = "agreeMin";
                /** 最大判定角度*/
                DialRiverConfigBaseEvent.agreeMax = "agreeMax";
                /** 提前发送时间*/
                DialRiverConfigBaseEvent.advance = "advance";
                /** 游戏总时间*/
                DialRiverConfigBaseEvent.totleTime = "totleTime";
                /** 倒计时时长*/
                DialRiverConfigBaseEvent.countTime = "countTime";
                /** 游戏开始时间*/
                DialRiverConfigBaseEvent.gameTime = "gameTime";
                /** 游戏状态*/
                DialRiverConfigBaseEvent.gameStatus = "gameStatus";
                /** 倒计时开始时间*/
                DialRiverConfigBaseEvent.countDown = "countDown";
                /** 当前时间*/
                DialRiverConfigBaseEvent.nowTime = "nowTime";
                /** 结束时间*/
                DialRiverConfigBaseEvent.endTime = "endTime";
                /** 游戏场景ID*/
                DialRiverConfigBaseEvent.gameScene = "gameScene";
                return DialRiverConfigBaseEvent;
            }());
            exports_126("DialRiverConfigBaseEvent", DialRiverConfigBaseEvent);
        }
    };
});
System.register("Net/DataEvents/DialRiverDataEvent", [], function (exports_127, context_127) {
    "use strict";
    var DialRiverDataEvent;
    var __moduleName = context_127 && context_127.id;
    return {
        setters: [],
        execute: function () {
            DialRiverDataEvent = /** @class */ (function () {
                function DialRiverDataEvent() {
                }
                /** 初始化全部数据*/
                DialRiverDataEvent.Init = "Init";
                /** 批量加载数据*/
                DialRiverDataEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                DialRiverDataEvent.id = "id";
                /** 点击方向*/
                DialRiverDataEvent.clickType = "clickType";
                /** 胜负进度（0-10000）*/
                DialRiverDataEvent.progress = "progress";
                /** 玩家分数*/
                DialRiverDataEvent.usersPoint = "usersPoint";
                /** 判定角度*/
                DialRiverDataEvent.agree = "agree";
                /** 判定持续时间*/
                DialRiverDataEvent.checkTime = "checkTime";
                /** 播放时间*/
                DialRiverDataEvent.playTime = "playTime";
                return DialRiverDataEvent;
            }());
            exports_127("DialRiverDataEvent", DialRiverDataEvent);
        }
    };
});
System.register("Net/DataEvents/GameOpenSettingEvent", [], function (exports_128, context_128) {
    "use strict";
    var GameOpenSettingEvent;
    var __moduleName = context_128 && context_128.id;
    return {
        setters: [],
        execute: function () {
            GameOpenSettingEvent = /** @class */ (function () {
                function GameOpenSettingEvent() {
                }
                /** 初始化全部数据*/
                GameOpenSettingEvent.Init = "Init";
                /** 批量加载数据*/
                GameOpenSettingEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                GameOpenSettingEvent.id = "id";
                /** 任务名称*/
                GameOpenSettingEvent.eventName = "eventName";
                /** 开始加入时间*/
                GameOpenSettingEvent.startTime = "startTime";
                /** 加入结束时间*/
                GameOpenSettingEvent.EndTime = "EndTime";
                /** 下次开始时间*/
                GameOpenSettingEvent.nextStartTime = "nextStartTime";
                /** 默认时间是0也就是utc时间*/
                GameOpenSettingEvent.serverTimeZone = "serverTimeZone";
                /** 可加入时长*/
                GameOpenSettingEvent.enterTime = "enterTime";
                /** 可加人时加入BOT的时间间隔*/
                GameOpenSettingEvent.addBotInEnter = "addBotInEnter";
                /** 停止加人后加入BOT的时间间隔*/
                GameOpenSettingEvent.addBotOverEnter = "addBotOverEnter";
                /** 停止加人后加入BOT的时间间隔最大间隔*/
                GameOpenSettingEvent.addBotOverEnterMax = "addBotOverEnterMax";
                /** 任务间隔执行时间*/
                GameOpenSettingEvent.taskLoopTime = "taskLoopTime";
                /** 每天结算开始的时间，和loopTime共同执行*/
                GameOpenSettingEvent.rankTime = "rankTime";
                /** 结算结束时间*/
                GameOpenSettingEvent.rankEndTime = "rankEndTime";
                return GameOpenSettingEvent;
            }());
            exports_128("GameOpenSettingEvent", GameOpenSettingEvent);
        }
    };
});
System.register("Net/DataEvents/GamesTicketBaseEvent", [], function (exports_129, context_129) {
    "use strict";
    var GamesTicketBaseEvent;
    var __moduleName = context_129 && context_129.id;
    return {
        setters: [],
        execute: function () {
            GamesTicketBaseEvent = /** @class */ (function () {
                function GamesTicketBaseEvent() {
                }
                /** 初始化全部数据*/
                GamesTicketBaseEvent.Init = "Init";
                /** 批量加载数据*/
                GamesTicketBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                GamesTicketBaseEvent.id = "id";
                /** 备注*/
                GamesTicketBaseEvent.desc = "desc";
                /** 对应关卡显示大图*/
                GamesTicketBaseEvent.rawpicture = "rawpicture";
                /** 门票ID*/
                GamesTicketBaseEvent.ticketID = "ticketID";
                /** 门票UI*/
                GamesTicketBaseEvent.ticketUI = "ticketUI";
                /** 使用门票*/
                GamesTicketBaseEvent.ticketUse = "ticketUse";
                /** 游戏类名*/
                GamesTicketBaseEvent.gameClass = "gameClass";
                /** 场景id*/
                GamesTicketBaseEvent.sceneBase = "sceneBase";
                /** 是否显示*/
                GamesTicketBaseEvent.visible = "visible";
                return GamesTicketBaseEvent;
            }());
            exports_129("GamesTicketBaseEvent", GamesTicketBaseEvent);
        }
    };
});
System.register("Net/DataEvents/GlassBridgeDataEvent", [], function (exports_130, context_130) {
    "use strict";
    var GlassBridgeDataEvent;
    var __moduleName = context_130 && context_130.id;
    return {
        setters: [],
        execute: function () {
            GlassBridgeDataEvent = /** @class */ (function () {
                function GlassBridgeDataEvent() {
                }
                /** 初始化全部数据*/
                GlassBridgeDataEvent.Init = "Init";
                /** 批量加载数据*/
                GlassBridgeDataEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                GlassBridgeDataEvent.id = "id";
                /** 玻璃破碎*/
                GlassBridgeDataEvent.breakGlass = "breakGlass";
                /** 玩家token*/
                GlassBridgeDataEvent.userToken = "userToken";
                /** 得分*/
                GlassBridgeDataEvent.point = "point";
                return GlassBridgeDataEvent;
            }());
            exports_130("GlassBridgeDataEvent", GlassBridgeDataEvent);
        }
    };
});
System.register("Net/DataEvents/GlassBridgePosEvent", [], function (exports_131, context_131) {
    "use strict";
    var GlassBridgePosEvent;
    var __moduleName = context_131 && context_131.id;
    return {
        setters: [],
        execute: function () {
            GlassBridgePosEvent = /** @class */ (function () {
                function GlassBridgePosEvent() {
                }
                /** 初始化全部数据*/
                GlassBridgePosEvent.Init = "Init";
                /** 批量加载数据*/
                GlassBridgePosEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                GlassBridgePosEvent.id = "id";
                /** 左边玻璃位置*/
                GlassBridgePosEvent.leftGlass = "leftGlass";
                /** 右边玻璃位置*/
                GlassBridgePosEvent.rightGlass = "rightGlass";
                /** 玻璃得分*/
                GlassBridgePosEvent.glassPoint = "glassPoint";
                return GlassBridgePosEvent;
            }());
            exports_131("GlassBridgePosEvent", GlassBridgePosEvent);
        }
    };
});
System.register("Net/DataEvents/GlassBridgerConfigBaseEvent", [], function (exports_132, context_132) {
    "use strict";
    var GlassBridgerConfigBaseEvent;
    var __moduleName = context_132 && context_132.id;
    return {
        setters: [],
        execute: function () {
            GlassBridgerConfigBaseEvent = /** @class */ (function () {
                function GlassBridgerConfigBaseEvent() {
                }
                /** 初始化全部数据*/
                GlassBridgerConfigBaseEvent.Init = "Init";
                /** 批量加载数据*/
                GlassBridgerConfigBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                GlassBridgerConfigBaseEvent.id = "id";
                /** 备注*/
                GlassBridgerConfigBaseEvent.desc = "desc";
                /** 用户列表*/
                GlassBridgerConfigBaseEvent.players = "players";
                /** 每一步距离*/
                GlassBridgerConfigBaseEvent.stepDis = "stepDis";
                /** 下落高度*/
                GlassBridgerConfigBaseEvent.dropHeigth = "dropHeigth";
                /** 初始位置*/
                GlassBridgerConfigBaseEvent.startArea = "startArea";
                /** 活动区域*/
                GlassBridgerConfigBaseEvent.moveArea = "moveArea";
                /** 结束区域*/
                GlassBridgerConfigBaseEvent.finishArea = "finishArea";
                /** 排名分数*/
                GlassBridgerConfigBaseEvent.rankPoint = "rankPoint";
                /** 提前发送时间*/
                GlassBridgerConfigBaseEvent.advance = "advance";
                /** 游戏总时间*/
                GlassBridgerConfigBaseEvent.totleTime = "totleTime";
                /** 倒计时时长*/
                GlassBridgerConfigBaseEvent.countTime = "countTime";
                /** 游戏开始时间*/
                GlassBridgerConfigBaseEvent.gameTime = "gameTime";
                /** 游戏状态*/
                GlassBridgerConfigBaseEvent.gameStatus = "gameStatus";
                /** 倒计时开始时间*/
                GlassBridgerConfigBaseEvent.countDown = "countDown";
                /** 当前时间*/
                GlassBridgerConfigBaseEvent.nowTime = "nowTime";
                /** 结束时间*/
                GlassBridgerConfigBaseEvent.endTime = "endTime";
                /** 游戏场景ID*/
                GlassBridgerConfigBaseEvent.gameScene = "gameScene";
                return GlassBridgerConfigBaseEvent;
            }());
            exports_132("GlassBridgerConfigBaseEvent", GlassBridgerConfigBaseEvent);
        }
    };
});
System.register("Net/DataEvents/ItemBaseEvent", [], function (exports_133, context_133) {
    "use strict";
    var ItemBaseEvent;
    var __moduleName = context_133 && context_133.id;
    return {
        setters: [],
        execute: function () {
            ItemBaseEvent = /** @class */ (function () {
                function ItemBaseEvent() {
                }
                /** 初始化全部数据*/
                ItemBaseEvent.Init = "Init";
                /** 批量加载数据*/
                ItemBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                ItemBaseEvent.id = "id";
                /** 道具名字*/
                ItemBaseEvent.itemName = "itemName";
                /** 图标*/
                ItemBaseEvent.icon = "icon";
                /** 模型*/
                ItemBaseEvent.model = "model";
                /** 描述*/
                ItemBaseEvent.desc = "desc";
                /** 特效*/
                ItemBaseEvent.effect = "effect";
                /** 道具类型*/
                ItemBaseEvent.itemType = "itemType";
                /** 道具部位*/
                ItemBaseEvent.itemSetpos = "itemSetpos";
                /** 属性*/
                ItemBaseEvent.status = "status";
                /** 最大数量*/
                ItemBaseEvent.maxNum = "maxNum";
                /** 等级*/
                ItemBaseEvent.lv = "lv";
                /** 稀有度*/
                ItemBaseEvent.rera = "rera";
                /** 品质*/
                ItemBaseEvent.quality = "quality";
                /** 货币相关配置*/
                ItemBaseEvent.currency = "currency";
                /** 显示货币配置*/
                ItemBaseEvent.showCurrency = "showCurrency";
                return ItemBaseEvent;
            }());
            exports_133("ItemBaseEvent", ItemBaseEvent);
        }
    };
});
System.register("Net/DataEvents/ItemDataEvent", [], function (exports_134, context_134) {
    "use strict";
    var ItemDataEvent;
    var __moduleName = context_134 && context_134.id;
    return {
        setters: [],
        execute: function () {
            ItemDataEvent = /** @class */ (function () {
                function ItemDataEvent() {
                }
                /** 初始化全部数据*/
                ItemDataEvent.Init = "Init";
                /** 批量加载数据*/
                ItemDataEvent.ChangeList = "ChangeList";
                /** ID*/
                ItemDataEvent.id = "id";
                /** 道具名字*/
                ItemDataEvent.itemName = "itemName";
                /** 配置ID*/
                ItemDataEvent.baseId = "baseId";
                /** 数量*/
                ItemDataEvent.count = "count";
                /** 最大数量*/
                ItemDataEvent.maxNum = "maxNum";
                /** 来源*/
                ItemDataEvent.fromWhere = "fromWhere";
                /** 获取使用货币*/
                ItemDataEvent.buyCurrency = "buyCurrency";
                /** 描述*/
                ItemDataEvent.desc = "desc";
                /** 图标*/
                ItemDataEvent.icon = "icon";
                /** 模型*/
                ItemDataEvent.model = "model";
                /** 道具类型*/
                ItemDataEvent.itemType = "itemType";
                /** 道具部位*/
                ItemDataEvent.itemSetpos = "itemSetpos";
                /** 特效*/
                ItemDataEvent.effect = "effect";
                /** 属性*/
                ItemDataEvent.status = "status";
                /** 等级*/
                ItemDataEvent.lv = "lv";
                /** 稀有度*/
                ItemDataEvent.rera = "rera";
                /** 品质*/
                ItemDataEvent.quality = "quality";
                /** 持有者*/
                ItemDataEvent.playerUuid = "playerUuid";
                /** 获取时间*/
                ItemDataEvent.getTime = "getTime";
                return ItemDataEvent;
            }());
            exports_134("ItemDataEvent", ItemDataEvent);
        }
    };
});
System.register("Net/DataEvents/ItemLogEvent", [], function (exports_135, context_135) {
    "use strict";
    var ItemLogEvent;
    var __moduleName = context_135 && context_135.id;
    return {
        setters: [],
        execute: function () {
            ItemLogEvent = /** @class */ (function () {
                function ItemLogEvent() {
                }
                /** 初始化全部数据*/
                ItemLogEvent.Init = "Init";
                /** 批量加载数据*/
                ItemLogEvent.ChangeList = "ChangeList";
                /** ID*/
                ItemLogEvent.id = "id";
                /** 道具名字*/
                ItemLogEvent.itemName = "itemName";
                /** 数据ID*/
                ItemLogEvent.dataId = "dataId";
                /** 数量*/
                ItemLogEvent.count = "count";
                /** 获取使用货币*/
                ItemLogEvent.buyCurrency = "buyCurrency";
                /** 持有者*/
                ItemLogEvent.playerUuid = "playerUuid";
                /** 消耗时间*/
                ItemLogEvent.useTime = "useTime";
                /** 消耗方式*/
                ItemLogEvent.useType = "useType";
                return ItemLogEvent;
            }());
            exports_135("ItemLogEvent", ItemLogEvent);
        }
    };
});
System.register("Net/DataEvents/LoginLogBaseEvent", [], function (exports_136, context_136) {
    "use strict";
    var LoginLogBaseEvent;
    var __moduleName = context_136 && context_136.id;
    return {
        setters: [],
        execute: function () {
            LoginLogBaseEvent = /** @class */ (function () {
                function LoginLogBaseEvent() {
                }
                /** 初始化全部数据*/
                LoginLogBaseEvent.Init = "Init";
                /** 批量加载数据*/
                LoginLogBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                LoginLogBaseEvent.id = "id";
                /** token*/
                LoginLogBaseEvent.token = "token";
                /** 登陆时间*/
                LoginLogBaseEvent.loginTime = "loginTime";
                /** 状态*/
                LoginLogBaseEvent.status = "status";
                return LoginLogBaseEvent;
            }());
            exports_136("LoginLogBaseEvent", LoginLogBaseEvent);
        }
    };
});
System.register("Net/DataEvents/MailDataEvent", [], function (exports_137, context_137) {
    "use strict";
    var MailDataEvent;
    var __moduleName = context_137 && context_137.id;
    return {
        setters: [],
        execute: function () {
            MailDataEvent = /** @class */ (function () {
                function MailDataEvent() {
                }
                /** 初始化全部数据*/
                MailDataEvent.Init = "Init";
                /** 批量加载数据*/
                MailDataEvent.ChangeList = "ChangeList";
                /** 邮件ID*/
                MailDataEvent.id = "id";
                /** 邮件类型*/
                MailDataEvent.mailType = "mailType";
                /** 邮件来源*/
                MailDataEvent.mailFrom = "mailFrom";
                /** 邮件接收者*/
                MailDataEvent.mailTo = "mailTo";
                /** 邮件标题*/
                MailDataEvent.mailTitle = "mailTitle";
                /** 邮件内容*/
                MailDataEvent.mailContent = "mailContent";
                /** 附带道具*/
                MailDataEvent.items = "items";
                /** 发送时间*/
                MailDataEvent.sendTime = "sendTime";
                /** 过期时间*/
                MailDataEvent.expires = "expires";
                /** 是否领取*/
                MailDataEvent.visible = "visible";
                return MailDataEvent;
            }());
            exports_137("MailDataEvent", MailDataEvent);
        }
    };
});
System.register("Net/DataEvents/MarblesConfigBaseEvent", [], function (exports_138, context_138) {
    "use strict";
    var MarblesConfigBaseEvent;
    var __moduleName = context_138 && context_138.id;
    return {
        setters: [],
        execute: function () {
            MarblesConfigBaseEvent = /** @class */ (function () {
                function MarblesConfigBaseEvent() {
                }
                /** 初始化全部数据*/
                MarblesConfigBaseEvent.Init = "Init";
                /** 批量加载数据*/
                MarblesConfigBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                MarblesConfigBaseEvent.id = "id";
                /** 备注*/
                MarblesConfigBaseEvent.desc = "desc";
                /** 用户列表*/
                MarblesConfigBaseEvent.players = "players";
                /** 每一步距离*/
                MarblesConfigBaseEvent.stepDis = "stepDis";
                /** 下落高度*/
                MarblesConfigBaseEvent.dropHeigth = "dropHeigth";
                /** 初始位置*/
                MarblesConfigBaseEvent.startArea = "startArea";
                /** 活动区域*/
                MarblesConfigBaseEvent.moveArea = "moveArea";
                /** 投掷区域*/
                MarblesConfigBaseEvent.throwArea = "throwArea";
                /** 计数区域*/
                MarblesConfigBaseEvent.countArea = "countArea";
                /** 起丢地点*/
                MarblesConfigBaseEvent.dropPoint = "dropPoint";
                /** 散布半径*/
                MarblesConfigBaseEvent.scatter = "scatter";
                /** 最大力度*/
                MarblesConfigBaseEvent.maxPower = "maxPower";
                /** 押注时间*/
                MarblesConfigBaseEvent.betTime = "betTime";
                /** 最小结算时间*/
                MarblesConfigBaseEvent.endTimeMin = "endTimeMin";
                /** 最大结算时间*/
                MarblesConfigBaseEvent.endTimeMax = "endTimeMax";
                /** 提前发送时间*/
                MarblesConfigBaseEvent.advance = "advance";
                /** 游戏总时间*/
                MarblesConfigBaseEvent.totleTime = "totleTime";
                /** 倒计时时长*/
                MarblesConfigBaseEvent.countTime = "countTime";
                /** 游戏开始时间*/
                MarblesConfigBaseEvent.gameTime = "gameTime";
                /** 游戏状态*/
                MarblesConfigBaseEvent.gameStatus = "gameStatus";
                /** 倒计时开始时间*/
                MarblesConfigBaseEvent.countDown = "countDown";
                /** 当前时间*/
                MarblesConfigBaseEvent.nowTime = "nowTime";
                /** 结束时间*/
                MarblesConfigBaseEvent.endTime = "endTime";
                /** 游戏场景ID*/
                MarblesConfigBaseEvent.gameScene = "gameScene";
                return MarblesConfigBaseEvent;
            }());
            exports_138("MarblesConfigBaseEvent", MarblesConfigBaseEvent);
        }
    };
});
System.register("Net/DataEvents/MarblesDataEvent", [], function (exports_139, context_139) {
    "use strict";
    var MarblesDataEvent;
    var __moduleName = context_139 && context_139.id;
    return {
        setters: [],
        execute: function () {
            MarblesDataEvent = /** @class */ (function () {
                function MarblesDataEvent() {
                }
                /** 初始化全部数据*/
                MarblesDataEvent.Init = "Init";
                /** 批量加载数据*/
                MarblesDataEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                MarblesDataEvent.id = "id";
                /** 奇数数量*/
                MarblesDataEvent.OddNumber = "OddNumber";
                /** 偶数数量*/
                MarblesDataEvent.evenNumber = "evenNumber";
                /** 弹珠落点*/
                MarblesDataEvent.dropPoint = "dropPoint";
                /** 扔出者号码*/
                MarblesDataEvent.dropNum = "dropNum";
                return MarblesDataEvent;
            }());
            exports_139("MarblesDataEvent", MarblesDataEvent);
        }
    };
});
System.register("Net/DataEvents/MonthlyRankEvent", [], function (exports_140, context_140) {
    "use strict";
    var MonthlyRankEvent;
    var __moduleName = context_140 && context_140.id;
    return {
        setters: [],
        execute: function () {
            MonthlyRankEvent = /** @class */ (function () {
                function MonthlyRankEvent() {
                }
                /** 初始化全部数据*/
                MonthlyRankEvent.Init = "Init";
                /** 批量加载数据*/
                MonthlyRankEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                MonthlyRankEvent.id = "id";
                /** 积分*/
                MonthlyRankEvent.point = "point";
                /** 胜场*/
                MonthlyRankEvent.win = "win";
                /** 败场*/
                MonthlyRankEvent.lose = "lose";
                /** 总场次*/
                MonthlyRankEvent.total = "total";
                /** 总页数*/
                MonthlyRankEvent.totalPage = "totalPage";
                /** 自身名次*/
                MonthlyRankEvent.selfRank = "selfRank";
                return MonthlyRankEvent;
            }());
            exports_140("MonthlyRankEvent", MonthlyRankEvent);
        }
    };
});
System.register("Net/DataEvents/MonthlyRankLastEvent", [], function (exports_141, context_141) {
    "use strict";
    var MonthlyRankLastEvent;
    var __moduleName = context_141 && context_141.id;
    return {
        setters: [],
        execute: function () {
            MonthlyRankLastEvent = /** @class */ (function () {
                function MonthlyRankLastEvent() {
                }
                /** 初始化全部数据*/
                MonthlyRankLastEvent.Init = "Init";
                /** 批量加载数据*/
                MonthlyRankLastEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                MonthlyRankLastEvent.id = "id";
                /** 积分*/
                MonthlyRankLastEvent.point = "point";
                /** 胜场*/
                MonthlyRankLastEvent.win = "win";
                /** 败场*/
                MonthlyRankLastEvent.lose = "lose";
                /** 总场次*/
                MonthlyRankLastEvent.total = "total";
                /** 结算时间*/
                MonthlyRankLastEvent.resultTime = "resultTime";
                /** 名次*/
                MonthlyRankLastEvent.rank = "rank";
                return MonthlyRankLastEvent;
            }());
            exports_141("MonthlyRankLastEvent", MonthlyRankLastEvent);
        }
    };
});
System.register("Net/DataEvents/MonthlyRankLogEvent", [], function (exports_142, context_142) {
    "use strict";
    var MonthlyRankLogEvent;
    var __moduleName = context_142 && context_142.id;
    return {
        setters: [],
        execute: function () {
            MonthlyRankLogEvent = /** @class */ (function () {
                function MonthlyRankLogEvent() {
                }
                /** 初始化全部数据*/
                MonthlyRankLogEvent.Init = "Init";
                /** 批量加载数据*/
                MonthlyRankLogEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                MonthlyRankLogEvent.id = "id";
                /** 积分*/
                MonthlyRankLogEvent.point = "point";
                /** 胜场*/
                MonthlyRankLogEvent.win = "win";
                /** 败场*/
                MonthlyRankLogEvent.lose = "lose";
                /** 总场次*/
                MonthlyRankLogEvent.total = "total";
                /** 结算时间*/
                MonthlyRankLogEvent.resultTime = "resultTime";
                /** 名次*/
                MonthlyRankLogEvent.rank = "rank";
                return MonthlyRankLogEvent;
            }());
            exports_142("MonthlyRankLogEvent", MonthlyRankLogEvent);
        }
    };
});
System.register("Net/DataEvents/NoticeEvent", [], function (exports_143, context_143) {
    "use strict";
    var NoticeEvent;
    var __moduleName = context_143 && context_143.id;
    return {
        setters: [],
        execute: function () {
            NoticeEvent = /** @class */ (function () {
                function NoticeEvent() {
                }
                /** 初始化全部数据*/
                NoticeEvent.Init = "Init";
                /** 批量加载数据*/
                NoticeEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                NoticeEvent.id = "id";
                /** 公告的标题*/
                NoticeEvent.noticeTitle = "noticeTitle";
                /** 任务实际开始时间*/
                NoticeEvent.notice = "notice";
                /** 每次只显示一次，根据上一次登录时间来客户端自行判断是否要去被动获取公告。*/
                NoticeEvent.DisplayOnceAday = "DisplayOnceAday";
                /** 公告开始时间*/
                NoticeEvent.StartTime = "StartTime";
                /** 公告结束时间*/
                NoticeEvent.EndTime = "EndTime";
                /** 任务之前的执行状态，1正在执行，2执行错误，3执行成功，注意写任务的一定要注意可能服务器被中断的情况*/
                NoticeEvent.taskPreviousState = "taskPreviousState";
                return NoticeEvent;
            }());
            exports_143("NoticeEvent", NoticeEvent);
        }
    };
});
System.register("Net/DataEvents/PKConfigBaseEvent", [], function (exports_144, context_144) {
    "use strict";
    var PKConfigBaseEvent;
    var __moduleName = context_144 && context_144.id;
    return {
        setters: [],
        execute: function () {
            PKConfigBaseEvent = /** @class */ (function () {
                function PKConfigBaseEvent() {
                }
                /** 初始化全部数据*/
                PKConfigBaseEvent.Init = "Init";
                /** 批量加载数据*/
                PKConfigBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                PKConfigBaseEvent.id = "id";
                /** 备注*/
                PKConfigBaseEvent.desc = "desc";
                /** 用户列表*/
                PKConfigBaseEvent.players = "players";
                /** 用户位置*/
                PKConfigBaseEvent.playerPos = "playerPos";
                /** 道具*/
                PKConfigBaseEvent.items = "items";
                /** 道具位置*/
                PKConfigBaseEvent.itemPos = "itemPos";
                /** 当前时间*/
                PKConfigBaseEvent.nowTime = "nowTime";
                /** 结束时间*/
                PKConfigBaseEvent.endTime = "endTime";
                /** 游戏场景ID*/
                PKConfigBaseEvent.gameScene = "gameScene";
                return PKConfigBaseEvent;
            }());
            exports_144("PKConfigBaseEvent", PKConfigBaseEvent);
        }
    };
});
System.register("Net/DataEvents/PlayerIconEvent", [], function (exports_145, context_145) {
    "use strict";
    var PlayerIconEvent;
    var __moduleName = context_145 && context_145.id;
    return {
        setters: [],
        execute: function () {
            PlayerIconEvent = /** @class */ (function () {
                function PlayerIconEvent() {
                }
                /** 初始化全部数据*/
                PlayerIconEvent.Init = "Init";
                /** 批量加载数据*/
                PlayerIconEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                PlayerIconEvent.id = "id";
                /** 图片名称*/
                PlayerIconEvent.icon = "icon";
                /** 是否显示*/
                PlayerIconEvent.visible = "visible";
                return PlayerIconEvent;
            }());
            exports_145("PlayerIconEvent", PlayerIconEvent);
        }
    };
});
System.register("Net/DataEvents/SettingBaseEvent", [], function (exports_146, context_146) {
    "use strict";
    var SettingBaseEvent;
    var __moduleName = context_146 && context_146.id;
    return {
        setters: [],
        execute: function () {
            SettingBaseEvent = /** @class */ (function () {
                function SettingBaseEvent() {
                }
                /** 初始化全部数据*/
                SettingBaseEvent.Init = "Init";
                /** 批量加载数据*/
                SettingBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                SettingBaseEvent.id = "id";
                /** 音乐*/
                SettingBaseEvent.music = "music";
                /** 音效*/
                SettingBaseEvent.soundeffect = "soundeffect";
                /** 语言*/
                SettingBaseEvent.language = "language";
                /** 画质*/
                SettingBaseEvent.picturequality = "picturequality";
                /** 是否接受好友邀请*/
                SettingBaseEvent.Invitefriends = "Invitefriends";
                return SettingBaseEvent;
            }());
            exports_146("SettingBaseEvent", SettingBaseEvent);
        }
    };
});
System.register("Net/DataEvents/SettingListEvent", [], function (exports_147, context_147) {
    "use strict";
    var SettingListEvent;
    var __moduleName = context_147 && context_147.id;
    return {
        setters: [],
        execute: function () {
            SettingListEvent = /** @class */ (function () {
                function SettingListEvent() {
                }
                /** 初始化全部数据*/
                SettingListEvent.Init = "Init";
                /** 批量加载数据*/
                SettingListEvent.ChangeList = "ChangeList";
                /** 配置类型ID*/
                SettingListEvent.id = "id";
                /** 配置类别ID*/
                SettingListEvent.shopId = "shopId";
                /** 设置类型*/
                SettingListEvent.settingType = "settingType";
                /** 描述*/
                SettingListEvent.desc = "desc";
                /** 类型*/
                SettingListEvent.type = "type";
                /** 数值*/
                SettingListEvent.value = "value";
                /** 属性*/
                SettingListEvent.status = "status";
                /** 是否显示*/
                SettingListEvent.visible = "visible";
                return SettingListEvent;
            }());
            exports_147("SettingListEvent", SettingListEvent);
        }
    };
});
System.register("Net/DataEvents/SeverConfigBaseEvent", [], function (exports_148, context_148) {
    "use strict";
    var SeverConfigBaseEvent;
    var __moduleName = context_148 && context_148.id;
    return {
        setters: [],
        execute: function () {
            SeverConfigBaseEvent = /** @class */ (function () {
                function SeverConfigBaseEvent() {
                }
                /** 初始化全部数据*/
                SeverConfigBaseEvent.Init = "Init";
                /** 批量加载数据*/
                SeverConfigBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                SeverConfigBaseEvent.id = "id";
                /** 备注*/
                SeverConfigBaseEvent.desc = "desc";
                /** ip*/
                SeverConfigBaseEvent.ip = "ip";
                /** 网关地址*/
                SeverConfigBaseEvent.gateway = "gateway";
                /** MAC地址*/
                SeverConfigBaseEvent.MAC = "MAC";
                /** 启动时间*/
                SeverConfigBaseEvent.setupTime = "setupTime";
                /** 状态*/
                SeverConfigBaseEvent.status = "status";
                /** 当前人数*/
                SeverConfigBaseEvent.playerSum = "playerSum";
                /** 是否为网关*/
                SeverConfigBaseEvent.isGate = "isGate";
                /** 备注IP*/
                SeverConfigBaseEvent.descIP = "descIP";
                /** 心跳断开限制*/
                SeverConfigBaseEvent.heatbeatLimit = "heatbeatLimit";
                /** 日排名人数*/
                SeverConfigBaseEvent.dailyRankMax = "dailyRankMax";
                /** 周排名人数*/
                SeverConfigBaseEvent.weeklyRankMax = "weeklyRankMax";
                /** 月排名人数*/
                SeverConfigBaseEvent.monthlyRankMax = "monthlyRankMax";
                /** 日排名一页显示*/
                SeverConfigBaseEvent.dailyPage = "dailyPage";
                /** 周排名一页显示*/
                SeverConfigBaseEvent.weeklyPage = "weeklyPage";
                /** 月排名一页显示*/
                SeverConfigBaseEvent.monthlyPage = "monthlyPage";
                /** 是否使用钱包*/
                SeverConfigBaseEvent.useWallet = "useWallet";
                return SeverConfigBaseEvent;
            }());
            exports_148("SeverConfigBaseEvent", SeverConfigBaseEvent);
        }
    };
});
System.register("Net/DataEvents/ShopListEvent", [], function (exports_149, context_149) {
    "use strict";
    var ShopListEvent;
    var __moduleName = context_149 && context_149.id;
    return {
        setters: [],
        execute: function () {
            ShopListEvent = /** @class */ (function () {
                function ShopListEvent() {
                }
                /** 初始化全部数据*/
                ShopListEvent.Init = "Init";
                /** 批量加载数据*/
                ShopListEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                ShopListEvent.id = "id";
                /** 备注*/
                ShopListEvent.desc = "desc";
                /** 道具配置*/
                ShopListEvent.itemData = "itemData";
                /** 货币类型*/
                ShopListEvent.shopType = "shopType";
                /** 实际售价*/
                ShopListEvent.sellPrice = "sellPrice";
                /** 显示原价*/
                ShopListEvent.showPrice = "showPrice";
                /** 折扣*/
                ShopListEvent.onOff = "onOff";
                return ShopListEvent;
            }());
            exports_149("ShopListEvent", ShopListEvent);
        }
    };
});
System.register("Net/DataEvents/ShopSetEvent", [], function (exports_150, context_150) {
    "use strict";
    var ShopSetEvent;
    var __moduleName = context_150 && context_150.id;
    return {
        setters: [],
        execute: function () {
            ShopSetEvent = /** @class */ (function () {
                function ShopSetEvent() {
                }
                /** 初始化全部数据*/
                ShopSetEvent.Init = "Init";
                /** 批量加载数据*/
                ShopSetEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                ShopSetEvent.id = "id";
                /** 商店ID*/
                ShopSetEvent.shopId = "shopId";
                /** 备注*/
                ShopSetEvent.desc = "desc";
                /** 道具名字*/
                ShopSetEvent.itemName = "itemName";
                /** 商品列表*/
                ShopSetEvent.goodsList = "goodsList";
                /** 货币类型*/
                ShopSetEvent.shopType = "shopType";
                /** 实际售价*/
                ShopSetEvent.sellPrice = "sellPrice";
                /** 显示原价*/
                ShopSetEvent.showPrice = "showPrice";
                /** 折扣*/
                ShopSetEvent.onOff = "onOff";
                /** 是否显示*/
                ShopSetEvent.visible = "visible";
                return ShopSetEvent;
            }());
            exports_150("ShopSetEvent", ShopSetEvent);
        }
    };
});
System.register("Net/DataEvents/SquidGameConfigBaseEvent", [], function (exports_151, context_151) {
    "use strict";
    var SquidGameConfigBaseEvent;
    var __moduleName = context_151 && context_151.id;
    return {
        setters: [],
        execute: function () {
            SquidGameConfigBaseEvent = /** @class */ (function () {
                function SquidGameConfigBaseEvent() {
                }
                /** 初始化全部数据*/
                SquidGameConfigBaseEvent.Init = "Init";
                /** 批量加载数据*/
                SquidGameConfigBaseEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                SquidGameConfigBaseEvent.id = "id";
                /** 备注*/
                SquidGameConfigBaseEvent.desc = "desc";
                /** 用户列表*/
                SquidGameConfigBaseEvent.players = "players";
                /** 每一步距离*/
                SquidGameConfigBaseEvent.stepDis = "stepDis";
                /** 下落高度*/
                SquidGameConfigBaseEvent.dropHeigth = "dropHeigth";
                /** 初始位置*/
                SquidGameConfigBaseEvent.startArea = "startArea";
                /** 活动区域*/
                SquidGameConfigBaseEvent.moveArea = "moveArea";
                /** 正方形安全区*/
                SquidGameConfigBaseEvent.safeRect = "safeRect";
                /** 三角安全区*/
                SquidGameConfigBaseEvent.safeTriangle = "safeTriangle";
                /** 圆形安全区*/
                SquidGameConfigBaseEvent.safeCircular = "safeCircular";
                /** 目标安全区*/
                SquidGameConfigBaseEvent.tagetCircular = "tagetCircular";
                /** 小圆安全区1*/
                SquidGameConfigBaseEvent.smallCircular1 = "smallCircular1";
                /** 小圆安全区2*/
                SquidGameConfigBaseEvent.smallCircular2 = "smallCircular2";
                /** 简单难度持续时间*/
                SquidGameConfigBaseEvent.easyMode = "easyMode";
                /** 困难难度开始时间*/
                SquidGameConfigBaseEvent.hardMode = "hardMode";
                /** 最小力度*/
                SquidGameConfigBaseEvent.powerMin = "powerMin";
                /** 最大力度*/
                SquidGameConfigBaseEvent.powerMax = "powerMax";
                /** 最小判定角度*/
                SquidGameConfigBaseEvent.agreeMin = "agreeMin";
                /** 最大判定角度*/
                SquidGameConfigBaseEvent.agreeMax = "agreeMax";
                /** 提前发送时间*/
                SquidGameConfigBaseEvent.advance = "advance";
                /** 游戏总时间*/
                SquidGameConfigBaseEvent.totleTime = "totleTime";
                /** 倒计时时长*/
                SquidGameConfigBaseEvent.countTime = "countTime";
                /** 游戏开始时间*/
                SquidGameConfigBaseEvent.gameTime = "gameTime";
                /** 游戏状态*/
                SquidGameConfigBaseEvent.gameStatus = "gameStatus";
                /** 倒计时开始时间*/
                SquidGameConfigBaseEvent.countDown = "countDown";
                /** 当前时间*/
                SquidGameConfigBaseEvent.nowTime = "nowTime";
                /** 结束时间*/
                SquidGameConfigBaseEvent.endTime = "endTime";
                /** 游戏场景ID*/
                SquidGameConfigBaseEvent.gameScene = "gameScene";
                return SquidGameConfigBaseEvent;
            }());
            exports_151("SquidGameConfigBaseEvent", SquidGameConfigBaseEvent);
        }
    };
});
System.register("Net/DataEvents/TestListEvent", [], function (exports_152, context_152) {
    "use strict";
    var TestListEvent;
    var __moduleName = context_152 && context_152.id;
    return {
        setters: [],
        execute: function () {
            TestListEvent = /** @class */ (function () {
                function TestListEvent() {
                }
                /** 初始化全部数据*/
                TestListEvent.Init = "Init";
                /** 批量加载数据*/
                TestListEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                TestListEvent.id = "id";
                /** 积分*/
                TestListEvent.point = "point";
                /** 胜场*/
                TestListEvent.win = "win";
                /** 败场*/
                TestListEvent.lose = "lose";
                /** 总场次*/
                TestListEvent.total = "total";
                /** 结算时间*/
                TestListEvent.resultTime = "resultTime";
                /** 名次*/
                TestListEvent.rank = "rank";
                return TestListEvent;
            }());
            exports_152("TestListEvent", TestListEvent);
        }
    };
});
System.register("Net/DataEvents/TimeEventEvent", [], function (exports_153, context_153) {
    "use strict";
    var TimeEventEvent;
    var __moduleName = context_153 && context_153.id;
    return {
        setters: [],
        execute: function () {
            TimeEventEvent = /** @class */ (function () {
                function TimeEventEvent() {
                }
                /** 初始化全部数据*/
                TimeEventEvent.Init = "Init";
                /** 批量加载数据*/
                TimeEventEvent.ChangeList = "ChangeList";
                /** 配置ID*/
                TimeEventEvent.id = "id";
                /** 任务名称*/
                TimeEventEvent.eventName = "eventName";
                /** 任务实际开始时间*/
                TimeEventEvent.taskstartTime = "taskstartTime";
                /** 任务结束时间*/
                TimeEventEvent.taskEndTime = "taskEndTime";
                /** 上次开始时间*/
                TimeEventEvent.lastStartTime = "lastStartTime";
                /** 上次结束时间*/
                TimeEventEvent.lastEndTime = "lastEndTime";
                /** 默认时间是0也就是utc时间*/
                TimeEventEvent.serverTimeZone = "serverTimeZone";
                /** 重复循环次数，0就是无限次循环*/
                TimeEventEvent.LoopCount = "LoopCount";
                /** 已经重复的次数*/
                TimeEventEvent.LoopTimers = "LoopTimers";
                /** 第一次是否有cd*/
                TimeEventEvent.isFristNoCD = "isFristNoCD";
                /** 任务间隔执行时间*/
                TimeEventEvent.taskLoopTime = "taskLoopTime";
                /** 每天任务开始的时间，和loopTime共同执行*/
                TimeEventEvent.startTime = "startTime";
                /** 每天任务开始的时间的结束时间*/
                TimeEventEvent.startLimitTime = "startLimitTime";
                /** 前置任务id，可以组成任务集合*/
                TimeEventEvent.predecessorTaskID = "predecessorTaskID";
                /** 任务的回调事件名字*/
                TimeEventEvent.taskEventString = "taskEventString";
                /** 任务执行日志列表*/
                TimeEventEvent.taskEventLog = "taskEventLog";
                /** 任务目前状态，0等待执行，1正在执行，2执行错误，3执行成功*/
                TimeEventEvent.taskState = "taskState";
                /** 任务之前的执行状态，1正在执行，2执行错误，3执行成功，注意写任务的一定要注意可能服务器被中断的情况*/
                TimeEventEvent.taskPreviousState = "taskPreviousState";
                return TimeEventEvent;
            }());
            exports_153("TimeEventEvent", TimeEventEvent);
        }
    };
});
System.register("Net/DataEvents/TotleRankEvent", [], function (exports_154, context_154) {
    "use strict";
    var TotleRankEvent;
    var __moduleName = context_154 && context_154.id;
    return {
        setters: [],
        execute: function () {
            TotleRankEvent = /** @class */ (function () {
                function TotleRankEvent() {
                }
                /** 初始化全部数据*/
                TotleRankEvent.Init = "Init";
                /** 批量加载数据*/
                TotleRankEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                TotleRankEvent.id = "id";
                /** 积分*/
                TotleRankEvent.point = "point";
                /** 胜场*/
                TotleRankEvent.win = "win";
                /** 败场*/
                TotleRankEvent.lose = "lose";
                /** 总场次*/
                TotleRankEvent.total = "total";
                /** 总页数*/
                TotleRankEvent.totalPage = "totalPage";
                /** 自身名次*/
                TotleRankEvent.selfRank = "selfRank";
                return TotleRankEvent;
            }());
            exports_154("TotleRankEvent", TotleRankEvent);
        }
    };
});
System.register("Net/DataEvents/WalletErrLogEvent", [], function (exports_155, context_155) {
    "use strict";
    var WalletErrLogEvent;
    var __moduleName = context_155 && context_155.id;
    return {
        setters: [],
        execute: function () {
            WalletErrLogEvent = /** @class */ (function () {
                function WalletErrLogEvent() {
                }
                /** 初始化全部数据*/
                WalletErrLogEvent.Init = "Init";
                /** 批量加载数据*/
                WalletErrLogEvent.ChangeList = "ChangeList";
                /** 记录ID*/
                WalletErrLogEvent.id = "id";
                /** 类名*/
                WalletErrLogEvent.className = "className";
                /** 方法名*/
                WalletErrLogEvent.methodName = "methodName";
                /** 玩家ID*/
                WalletErrLogEvent.userToken = "userToken";
                /** log信息*/
                WalletErrLogEvent.logMessage = "logMessage";
                /** 记录时间*/
                WalletErrLogEvent.resultTime = "resultTime";
                return WalletErrLogEvent;
            }());
            exports_155("WalletErrLogEvent", WalletErrLogEvent);
        }
    };
});
System.register("Net/DataEvents/WalletLogEvent", [], function (exports_156, context_156) {
    "use strict";
    var WalletLogEvent;
    var __moduleName = context_156 && context_156.id;
    return {
        setters: [],
        execute: function () {
            WalletLogEvent = /** @class */ (function () {
                function WalletLogEvent() {
                }
                /** 初始化全部数据*/
                WalletLogEvent.Init = "Init";
                /** 批量加载数据*/
                WalletLogEvent.ChangeList = "ChangeList";
                /** 记录ID*/
                WalletLogEvent.id = "id";
                /** 类名*/
                WalletLogEvent.className = "className";
                /** 方法名*/
                WalletLogEvent.methodName = "methodName";
                /** 玩家ID*/
                WalletLogEvent.userToken = "userToken";
                /** log信息*/
                WalletLogEvent.logMessage = "logMessage";
                /** 记录时间*/
                WalletLogEvent.resultTime = "resultTime";
                return WalletLogEvent;
            }());
            exports_156("WalletLogEvent", WalletLogEvent);
        }
    };
});
System.register("Net/DataEvents/WeeklyRankEvent", [], function (exports_157, context_157) {
    "use strict";
    var WeeklyRankEvent;
    var __moduleName = context_157 && context_157.id;
    return {
        setters: [],
        execute: function () {
            WeeklyRankEvent = /** @class */ (function () {
                function WeeklyRankEvent() {
                }
                /** 初始化全部数据*/
                WeeklyRankEvent.Init = "Init";
                /** 批量加载数据*/
                WeeklyRankEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                WeeklyRankEvent.id = "id";
                /** 积分*/
                WeeklyRankEvent.point = "point";
                /** 胜场*/
                WeeklyRankEvent.win = "win";
                /** 败场*/
                WeeklyRankEvent.lose = "lose";
                /** 总场次*/
                WeeklyRankEvent.total = "total";
                /** 总页数*/
                WeeklyRankEvent.totalPage = "totalPage";
                /** 自身名次*/
                WeeklyRankEvent.selfRank = "selfRank";
                return WeeklyRankEvent;
            }());
            exports_157("WeeklyRankEvent", WeeklyRankEvent);
        }
    };
});
System.register("Net/DataEvents/WeeklyRankLastEvent", [], function (exports_158, context_158) {
    "use strict";
    var WeeklyRankLastEvent;
    var __moduleName = context_158 && context_158.id;
    return {
        setters: [],
        execute: function () {
            WeeklyRankLastEvent = /** @class */ (function () {
                function WeeklyRankLastEvent() {
                }
                /** 初始化全部数据*/
                WeeklyRankLastEvent.Init = "Init";
                /** 批量加载数据*/
                WeeklyRankLastEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                WeeklyRankLastEvent.id = "id";
                /** 积分*/
                WeeklyRankLastEvent.point = "point";
                /** 胜场*/
                WeeklyRankLastEvent.win = "win";
                /** 败场*/
                WeeklyRankLastEvent.lose = "lose";
                /** 总场次*/
                WeeklyRankLastEvent.total = "total";
                /** 结算时间*/
                WeeklyRankLastEvent.resultTime = "resultTime";
                /** 名次*/
                WeeklyRankLastEvent.rank = "rank";
                return WeeklyRankLastEvent;
            }());
            exports_158("WeeklyRankLastEvent", WeeklyRankLastEvent);
        }
    };
});
System.register("Net/DataEvents/WeeklyRankLogEvent", [], function (exports_159, context_159) {
    "use strict";
    var WeeklyRankLogEvent;
    var __moduleName = context_159 && context_159.id;
    return {
        setters: [],
        execute: function () {
            WeeklyRankLogEvent = /** @class */ (function () {
                function WeeklyRankLogEvent() {
                }
                /** 初始化全部数据*/
                WeeklyRankLogEvent.Init = "Init";
                /** 批量加载数据*/
                WeeklyRankLogEvent.ChangeList = "ChangeList";
                /** 玩家token*/
                WeeklyRankLogEvent.id = "id";
                /** 积分*/
                WeeklyRankLogEvent.point = "point";
                /** 胜场*/
                WeeklyRankLogEvent.win = "win";
                /** 败场*/
                WeeklyRankLogEvent.lose = "lose";
                /** 总场次*/
                WeeklyRankLogEvent.total = "total";
                /** 结算时间*/
                WeeklyRankLogEvent.resultTime = "resultTime";
                /** 名次*/
                WeeklyRankLogEvent.rank = "rank";
                return WeeklyRankLogEvent;
            }());
            exports_159("WeeklyRankLogEvent", WeeklyRankLogEvent);
        }
    };
});
System.register("Util/Vector3Util", [], function (exports_160, context_160) {
    "use strict";
    var Vector3Util;
    var __moduleName = context_160 && context_160.id;
    return {
        setters: [],
        execute: function () {
            Vector3Util = /** @class */ (function () {
                function Vector3Util() {
                }
                Object.defineProperty(Vector3Util, "Instance", {
                    get: function () {
                        if (this.instance == null) {
                            this.instance = new Vector3Util();
                        }
                        return this.instance;
                    },
                    enumerable: false,
                    configurable: true
                });
                Vector3Util.prototype.MoveTo = function (current, target, distance) {
                    var a = m4m.math.pool.new_vector3();
                    m4m.math.vec3Subtract(target, current, a);
                    var magnitude = m4m.math.vec3Length(a);
                    if (magnitude <= distance) {
                        m4m.math.vec3Clone(target, a);
                    }
                    else {
                        m4m.math.vec3ScaleByNum(a, distance / magnitude, a);
                        m4m.math.vec3Add(a, current, a);
                    }
                    return a;
                };
                return Vector3Util;
            }());
            exports_160("Vector3Util", Vector3Util);
        }
    };
});
System.register("gamePlays/Hall", ["eventMgr", "PSDUI/UiManager", "GameEnum", "Manager/UIData/UiNames"], function (exports_161, context_161) {
    "use strict";
    var eventMgr_19, UiManager_8, GameEnum_31, UiNames_4, Hall;
    var __moduleName = context_161 && context_161.id;
    return {
        setters: [
            function (eventMgr_19_1) {
                eventMgr_19 = eventMgr_19_1;
            },
            function (UiManager_8_1) {
                UiManager_8 = UiManager_8_1;
            },
            function (GameEnum_31_1) {
                GameEnum_31 = GameEnum_31_1;
            },
            function (UiNames_4_1) {
                UiNames_4 = UiNames_4_1;
            }
        ],
        execute: function () {
            /**
             * 游戏大厅
             */
            Hall = /** @class */ (function () {
                function Hall() {
                    this._evMakeRole = new eventMgr_19.EventGeneric({ roleId: -1, GUID: "'" });
                    this._evRoleSetAI = new eventMgr_19.EventGeneric({ GUID: "", aiType: -1 });
                    this._evRoleSetPos = new eventMgr_19.EventGeneric({ GUID: "", pos: new m4m.math.vector3() });
                }
                Hall.prototype.startArea = function () {
                    return null;
                };
                Hall.prototype.endArea = function () {
                    return null;
                };
                Hall.prototype.getGameType = function () {
                    return GameEnum_31.GamePlayType.hall;
                };
                Hall.prototype.runGame = function () {
                    console.log("\u8FDB\u5165\u4E86 \u5927\u5385\uFF01");
                    //玩家角色 摇杆
                    //开启摇杆
                    UiManager_8.UiManager.showUi(UiNames_4.UiNames.rocker);
                    //事件
                    //网络玩家 同步监听
                    //xxx
                    //测试添加一个玩家
                    // this.testOne();
                };
                Hall.prototype.exitGame = function () {
                };
                // private async testOne() {
                // //测试添加一个玩家
                // let testGUID = `G:0001`;
                // this._evMakeRole.data.roleId = 10004;
                // this._evMakeRole.data.GUID = testGUID;
                // EventMgr.dispatchEvent("role_make", this._evMakeRole);
                // await StageMgr.waitRoleMakeSuc(testGUID);
                // //移动到一个位置
                // this._evRoleSetPos.data.GUID = testGUID;
                // m4m.math.vec3Set(this._evRoleSetPos.data.pos, 3, 0, 0);
                // EventMgr.dispatchEvent("role_setPos", this._evRoleSetPos);
                // //添加一个AI
                // this._evRoleSetAI.data.GUID = testGUID;
                // this._evRoleSetAI.data.aiType = AIType.Ramble;
                // EventMgr.dispatchEvent("role_setAI", this._evRoleSetAI);
                // }
                /** 添加其他 网络玩家  */
                Hall.prototype.addGuest = function () {
                };
                return Hall;
            }());
            exports_161("Hall", Hall);
        }
    };
});
