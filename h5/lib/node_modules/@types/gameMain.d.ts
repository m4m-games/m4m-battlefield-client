/// <reference types="../../../lib/node_modules/@types/engine" />
/// <reference types="../../lib/node_modules/@types/gameUtil" />
/// <reference types="../../lib/node_modules/@types/ExcelData" />
/// <reference types="../../lib/node_modules/@types/gameEvent" />
declare module "GameEnum" {
    /**
     * 游戏玩法类型
     */
    export enum GamePlayType {
        /** 游戏准备大厅 */
        hall = 0,
        /** 木头人 */
        woodenPeople = 1,
        /** 扣糖饼 */
        sugarCake = 2,
        /** 拔河 */
        tugOfWar = 3,
        /**单人大厅*/
        singleHall = 4,
        /**玻璃桥*/
        glassBridge = 5,
        /** 弹珠 */
        hoodle = 6,
        /**鱿鱼游戏*/
        squidGame = 7,
        /**黑夜混战 */
        melee = 8
    }
    /**
     * 游戏关卡
    */
    export enum GameType {
        /** 木头人 */
        woodenPeople = 1,
        /** 扣糖饼 */
        sugarCake = 2,
        /** 拔河 */
        tugOfWar = 3,
        /**玻璃桥*/
        glassBridge = 4,
        /** 弹珠 */
        marbles = 5,
        /**鱿鱼游戏*/
        squidGame = 6,
        /**大锦标赛 */
        greatChampionship = 8
    }
    /**
     * 角色 行为输入
     */
    export enum RoleActInput {
        /** 方向 摇杆 (走) */
        Direction = 0,
        /** 方向 摇杆释放 (走 停) */
        Direction_Release = 1,
        /** 跳跃 */
        Jump = 2,
        /** 攻击 */
        Attack = 3,
        /** 移动速度增加 (跑)*/
        SpeedUp = 4,
        /** 移动速度增加 释放 (跑 停) */
        SpeedUp_Release = 5,
        /** 等死状态 */
        WaitForDeath = 6,
        /** 死亡 */
        Die = 7,
        /** 掉落 */
        DropOut = 8,
        /** 传送状态 */
        TransferState = 9,
        /** 复活 */
        Revive = 10,
        /** 玩家同步 走 */
        Walk = 11,
        /** 抠糖饼状态 */
        Picking = 12,
        /**左侧玩家发力拔绳子*/
        PulltheRope = 13,
        /**左侧玩家拔河预备状态*/
        PreparePull = 14,
        /**右侧玩家拔河预备状态*/
        RightPreparePull = 15,
        /**右侧玩家发力拔绳子*/
        RightPulltheRope = 16,
        /** 被击飞 */
        StrikeToFly = 17
    }
    /**
     * 玩家账号状态
     */
    export enum PlayerStatus {
        offLine = 0,
        onLine = 1,
        inRoom = 2,
        onLoad = 3,
        inReady = 4,
        inGame = 5
    }
    /**
     * 玩家游戏中状态
     */
    export enum InGameStatus {
        outGame = 0,
        inGame = 1,
        inGameWin = 2,
        inGameDead = 3
    }
    /**
     * 移动类型
     */
    export enum PlayerMoveType {
        homing = -1,
        walk = 1,
        jump = 2,
        run = 3,
        strikeToFly = 4
    }
    /**
     * 玩家状态 (客户端状态)
     */
    export enum PlayerClientState {
        prohibitionMove = 0,
        canMove = 1
    }
    /**
     * 游戏的状态
    */
    export enum GameState {
        ready = 1,
        match = 2,
        over = 3
    }
    /**
     * 排行榜类型
    */
    export enum RankType {
        daily = 1,
        weekly = 2,
        month = 3
    }
    /**
     * @language zh_CN
     * @classdesc
     * 文本内容类型
     * @version gd3d 1.0
     */
    export enum contentType {
        None = 0,
        Number = 1,
        Word = 2,
        Underline = 4,
        ChineseCharacter = 8,
        NoneChineseCharacter = 16,
        Email = 32,
        PassWord = 64,
        Custom = 128
    }
    /**
     * 点相对于形状的位置
     */
    export enum PointWithShape {
        in = -1,
        on = 0,
        out = 1
    }
    export enum ShapeType {
        square = "square",
        triangle = "triangle",
        round = "round",
        star = "star",
        umbrella = "umbrella"
    }
    export enum TicketType {
        wooden = 1001,
        sugarCake = 1002,
        tugOfWar = 1003,
        miniChampionship = 1004,
        marbles = 1005,
        glassBridge = 1006,
        squidGame = 1007,
        greatChampionship = 1008
    }
    export enum ShopType {
        Tickets = 1001
    }
    export enum CommodityType {
        Tickets = 1,
        Clothing = 2
    }
    export enum Weapons {
        none = 0,
        dao = 1,
        bat = 2
    }
    export enum HitType {
        Bloom = "fx_Bloom",
        Hit = "fx_hit",
        HitBloom = "fx_hitBloom"
    }
}
declare module "Audio/AudioEnum" {
    export enum AudioEnum {
        WoodenBg = 1100,
        WoodenSingsong1 = 1101,
        WoodenSingsong2 = 1102,
        WoodenSingsong3 = 1103,
        WoodenSingsong4 = 1104,
        WoodenGunshoot = 1105,
        WoodenMachineScan = 1106,
        WoodenTicking = 1107,
        WoodenTurnhead = 1108,
        WoodWalkNormal = 1109,
        WoodWalkSand = 1110,
        WoodButtonNormal = 1111,
        WoodLandNormal = 1112,
        WoodRunNormal = 1113,
        WoodRunSand = 1114,
        SugarBroken = 1115,
        SugarBrokenBig = 1116,
        SugarSlide = 1117,
        SugarPrick = 1118,
        Glassbroken = 1119,
        DroupOut = 1120
    }
}
declare module "Data/CacheToolData" {
    export class CacheToolData {
        static bgmVolume: number;
        static soundVolume: number;
    }
}
declare module "Audio/OriginCode/CAudioPlayer" {
    export class CAudioPlayer implements m4m.framework.INodeComponent {
        /**
        * @public
        * @language zh_CN
        * @classdesc
        * 获取音量大小
        * @version egret-m4m 1.0
        */
        get volume(): number;
        /**
         * @public
         * @language zh_CN
         * @classdesc
         * 设置音量大小
         * @param value 音量值
         * @version egret-m4m 1.0
         */
        set volume(val: number);
        audioChannel: CAudioChannel;
        buffer: AudioBuffer;
        beLoop: boolean;
        name: String;
        gameObject: m4m.framework.gameObject;
        /**
         * 初始化声音播放器的播放
         * @param buffer 声音资源
         * @param volume 音量大小
         * @param beLoop
         */
        init(name: string, audioChannel: CAudioChannel, beLoop?: boolean): void;
        start(): void;
        update(delta: number): void;
        remove(): void;
        clone(): void;
        /**
         * @public
         * @language zh_CN
         * @classdesc
         * 播放声音
         * @param x 音源在3D空间中的播放位置
         * @param y 音源在3D空间中的播放位置
         * @param z 音源在3D空间中的播放位置
         */
        play(buffer: AudioBuffer, volume?: number, onended?: Function, x?: number, y?: number, z?: number): any;
        /**
        * @public
        * @language zh_CN
        * @classdesc
        * 停止播放
        * @version egret-m4m 1.0
        */
        stop(): void;
        /**
         * @public
         * @language zh_CN
         * @classdesc
         * 获得当前音频播放器是否在播放
         * @version egret-m4m 1.0
         */
        isPlaying(): boolean;
        onPlay(): void;
    }
    export class CAudioChannel {
        source: AudioBufferSourceNode;
        gainNode: GainNode;
        pannerNode: PannerNode;
        /**当前个本声音 音量默认大小 (与整体声音调整区分开)
         */
        defVolume: number;
        /**
        * @public
        * @language zh_CN
        * @classdesc
        * 获取音量大小
        * @version egret-m4m 1.0
        */
        get volume(): number;
        /**
         * @public
         * @language zh_CN
         * @classdesc
         * 设置音量大小
         * @param value 音量值
         * @version egret-m4m 1.0
         */
        set volume(val: number);
        isplay: boolean;
        /**
         * @public
         * @language zh_CN
         * @classdesc
         * 停止播放声音
         * @version egret-m4m 1.0
         */
        stop(): void;
    }
}
declare module "Audio/OriginCode/audioex" {
    import { CAudioChannel } from "Audio/OriginCode/CAudioPlayer";
    export class CAudioEx {
        static instance(): CAudioEx;
        private static loadArrayBuffer;
        audioContext: AudioContext;
        private static g_this;
        private constructor();
        /**
         * @public
         * @language zh_CN
         * @classdesc
         * 初始化声音api，注意：在ios上面必须手动点击某个按钮来调用初始化，否则无法播放声音
         * @version egret-gd3d 1.0
         */
        clickInit(): void;
        /**
         * @public
         * @language zh_CN
         * @classdesc
         * 初始化声音api，注意：在ios上面必须手动点击某个按钮来调用初始化，否则无法播放声音
         * @version egret-gd3d 1.0
         */
        isAvailable(): boolean;
        /**
         * @public
         * @language zh_CN
         * @classdesc
         * 从arraybuffer转成audiobuffer
         * @version egret-gd3d 1.0
         * @param ab  二进制声音数据
         * @param fun
         */
        loadAudioBufferFromArrayBuffer(ab: ArrayBuffer, fun: (buf: AudioBuffer, _err: Error) => void): void;
        /**
         * @public
         * @language zh_CN
         * @classdesc
         * 从本地文件加载音频数据，返回audiobuffer
         * @version egret-gd3d 1.0
         * @param url  文件地址
         * @param fun
         */
        loadAudioBuffer(url: string, fun: (buf: AudioBuffer, _err: Error) => void): void;
        createAudioChannel(): CAudioChannel;
    }
}
declare module "Audio/OriginCode/SoundManage" {
    import { CAudioChannel } from "Audio/OriginCode/CAudioPlayer";
    export class SoundManage {
        static get Instance(): SoundManage;
        private static instance;
        private _audioBufferDic;
        private audioPlayer;
        setAudioPlayer(audio: m4m.framework.transform): void;
        /**
         * 普通立即播放（不考虑之前的播放状态）
         * @param url
         * @param call
         * @param soundSourcePos  设定声源位置
         */
        playAudio(url: string, audioChannel: CAudioChannel, volume?: number): void;
        /**
         * 中断式播放（暂停之前的，重头开始播放）
         * @param url
         * @param call
         * @param soundSourcePos设定声源位置
         */
        playAudioInterrupt(url: string, audioChannel: CAudioChannel, volume?: number): void;
        /**
         * 阻塞式播放（如果已经在播放，就忽略此次播放）
         * @param url
         * @param call
         * @param soundSourcePos设定声源位置
         */
        playAudioBlocking(url: string, audioChannel: CAudioChannel, volume?: number): void;
        /**
         * 长的背景音乐，固定循环播放
         * @param url
         */
        playAuidoLoop(url: string, audioChannel: CAudioChannel, volume?: number): void;
        stopAudio(audioChannel: CAudioChannel): void;
        private getAudioBuffer;
        static Substring(str: string, start: number, length?: number): string;
    }
}
declare module "Audio/OriginCode/AudioManager" {
    import { IDispose } from "Tools/engineParallel/spInterface";
    import { CAudioChannel } from "Audio/OriginCode/CAudioPlayer";
    /**
     *
     */
    export class AudioManager implements IDispose {
        static get Instance(): AudioManager;
        private static _instance;
        /**
        * 背景音乐路径
        */
        private curBgMusicUrl;
        private curSoundUrl;
        private audioChannelDic;
        private soundChannelDic;
        private musicChannelDic;
        private musicAudioChannel;
        private soundAudioChannel;
        private audioAudioChannel;
        private _musicVolume;
        private _soundVolume;
        private _audioVolume;
        /**
       *  播放声音与特效开关：
       *
       */
        private isPlay;
        setSoundVolume(volume: number): void;
        setMusicVolume(volume: number): void;
        setAudioVolume(volume: number): void;
        /**
         * 局部控制背景声音
         * @param posX 角色的世界坐标X值
         */
        controlMusicVolume(posX: number): void;
        /**
         * 背景音乐
         */
        playBgMusic(musicPath?: string): void;
        /**
         * 播放NPC语音
         * @param soundPath
         * @param callBack
         */
        playNPCSound(soundPath: string): void;
        /**
         * 播放聊天语音
         */
        PlayChatSound(soundPath: string): void;
        /**
         * 设置聊天语音
         */
        setChatSound(value: boolean): void;
        /**
         * 设置背景音乐
         */
        setBGMusic(value: boolean): void;
        /**
         * 停止播放背景音乐
         */
        stopBGMusic(): void;
        /**
         * 移除释放掉的MusicAudioChannel
         */
        clearMusicChannelDic(): void;
        /**
        * 移除释放掉的audio AudioChannel
        */
        clearAudioChannelDic(): void;
        /**
        * 移除释放掉的audio AudioChannel
        */
        clearSoundChannelDic(): void;
        /**
         * 停止播放npc语音
         */
        stopSound(): void;
        /**
         * 停止播放音效
         */
        stopAllAudio(): void;
        /**
         * 停止某一个音效播放
         * @param name
         */
        stopAudio(name: string): void;
        /**
         * 循环播放
         * @param path 声音资源路径
         */
        playLoopAudio(path: string, volume?: number): CAudioChannel;
        /**
         * 普通立即播放（不考虑之前的播放状态）
         * @param path 声音资源路径
         */
        playAudio(path: string, volume?: number): CAudioChannel;
        /**
         * 阻塞式播放（如果已经在播放，就忽略此次播放）
         * @param path 声音播放路径
         */
        playAudioBlocking(path: string, volume?: number): CAudioChannel;
        /**
         * 中断式播放（暂停之前的，重头开始播放）
         * @param path 声音资源路径
         */
        playAudioInterrupt(path: string, volume?: number): CAudioChannel;
        dispose(): void;
        /**
         * 长的背景音乐，固定循环播放
         * @param musicPath 声音播放路径
         */
        private playMusic;
    }
}
declare module "Audio/AudioPlayer" {
    import { AudioEnum } from "Audio/AudioEnum";
    /**
     * 项目 音频播放器
     * （结合音频配置 管理播放参数）
     */
    export class AudioPlayer {
        private static _currBGM;
        /**当前在播放的 BGM */
        static get currBGM(): AudioEnum;
        private static audioUrl;
        static init(): void;
        /**
         * 获取 音频的名字
         * @param audioType
         */
        static getResName(audioType: AudioEnum): string;
        /**
         * 播放BGM
         * @param audioType
         */
        static playBGM(audioType: AudioEnum, needLoop?: boolean): void;
        /**
         * 停播 BGM
         */
        static stopBGM(): void;
        /**
         * 播放指定 音频
         * @param audioType
         */
        static play(audioType: AudioEnum, volume?: number): void;
        /**
         * 停止播放 指定音频
         * @param audioType
         */
        static stop(audioType: AudioEnum): void;
        /**
         * 停播所有 音频
         */
        static stopAll(): void;
        /**
         * 设置静音状态
         * @param isMute 是否静音
         */
        static setMute(isMute: boolean): void;
        /**
         * 暂停 指定音频
         * @param audioType
         */
        static pause(audioType: AudioEnum): void;
        /**
         * 设置 音量 区分bgm 和其他 音效
         * @param audioResList bgm
         * @param bgm
         */
        static setSpecialVolume(volume: number, audioResList: string[], bgm: boolean): void;
        /**
         * 设置 指定音频的音量
         * @param audioType
         * @param volume
         */
        static setVolume(audioType: AudioEnum, volume: number): void;
        /**
         * 查看指定 音频是否 是暂停状态
         * @param audioType
         */
        static ispaused(audioType: AudioEnum): void;
        /**
         * 偏移 指定的位置，播放
         * @param audioType
         * @param position 偏移时间（秒）
         */
        static seek(audioType: AudioEnum, position: number): void;
        /**
         * 删除销毁 音频
         * @param audioType
         */
        static removeAudio(audioType: AudioEnum): void;
    }
}
declare module "Data/BindKeyName" {
    export class BindKeyName {
        static clickSlide: string;
        static startTimeCD: string;
        static runningTimeCD: string;
        static roleMakeSuccess: string;
        static mainRoleToTargetPoint: string;
        static roleJumpGround: string;
        static dieStateRoleJumpGround: string;
        static glassBroken: string;
        static roleDropOut: string;
        static joyReset: string;
        static battleRoleTopTos: string;
        static setTopBarVisible: string;
        static refreshCurrency: string;
        static EyeVerify: string;
        static Scenario: string;
        static Network: string;
        static playerHit: string;
        static playerDead: string;
        static refreshTicket: string;
        static buyTicketResult: string;
        static gamePlayerDead: string;
        static gamePlayerWin: string;
        static strikeToFly: string;
        static approveSuc: string;
        static getRankPrizeDataSuc: string;
        static ropeMove: string;
        static playerStartPos: string;
        static gameStart: string;
        static openSugarCakeGame: string;
        static changeSugarCakeState: string;
        static addSugarCakeNpc: string;
        static gameResult: string;
        static tugOfWarPro: string;
        static targetType: string;
        static readyTimeCD: string;
        static startTugOfWar: string;
        static TugOfWarDerection: string;
        static TugOfWarOverTime: string;
        static buyTicketSuccessToGame: string;
        static hoodleBottomPour: string;
        static enableGamingToucher: string;
        static gamingToucherPoint: string;
        static clearTopBar: string;
        static updateTitleText: string;
        static RoleRotateState: string;
        static RoleDeath: string;
        static GlassIntegral: string;
        static WoodIntegral: string;
        static TugIntegral: string;
        static SugarIntegral: string;
        static HoodleIntegral: string;
        static TimeData: string;
        static throwHoodle: string;
        static enableThrowHoodleTrack: string;
        static showAttackBtn: string;
        static gamingdata: string;
        static StageselectTime: string;
        static StageselectData: string;
        static StageselectTimeStart: string;
        static roelgming: string;
        static tugOfWarRoundResult: string;
        static mail: string;
        static Delmail: string;
        static LoginSucceeded: string;
    }
}
declare module "gamePlays/IGamePlay" {
    import { GamePlayType } from "GameEnum";
    /**
     * 游戏玩法
     */
    export interface IGamePlay {
        /** 起始区域 */
        startArea(): m4m.math.vector3[];
        /** 终点区域 */
        endArea(): m4m.math.vector3[];
        /** 获取 玩法的类型 */
        getGameType(): GamePlayType;
        /** 开始运行游戏 */
        runGame(): any;
        /** 退出当前游戏*/
        exitGame(): any;
    }
}
declare module "Manager/PerformanceTestMgr" {
    export class PerformanceTestMgr {
        static update(dt: number): void;
        private static FPSArr;
        private static timeTotal;
        private static FrameCount;
        private static PerformanceTestStatistics;
    }
}
declare module "Core/PoolMgr" {
    import { engineParallelType, ISpTransform } from "Tools/engineParallel/spInterface";
    export interface IDataClass {
        /** 重置 */
        reset(): any;
    }
    interface IPool<T> {
        /** 从池 获取一个新对象 */
        newObj(...parameter: any[]): T;
        /** 释放一个新对象到池 */
        deleteObj(obj: T): any;
    }
    interface IPoolPromise<T> {
        /** 从池 获取一个新对象 ， 异步 返回 Promise */
        newObj(...parameter: any[]): Promise<T>;
        /** 释放一个新对象到池 */
        deleteObj(obj: T): any;
    }
    /** 3d 预制体 对象池 */
    class Prefab3dPool implements IPoolPromise<ISpTransform> {
        protected static readonly InPool = "_InPool_";
        private static readonly tagP3dPoolURL;
        private poolArrMap;
        newObj(prefabURL: string): Promise<ISpTransform>;
        deleteObj(obj: ISpTransform): boolean;
        /** 清理池中所有的对象 */
        clearAll(): void;
        protected getObj(prefabURL: string, engineType?: engineParallelType): Promise<ISpTransform>;
        private getPoolArr;
    }
    /** 特效 对象池 */
    class EffectModlePool extends Prefab3dPool {
        newObj(prefabName: string, path?: string, engineType?: engineParallelType): Promise<ISpTransform>;
        deleteObj(obj: ISpTransform): boolean;
    }
    /** 普通模型 对象池 */
    class BaseModlePool extends Prefab3dPool {
        newObj(prefabName: string, path?: string, engineType?: engineParallelType): Promise<ISpTransform>;
        deleteObj(obj: ISpTransform): boolean;
    }
    class DataClassPool implements IPool<IDataClass> {
        private poolArrMap;
        newObj(classobj: any): IDataClass;
        deleteObj(obj: IDataClass): boolean;
        private getPoolArr;
    }
    /**
     * 项目对象池管理类
     */
    export class PoolMgr {
        /** 基本模型池 */
        static readonly baseModlePool: BaseModlePool;
        /** 特效的对象池 */
        static readonly effectMPool: EffectModlePool;
        /** 数据类池 */
        static readonly dataClassPool: DataClassPool;
    }
}
declare module "Core/types" {
    /** 可以为null 的值别名类型*/
    export type Nullable<T> = T | null;
    /**
     * 元型类型别名
     * @ignorenaming
     */
    type Primitive = undefined | null | boolean | string | number | Function;
    /**
     * 类型修饰使对象的所有属性都为只读
     */
    export type Immutable<T> = T extends Primitive ? T : T extends Array<infer U> ? ReadonlyArray<U> : DeepImmutable<T>;
    /**
     * 类型修饰使对象的所有属性都为只读(递归)
     */
    export type DeepImmutable<T> = T extends Primitive ? T : T extends Array<infer U> ? IDeepImmutableArray<U> : DeepImmutableObject<T>;
    /**
     * 类型修饰使对象的属性为只读
     */
    export type DeepImmutableObject<T> = {
        readonly [K in keyof T]: DeepImmutable<T[K]>;
    };
    /** @hidden */
    interface IDeepImmutableArray<T> extends ReadonlyArray<DeepImmutable<T>> {
    }
}
declare module "Core/EffectMgr" {
    import { ISpTransform } from "Tools/engineParallel/spInterface";
    import { Nullable } from "Core/types";
    type vector3 = m4m.math.vector3;
    /** 特效资源列表 */
    class EffectTypes {
        "fx_pp": string;
        "fx_cs": string;
        "fx_UI_lq": string;
        "Bullet_bingzhui": string;
        "Com_chongsheng": string;
        "Com_nenglianghudun": string;
        "Com_shengminghudunA": string;
        "Eff_baoqi1": string;
    }
    /** 特效管理器 */
    export class EffectMgr {
        static effRoot: ISpTransform;
        private static readonly helpV3Zero;
        private static readonly helpV3;
        private static readonly helpQuat;
        private static effMap;
        private static guid;
        private static adjustMap;
        /**
         * 游戏特效 管理器
         * @param effRoot 特效root 节点
         * @param resPath 资源路径
         */
        static init(effRoot: ISpTransform): void;
        /** 获取一个 特效对象 */
        static getEffBuyName(effectName: string): Promise<ISpTransform>;
        /** 获取一个 特效对象 */
        private static getEff;
        /**
         * 修改颜色（待补完）
         * @param _guid
         * @param color
         * @param color2
         */
        static changeColor(_guid: number, color: m4m.math.color): void;
        /** 修改缩放 */
        static changeScale(_guid: number, scale: number): void;
        /**
         * 播放 粒子 特效 （返回一个 唯一标记id）
         * @param effectName 特效名
         * @param pos 位置
         * @param beAttatchTrans 挂载到哪个transform
         * @param scale 缩放
         */
        static setPlay<K extends keyof EffectTypes>(effectName: K, pos: vector3, scale?: number, _euler?: vector3, beAttatchTrans?: ISpTransform, color?: m4m.math.color, loop?: boolean): Promise<number>;
        /**
         * 停止播放
         * @param _guid
         */
        static setStop(_guid: number): void;
        /**
         * 用真实时间播放特效
         * @param _guid
         */
        static realUpdata(_guid: number): void;
        /**
         * 特效layer 改变
         * @param _guid
         * @param layer
         */
        static effectLayerChange(_guid: number, layer: number): void;
        /**
         * 获取特效组件
         * @param effTrans
         */
        private static getParticleSystems;
        /**
         * 清除一个特效
         * @param _guid
         */
        static removeOne(_guid: number): void;
        /**
         * 清除所有的特效
         */
        static clearAll(): void;
        /**
         * 倒计时 删除
         * @param _guid id
         * @param life 时间
         */
        static countDownRemove(_guid: number, life: number): void;
        /**
         * 注册指定特效对象（guid） 播放完毕后回调删除
         * @param _guid id
         * @param callBack 结束后回调
         */
        static onPlayEndRemove(_guid: number, callBack?: Nullable<Function>): void;
        /**
         * 设置 特效朝向
         * @param _guid id
         * @param pos
         */
        static lookAt(_guid: number, lookPos: m4m.math.vector3): void;
        static getPostion(_guid: number, out: m4m.math.vector3): void;
        static getForward(_guid: number, out: m4m.math.vector3): void;
        static getRight(_guid: number, out: m4m.math.vector3): void;
        static getUp(_guid: number, out: m4m.math.vector3): void;
        /**
         * 设置 特效位置
         * @param _guid id
         * @param pos
         */
        static setPostion(_guid: number, pos: m4m.math.vector3): void;
        /**
         * 设置 特效旋转
         * @param _guid
         * @param rotate
         * @returns
         */
        static setRotate(_guid: number, rotate: m4m.math.quaternion): void;
        /**
        * 设置 特效缩放
        * @param _guid
        * @param rotate
        * @returns
        */
        static setScale(_guid: number, scale: number): void;
        private static playEndMap;
        private static onPlayEnd;
    }
}
declare module "Net/DataEvents/UserVarBaseEvent" {
    export class UserVarBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 用户uuid*/
        static id: string;
        /** 用户名*/
        static playerName: string;
        /** token*/
        static token: string;
        /** 密码*/
        static passWord: string;
        /** 账号状态*/
        static status: string;
        /** 游戏中账号状态*/
        static inGameStatus: string;
        /** 人物属性*/
        static roleStatus: string;
        /** 持有货币*/
        static currency: string;
        /** 装备道具*/
        static equip: string;
        /** 持有道具*/
        static items: string;
        /** 邮箱道具*/
        static mailItem: string;
        /** 是否屏蔽*/
        static isBlock: string;
        /** 是否记录*/
        static isLogUser: string;
        /** 登录时间*/
        static loginTime: string;
        /** 游戏经历是否打开*/
        static experience: string;
        /** 游戏经历*/
        static Battlelist: string;
        /** 玩家头像*/
        static playerIcon: string;
        /** 持有头像*/
        static headPortrait: string;
    }
}
declare module "Net/WsDataManager" {
    import { BattleListBase } from "BattleListBase";
    import { CookieConfigBase } from "CookieConfigBase";
    import { CookieGameData } from "CookieGameData";
    import { DailyRank } from "DailyRank";
    import { WeeklyRank } from "WeeklyRank";
    import { MonthlyRank } from "MonthlyRank";
    import { CookieDailyRank } from "CookieDailyRank";
    import { CookieWeeklyRank } from "CookieWeeklyRank";
    import { CookieMonthlyRank } from "CookieMonthlyRank";
    import { DailyRankLast } from "DailyRankLast";
    import { DailyRankLog } from "DailyRankLog";
    import { WeeklyRankLast } from "WeeklyRankLast";
    import { WeeklyRankLog } from "WeeklyRankLog";
    import { MonthlyRankLast } from "MonthlyRankLast";
    import { MonthlyRankLog } from "MonthlyRankLog";
    import { CookieDailyRankLast } from "CookieDailyRankLast";
    import { CookieDailyRankLog } from "CookieDailyRankLog";
    import { CookieWeeklyRankLast } from "CookieWeeklyRankLast";
    import { CookieWeeklyRankLog } from "CookieWeeklyRankLog";
    import { CookieMonthlyRankLast } from "CookieMonthlyRankLast";
    import { CookieMonthlyRankLog } from "CookieMonthlyRankLog";
    import { DarkFightConfigBase } from "DarkFightConfigBase";
    import { DialRiverConfigBase } from "DialRiverConfigBase";
    import { DialRiverData } from "DialRiverData";
    import { GameOpenSetting } from "GameOpenSetting";
    import { GamesConfigBase } from "GamesConfigBase";
    import { GamesTicketBase } from "GamesTicketBase";
    import { GlassBridgerConfigBase } from "GlassBridgerConfigBase";
    import { GlassBridgeData } from "GlassBridgeData";
    import { GlassBridgePos } from "GlassBridgePos";
    import { HallConfigBase } from "HallConfigBase";
    import { ItemBase } from "ItemBase";
    import { ItemData } from "ItemData";
    import { ItemLog } from "ItemLog";
    import { LoginLogBase } from "LoginLogBase";
    import { MailData } from "MailData";
    import { MarblesConfigBase } from "MarblesConfigBase";
    import { MarblesData } from "MarblesData";
    import { Notice } from "Notice";
    import { PKConfigBase } from "PKConfigBase";
    import { PlayerIcon } from "PlayerIcon";
    import { ResultBase } from "ResultBase";
    import { SettingBase } from "SettingBase";
    import { SeverConfigBase } from "SeverConfigBase";
    import { ShopList } from "ShopList";
    import { ShopSet } from "ShopSet";
    import { SquidGameConfigBase } from "SquidGameConfigBase";
    import { TimeEvent } from "TimeEvent";
    import { TotleRank } from "TotleRank";
    import { CookieTotleRank } from "CookieTotleRank";
    import { UserVarBase } from "UserVarBase";
    import { WalletErrLog } from "WalletErrLog";
    import { WalletLog } from "WalletLog";
    import { WoodConfigBase } from "WoodConfigBase";
    import { WoodSongData } from "WoodSongData";
    export class WsDataManager {
        static BattleListBaseData: BattleListBase;
        static CookieConfigBaseData: CookieConfigBase;
        static CookieGameDataData: CookieGameData;
        static DailyRankData: DailyRank;
        static WeeklyRankData: WeeklyRank;
        static MonthlyRankData: MonthlyRank;
        static CookieDailyRankData: CookieDailyRank;
        static CookieWeeklyRankData: CookieWeeklyRank;
        static CookieMonthlyRankData: CookieMonthlyRank;
        static DailyRankLastData: DailyRankLast;
        static DailyRankLogData: DailyRankLog;
        static WeeklyRankLastData: WeeklyRankLast;
        static WeeklyRankLogData: WeeklyRankLog;
        static MonthlyRankLastData: MonthlyRankLast;
        static MonthlyRankLogData: MonthlyRankLog;
        static CookieDailyRankLastData: CookieDailyRankLast;
        static CookieDailyRankLogData: CookieDailyRankLog;
        static CookieWeeklyRankLastData: CookieWeeklyRankLast;
        static CookieWeeklyRankLogData: CookieWeeklyRankLog;
        static CookieMonthlyRankLastData: CookieMonthlyRankLast;
        static CookieMonthlyRankLogData: CookieMonthlyRankLog;
        static DarkFightConfigBaseData: DarkFightConfigBase;
        static DialRiverConfigBaseData: DialRiverConfigBase;
        static DialRiverDataData: DialRiverData;
        static GameOpenSettingData: GameOpenSetting;
        static GamesConfigBaseData: GamesConfigBase;
        static GamesTicketBaseData: GamesTicketBase;
        static GlassBridgerConfigBaseData: GlassBridgerConfigBase;
        static GlassBridgeDataData: GlassBridgeData;
        static GlassBridgePosData: GlassBridgePos;
        static HallConfigBaseData: HallConfigBase;
        static ItemBaseData: ItemBase;
        static ItemDataData: ItemData;
        static ItemLogData: ItemLog;
        static LoginLogBaseData: LoginLogBase;
        static MailDataData: MailData;
        static MarblesConfigBaseData: MarblesConfigBase;
        static MarblesDataData: MarblesData;
        static NoticeData: Notice;
        static PKConfigBaseData: PKConfigBase;
        static PlayerIconData: PlayerIcon;
        static ResultBaseData: ResultBase;
        static SettingBaseData: SettingBase;
        static SeverConfigBaseData: SeverConfigBase;
        static ShopListData: ShopList;
        static ShopSetData: ShopSet;
        static SquidGameConfigBaseData: SquidGameConfigBase;
        static TimeEventData: TimeEvent;
        static TotleRankData: TotleRank;
        static CookieTotleRankData: CookieTotleRank;
        static UserVarBaseData: UserVarBase;
        static WalletErrLogData: WalletErrLog;
        static WalletLogData: WalletLog;
        static WoodConfigBaseData: WoodConfigBase;
        static WoodSongDataData: WoodSongData;
        static BattleListBaseDataList: typeof BattleListBase;
        static CookieConfigBaseDataList: typeof CookieConfigBase;
        static CookieGameDataDataList: typeof CookieGameData;
        static DailyRankDataList: typeof DailyRank;
        static WeeklyRankDataList: typeof WeeklyRank;
        static MonthlyRankDataList: typeof MonthlyRank;
        static CookieDailyRankDataList: typeof CookieDailyRank;
        static CookieWeeklyRankDataList: typeof CookieWeeklyRank;
        static CookieMonthlyRankDataList: typeof CookieMonthlyRank;
        static DailyRankLastDataList: typeof DailyRankLast;
        static DailyRankLogDataList: typeof DailyRankLog;
        static WeeklyRankLastDataList: typeof WeeklyRankLast;
        static WeeklyRankLogDataList: typeof WeeklyRankLog;
        static MonthlyRankLastDataList: typeof MonthlyRankLast;
        static MonthlyRankLogDataList: typeof MonthlyRankLog;
        static CookieDailyRankLastDataList: typeof CookieDailyRankLast;
        static CookieDailyRankLogDataList: typeof CookieDailyRankLog;
        static CookieWeeklyRankLastDataList: typeof CookieWeeklyRankLast;
        static CookieWeeklyRankLogDataList: typeof CookieWeeklyRankLog;
        static CookieMonthlyRankLastDataList: typeof CookieMonthlyRankLast;
        static CookieMonthlyRankLogDataList: typeof CookieMonthlyRankLog;
        static DarkFightConfigBaseDataList: typeof DarkFightConfigBase;
        static DialRiverConfigBaseDataList: typeof DialRiverConfigBase;
        static DialRiverDataDataList: typeof DialRiverData;
        static GameOpenSettingDataList: typeof GameOpenSetting;
        static GamesConfigBaseDataList: typeof GamesConfigBase;
        static GamesTicketBaseDataList: typeof GamesTicketBase;
        static GlassBridgerConfigBaseDataList: typeof GlassBridgerConfigBase;
        static GlassBridgeDataDataList: typeof GlassBridgeData;
        static GlassBridgePosDataList: typeof GlassBridgePos;
        static HallConfigBaseDataList: typeof HallConfigBase;
        static ItemBaseDataList: typeof ItemBase;
        static ItemDataDataList: typeof ItemData;
        static ItemLogDataList: typeof ItemLog;
        static LoginLogBaseDataList: typeof LoginLogBase;
        static MailDataDataList: typeof MailData;
        static MarblesConfigBaseDataList: typeof MarblesConfigBase;
        static MarblesDataDataList: typeof MarblesData;
        static NoticeDataList: typeof Notice;
        static PKConfigBaseDataList: typeof PKConfigBase;
        static PlayerIconDataList: typeof PlayerIcon;
        static ResultBaseDataList: typeof ResultBase;
        static SettingBaseDataList: typeof SettingBase;
        static SeverConfigBaseDataList: typeof SeverConfigBase;
        static ShopListDataList: typeof ShopList;
        static ShopSetDataList: typeof ShopSet;
        static SquidGameConfigBaseDataList: typeof SquidGameConfigBase;
        static TimeEventDataList: typeof TimeEvent;
        static TotleRankDataList: typeof TotleRank;
        static CookieTotleRankDataList: typeof CookieTotleRank;
        static UserVarBaseDataList: typeof UserVarBase;
        static WalletErrLogDataList: typeof WalletErrLog;
        static WalletLogDataList: typeof WalletLog;
        static WoodConfigBaseDataList: typeof WoodConfigBase;
        static WoodSongDataDataList: typeof WoodSongData;
        static setData(className: any, data: any): void;
        static changeDataList(className: string, data: any): void;
        static changeData(className: string, proName: string, paramType: string, data: any): void;
    }
}
declare module "Manager/UIData/UiNames" {
    export class UiNames {
        /**游戏中*/
        static gaming: string;
        /**大厅*/
        static Hall: string;
        /**摇杆*/
        static rocker: string;
        /**临时使用*/
        static test: string;
        /**结算弹窗*/
        static countdown: string;
        static tloading: string;
        /**手机引导*/
        static tutorialmb: string;
        /**pc引导*/
        static tutorialpc: string;
        /**多人大厅等待文字提示*/
        static txtbg: string;
        static tips: string;
        static signals: string;
        static connect: string;
        static wloading: string;
        static loading: string;
        static Steer: string;
    }
}
declare module "Manager/UserDataManager" {
    import { TicketType } from "GameEnum";
    export class UserDataManager {
        static get Instance(): UserDataManager;
        moveSpeed: number;
        runSpeed: number;
        backpack: any[];
        private static _instance;
        private ticketData;
        getTicketNum(type: TicketType): number;
        setTicketNum(type: TicketType, num: number): void;
        init(): void;
        private userInfoFun;
        private upDateItems;
        private UpdataMali;
        dispose(): void;
    }
}
declare module "Manager/UIOpenOrHideManager" {
    export class UIOpenOrHideManager {
        static get Instance(): UIOpenOrHideManager;
        static needShowLoading: boolean;
        _showRoomEuler: number;
        touchPadTran: m4m.framework.transform2D;
        roleId: number;
        nextOpenUiName: string;
        /**设置矿洞页面 */
        cavePageNumber: number;
        constructor();
        private static _instance;
        private uiloadingCanShow;
        OpenNextUI(): void;
        liuhaiOffset(): void;
        loadSceneFun(sceneID: number, uiName?: string): void;
        /**关闭 英雄详情界面*/
        hideHeroView(): void;
        hideSceneFun(sceneID: number): void;
        HideHallView(): void;
        OpenHallView(): void;
        /** 打开摇杆ui */
        OpenRockerView(): void;
        /** 打开登录ui */
        OpenTestView(): void;
        /** 关闭登录ui */
        HideTestView(): void;
        /** 打开游戏中UI */
        OpenGamingView(): void;
        /** 关闭游戏中UI */
        HideGamingView(): void;
        /** 打开通用结算 */
        OpenCountdownView(): void;
        /** 关闭通用结算 */
        HideCountdownView(): void;
        /** 打开新loading */
        OpenTloadingView(): void;
        /** 关闭新loading */
        HideTloadingView(): void;
        /** 打开手机操作引导图 */
        OpenTutorialmbView(): void;
        /** 关闭手机操作引导图 */
        HideTutorialmbView(): void;
        /** 打开pc操作引导图 */
        OpenTutorialpcView(): void;
        /** 关闭pc操作引导图 */
        HideTutorialpcView(): void;
        /**开启多人大厅等待文字提示*/
        OpentxtbgView(): void;
        /**关闭多人大厅等待文字提示*/
        HidetxtbgView(): void;
        /**开启信号提示*/
        OpensignalsView(): void;
        /** 打开loading界面 */
        OpenLoadingView(): void;
        /** 关闭loading界面 */
        HideLoadingView(): void;
        /**关闭信号提示*/
        HidesignalsView(): void;
        /** 打开tips */
        OpenTipsTCView(): void;
        /** 关闭tips */
        HideTipsTCView(): void;
        /** 打开圆环旋转loading */
        OpenWloadingView(): void;
        /** 关闭圆环旋转loading */
        HideWloadingView(): void;
        /** 打开链接钱包 */
        OpenConnectWalletView(): void;
        /** 关闭链接钱包 */
        HideConnectWalletView(): void;
        OpenSteerView(): void;
        HideSteerView(): void;
    }
}
declare module "Manager/UITipManager" {
    export class UITipManager {
        static get Instance(): UITipManager;
        tipsData: any;
        tipPanelText: string;
        callBackFun: Function;
        type: TipPanelType;
        private static _instance;
    }
    export enum TipPanelType {
        rest = 0,
        mistake = 1
    }
}
declare module "Net/PingTimeManager" {
    /**
     * 网络品质类型
     */
    export enum NetworkQualityType {
        height = 1,
        middle = 2,
        low = 3
    }
    export class PingTimeManager {
        static get Instance(): PingTimeManager;
        /**
         * 网络延迟时间  毫秒
         * */
        timeQualityNum: number;
        constructor();
        private static _instance;
        private pingtimeStart;
        getNetworkQuality(): NetworkQualityType;
        pingTimeFun(): void;
        serverBackFun(): void;
        private updateFun;
    }
}
declare module "Net/NetWebsocket" {
    export class NetWebscoket {
        static get Instance(): NetWebscoket;
        /**********是否需要请求 配置数据***********
        */
        static reqconfigMes: boolean;
        private static _instance;
        private _webscoket;
        connect(url: string): void;
        onmessage(e: MessageEvent): Promise<void>;
        sendMessage(buff: Uint8Array): void;
        onopen(e: any): void;
        send(bytes: Uint8Array): void;
        sendStr(mess: string): void;
        onclose(e: any): void;
        onerror(e: any): void;
        private Close;
    }
}
declare module "Net/WebsocketTool" {
    export class WebsocketTool {
        static get Instance(): WebsocketTool;
        private static _instance;
        onmessage(e: MessageEvent): Promise<boolean>;
        getMsg(className: any, functionName: any, text: any): string;
        /***
         * 同步游戏信息 dataInfo:同步信息
         */
        GameManager_updataGame(dataInfo: any): void;
        /***
         * 退出游戏
         */
        GameManager_outGame(): void;
        /***
         * 获取游戏开放信息
         */
        GameOpenManager_getGameOpenInfo(): void;
        /***
         * 玩家注册新账号,userInfoJson:玩家信息,passWord:密码,name:玩家名字,face:脸ID,hair:头发id
         */
        LoginManager_creatAndLoginWallet(userInfoJson: any, passWord: any, name: any, face: any, hair: any): void;
        /***
         * 玩家注册新账号不经过钱包,userID:玩家id,passWord:密码,name:玩家名字,face:脸ID,hair:头发id
         */
        LoginManager_creatAndLogin(userID: any, passWord: any, name: any, face: any, hair: any): void;
        /***
         * 玩家登录不使用钱包,userId:玩家ID,passWord:密码
         */
        LoginManager_loginWithOutWallet(userId: any, passWord: any, playerName: any): void;
        /***
         * 玩家登录使用钱包,userInfoJson:玩家信息,passWord:密码
         */
        LoginManager_login(userInfoJson: any, passWord: any, playerName: any): void;
        /***
         * 获取邮件
         */
        MailManager_getMails(): void;
        /***
         * 获取邮件道具,itemDataID:道具ID
         */
        MailManager_getMailItem(itemDataID: any): void;
        /***
         * 通过邮件ID获取邮件道具,mailID:邮件ID
         */
        MailManager_getMailItemByMailID(mailID: any): void;
        /***
         * 通过邮件ID删除邮件,mailID:邮件ID
         */
        MailManager_updateMailItemByMailID(mailID: any): void;
        /***
         * 获取木头人排行列表 rankType:列表类型 1：日榜 2：周榜 3：月榜  page:页数
         */
        RankManager_getRankList(rankType: any, page: any): void;
        /***
         * 获取糖饼排行列表 rankType:列表类型 1：日榜 2：周榜 3：月榜  page:页数
         */
        RankManager_getCookieRankList(rankType: any, page: any): void;
        /***
         * 获取木头人实时排行列表 rankType:列表类型 1：日榜 2：周榜 3：月榜  page:页数
         */
        RankManager_getNowRankList(rankType: any, page: any): void;
        /***
         * 获取糖饼实时排行列表 rankType:列表类型 1：日榜 2：周榜 3：月榜  page:页数
         */
        RankManager_getCookieNowRankList(rankType: any, page: any): void;
        /***
         * 获取自身排行 rankType:列表类型 1：日榜 2：周榜 3：月榜
         */
        RankManager_getSelfRank(rankType: any): void;
        /***
         * 获取糖饼自身排行 rankType:列表类型 1：日榜 2：周榜 3：月榜
         */
        RankManager_getCookieSelfRank(rankType: any): void;
        /***
         * 获取木头人实时自身排行 rankType:列表类型 1：日榜 2：周榜 3：月榜
         */
        RankManager_getNowSelfRank(rankType: any): void;
        /***
         * 获取糖饼实时自身排行 rankType:列表类型 1：日榜 2：周榜 3：月榜
         */
        RankManager_getCookieNowSelfRank(rankType: any): void;
        /***
         * 准备完成
         */
        RoomManager_readyForGame(): void;
        /***
         * 修改服务器时间,count：时间便宜量，单位秒
         */
        ServerManager_timePlus(count: any): void;
        /***
         * 心跳检测
         */
        ServerManager_heartBeat(): void;
        /***
         * 延迟检测
         */
        ServerManager_ping(): void;
        /***
         * 获取服务器时间
         */
        ServerManager_servertime(): void;
        /***
         * 获取设置数据
         */
        SettingManager_ObtainTing(): void;
        /***
         * 修改设置数据
         */
        SettingManager_ModifyTing(SettingData: any): void;
        /***
         * 获取商品列表，shopId:商店ID)
         */
        ShopManager_getShopInfo(shopId: any): void;
        /***
         * 购买商品，goodsId:商店ID,shopType:货币类型)
         */
        ShopManager_buyShopGoods(goodsId: any, shopType: any): void;
        /***
         * 购买门票验证，使用数字货币验证的话就和数字货币服务器通讯获取门票,gameType 游戏类型)
         */
        TicketManager_getTicket(gameType: any): void;
        /***
         * 购买门票不经过钱包，count购买数量,gameType:游戏类型)
         */
        TicketManager_getTicketWithOutWallet(count: any, gameType: any): void;
        /***
         * 获取所有门票信息)
         */
        TicketManager_getAllTicketInfo(): void;
        /***
         * 获取门票信息，gameId:游戏ID)
         */
        TicketManager_getTicketId(gameId: any): void;
        /***
         * 支付门票开始进入游戏房，gameId:游戏ID)
         */
        TicketManager_useTickToGameRoom(gameId: any): void;
        /***
         * 通过玩家userId获得玩家数据,userId:玩家UID
         */
        UserManager_getUser(userId: any): void;
        /***
         * 通过玩家userID修改昵称，userID:玩家ID,playerName:玩家昵称,itemDataId:道具ID
         */
        UserManager_updataUser(userID: any, playerName: any, itemDataId: any): void;
        /***
         * 通过玩家userID修改游戏经历是否打开，userID:玩家ID
         */
        UserManager_updataUserexpice(userID: any): void;
        /***
         * 通过玩家userID修改玩家头像,userID:玩家ID,playericon:玩家头像
         */
        UserManager_updataplayericon(userID: any, playericon: any): void;
    }
}
declare module "Role/actStates/RoleActState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    /**
     * 角色行为状态
     */
    export interface IRoleActState {
        state: number;
        timeOut: number;
        /**
         * 是否可以转状态
         */
        canChange(_input: RoleActInput, role: Role): boolean;
        /**
         * 进入状态
         * @param _role role对象
         */
        enter(_role: Role, data?: any): any;
        /**
         * 更新
         * @param _role role对象
         * @param dt
         */
        update(_role: Role, dt: number): any;
    }
}
declare module "Role/actStates/AttackState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    /**
     * 攻击 状态
     */
    export class AttackState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        constructor();
        enter(_role: Role, prevState: IRoleActState): void;
        canChange(_input: RoleActInput, _role: Role): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/AI/AiInterface" {
    import { Role } from "Role/Role";
    /** AI 类型
     */
    export enum AIType {
        /** 闲逛 */
        Ramble = 0,
        /** 木头人 玩家AI */
        WoodenPeople = 1
    }
    /** 角色AI */
    export interface IRoleAI {
        /**
         * 更新
         * @param role 角色
         * @param dt
         */
        update(role: Role, dt: number): any;
        /**
         * 开始
         * @param role 角色
         */
        enter(role: Role): any;
        /**
         * 结束
         * @param role
         */
        exit(role: Role): any;
    }
}
declare module "Res/ResMgr" {
    import { cMap } from "Data/Map";
    export class ResMgr {
        static ExcelConfigClassList: any[];
        /** 表格配置bufferdata 字典 */
        static ExcelConfigBufferMap: cMap<ArrayBuffer>;
        static seconedLcallBack: Function;
        static assetmgr: m4m.framework.assetMgr;
        static mainConfig: string;
        private static lReslist;
        private static isInit;
        private static setLoadUrls;
        static init(): void;
        private static getLoadTask;
        private static getLoadExcelTask;
        private static postEventTask;
        private static loadExcalJSTask;
        private static loadExcelConfigTask;
        private static loadShaderTask;
        private static loadConfigJsonTask;
        private static loadText;
        private static configInitTask;
    }
}
declare module "Data/configMgr" {
    export class ConfigMgr {
        static preKey: number[];
        static token: number[];
        static reqVisInfo: number[];
        static reqLoginMsg: number[];
        static init(): void;
        static setConf(obj: object): void;
        static print(): void;
    }
}
declare module "appMain" {
    /** core enter point */
    export class AppMain {
        constructor();
        private connectWebSocket;
        private loadTestAccountIDConfig;
        private initEngine;
        private onResLoaded;
        private setMini;
        private setSysInfoInitOnPlay;
    }
}
declare module "Scene/Obstacle/Grid2D" {
    import { ReuseArray } from "Data/ReuseArray";
    /**
     * 网格 容器
     * （用于2d空间网格分割）
     */
    export class Grid2D {
        constructor(unitSize: number);
        private static readonly helpStrArr;
        /** 去重map */
        private _filterRepeatMap;
        private _puCount;
        /** 单元尺寸 */
        private _unitSize;
        /** 单元存 id列表 */
        private _unitIDsMap;
        /**
         * 添加 矩形
         * @param rect 矩形
         * @param id 矩形ID
         */
        addRect(rect: m4m.math.rect, id: number): void;
        getPolygon(unitList: ReuseArray<number>): void;
        /**
         * 获取 通过位置坐标
         * @param pos 平面点 坐标
         * @param outData 多边形（id） 列表
         * @returns boolean : 是否有获取到数据
         */
        getByPos(pos: m4m.math.vector2, outData: ReuseArray<number>): boolean;
        getByLine(p0: m4m.math.vector2, p1: m4m.math.vector2, outData: ReuseArray<number>): void;
        private getPolygonByUints;
        /**
         * 获取 unitPos 通过 线段
         * @param p0 线段开始点
         * @param p1 线段结束点
         * @param outData 格子的单元坐标Key 列表
         */
        private getUnitByLine;
        /**
         * 获取 unitPos 通过 Rect
         * @param rect 矩形
         * @param outData 输出 数据
         */
        private getUnitByRect;
        private getUintByRange;
        /**
         * 获取 unitPos 通过 Rect
         * @param point
         */
        private getUnitByPoint;
    }
}
declare module "Scene/Obstacle/PolygonObstacle" {
    type vector2 = m4m.math.vector2;
    /**
     * 场景2d 多边形障碍
     */
    export class PolygonObstacle {
        constructor(data: number[]);
        private static readonly helpV2;
        private static readonly helpV2v1;
        private static readonly helpV2v2;
        private static readonly helpV2v3;
        private static readonly helpV2v4;
        private static readonly helpV2v5;
        private _active;
        private _points;
        private _aabb;
        /** 获取点s */
        get points(): m4m.math.vector2[];
        /** aabb*/
        get aabb(): m4m.math.rect;
        /** 激活中*/
        get active(): boolean;
        set active(val: boolean);
        hitTestPoint(point: vector2): void;
        /**
         * 通过线段 碰撞测试
         * @param p0 线段 开始点
         * @param p1 线段 结束点
         * @param outHitPoint   返回的碰撞点
         * @param outHitNormal  返回的碰撞点法线
         * @param outHitP2  返回的相交边上的点
         */
        hitTestLine(p0: vector2, p1: vector2, outHitPoint?: vector2, outHitNormal?: vector2, outHitP2?: vector2): boolean;
        /**
         * 是否与 选段相交
         * @param p0 线段 开始点
         * @param p1 线段 结束点
         * @returns
         */
        hasLineIntersection(p0: vector2, p1: vector2): boolean;
        /**
         * 线段相交检测
         * @param p1 线段一 开始点
         * @param p2 线段一 结束点
         * @param p3 线段二 开始点
         * @param p4 线段二 结束点
         * @param interPoint 线段相交点
         */
        private lineIntersection;
    }
}
declare module "Scene/SceneObstacleMgr" {
    import { ReuseArray } from "Data/ReuseArray";
    /** 场景障碍 */
    export class SceneObstacleMgr {
        static readonly helpV2: m4m.math.vector2;
        static readonly helpV2v1: m4m.math.vector2;
        static readonly helpV2v2: m4m.math.vector2;
        static readonly helpV2v3: m4m.math.vector2;
        static readonly helpV2v4: m4m.math.vector2;
        static readonly helpV2v5: m4m.math.vector2;
        static readonly helpV3: m4m.math.vector3;
        static readonly helpV3v1: m4m.math.vector3;
        static readonly helpNumReuseArr: ReuseArray<number>;
        static readonly hitMixGap = 0.02;
        private static _ObsGridMap;
        private static _ObsPolygonsMap;
        private static _currObsName;
        private static _debugVelP0;
        private static _debugVelP1;
        private static _debugVelPoints;
        private static _debugHitNormal;
        private static _debugHitPoints;
        private static _debugMoveLines;
        private static _GridUintSize;
        static init(): void;
        /** 当前是否激活 */
        static get isEnable(): boolean;
        /**
         * 加载处理 障碍
         * @param obsName
         */
        static show(obsName: string): Promise<void>;
        /**
         * 删除当前障碍
         */
        static remove(): void;
        /**
         * 计算 射线碰撞终点
         * @param _p0 射线开始点
         * @param _p1 射线结束点
         * @param outPoint 终点
         * @param outMidPoint？ 转折中间点
         * @returns
         */
        static calcLineCollisionPoint(_p0: m4m.math.vector2, _p1: m4m.math.vector2, outPoint: m4m.math.vector3, outMidPoint?: m4m.math.vector3): boolean;
        private static getObstacle;
        /** 设置场景障碍 */
        private static setSceneObstacle;
        /**
         * 通过线段碰撞 检测
         * @param p0 线段开始点
         * @param p1 线段结束点
         * @param outHitPoint 返回的碰撞点
         * @param outNormal 返回的碰撞点法向量
         * @param outTangentP 返回的碰撞点切线方向延展后终点
         * @param minGap 离多边形的 保留间距（默认不保留）
         */
        static hitTestByLine(p0: m4m.math.vector2, p1: m4m.math.vector2, outHitPoint: m4m.math.vector2, _minGap?: number, outNormal?: m4m.math.vector2, outTangentP?: m4m.math.vector2): boolean;
        private static hasHitByline;
        /**
         * 碰撞 传播检测
         * @param p0
         * @param p1
         * @param outPoint 输出点
         */
        private static transmitCollision;
        /** 调试测试 */
        private static debugTest;
        /** 调试绘制 */
        private static debugDraw;
        private static update;
    }
}
declare module "Core/GameLogic" {
    /**
     * 游戏逻辑相关
     * 这是一个存储游戏逻辑相关我们希望全局可访问的东西的地方，都是静态
     */
    export class GameLogic {
        static readonly layerIndexDefault = 0;
        static readonly layerIndexGround = 8;
        static readonly layerIndexActor = 9;
        static readonly layerIndexBuilding = 10;
        /** ui之上3d模型 */
        static readonly layerIndexOverUI3d = 30;
        static readonly layerBitDefault: number;
        static readonly layerBitGround: number;
        static readonly layerBitActor: number;
        static readonly layerBitBuilding: number;
        /** ui之上3d模型 */
        static readonly layerBitOverUI3d: number;
    }
}
declare module "Tool/gameTool" {
    import { EventMapByAutoGen } from "eventType/eventMapByAutoGen";
    import { ISpAnimPlayer, ISpAnimPlayerHandle } from "Tools/engineParallel/spInterface";
    /** 游戏相关 工具类 */
    export class GameTool {
        private static readonly hasUIShowMap;
        /**
         * 请求UI，并等待(事件 Show模式)
         * @param showEvent UI事件
         */
        static UIWaitEvent<T extends keyof EventMapByAutoGen>(showEvent: T): Promise<void>;
        /**
         * 请求 UI,并等待(inited) 显示（type2 类型UI）
         * @param uiClassName UI类的名字
         */
        static UIWaitShowType2(uiClassName: string): Promise<any>;
        /**
         * 等待 UI 进入显示状态，不主动请求UI
         * @param uiClassName UI类的名字
         * @param needInited 是否必须 等待 初始化完成
         */
        static UIWaitIsShow(uiClassName: string): Promise<any>;
        /**
         * 获取 AnimPlayerHandle ，通过ISpAnimPlayer
         * @param _aniplayer  ISpAnimPlayer组件对象
         * @param loadpath    加载的路径 例如：GameMgr.rolePath
         */
        static getAnimPlayerHandle(_aniplayer: ISpAnimPlayer, loadpath: string): Promise<ISpAnimPlayerHandle>;
        /** 等待UI 监听事件成功 */
        private static waitListenUIEvent;
        private static test;
    }
}
declare module "Role/RoleAttrInfo" {
    import { InGameStatus, PlayerMoveType, PlayerStatus } from "GameEnum";
    /**
     *当前游戏默认死亡表现
     */
    export enum GameDiePerformanceEnum {
        Die = 0,
        DropOutDie = 1,
        Back = 2
    }
    /**
     *玩家类型
     */
    export enum RoleTypeEnum {
        /** 玩家 */
        Player = 0,
        NPC = 1
    }
    /**
     * RoleServerInfo
     */
    export class RoleServerInfo {
        name: string;
        GUID: string;
        pos: m4m.math.vector3;
        roleState: PlayerStatus;
        inGameStatus: InGameStatus;
        rot: number;
        moveTime: number;
        moveType: PlayerMoveType;
        hitType: number;
        hp: number;
        [key: string]: any;
    }
    /**
     * RoleAttrInfo
     */
    export class RoleAttrInfo extends RoleServerInfo {
        isInit: boolean;
        roleType: RoleTypeEnum;
        angle: number;
        isSingle: boolean;
        num: number;
        defDiePerformance: GameDiePerformanceEnum;
    }
}
declare module "Role/RoleDoll" {
    import { AnimationController } from "animation/AnimationController";
    import { IDispose, ISpTransform } from "Tools/engineParallel/spInterface";
    import { PlayerMoveType } from "GameEnum";
    import { Role } from "Role/Role";
    /**
     * 角色玩偶对象
     * 负责 显示相关功能，模型渲染、动画播放、特效播放
     */
    export class RoleDoll implements IDispose {
        /** 角色场景对象 */
        get model(): ISpTransform;
        /** 动画 状态机 控制器 */
        get animationCtr(): AnimationController;
        /** 获取 骨骼位置的名字 */
        private static getBoneNameMap;
        /** 初始化完毕？ */
        get inited(): boolean;
        protected _animationCtr: AnimationController;
        protected targetPoint: m4m.math.vector3;
        protected moveSpeed: number;
        protected TargetPointArr: any[];
        get canMove(): boolean;
        /** 蒙皮动画 根节点 名 */
        static readonly BoonRoot = "__BoonRoot__";
        ModelRadius: number;
        role: Role;
        faceDatas: string[];
        hairDatas: string[];
        shadow: ISpTransform;
        /** 角色 上下动效关键帧数据 */
        private static readonly roleKFDatas;
        private static readonly adBoneAddedTag;
        private static _isPlayerBoneNameMap;
        private static readonly helpQua;
        private static readonly helpV2;
        private static readonly helpV2v1;
        private static readonly helpV2v2;
        private static readonly helpV2v3;
        private static readonly helpV3;
        private static readonly helpV3v1;
        private static readonly helpV3v2;
        private static readonly helpV3v3;
        private static readonly helpV3v4;
        private static readonly shadowResName;
        private _model;
        private _inited;
        private _initedWaits;
        private _top;
        private _roleShadow;
        private num;
        /**
         * 初始化
         * @param resName 显示模型的资源名
         */
        init(resName: string): Promise<void>;
        setNum(num: string): void;
        getNum(): string;
        /** 获取 一个 等待 init完成的回调 */
        waitInited(): Promise<unknown>;
        UpdateLogic(dt: number): void;
        dispose(): void;
        /**
         * 播放动画
         * @param animName      动画名
         * @param needPlayEnd   是否返回 （为true时等待播放结束的Promise）
         */
        playAnim(animName: string, needPlayEnd?: boolean): Promise<any>;
        playFX(fxName: string): void;
        /** 暂停动画播放 */
        stopAnim(): void;
        /**
         * 行走一步
         * @param dt dt 时间
         * @param moveVelocity 移动速度
         * @param forwarddRotate 角色转到前方旋转
         */
        walkStep(dt: number, moveVelocity: m4m.math.vector2, forwarddRotate: m4m.math.quaternion): void;
        getTopPos(pos: m4m.math.vector3): void;
        makePlayerFace(): void;
        moveToTarget(_pos: m4m.math.vector3, moveTime: number, moveType: PlayerMoveType): void;
        stop(trueStop?: boolean): void;
        /**
         * 根据距离和到达时间计算出行走的速度
         * @param dt
         * @returns
         */
        protected updateMoveToTargetPoint(dt: number): void;
        /**
         * 移动通过 速度向量
         * @param velX 速度向量X
         * @param velY 速度向量Y
         */
        protected moveByVelocity(velX: number, velY: number): void;
        private adjustByObs;
        /** 获取 角色挂在位置点 */
        private setHole;
    }
}
declare module "Scene/SceneInterface" {
    import { IDispose } from "Tools/engineParallel/spInterface";
    /** 可视化场景 */
    export interface ISceneVisual extends IDispose {
        /**
         * 展示场景
         * @param resName 场景资源名
         */
        show(): Promise<void>;
        /** 隐藏场景 */
        hied(): any;
    }
}
declare module "Scene/SceneBattle" {
    import { SceneBase } from "SceneBase";
    import { ISceneVisual } from "Scene/SceneInterface";
    /** 战斗场景 */
    export class SceneBattle implements ISceneVisual {
        constructor(config: SceneBase);
        private config;
        private model;
        show(): Promise<void>;
        hied(): void;
        dispose(): void;
    }
}
declare module "Scene/SceneHomeMap" {
    import { SceneBase } from "SceneBase";
    import { ISpTransform } from "Tools/engineParallel/spInterface";
    import { ISceneVisual } from "Scene/SceneInterface";
    /** 首页 主菜单场景 */
    export class SceneHomeMap implements ISceneVisual {
        get model(): ISpTransform;
        constructor(config: SceneBase);
        private _config;
        private _model;
        show(): Promise<any>;
        hied(): void;
        dispose(): void;
    }
}
declare module "Scene/SceneMgr" {
    import { ReuseArray } from "Data/ReuseArray";
    import { ISpTransform } from "Tools/engineParallel/spInterface";
    import { ISceneVisual } from "Scene/SceneInterface";
    /** 场景管理器 */
    export class SceneMgr {
        static readonly helpV2: m4m.math.vector2;
        static readonly helpV2v1: m4m.math.vector2;
        static readonly helpV2v2: m4m.math.vector2;
        static readonly helpV2v3: m4m.math.vector2;
        static readonly helpV2v4: m4m.math.vector2;
        static readonly helpV2v5: m4m.math.vector2;
        static readonly helpV3: m4m.math.vector3;
        static readonly helpV3v1: m4m.math.vector3;
        static readonly helpNumReuseArr: ReuseArray<number>;
        static sceneRoot: ISpTransform;
        static roleRoot: ISpTransform;
        private static _sceneVEvent;
        private static _cacheMap;
        static init(): void;
        static getSceneByID(id: number): ISceneVisual;
        private static tryGet;
        private static show;
        private static trySetCamAvoidObsModel;
        private static hide;
        /** 设置场景相机 */
        private static setSceneCam;
        /** 设置雾效 */
        private static setFog;
    }
}
declare module "Scene/SceneCamAvoidObsCtr" {
    /**
     * 场景相机 避开障碍阻挡 控制器
     */
    export class SceneCamAvoidObsCtr {
        private static readonly helpV3;
        private static readonly helpV3v1;
        private static readonly helpV3v2;
        private static readonly helpRay;
        private static readonly helpPickInfo;
        private static _enableCkObs;
        private static _active;
        private static _minDistance;
        private static _baseDistance;
        private static _currDistance;
        private static _ckObsTime;
        private static _moveSpeed;
        private static _ckObsTimeCounter;
        /** 是否激活 */
        static get active(): boolean;
        static set active(val: boolean);
        /** 相机看向目标的基础距离 */
        static get baseDistance(): number;
        static set baseDistance(val: number);
        /** 相机能拉近的最大距离 */
        static get minDistance(): number;
        static set minDistance(val: number);
        static init(): void;
        private static lateUpdate;
        private static ckObs;
    }
}
declare module "Role/CameraViewInfo" {
    /**
     * CameraViewInfo
     */
    export class CameraViewInfo {
        distance: number;
        camViewOffset: m4m.math.vector3;
        tiltAngle: number;
        panAngle: number;
    }
}
declare module "Role/RoleMgr" {
    import { Role } from "Role/Role";
    /**
     * 角色对象管理器
     */
    export class RoleMgr {
        private static readonly helpV2;
        private static readonly helpV2v1;
        private static readonly helpV3;
        private static readonly helpV3UP;
        private static readonly helpV3v1;
        private static readonly helpQuat;
        private static _player;
        private static _roleMap;
        private static _lastaCamTAngle;
        private static _lastaCamPAngle;
        private static _upKey;
        private static _downKey;
        private static _leftKey;
        private static _rightKey;
        private static _jumpKey;
        private static _attackKey;
        private static _runKey;
        private static _hasDirKeyDown;
        /** 战斗场景 头顶UI 坐标事件 */
        private static _topPosMap;
        private static isUpdateBattleRoleTop;
        static showpos: any;
        /** 玩家 角色 */
        static get player(): Role;
        private static roleRotateYFunBind;
        static get roleMap(): {
            [guid: string]: Role;
        };
        static get topPosMap(): TopPosMap;
        static set topPosMap(value: TopPosMap);
        static setUpdateBattleRoleTop(v: boolean): void;
        static init(): void;
        static getRoleByGUID(id: string): Role;
        static getRoleByNum(num: string): Role;
        private static getRoleValidTrans;
        private static onRunDown;
        static onRunUp(): void;
        private static onViewDown;
        private static onViewMove;
        private static onJumpBtnClick;
        private static onAttackBtnClick;
        private static onPlayerMove;
        private static onPlayerRocRelease;
        private static setMainRoleCamInfo;
        /** 调整 角色的前方朝向 ，屏幕上方 */
        private static adjustOrientation2Forward;
        /**
         * 获取 指定role 的前方 朝向 角度（）
         * @param role
         * @param isRadian 是否 是弧度制
         * @returns
         */
        static getRoleForwardAngle(role: Role, isRadian?: boolean): number;
        private static gapTime;
        private static newDaTime;
        private static lateUpdate;
        static canMove(can: boolean, isTransfer?: boolean): void;
        static needSynchronous: boolean;
        private static update;
        private static keyUpdate;
        /**
         * 主角色移动调用 同步服务器
         * @param dir 移动方向
         * @param role 角色
         */
        private static mainRoleIptMove;
        /** 同步其他玩家信息*/
        private static onRoleDataUpDate;
        /**
         * 创建角色
         * @param ev <{roleId: 角色配置ID ， GUID：唯一ID} >
         */
        private static onMake;
        static test(id: string): void;
        /**
         * 清理所有其他角色
         */
        private static clearOtherRole;
        /**
         * 删除指定的其他角色
         * @param ev <唯一ID>
         */
        private static onRemove;
        private static removeRole;
        /** 设置 位置 */
        private static onSetPos;
        /** 设置 方向 */
        private static onSetYRotate;
        private static roleRotateYFun;
        /** 输入方向 摇杆*/
        private static onInputDir;
        /** 输入方向 摇杆释放*/
        private static onInputDirRelease;
        /** 输入 加速*/
        private static onInputSpeedUp;
        /** 输入 加速释放 */
        private static onInputSpeedUpRel;
        /** 输入 跳跃 */
        private static onInputJump;
        /** 输入攻击 */
        private static onInputAttack;
        /** 设置AI */
        private static onSetAI;
        /**
         * 角色移动 输入
         * @param dir 移动方向
         * @param role 角色
         */
        private static roleIptMove;
        static moveDistance: number;
        /** 角色移动 输入 释放 */
        private static roleIptMoveReleas;
        /** 角色 输入 加度按键 */
        private static roleIptSpeedUp;
        /** 角色 输入 加度按键释放 */
        private static roleIptSpeedUpReleas;
        /** 角色 输入 跳跃按键 */
        private static roleIptJump;
        /** 角色 输入 攻击按键 */
        private static roleIptAttack;
        /** 角色 头顶显示UI 坐标同步 */
        private static dispatchBattleRoleTop;
        static setTopUIPos(wPos: m4m.math.vector3, posUI: m4m.math.vector2, _yOffset?: number, UIoffset?: m4m.math.vector2): void;
        static isInView(camera: m4m.framework.camera, worldPos: m4m.math.vector3): boolean;
    }
    export class TopPosMap {
        [key: string]: {
            active: boolean;
            pos: m4m.math.vector2;
            name: string;
            hpNormal: number;
            color?: m4m.math.color;
        };
    }
}
declare module "Role/MainRoleDoll" {
    import { PlayerMoveType } from "GameEnum";
    import { RoleDoll } from "Role/RoleDoll";
    /**
     * 角色玩偶对象
     * 负责 显示相关功能，模型渲染、动画播放、特效播放
     */
    export class MainRoleDoll extends RoleDoll {
        static canJump: boolean;
        private static readonly _helpV2;
        private static readonly _helpV2v1;
        private static readonly _helpV3;
        private static readonly _helpV3v1;
        private static readonly _helpV3v2;
        private static readonly _helpV3v3;
        private static readonly _helpV3v4;
        private static readonly _helpV3v5;
        private testTime;
        private posInfo;
        private _nowSpeed;
        private _moveType;
        startMove(moveVelocity: m4m.math.vector2, moveSpeed: number, forwarddRotate: m4m.math.quaternion, moveType: PlayerMoveType): void;
        protected toPointFun(): void;
        private sendToServerFun;
        stop(trueStop?: boolean): void;
        /**
         * 根据距离和到达时间计算出行走的速度
         * @param dt
         * @returns
         */
        protected updateMoveToTargetPoint(dt: number): void;
        private calcStartAndEnd;
        dispose(): void;
    }
}
declare module "Role/AI/RambleAI" {
    import { Role } from "Role/Role";
    import { IRoleAI } from "Role/AI/AiInterface";
    /**
     * 玩家闲逛
     */
    export class RambleAI implements IRoleAI {
        static get Instance(): RambleAI;
        private static _instance;
        private static _keyTimeCount;
        private static _keyChangeTime;
        enter(role: Role): void;
        exit(role: Role): void;
        update(role: Role, dt: number): void;
    }
}
declare module "Role/AI/WoodenPeopleAI" {
    import { Role } from "Role/Role";
    import { IRoleAI } from "Role/AI/AiInterface";
    /**
     * 玩家 木头人AI
     */
    export class WoodenPeopleAI implements IRoleAI {
        static get Instance(): WoodenPeopleAI;
        private static _instance;
        exit(role: Role): void;
        enter(role: Role): void;
        update(role: Role, dt: number): void;
    }
}
declare module "Role/RoleAI" {
    import { IDispose } from "Tools/engineParallel/spInterface";
    import { AIType } from "Role/AI/AiInterface";
    import { Role } from "Role/Role";
    /**
     * 角色AI
     */
    export class RoleAI implements IDispose {
        private static getAIByType;
        /** AI 类型 */
        get aiType(): AIType;
        constructor(role: Role, _type: AIType);
        private _role;
        private _type;
        private _AI;
        dispose(): void;
        update(dt: number): void;
    }
}
declare module "Role/actStates/DieState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    export class DieState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        constructor();
        enter(_role: Role): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/actStates/JumpState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    export class JumpState implements IRoleActState {
        timeOut: number;
        state: number;
        private static jumpMaxVel;
        private static stateArr;
        private static stateArr2;
        private _prevJumpSpeed;
        private _droping;
        private _jumping;
        enter(_role: Role): void;
        constructor();
        canChange(_input: RoleActInput): boolean;
        out(): void;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/actStates/DropOutState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    /**
     * 掉落 状态
     */
    export class DropOutState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        private _prevYSpeed;
        constructor();
        enter(_role: Role): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/actStates/PickingStates" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    /**
     * 抠糖饼 状态
     */
    export class PickingStates implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        enter(_role: Role): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/actStates/PreparePullState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    export class PreparePullState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        enter(_role: Role): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/actStates/PulltheRopeState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    export class PulltheRopeState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        constructor();
        enter(_role: Role): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/actStates/ReviveState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    export class ReviveState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        constructor();
        enter(_role: Role): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/actStates/RightPreparePullState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    export class RightPreparePullState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        enter(_role: Role): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/actStates/RightPullTheRopeState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    export class RightPullTheRopeState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        enter(_role: Role): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/actStates/RunState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    export class RunState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        constructor();
        enter(_role: Role): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/actStates/WalkState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    export class WalkState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        constructor();
        enter(_role: Role): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/actStates/StandState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    /**
     * 站立 状态
     */
    export class StandState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        constructor();
        enter(_role: Role): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/actStates/StrikeToFlyState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    /**
     * 被击飞状态, 需设置落点和飞行时间
     */
    export class StrikeToFlyState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        private isDroping;
        private flyTime;
        private currFlyTime;
        private startPoint;
        private endPoint;
        private upVelocity;
        constructor();
        enter(_role: Role, data: any): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
        private calcUpVelocity;
    }
}
declare module "Role/actStates/TransferState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    /**
     * 传送 状态
     */
    export class TransferState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        constructor();
        enter(_role: Role): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/actStates/WaitForDeathState" {
    import { RoleActInput } from "GameEnum";
    import { Role } from "Role/Role";
    import { IRoleActState } from "Role/actStates/RoleActState";
    /**
     * 等死 状态   播放死亡动画前状态 可设置时间 延迟 再切到死亡状态
     */
    export class WaitForDeathState implements IRoleActState {
        timeOut: number;
        state: number;
        private static stateArr;
        private start;
        private timeNum;
        constructor();
        enter(_role: Role): void;
        canChange(_input: RoleActInput): boolean;
        update(_role: Role, dt: number): void;
    }
}
declare module "Role/RoleController" {
    import { IDispose } from "Tools/engineParallel/spInterface";
    import { RoleActInput } from "GameEnum";
    import { IRoleActState } from "Role/actStates/RoleActState";
    import { Role } from "Role/Role";
    /**
     * 角色控制器
     * 基于优先状态机 ，行走 ，跳跃 ，攻击
     */
    export class RoleController implements IDispose {
        /** 当前状态 */
        get state(): IRoleActState;
        set state(val: IRoleActState);
        constructor(role: Role);
        private stateDic;
        private _role;
        private _state;
        dispose(): void;
        /** 输入 */
        handleInput(_input: RoleActInput, data?: any): void;
        update(dt: number): void;
        /** 切换状态 */
        private changeState;
        /** 取对应状态返回 */
        private getState;
    }
}
declare module "Role/RoleData" {
    import { IDispose } from "Tools/engineParallel/spInterface";
    import { InGameStatus, PlayerClientState, PlayerStatus } from "GameEnum";
    import { GameDiePerformanceEnum, RoleAttrInfo, RoleTypeEnum } from "Role/RoleAttrInfo";
    /**
     * 角色的数据类
     */
    export class RoleData implements IDispose {
        get canMove(): boolean;
        get roleState(): PlayerStatus;
        set roleState(val: PlayerStatus);
        name: string;
        guid: string;
        maxLifeNum: number;
        CurHp: number;
        MaxHp: number;
        topUIVisible: boolean;
        defDiePerformance: GameDiePerformanceEnum;
        roleType: RoleTypeEnum;
        pos: m4m.math.vector3;
        angle: number;
        isSingle: boolean;
        dieTime: number;
        roleClientState: PlayerClientState;
        inGameState: InGameStatus;
        private _roleState;
        setData(roleInfo: RoleAttrInfo): void;
        isMainPlayer(): boolean;
        getRoleID(): number;
        getHpNormal(): number;
        dispose(): void;
    }
}
declare module "Role/Role" {
    import { RoleBase } from "RoleBase";
    import { IDispose, ISpTransform } from "Tools/engineParallel/spInterface";
    import { HitType, Weapons } from "GameEnum";
    import { IRoleActState } from "Role/actStates/RoleActState";
    import { AIType } from "Role/AI/AiInterface";
    import { RoleAI } from "Role/RoleAI";
    import { RoleTypeEnum } from "Role/RoleAttrInfo";
    import { RoleController } from "Role/RoleController";
    import { RoleData } from "Role/RoleData";
    import { RoleDoll } from "Role/RoleDoll";
    /**
     * 角色 对象
     * [数据,网络,渲染模型]
     */
    export class Role implements IDispose {
        /** 角色场景对象 */
        roleDoll: RoleDoll;
        /** 角色数据 */
        roleData: RoleData;
        /** 角色控制器 */
        roleCtr: RoleController;
        /** 角色AI */
        roleAi: RoleAI;
        roleID: number;
        /**跳跃 移速缩放 */
        jumpMoveSpeedScale: number;
        /**奔跑 移速缩放 */
        runMoveSpeed: number;
        /** 移动速度 */
        moveSpeed: number;
        /** 跳跃加速度 */
        jumpVelocity: number;
        /** 当前武器 */
        currWeapons: Weapons;
        /** 当前武器模型 */
        currWeaponsDoll: ISpTransform;
        /** 攻击 等待时间(s) */
        attackStateWaitTime: number;
        /** 攻击间隔时间(s) */
        attactIntervalTime: number;
        hasDestroy: boolean;
        AICalcData: {};
        private static readonly helpV2;
        private static readonly helpV2v1;
        private static readonly helpV2V2;
        private static readonly helpV3;
        private static readonly helpV3UP;
        private _forwarddRotate;
        private config;
        private _moveVelocity;
        private _isAttacking;
        private _isDamage;
        /** 当前速度 */
        private _nowSpeed;
        /** 是否跑步速度 */
        get isRunSpeed(): boolean;
        private _isTarPointMove;
        get isTarPointMove(): boolean;
        get roleConfigBase(): RoleBase;
        /** 是否攻击中 */
        get isAttacking(): boolean;
        set isAttacking(value: boolean);
        /**
         * 前方旋转
         */
        get forwarddRotate(): m4m.math.quaternion;
        /**
         * 移动 速度向量
         */
        get moveVelocity(): m4m.math.vector2;
        set moveVelocity(val: m4m.math.vector2);
        init(roleType: RoleTypeEnum, guid: string): Promise<void>;
        UpdateDebugDraw(dt: number): void;
        UpdateLogic(dt: number): void;
        dispose(): void;
        setAI(aiType: AIType): void;
        initRotate(): void;
        set localRotate(angle: number);
        stop(trueStop?: boolean): void;
        /**
         * 角色行走
         * @param dt
         * @param scale 速度缩放
         */
        walk(dt: number, scale?: number): void;
        /** 是否能攻击 */
        canAttack(): boolean;
        /** 攻击 */
        attack(prevState: IRoleActState): void;
        setHp(v: number): void;
        /** 角色受伤 */
        hit(hitType: HitType): void;
        die(): void;
        revive(): void;
        dropOut(): void;
        jump(): void;
        /** 切换武器 */
        changeWeapons(weapon: Weapons): Promise<void>;
        private dieStateOpinion;
        private attackUpdate;
    }
}
declare module "Net/DataEvents/HallConfigBaseEvent" {
    export class HallConfigBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 大厅ID*/
        static id: string;
        /** 备注*/
        static desc: string;
        /** 玩家列表*/
        static players: string;
        /** 游戏配置*/
        static gameConfig: string;
        /** 大厅状态*/
        static hallStatus: string;
        /** 房间最大人数*/
        static maxPlayer: string;
    }
}
declare module "Scene/SceneLoadManager" {
    import { SceneBase } from "SceneBase";
    /**
     *场景ID常量
     */
    export enum SceneidEnum {
        /** 单人游戏大厅 */
        BgTugOfWar = 1002,
        Hall = 1003,
        WoodenPeople = 1004,
        SugarCake = 1005,
        GlassBridge = 1006,
        Hoodle = 1007,
        squidGame = 1008
    }
    export class SceneLoadManager {
        static get Instance(): SceneLoadManager;
        constructor();
        private static _instance;
        private _lastSceneID;
        private _sceneConfig;
        get lastSceneID(): number;
        getSceneConfig(): Promise<SceneBase>;
        loadScene(sceneid: number): void;
        /**
         * 设置相机看向目标参数
         * */
        upDateCameraViewInfo(): Promise<void>;
        private setCameraViewInfoCom;
    }
}
declare module "Manager/GamingManager" {
    export class GamingManager {
        static get Instance(): GamingManager;
        hpBarVisible: number;
        data: any[];
        index: any;
        datatype: any;
        private static _instance;
        private EyeVerifyBindFun;
        private roelgmaingBindFun;
        init(): void;
        roelgmaingFun(list: any): void;
        dispose(): void;
    }
}
declare module "Manager/WaitRoomManager" {
    export class WaitRoomManager {
        static get Instance(): WaitRoomManager;
        data: any;
        max: any;
        private static _instance;
        init(): void;
        private addPlayersFun;
        private addRole;
        private waitRoomInfoFun;
        private onMakeEnd;
    }
}
declare module "Net/DataEvents/DarkFightConfigBaseEvent" {
    export class DarkFightConfigBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static desc: string;
        /** 用户列表*/
        static players: string;
        /** 每一步距离*/
        static stepDis: string;
        /** 下落高度*/
        static dropHeigth: string;
        /** 玩家初始HP*/
        static startHp: string;
        /** 初始位置*/
        static startArea: string;
        /** 活动区域*/
        static moveArea: string;
        /** 简单难度持续时间*/
        static easyMode: string;
        /** 困难难度开始时间*/
        static hardMode: string;
        /** 最小力度*/
        static powerMin: string;
        /** 最大力度*/
        static powerMax: string;
        /** 最小判定角度*/
        static agreeMin: string;
        /** 最大判定角度*/
        static agreeMax: string;
        /** 提前发送时间*/
        static advance: string;
        /** 游戏总时间*/
        static totleTime: string;
        /** 倒计时时长*/
        static countTime: string;
        /** 游戏开始时间*/
        static gameTime: string;
        /** 游戏状态*/
        static gameStatus: string;
        /** 倒计时开始时间*/
        static countDown: string;
        /** 当前时间*/
        static nowTime: string;
        /** 结束时间*/
        static endTime: string;
        /** 游戏场景ID*/
        static gameScene: string;
    }
}
declare module "Manager/GameRunningCountdownManager" {
    export class GameRunningCountdownManager {
        static get Instance(): GameRunningCountdownManager;
        private static _instance;
        private _startTime;
        private _countdownTime;
        private _start;
        private gapTime;
        private newDaTime;
        private gameState;
        private callback;
        /**
         * 游戏开始倒计时 初始化
         * @param startTime 开始走倒计时 时间
         * @param countdownTime 倒计时毫秒数
         * @param callback 结束回调
         */
        init(startTime: number, countdownTime: number, callback?: Function): void;
        updateFun(dt: number): void;
        stop(): void;
    }
}
declare module "Manager/GameStartCountdownManager" {
    export class GameStartCountdownManager {
        static get Instance(): GameStartCountdownManager;
        private static _instance;
        private _startTime;
        private _countdownTime;
        private _start;
        private gapTime;
        private newDaTime;
        private gameState;
        private callback;
        /**
         * 游戏开始倒计时 初始化
         * @param startTime 开始走倒计时 时间
         * @param countdownTime 倒计时毫秒数
         * @param callback 结束回调
         */
        init(startTime: number, countdownTime: number, callback?: Function): void;
        updateFun(dt: number): void;
        stop(): void;
    }
}
declare module "Manager/MeleeGameManager" {
    export class MeleeGameManager {
        static get Instance(): MeleeGameManager;
        lifePlayer: {
            [key: string]: any;
        };
        private static _instance;
        init(): void;
        meleeGamerInfoFun(): void;
        private initPlayer;
        private playersInfoUpDateFun;
        private gameStartFun;
        private countDownTimeUpdateFun;
    }
}
declare module "Net/DataEvents/ResultBaseEvent" {
    export class ResultBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 游戏ID*/
        static gameId: string;
        /** 胜利用户列表*/
        static winers: string;
        /** 失败用户列表*/
        static losers: string;
        /** 结算时间*/
        static resultTime: string;
    }
}
declare module "Manager/ScoreboardManager" {
    export class ScoreboardManager {
        isOpen: boolean;
        isWin: boolean;
        rank: number;
        static get Instance(): ScoreboardManager;
        private static _instance;
        /**
         * 显示胜利面板
         */
        showWinBoard(): void;
        /**
         * 显示失败面板
         */
        showLostBoard(): void;
        /**
         * 关闭失败/胜利面板
         */
        closeBoard(): void;
    }
}
declare module "Manager/GameResultManager" {
    export class GameResultManager {
        static get Instance(): GameResultManager;
        private static _instance;
        init(): void;
        showResultPanle(lose: boolean, timeOut: number): void;
        private resultDataFun;
    }
}
declare module "Net/DataEvents/GamesConfigBaseEvent" {
    export class GamesConfigBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static desc: string;
        /** 绑定UI面板ID*/
        static UI: string;
        /** 链接游戏*/
        static gameUrl: string;
        /** 大厅活动区域*/
        static moveArea: string;
        /** 最大人数*/
        static maxPlayer: string;
        /** 传递参数*/
        static gameData: string;
        /** 游戏类名*/
        static gameClass: string;
        /** 场景id*/
        static sceneBase: string;
    }
}
declare module "Manager/EnterGameManager" {
    export class EnterGameManager {
        static get Instance(): EnterGameManager;
        private static _instance;
        init(): void;
        private loadGameSceneFun;
    }
}
declare module "Core/blockchain/apis" {
    export interface IBind1Params {
        addr: string;
        tid: string;
        sig?: string;
        platform: string;
        chain_name: string;
        pubkey?: string;
    }
    export interface IBindResultData {
        addr: string;
        tid: string;
        platform: string;
        content_id?: string;
    }
    export interface IGetBindResultParams {
        addr?: string;
        tid?: string;
    }
    export const CHAIN_NAME = "TONtest";
    export const PLATFORM = "Telegram";
    export class apis {
        static get Instance(): apis;
        axios: any;
        gapIndex: number;
        async: any;
        constructor();
        private static _instance;
        private API_HOST;
        bind1WithWeb3Proof(params: IBind1Params): Promise<boolean>;
        getBindResult(params: IGetBindResultParams): Promise<IBindResultData[]>;
        unbind(params: {
            addr: string;
            tid: string;
            sig?: string;
            pubkey?: string;
            platform?: string;
            chain_name?: string;
        }): Promise<boolean>;
    }
}
declare module "Core/blockchain/ConnectWalletTonkeeper" {
    import { PlatformType } from "Tools/PlatformUtil";
    import { IBindResultData } from "Core/blockchain/apis";
    export class ConnectWalletTonkeeper {
        address: any;
        tonkeeper: any;
        addressDisplay: string;
        bType: PlatformType;
        TonConnectUI: any;
        TonWallet: any;
        Telegram: any;
        TonWeb: any;
        bindData: IBindResultData[];
        tonwebsdk: any;
        static get Instance(): ConnectWalletTonkeeper;
        constructor();
        tid: string;
        private static _instance;
        init(): void;
        /**
         * 登录
         * @param fun 回调
         */
        loginAccount(fun: Function): Promise<void>;
        private static element;
        private handleLogout;
        send(): Promise<any>;
        sendTransaction(tx: {
            value: string;
            to: string;
            state_init?: string;
            payload?: string;
        }, text: string): Promise<any>;
        bind1WithWeb3Proof(params: {
            address: string;
            appid: string;
            sig?: string;
            pubkey?: string;
        }): Promise<boolean>;
        handleBind(): Promise<void>;
        getBind(): Promise<void>;
        handleUnbind(): Promise<void>;
        bounceableTag: number;
        testOnlyTag: number;
        private toUserFriendlyAddress;
        private parseHexAddress;
        toByteMap: {};
        hexToBytes(hex: any): Uint8Array;
        crc16(data: any): Uint8Array;
        encode(value: any, urlSafe?: boolean): string;
        decodeUTF8(s2: any): Uint8Array;
        encodeUint8Array(value: any, urlSafe: any): string;
        encodeBase64(arr: any): string;
    }
}
declare module "Manager/GameDataEventInitManager" {
    export class GameDataEventInitManager {
        static init(): void;
    }
}
declare module "Core/StageMgr" {
    import { cMap } from "Data/Map";
    import { CameraFollowCtr } from "Scripts/CameraFollowCtr";
    import { ISpCamera, ISpTransform } from "Tools/engineParallel/spInterface";
    import { TicketType } from "GameEnum";
    export class SDKRankRewardData {
        gamePool1: any;
        gamePool7: any;
        gamePool30: any;
    }
    export class StageMgr {
        static get inGame(): boolean;
        /** palyer 的GUID */
        static get PlayerGUID(): string;
        static mainCam: ISpCamera;
        static camCtr: CameraFollowCtr;
        static syncParallelEngineCamera: ISpCamera;
        static inited: boolean;
        static needAuthorizationBol: boolean;
        static accountID: string;
        /**浏览器窗口失去焦点**/
        static isBlur: boolean;
        /** 场景 root节点 */
        static sceneRoot: ISpTransform;
        /** 角色 root节点 */
        static roleRoot: ISpTransform;
        /** 特效 root节点 */
        static effectRoot: ISpTransform;
        static scene: m4m.framework.scene;
        static hasEnterGame: boolean;
        static needGuildBol: boolean;
        static isFirstAutograph: boolean;
        static blance: number;
        static allownce: number;
        static agreeAutographbol: boolean;
        static ranktype: number;
        static haveTicketNum: number;
        static totalBoughtTicketNum: number;
        static ticketCostNum: number;
        static dailySQTnum: number;
        static weeklySQTnum: number;
        static monthlySQTnum: number;
        static dailyUSDTnum: number;
        static weeklyUSDTnum: number;
        static monthlyUSDTnum: number;
        static dailyrate: number;
        static weekrate: number;
        static monthrate: number;
        static levelType: number;
        static ticketType: TicketType;
        static SQTawardDataArr: any[];
        static USDTawardDataArr: any[];
        static ReverseUserOrdersDic: cMap<any>;
        static rankAwardData: any;
        static canClickBol: boolean;
        static SQTclaimableNum: number;
        static dailySQTclaimableNum: number;
        static weeklySQTclaimableNum: number;
        static monthlySQTclaimableNum: number;
        static derectionType: number;
        static currentRoundHasSlipedBol: boolean;
        static tugOfWarProTime: number;
        static endGameBol: boolean;
        static gotoPlayGameBol: boolean;
        static playerID: string;
        static playerinfo: any;
        static playername: any;
        static init(): void;
        static actionBaseConfigObj: any;
        /** 登录服务器成功 */
        static onLoginServerSuccess(): void;
        /** 场景切换 */
        private static onSceneVisualChange;
        /** 登录游戏页面 */
        private static enterLogin;
        /** 进入 到大厅 */
        private static enterHall;
        static enterSugar(): void;
        private static enterTug;
        /** 等待 角色创建完毕 */
        static waitRoleMakeSuc(GUID?: string): Promise<unknown>;
        static loadGameScene(roleArr: any): void;
        static setPos(): void;
        private static onPlayerMake;
        private static cam_Light_Init;
        static update(delta: number): void;
        static lateUpdate(delta: number): void;
        private static wxCamUpdate;
        private static _evMakeRole;
        private static _playerGUID;
        private static roleTestDic;
    }
}
declare module "Manager/TimeLineManager" {
    /**
     * 时间轴管理器
     */
    export class TimeLineManager {
        static get Instance(): TimeLineManager;
        private static _instance;
        private readonly timeLinePool;
        /**
         * 创建一个时间轴
         * @param endRemove 时间轴结束后是否从池中移除
         */
        createTimeLine(endRemove?: boolean): TimeLine;
        /**
         * 开始运行所有时间轴
         */
        startAll(): void;
        /**
         * 强制停止所有时间轴
         */
        stopAll(): void;
        /**
         * 强制停止所有时间轴, 并清理
         */
        stopAndClaer(): void;
    }
    /**
     * 时间轴
     */
    export class TimeLine {
        private map;
        private timer;
        private state;
        /**
         * 获取时间轴状态, 0 未开启, 1 运行中, 2 结束
         */
        getState(): number;
        /**
         * 开启时间轴
         */
        start(): void;
        /**
         * 往当前时间轴添加事件
         */
        add(time: number, callBack: Function): void;
        /**
         * 清理当前时间轴
         */
        clear(): void;
        /**
         * 强制停止当前时间轴
         */
        stop(): void;
    }
}
declare module "Manager/ShowAttackManager" {
    export class ShowAttackManager {
        static get Instance(): ShowAttackManager;
        Attackstate: number;
        private static _instance;
    }
}
declare module "gamePlays/MeleeGame" {
    import { EventGeneric } from "eventMgr";
    import { SceneVisualEvent } from "events/sceneVisualEvent";
    import { GamePlayType } from "GameEnum";
    import { IGamePlay } from "gamePlays/IGamePlay";
    /** 黑夜大混战玩家状态 */
    export enum MeleeGamePlayerState {
        normal = 0,
        dead = 1
    }
    /**
     * 黑夜大混战
     */
    export class MeleeGame implements IGamePlay {
        private sceneID;
        private sceneInit;
        private mainRoleInit;
        private serverConfig;
        private isResulted;
        private gameState;
        private playerState;
        private shootPlayTime;
        private selfNum;
        private playerDeadBind;
        private dieStateRoleJumpGroundBind;
        startArea(): m4m.math.vector3[];
        endArea(): m4m.math.vector3[];
        getGameType(): GamePlayType;
        runGame(): void;
        exitGame(): void;
        Update(delta: number): void;
        onMakeEnd(ev: EventGeneric<string>): void;
        sceneChangeFun(ev: SceneVisualEvent): void;
        loadReadyFun(): void;
        initPlayers(): void;
        private gameStateChangeFunc;
        /** 游戏中玩家死亡 */
        private playerDeadFunc;
        private testFly;
        private dieStateRoleJumpGroundFunc;
        private playerDead;
        /** 服务器结算 */
        private gameResultFunc;
        private playGunshoot;
    }
}
declare module "gamePlays/PlayGameType" {
    export class PlayGameType {
        static Wood: string;
        static SugarCookies: string;
        static DialRiver: string;
        static CutPeople: string;
        static Marbles: string;
        static GlassBridge: string;
        static SquidGame: string;
        static DarkFight: string;
        static MiniChampionship: string;
        static GreatChampionship: string;
    }
}
declare module "gamePlays/SingleHall" {
    import { GamePlayType } from "GameEnum";
    import { IGamePlay } from "gamePlays/IGamePlay";
    export class SingleHall implements IGamePlay {
        private _evRoleSetPos;
        private _evRoleSetRot;
        private mainRoleInit;
        private sceneInit;
        private npcLocalPosition;
        private canTestBol;
        private testGUID;
        private buyTicketSuccessToGameFunBind;
        private sceneModel;
        private roleMakeSuccessFunBind;
        private roleInit;
        startArea(): m4m.math.vector3[];
        endArea(): m4m.math.vector3[];
        getGameType(): GamePlayType;
        runGame(): void;
        roleMakeSuccessFun(data: any): void;
        exitGame(): void;
        private sceneChangeFun;
        private loadReadyFun;
        private initSingleHall;
        private UpDateFun;
        private setJinbuduiState;
    }
    export enum JinbuduiState {
        shao = "jinbudui_shao",
        banman = "jinbudui_banman",
        man = "jinbudui_man"
    }
}
declare module "gamePlays/GamePlayMgr" {
    import { GamePlayType } from "GameEnum";
    import { IGamePlay } from "gamePlays/IGamePlay";
    /**
     * 游戏玩法控制 管理器
     */
    export class GamePlayMgr {
        /** 游戏结算状态 */
        static gameSettlementState: boolean;
        /** 游戏开始准备状态 */
        static gameReadyState: boolean;
        static currGameType: GamePlayType;
        private static _cacheMap;
        private static _curr;
        private static tryGet;
        /** 当前 在的游戏 */
        static get curr(): GamePlayType;
        static get currGame(): IGamePlay;
        /**
         * 开始 游戏
         * @param _type
         */
        static RunGame(_type: GamePlayType): void;
        /**
         * 退出 当前游戏
         */
        static ExitGame(): void;
    }
}
declare module "Manager/InputManager" {
    export class InputManager {
        static init(): void;
        static onHorizTouch: Function;
        static onDragTouch: Function;
        static lastPoint_x: number;
        static lastPoint_y: number;
        static downPointX: number;
        static downPointY: number;
        static upPointX: number;
        static upPointY: number;
        private static CallBackList;
        private static isDonw;
        private static lastPos;
        static addUpCallBackFun(callBackFun: Function): void;
        static removeUpCallBackFun(callBackFun: Function): void;
        private static onDown;
        private static onUp;
        private static onMove;
    }
}
declare module "Tool/datGUITool" {
    /**
     * datGUI  调试GUI 工具
     * dat使用教程 @see http://workshop.chromeexperiments.com/examples/gui/#1--Basic-Usage
     */
    export class DatGUITool {
        static uiPickFolder: any;
        static effOverUIFolder: any;
        static rayHitSceneFolder: any;
        private static getGUI;
        private static getTitleName;
        private static ckOpenEvent;
        private static makeOpenClose;
        /** 注册 title 点击 open */
        static onTitleOpen(titleName: string, cb: () => any): void;
        /** 注册 title 点击 close */
        static onTitleClose(titleName: string, cb: () => any): void;
        static clear(): void;
        /** 使用样例 */
        static example(): void;
        static runGameGUI(): void;
        static viewResourceGUI(): void;
        static roleViewCtrObj: any;
        private static TitleOpenEventMap;
        private static TitleCloseEventMap;
        private static runGameDatGUIObj;
        private static _currGUI;
        private static runGameContent;
    }
}
declare module "GameMgr" {
    import { UiManager } from "PSDUI/UiManager";
    import { engineParallelType } from "Tools/engineParallel/spInterface";
    import { uiMgr } from "UIBase/uiMgr";
    export enum gState {
        /** 游戏开始运行前 */
        beforeRuning = 0,
        /** 游戏运行状态 */
        gameRuning = 1,
        /** 游戏暂停状态 */
        gamePaused = 2,
        /** 游戏结束 */
        gameStop = -1
    }
    /** 并行接入性能引擎 */
    export class GameMgr {
        static campSceneID: number;
        static heroDetailsSceneID: number;
        /** 标记为 帧动画骨骼 */
        static readonly isKFAnimtionTag = "__isKFAnimtionTag__";
        /** 使用微信性能引擎 */
        static engineParallel: engineParallelType;
        static get hasWxEngine(): boolean;
        /** 是否使用 testCreat 新加载资源工具 */
        static useTestCreate: boolean;
        /** 性能调试模式 */
        static performanceDebug: boolean;
        /** 性能调试开启 */
        static perfDebugStart: boolean;
        /** 性能调试结果输出 */
        static perfDebugOutput: boolean;
        /** 场景隐藏调试 */
        static sceneHideDebug: boolean;
        /** 角色模型隐藏调试 */
        static roleModelHideDebug: boolean;
        /** 特效隐藏调试 */
        static effectHideDebug: boolean;
        /** UI隐藏调试 */
        static uiHideDebug: boolean;
        static testStr: string;
        /** 调试GUI 开启 */
        static debugGUIEnable: boolean;
        /**  显示 2d绘制 调试线框 */
        static Draw2dDebug: boolean;
        /** 无敌模式调试 */
        static godModeDebug: boolean;
        /** 和平模式调试（角色都不扣血） */
        static peaceModeDebug: boolean;
        /** 调试 战斗 */
        static debugModeBattle: boolean;
        static gameState: gState;
        static app: m4m.framework.application;
        static assetMgr: m4m.framework.assetMgr;
        static inputMgr: m4m.framework.inputMgr;
        static isSingleTest: boolean;
        static issquidgameSingleTest: boolean;
        /** 强制清理UI */
        static ClearBol: boolean;
        /** 强制清理 场景 和 资源 */
        static forceClearScene: boolean;
        /** 声音打开 */
        static soundOn: string;
        /** 震动 场景 和 资源 */
        static shockOn: string;
        /** 高画质 */
        static highQuality: string;
        /** 当前限制帧率 ，仅供只读- */
        static limitFrame: number;
        static trySharkID: number;
        static shareSucSharkId: number;
        static standAlone: number;
        /** 游戏语言 */
        static language: string;
        static windowBol: boolean;
        static resPlat: string;
        static _pageType: number;
        static shareInited: boolean;
        static realityPaused: boolean;
        static onGameHide: Function;
        static onGameShow: Function;
        static firstSceneLoadTime: number;
        static gameSceneLoadTime: number;
        static SceneLoadTimeNum: number;
        static readonly gameName = "hungrysharkevo";
        static isNewAuth: boolean;
        static readonly developModel = false;
        static readonly maxLoadingCount = 100;
        static readonly cubeLayer = 8;
        static readonly limitDtime = 0.06;
        static readonly qualityIconName = ".atlas.json_frame";
        static readonly professionalIconName = ".atlas.json_ui_icon";
        static readonly campIconName = ".atlas.json_ui_campmark";
        static readonly CampMark = "ui_CampMark_";
        static readonly atlasPath = "res/art/atlas/";
        static readonly UIPath = "res/art/ui/";
        static readonly configPath = "res/config/";
        static readonly sceneObstaclePath = "res/obstacleJson/";
        static readonly ExcelConfigPath = "res/config/ExcelData/";
        static readonly ExcelSplitConfigPath = "res/config/ExcelDataSplit/";
        static readonly TexPath = "res/art/texture/";
        static readonly EquipIcon = "res/art/EquipIcon/";
        static readonly HeroIcon = "res/art/HeroIcon/";
        static readonly GoodsIcon = "res/art/GoodsIcon/";
        static readonly PiecesIcon = "res/art/PiecesIcon/";
        static readonly SkillIcon = "res/art/SkillIcon/";
        static readonly WeaponIcon = "res/art/WeaponIcon/";
        static readonly tipscon = "res/art/tips/";
        static readonly RechargeGZ = "res/art/RechargeGZ/";
        static readonly MythicalCreatureIcon = "res/art/MythicalCreatureIcon/";
        static readonly Icon = "res/art/Icon/";
        static readonly head = "res/art/head/";
        static readonly MapPic = "res/art/mapImg/";
        static readonly MapCloud = "res/art/mapCloud/";
        static readonly GuideImg = "res/art/guideImg/";
        static readonly Newhero = "res/art/texture/Newhero/";
        /** 音频目录 */
        static readonly AudioPath = "res/art/audio/";
        static readonly SugarCakePolygon = "res/polygonTool/";
        static itemPath: string;
        static rolePath: string;
        static scenePath: string;
        static effectPath: string;
        static readonly shaderPath = "res/shaders/";
        static readonly bgPath = "Resources/img/bg/";
        static readonly fontPath = "Resources/font/";
        static readonly PFiconPath = "Resources/PFicon/";
        static readonly strangeHeadPath = "Resources/strangeHead/";
        static readonly progressTipicon = "Resources/progressTipicon/";
        static DNS_AND_PORT: string;
        static REPORT_SERVER: string;
        /**特效资源路径 微信引擎  */
        static readonly fxPathWXEngine = "Assets/Resources/Prefabs/effect/";
        /** shader 微信引擎*/
        static readonly shaderPathWXEngine = "Assets/shaders/";
        /** 角色资源路径 微信引擎 */
        static readonly rolePathWXEngine = "Assets/Resources/Prefabs/Role/";
        /** 物品资源路径 微信引擎 */
        static readonly itemPathWXEngine = "Assets/Resources/Prefabs/Item/";
        /** 场景 微信引擎 */
        static readonly scenePathWXEngine = "Assets/Resources/Prefabs/Scene/";
        /** 角色资源路径 微信引擎 Convert */
        static readonly rolePathWXEngineConvert = "FromToolConvert/Role/";
        /** 场景 微信引擎 Convert*/
        static readonly scenePathWXEngineConvert = "FromToolConvert/Scene/";
        static openWalletBol: boolean;
        static connectWalletLoadingBool: boolean;
        /** testCrete 使用 资源路径重定向Map  */
        static pathReplaceMap: {
            [srcPath: string]: string;
        };
        /** 性能模式 */
        private static appUpdateFun;
        private static isNewVerUIMgr;
        /** 获取 UIManager */
        static getUImgr(): typeof UiManager | typeof uiMgr;
        private static nullFun;
        static init(app: m4m.framework.application): void;
        private static onButtonClickCallBackFun;
        /** 引擎暂停 */
        static enginePause(): void;
        /** 引擎恢复运行 */
        static engineReplay(): void;
        private static beforPausedState;
        /** 游戏场景暂停 */
        static get gamePaused(): boolean;
        static set gamePaused(v: boolean);
        static downLoadData(): void;
        static platformLoadUrlSet(): void;
        private static _CDNURL;
        static get CDNURL(): string;
        /** 强制指定走 m4m 模式的资源列表 */
        private static m4mPolicyList;
        /** 强制指定走 weChat 模式的资源列表 */
        private static _weChatPolicyList;
        private static _hasPolicy;
        private static _resPolicyMap;
        private static _wxLoadHasShellMap;
        /** 微信资源路径 有壳模式 */
        static wxResHasShell(path: string): boolean;
        /**
         * 资源类型策略
         * @param resName 资源名字
         */
        static engineTypePolicy(resName: string): engineParallelType;
        /**
         * 角色路径策略
         * @param resName 资源名
         */
        static rolePath_Policy(resName: string): string;
        /**
         * 单个物品 路径策略
         * @param resName 资源名
         */
        static itemPath_Policy(resName: string): string;
        /**
         * 场景路径策略
         * @param resName 资源名
         */
        static scenePath_Policy(resName: string): string;
        /** 资源类型平台策略 */
        private static getPolicyPath;
        private static resPolicyInit;
        private static wxResHasShellInit;
    }
}
declare module "Common/CommonCell" {
    import { Cell } from "Data/Cell";
    export class CommonCell extends Cell {
        pointerDownFun(): void;
    }
}
declare module "Common/SliderComponentExtend" {
    import { SliderComponent } from "Data/SliderComponent";
    export class SliderComponentExtend extends SliderComponent {
        offsetPercent: number;
        offsetWidth: number;
        callBackFun: Function;
        maxNum: number;
        protected get transWidth(): number;
        btnDown_event(): void;
        /****设置值
         * maxNum 如果有设置值 需传入小于等于maxNum的值
         * maxNum 默认值 -1   需传入百分比值 0.x
        */
        setValue(value: any): void;
        private reshPosFun;
        private onHorizTouchFun;
    }
}
declare module "Core/Pick3DModelsMgr" {
    /** 场景中拣选 3D 模型管理器 */
    export class Pick3DModelsMgr {
        private static readonly helpV2;
        private static readonly helpV3;
        private static readonly helpInfo;
        private static readonly helpAABB;
        private static readonly preparePlaneNormal;
        private static readonly preparePlaneCPoint;
        private static _lastPickMode;
        private static testCube;
        private static _evPickedRole;
        private static _evMove;
        /** 初始化 */
        static init(): void;
        /** 启用 拣选模式 */
        private static onEnablePickMode;
        private static onDisablePickMode;
        private static disablePickMode;
        private static onPointDown;
        private static onPointUp;
        private static onPointMove;
        private static tryPickRole;
        private static pickPlane;
    }
}
declare module "Data/CommonUIUtils" {
    import { cMap } from "Data/Map";
    import { imgSpriteArrange } from "UIBase/imgSpriteArrange";
    type layoutOption = m4m.framework.layoutOption;
    export class CommonUIUtils {
        static uiRepUrl: string;
        static specialIconDic: cMap<any>;
        static showAmounts: any[];
        static skinAmounts: any[];
        static _spellIconDic: cMap<any>;
        static replaceUIUrl(icon: any): string;
        static getSprite(spriteStr: string): m4m.framework.sprite;
        /** 快速创建一个 imgSpriteArrange 对象 */
        static getImgSpriteArrange(img: m4m.framework.image2D, hlayout?: layoutOption, vlayout?: layoutOption): imgSpriteArrange;
    }
}
declare module "Data/RankPrizeData" {
    export class RankPrizeData {
        SQTawardDataArr: any[];
        USDTawardDataArr: any[];
        callBackFun: Function;
    }
}
declare module "Data/RankPrizeInfoData" {
    export class RankPrizeInfoData {
        awardDescribeStr: string;
        awardNum: number;
        callBackFun: Function;
        setSQTData(index: any, topNum: any, awardNum: any): void;
        setUSDTData(index: any, awardNum: any): void;
    }
}
declare module "Manager/ShootManager" {
    export class ShootManager {
        static get Instance(): ShootManager;
        constructor();
        private static _instance;
        private shootCount;
        private gapTime;
        private newDaTime;
        private max;
        private min;
        playShootFun(num: number): void;
        private update;
    }
}
declare module "Net/DataEvents/WoodConfigBaseEvent" {
    export class WoodConfigBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static desc: string;
        /** 用户列表*/
        static players: string;
        /** 每一步距离*/
        static stepDis: string;
        /** 下落高度*/
        static dropHeigth: string;
        /** 初始位置*/
        static startArea: string;
        /** 结束位置*/
        static finishArea: string;
        /** 活动区域*/
        static moveArea: string;
        /** NPC位置*/
        static npcPos: string;
        /** NPC旋转*/
        static npcRot: string;
        /** 长度*/
        static soundLen: string;
        /** 长度*/
        static headTime: string;
        /** 最小间隔*/
        static minInterval: string;
        /** 间隔浮动范围*/
        static intervalPlus: string;
        /** 提前发送时间*/
        static advance: string;
        /** 游戏总时间*/
        static totleTime: string;
        /** 倒计时时长*/
        static countTime: string;
        /** 游戏开始时间*/
        static gameTime: string;
        /** 游戏状态*/
        static gameStatus: string;
        /** 倒计时开始时间*/
        static countDown: string;
        /** 当前时间*/
        static nowTime: string;
        /** 结束时间*/
        static endTime: string;
        /** 游戏场景ID*/
        static gameScene: string;
    }
}
declare module "Net/DataEvents/WoodSongDataEvent" {
    export class WoodSongDataEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 播放歌曲ID*/
        static playSound: string;
        /** 播放时间*/
        static playSoundTime: string;
        /** 停止时间*/
        static stopSoundTime: string;
    }
}
declare module "Manager/WoodenPeopleManager" {
    export class WoodenPeopleManager {
        winPlayer: string[];
        lifePlayer: {
            [key: string]: any;
        };
        static get Instance(): WoodenPeopleManager;
        data: any;
        private static _instance;
        init(): void;
        private initLifePlayer;
        private woodenPeopleInfoFun;
        private playersInfoUpDateFun;
        private gameStartFun;
        private countDownTimeUpdateFun;
        private soundTimeUpdateFun;
    }
}
declare module "Net/HeartBeatManager" {
    export class HeartBeatManager {
        static get Instance(): HeartBeatManager;
        constructor();
        private static _instance;
        SyncServerTime(): void;
        private updateFun;
    }
}
declare module "Net/DataEvents/BattleListBaseEvent" {
    export class BattleListBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 关卡*/
        static checkpoint: string;
        /** 关卡ID*/
        static checkpointID: string;
        /** 场数*/
        static total: string;
        /** 胜场*/
        static wins: string;
        /** 玩家ID*/
        static userID: string;
        /** 最佳战绩*/
        static bestAchievement: string;
    }
}
declare module "Net/DataEvents/CookieConfigBaseEvent" {
    export class CookieConfigBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static desc: string;
        /** 用户列表*/
        static players: string;
        /** 每一步距离*/
        static stepDis: string;
        /** 下落高度*/
        static dropHeigth: string;
        /** 初始位置*/
        static startArea: string;
        /** 活动区域*/
        static moveArea: string;
        /** NPC举例*/
        static npcDis: string;
        /** 开始抖动的起始时间*/
        static shakeStartTime: string;
        /** 抖动过渡时间(从开始到最大值的时间)*/
        static shakeTime: string;
        /** 最低抖动值*/
        static shakeMinValue: string;
        /** 抖动的最大值*/
        static shakeMaxValue: string;
        /** 最小抖动频率*/
        static shakeMinFrequency: string;
        /** 最大抖动频率*/
        static shakeMaxFrequency: string;
        /** 针头宽度*/
        static needleWidth: string;
        /** 线条碰撞宽度*/
        static lineCollisionWidth: string;
        /** 长度*/
        static cookLen: string;
        /** 提前发送时间*/
        static advance: string;
        /** 游戏总时间*/
        static totleTime: string;
        /** 倒计时时长*/
        static countTime: string;
        /** 游戏开始时间*/
        static gameTime: string;
        /** 游戏状态*/
        static gameStatus: string;
        /** 倒计时开始时间*/
        static countDown: string;
        /** 当前时间*/
        static nowTime: string;
        /** 结束时间*/
        static endTime: string;
        /** 游戏场景ID*/
        static gameScene: string;
    }
}
declare module "Net/DataEvents/CookieDailyRankEvent" {
    export class CookieDailyRankEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 总页数*/
        static totalPage: string;
        /** 自身名次*/
        static selfRank: string;
    }
}
declare module "Net/DataEvents/CookieDailyRankLastEvent" {
    export class CookieDailyRankLastEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 结算时间*/
        static resultTime: string;
        /** 名次*/
        static rank: string;
    }
}
declare module "Net/DataEvents/CookieDailyRankLogEvent" {
    export class CookieDailyRankLogEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 结算时间*/
        static resultTime: string;
        /** 名次*/
        static rank: string;
    }
}
declare module "Net/DataEvents/CookieGameDataEvent" {
    export class CookieGameDataEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 糖饼ID*/
        static cookieID: string;
        /** 最大血量*/
        static maxHp: string;
        /** 当前血量*/
        static hp: string;
        /** 缩放*/
        static scale: string;
        /** 旋转*/
        static rot: string;
        /** 游戏数据*/
        static dataJson: string;
    }
}
declare module "Net/DataEvents/CookieMonthlyRankEvent" {
    export class CookieMonthlyRankEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 总页数*/
        static totalPage: string;
        /** 自身名次*/
        static selfRank: string;
    }
}
declare module "Net/DataEvents/CookieMonthlyRankLastEvent" {
    export class CookieMonthlyRankLastEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 结算时间*/
        static resultTime: string;
        /** 名次*/
        static rank: string;
    }
}
declare module "Net/DataEvents/CookieMonthlyRankLogEvent" {
    export class CookieMonthlyRankLogEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 结算时间*/
        static resultTime: string;
        /** 名次*/
        static rank: string;
    }
}
declare module "Net/DataEvents/CookieTotleRankEvent" {
    export class CookieTotleRankEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 总页数*/
        static totalPage: string;
        /** 自身名次*/
        static selfRank: string;
    }
}
declare module "Net/DataEvents/CookieWeeklyRankEvent" {
    export class CookieWeeklyRankEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 总页数*/
        static totalPage: string;
        /** 自身名次*/
        static selfRank: string;
    }
}
declare module "Net/DataEvents/CookieWeeklyRankLastEvent" {
    export class CookieWeeklyRankLastEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 结算时间*/
        static resultTime: string;
        /** 名次*/
        static rank: string;
    }
}
declare module "Net/DataEvents/CookieWeeklyRankLogEvent" {
    export class CookieWeeklyRankLogEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 结算时间*/
        static resultTime: string;
        /** 名次*/
        static rank: string;
    }
}
declare module "Net/DataEvents/DailyRankEvent" {
    export class DailyRankEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 总页数*/
        static totalPage: string;
        /** 自身名次*/
        static selfRank: string;
    }
}
declare module "Net/DataEvents/DailyRankLastEvent" {
    export class DailyRankLastEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 结算时间*/
        static resultTime: string;
        /** 名次*/
        static rank: string;
    }
}
declare module "Net/DataEvents/DailyRankLogEvent" {
    export class DailyRankLogEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 结算时间*/
        static resultTime: string;
        /** 名次*/
        static rank: string;
    }
}
declare module "Net/DataEvents/DialRiverConfigBaseEvent" {
    export class DialRiverConfigBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static desc: string;
        /** 用户列表*/
        static players: string;
        /** 每一步距离*/
        static stepDis: string;
        /** 下落高度*/
        static dropHeigth: string;
        /** 初始位置*/
        static startArea: string;
        /** 活动区域*/
        static moveArea: string;
        /** 左边分组人员*/
        static leftTeam: string;
        /** 最小的分*/
        static minPoint: string;
        /** 最大得分*/
        static maxPoint: string;
        /** 简单难度持续时间*/
        static easyMode: string;
        /** 困难难度开始时间*/
        static hardMode: string;
        /** 最小判定时间*/
        static checkMin: string;
        /** 最大判定时间*/
        static checkMax: string;
        /** 最小等待时间*/
        static waitMin: string;
        /** 最大等待时间*/
        static waitMax: string;
        /** 演出时长*/
        static showTimeMax: string;
        /** 演出最小时长*/
        static showTimeMin: string;
        /** 最小判定角度*/
        static agreeMin: string;
        /** 最大判定角度*/
        static agreeMax: string;
        /** 提前发送时间*/
        static advance: string;
        /** 游戏总时间*/
        static totleTime: string;
        /** 倒计时时长*/
        static countTime: string;
        /** 游戏开始时间*/
        static gameTime: string;
        /** 游戏状态*/
        static gameStatus: string;
        /** 倒计时开始时间*/
        static countDown: string;
        /** 当前时间*/
        static nowTime: string;
        /** 结束时间*/
        static endTime: string;
        /** 游戏场景ID*/
        static gameScene: string;
    }
}
declare module "Net/DataEvents/DialRiverDataEvent" {
    export class DialRiverDataEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 点击方向*/
        static clickType: string;
        /** 胜负进度（0-10000）*/
        static progress: string;
        /** 玩家分数*/
        static usersPoint: string;
        /** 判定角度*/
        static agree: string;
        /** 判定持续时间*/
        static checkTime: string;
        /** 播放时间*/
        static playTime: string;
    }
}
declare module "Net/DataEvents/GameOpenSettingEvent" {
    export class GameOpenSettingEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 任务名称*/
        static eventName: string;
        /** 开始加入时间*/
        static startTime: string;
        /** 加入结束时间*/
        static EndTime: string;
        /** 下次开始时间*/
        static nextStartTime: string;
        /** 默认时间是0也就是utc时间*/
        static serverTimeZone: string;
        /** 可加入时长*/
        static enterTime: string;
        /** 可加人时加入BOT的时间间隔*/
        static addBotInEnter: string;
        /** 停止加人后加入BOT的时间间隔*/
        static addBotOverEnter: string;
        /** 停止加人后加入BOT的时间间隔最大间隔*/
        static addBotOverEnterMax: string;
        /** 任务间隔执行时间*/
        static taskLoopTime: string;
        /** 每天结算开始的时间，和loopTime共同执行*/
        static rankTime: string;
        /** 结算结束时间*/
        static rankEndTime: string;
    }
}
declare module "Net/DataEvents/GamesTicketBaseEvent" {
    export class GamesTicketBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static desc: string;
        /** 对应关卡显示大图*/
        static rawpicture: string;
        /** 门票ID*/
        static ticketID: string;
        /** 门票UI*/
        static ticketUI: string;
        /** 使用门票*/
        static ticketUse: string;
        /** 游戏类名*/
        static gameClass: string;
        /** 场景id*/
        static sceneBase: string;
        /** 是否显示*/
        static visible: string;
    }
}
declare module "Net/DataEvents/GlassBridgeDataEvent" {
    export class GlassBridgeDataEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 玻璃破碎*/
        static breakGlass: string;
        /** 玩家token*/
        static userToken: string;
        /** 得分*/
        static point: string;
    }
}
declare module "Net/DataEvents/GlassBridgePosEvent" {
    export class GlassBridgePosEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 左边玻璃位置*/
        static leftGlass: string;
        /** 右边玻璃位置*/
        static rightGlass: string;
        /** 玻璃得分*/
        static glassPoint: string;
    }
}
declare module "Net/DataEvents/GlassBridgerConfigBaseEvent" {
    export class GlassBridgerConfigBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static desc: string;
        /** 用户列表*/
        static players: string;
        /** 每一步距离*/
        static stepDis: string;
        /** 下落高度*/
        static dropHeigth: string;
        /** 初始位置*/
        static startArea: string;
        /** 活动区域*/
        static moveArea: string;
        /** 结束区域*/
        static finishArea: string;
        /** 排名分数*/
        static rankPoint: string;
        /** 提前发送时间*/
        static advance: string;
        /** 游戏总时间*/
        static totleTime: string;
        /** 倒计时时长*/
        static countTime: string;
        /** 游戏开始时间*/
        static gameTime: string;
        /** 游戏状态*/
        static gameStatus: string;
        /** 倒计时开始时间*/
        static countDown: string;
        /** 当前时间*/
        static nowTime: string;
        /** 结束时间*/
        static endTime: string;
        /** 游戏场景ID*/
        static gameScene: string;
    }
}
declare module "Net/DataEvents/ItemBaseEvent" {
    export class ItemBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 道具名字*/
        static itemName: string;
        /** 图标*/
        static icon: string;
        /** 模型*/
        static model: string;
        /** 描述*/
        static desc: string;
        /** 特效*/
        static effect: string;
        /** 道具类型*/
        static itemType: string;
        /** 道具部位*/
        static itemSetpos: string;
        /** 属性*/
        static status: string;
        /** 最大数量*/
        static maxNum: string;
        /** 等级*/
        static lv: string;
        /** 稀有度*/
        static rera: string;
        /** 品质*/
        static quality: string;
        /** 货币相关配置*/
        static currency: string;
        /** 显示货币配置*/
        static showCurrency: string;
    }
}
declare module "Net/DataEvents/ItemDataEvent" {
    export class ItemDataEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** ID*/
        static id: string;
        /** 道具名字*/
        static itemName: string;
        /** 配置ID*/
        static baseId: string;
        /** 数量*/
        static count: string;
        /** 最大数量*/
        static maxNum: string;
        /** 来源*/
        static fromWhere: string;
        /** 获取使用货币*/
        static buyCurrency: string;
        /** 描述*/
        static desc: string;
        /** 图标*/
        static icon: string;
        /** 模型*/
        static model: string;
        /** 道具类型*/
        static itemType: string;
        /** 道具部位*/
        static itemSetpos: string;
        /** 特效*/
        static effect: string;
        /** 属性*/
        static status: string;
        /** 等级*/
        static lv: string;
        /** 稀有度*/
        static rera: string;
        /** 品质*/
        static quality: string;
        /** 持有者*/
        static playerUuid: string;
        /** 获取时间*/
        static getTime: string;
    }
}
declare module "Net/DataEvents/ItemLogEvent" {
    export class ItemLogEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** ID*/
        static id: string;
        /** 道具名字*/
        static itemName: string;
        /** 数据ID*/
        static dataId: string;
        /** 数量*/
        static count: string;
        /** 获取使用货币*/
        static buyCurrency: string;
        /** 持有者*/
        static playerUuid: string;
        /** 消耗时间*/
        static useTime: string;
        /** 消耗方式*/
        static useType: string;
    }
}
declare module "Net/DataEvents/LoginLogBaseEvent" {
    export class LoginLogBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** token*/
        static token: string;
        /** 登陆时间*/
        static loginTime: string;
        /** 状态*/
        static status: string;
    }
}
declare module "Net/DataEvents/MailDataEvent" {
    export class MailDataEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 邮件ID*/
        static id: string;
        /** 邮件类型*/
        static mailType: string;
        /** 邮件来源*/
        static mailFrom: string;
        /** 邮件接收者*/
        static mailTo: string;
        /** 邮件标题*/
        static mailTitle: string;
        /** 邮件内容*/
        static mailContent: string;
        /** 附带道具*/
        static items: string;
        /** 发送时间*/
        static sendTime: string;
        /** 过期时间*/
        static expires: string;
        /** 是否领取*/
        static visible: string;
    }
}
declare module "Net/DataEvents/MarblesConfigBaseEvent" {
    export class MarblesConfigBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static desc: string;
        /** 用户列表*/
        static players: string;
        /** 每一步距离*/
        static stepDis: string;
        /** 下落高度*/
        static dropHeigth: string;
        /** 初始位置*/
        static startArea: string;
        /** 活动区域*/
        static moveArea: string;
        /** 投掷区域*/
        static throwArea: string;
        /** 计数区域*/
        static countArea: string;
        /** 起丢地点*/
        static dropPoint: string;
        /** 散布半径*/
        static scatter: string;
        /** 最大力度*/
        static maxPower: string;
        /** 押注时间*/
        static betTime: string;
        /** 最小结算时间*/
        static endTimeMin: string;
        /** 最大结算时间*/
        static endTimeMax: string;
        /** 提前发送时间*/
        static advance: string;
        /** 游戏总时间*/
        static totleTime: string;
        /** 倒计时时长*/
        static countTime: string;
        /** 游戏开始时间*/
        static gameTime: string;
        /** 游戏状态*/
        static gameStatus: string;
        /** 倒计时开始时间*/
        static countDown: string;
        /** 当前时间*/
        static nowTime: string;
        /** 结束时间*/
        static endTime: string;
        /** 游戏场景ID*/
        static gameScene: string;
    }
}
declare module "Net/DataEvents/MarblesDataEvent" {
    export class MarblesDataEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 奇数数量*/
        static OddNumber: string;
        /** 偶数数量*/
        static evenNumber: string;
        /** 弹珠落点*/
        static dropPoint: string;
        /** 扔出者号码*/
        static dropNum: string;
    }
}
declare module "Net/DataEvents/MonthlyRankEvent" {
    export class MonthlyRankEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 总页数*/
        static totalPage: string;
        /** 自身名次*/
        static selfRank: string;
    }
}
declare module "Net/DataEvents/MonthlyRankLastEvent" {
    export class MonthlyRankLastEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 结算时间*/
        static resultTime: string;
        /** 名次*/
        static rank: string;
    }
}
declare module "Net/DataEvents/MonthlyRankLogEvent" {
    export class MonthlyRankLogEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 结算时间*/
        static resultTime: string;
        /** 名次*/
        static rank: string;
    }
}
declare module "Net/DataEvents/NoticeEvent" {
    export class NoticeEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 公告的标题*/
        static noticeTitle: string;
        /** 任务实际开始时间*/
        static notice: string;
        /** 每次只显示一次，根据上一次登录时间来客户端自行判断是否要去被动获取公告。*/
        static DisplayOnceAday: string;
        /** 公告开始时间*/
        static StartTime: string;
        /** 公告结束时间*/
        static EndTime: string;
        /** 任务之前的执行状态，1正在执行，2执行错误，3执行成功，注意写任务的一定要注意可能服务器被中断的情况*/
        static taskPreviousState: string;
    }
}
declare module "Net/DataEvents/PKConfigBaseEvent" {
    export class PKConfigBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static desc: string;
        /** 用户列表*/
        static players: string;
        /** 用户位置*/
        static playerPos: string;
        /** 道具*/
        static items: string;
        /** 道具位置*/
        static itemPos: string;
        /** 当前时间*/
        static nowTime: string;
        /** 结束时间*/
        static endTime: string;
        /** 游戏场景ID*/
        static gameScene: string;
    }
}
declare module "Net/DataEvents/PlayerIconEvent" {
    export class PlayerIconEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 图片名称*/
        static icon: string;
        /** 是否显示*/
        static visible: string;
    }
}
declare module "Net/DataEvents/SettingBaseEvent" {
    export class SettingBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 音乐*/
        static music: string;
        /** 音效*/
        static soundeffect: string;
        /** 语言*/
        static language: string;
        /** 画质*/
        static picturequality: string;
        /** 是否接受好友邀请*/
        static Invitefriends: string;
    }
}
declare module "Net/DataEvents/SettingListEvent" {
    export class SettingListEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置类型ID*/
        static id: string;
        /** 配置类别ID*/
        static shopId: string;
        /** 设置类型*/
        static settingType: string;
        /** 描述*/
        static desc: string;
        /** 类型*/
        static type: string;
        /** 数值*/
        static value: string;
        /** 属性*/
        static status: string;
        /** 是否显示*/
        static visible: string;
    }
}
declare module "Net/DataEvents/SeverConfigBaseEvent" {
    export class SeverConfigBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static desc: string;
        /** ip*/
        static ip: string;
        /** 网关地址*/
        static gateway: string;
        /** MAC地址*/
        static MAC: string;
        /** 启动时间*/
        static setupTime: string;
        /** 状态*/
        static status: string;
        /** 当前人数*/
        static playerSum: string;
        /** 是否为网关*/
        static isGate: string;
        /** 备注IP*/
        static descIP: string;
        /** 心跳断开限制*/
        static heatbeatLimit: string;
        /** 日排名人数*/
        static dailyRankMax: string;
        /** 周排名人数*/
        static weeklyRankMax: string;
        /** 月排名人数*/
        static monthlyRankMax: string;
        /** 日排名一页显示*/
        static dailyPage: string;
        /** 周排名一页显示*/
        static weeklyPage: string;
        /** 月排名一页显示*/
        static monthlyPage: string;
        /** 是否使用钱包*/
        static useWallet: string;
    }
}
declare module "Net/DataEvents/ShopListEvent" {
    export class ShopListEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static desc: string;
        /** 道具配置*/
        static itemData: string;
        /** 货币类型*/
        static shopType: string;
        /** 实际售价*/
        static sellPrice: string;
        /** 显示原价*/
        static showPrice: string;
        /** 折扣*/
        static onOff: string;
    }
}
declare module "Net/DataEvents/ShopSetEvent" {
    export class ShopSetEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 商店ID*/
        static shopId: string;
        /** 备注*/
        static desc: string;
        /** 道具名字*/
        static itemName: string;
        /** 商品列表*/
        static goodsList: string;
        /** 货币类型*/
        static shopType: string;
        /** 实际售价*/
        static sellPrice: string;
        /** 显示原价*/
        static showPrice: string;
        /** 折扣*/
        static onOff: string;
        /** 是否显示*/
        static visible: string;
    }
}
declare module "Net/DataEvents/SquidGameConfigBaseEvent" {
    export class SquidGameConfigBaseEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 备注*/
        static desc: string;
        /** 用户列表*/
        static players: string;
        /** 每一步距离*/
        static stepDis: string;
        /** 下落高度*/
        static dropHeigth: string;
        /** 初始位置*/
        static startArea: string;
        /** 活动区域*/
        static moveArea: string;
        /** 正方形安全区*/
        static safeRect: string;
        /** 三角安全区*/
        static safeTriangle: string;
        /** 圆形安全区*/
        static safeCircular: string;
        /** 目标安全区*/
        static tagetCircular: string;
        /** 小圆安全区1*/
        static smallCircular1: string;
        /** 小圆安全区2*/
        static smallCircular2: string;
        /** 简单难度持续时间*/
        static easyMode: string;
        /** 困难难度开始时间*/
        static hardMode: string;
        /** 最小力度*/
        static powerMin: string;
        /** 最大力度*/
        static powerMax: string;
        /** 最小判定角度*/
        static agreeMin: string;
        /** 最大判定角度*/
        static agreeMax: string;
        /** 提前发送时间*/
        static advance: string;
        /** 游戏总时间*/
        static totleTime: string;
        /** 倒计时时长*/
        static countTime: string;
        /** 游戏开始时间*/
        static gameTime: string;
        /** 游戏状态*/
        static gameStatus: string;
        /** 倒计时开始时间*/
        static countDown: string;
        /** 当前时间*/
        static nowTime: string;
        /** 结束时间*/
        static endTime: string;
        /** 游戏场景ID*/
        static gameScene: string;
    }
}
declare module "Net/DataEvents/TestListEvent" {
    export class TestListEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 结算时间*/
        static resultTime: string;
        /** 名次*/
        static rank: string;
    }
}
declare module "Net/DataEvents/TimeEventEvent" {
    export class TimeEventEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 配置ID*/
        static id: string;
        /** 任务名称*/
        static eventName: string;
        /** 任务实际开始时间*/
        static taskstartTime: string;
        /** 任务结束时间*/
        static taskEndTime: string;
        /** 上次开始时间*/
        static lastStartTime: string;
        /** 上次结束时间*/
        static lastEndTime: string;
        /** 默认时间是0也就是utc时间*/
        static serverTimeZone: string;
        /** 重复循环次数，0就是无限次循环*/
        static LoopCount: string;
        /** 已经重复的次数*/
        static LoopTimers: string;
        /** 第一次是否有cd*/
        static isFristNoCD: string;
        /** 任务间隔执行时间*/
        static taskLoopTime: string;
        /** 每天任务开始的时间，和loopTime共同执行*/
        static startTime: string;
        /** 每天任务开始的时间的结束时间*/
        static startLimitTime: string;
        /** 前置任务id，可以组成任务集合*/
        static predecessorTaskID: string;
        /** 任务的回调事件名字*/
        static taskEventString: string;
        /** 任务执行日志列表*/
        static taskEventLog: string;
        /** 任务目前状态，0等待执行，1正在执行，2执行错误，3执行成功*/
        static taskState: string;
        /** 任务之前的执行状态，1正在执行，2执行错误，3执行成功，注意写任务的一定要注意可能服务器被中断的情况*/
        static taskPreviousState: string;
    }
}
declare module "Net/DataEvents/TotleRankEvent" {
    export class TotleRankEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 总页数*/
        static totalPage: string;
        /** 自身名次*/
        static selfRank: string;
    }
}
declare module "Net/DataEvents/WalletErrLogEvent" {
    export class WalletErrLogEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 记录ID*/
        static id: string;
        /** 类名*/
        static className: string;
        /** 方法名*/
        static methodName: string;
        /** 玩家ID*/
        static userToken: string;
        /** log信息*/
        static logMessage: string;
        /** 记录时间*/
        static resultTime: string;
    }
}
declare module "Net/DataEvents/WalletLogEvent" {
    export class WalletLogEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 记录ID*/
        static id: string;
        /** 类名*/
        static className: string;
        /** 方法名*/
        static methodName: string;
        /** 玩家ID*/
        static userToken: string;
        /** log信息*/
        static logMessage: string;
        /** 记录时间*/
        static resultTime: string;
    }
}
declare module "Net/DataEvents/WeeklyRankEvent" {
    export class WeeklyRankEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 总页数*/
        static totalPage: string;
        /** 自身名次*/
        static selfRank: string;
    }
}
declare module "Net/DataEvents/WeeklyRankLastEvent" {
    export class WeeklyRankLastEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 结算时间*/
        static resultTime: string;
        /** 名次*/
        static rank: string;
    }
}
declare module "Net/DataEvents/WeeklyRankLogEvent" {
    export class WeeklyRankLogEvent {
        /** 初始化全部数据*/
        static Init: string;
        /** 批量加载数据*/
        static ChangeList: string;
        /** 玩家token*/
        static id: string;
        /** 积分*/
        static point: string;
        /** 胜场*/
        static win: string;
        /** 败场*/
        static lose: string;
        /** 总场次*/
        static total: string;
        /** 结算时间*/
        static resultTime: string;
        /** 名次*/
        static rank: string;
    }
}
declare module "Util/Vector3Util" {
    export class Vector3Util {
        private static instance;
        static get Instance(): Vector3Util;
        MoveTo(current: m4m.math.vector3, target: m4m.math.vector3, distance: number): m4m.math.vector3;
    }
}
declare module "gamePlays/Hall" {
    import { GamePlayType } from "GameEnum";
    import { IGamePlay } from "gamePlays/IGamePlay";
    /**
     * 游戏大厅
     */
    export class Hall implements IGamePlay {
        private _evMakeRole;
        private _evRoleSetAI;
        private _evRoleSetPos;
        startArea(): m4m.math.vector3[];
        endArea(): m4m.math.vector3[];
        getGameType(): GamePlayType;
        runGame(): void;
        exitGame(): void;
        /** 添加其他 网络玩家  */
        private addGuest;
    }
}
