var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
System.register("ActionBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_1, context_1) {
    "use strict";
    var ExcelDataBase_1, Map_1, ActionBase;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (ExcelDataBase_1_1) {
                ExcelDataBase_1 = ExcelDataBase_1_1;
            },
            function (Map_1_1) {
                Map_1 = Map_1_1;
            }
        ],
        execute: function () {
            exports_1("ActionBase", ActionBase = /** @class */ (function (_super) {
                __extends(ActionBase, _super);
                function ActionBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ActionBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_1.cMap();
                    } ; return this._list; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ActionBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new ActionBase();
                        baseData.actionName = br.readUTFBytes();
                        baseData.des = br.readUTFBytes();
                        baseData.speed = br.readFloat();
                        baseData.mirror = br.readBoolean();
                        this.list.set(baseData.actionName, baseData);
                    }
                };
                ActionBase.clone = function (old) {
                    var clone = new ActionBase();
                    clone.actionName = old.actionName;
                    clone.des = old.des;
                    clone.speed = old.speed;
                    clone.mirror = old.mirror;
                    return clone;
                };
                ActionBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                ActionBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                ActionBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                ActionBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                ActionBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                ActionBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                ActionBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                ActionBase.versition = 0;
                ActionBase.params = ["actionName", "des", "speed", "mirror",];
                return ActionBase;
            }(ExcelDataBase_1.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(ActionBase);
        }
    };
});
System.register("AudioBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_2, context_2) {
    "use strict";
    var ExcelDataBase_2, Map_2, AudioBase;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [
            function (ExcelDataBase_2_1) {
                ExcelDataBase_2 = ExcelDataBase_2_1;
            },
            function (Map_2_1) {
                Map_2 = Map_2_1;
            }
        ],
        execute: function () {
            exports_2("AudioBase", AudioBase = /** @class */ (function (_super) {
                __extends(AudioBase, _super);
                function AudioBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(AudioBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_2.cMap();
                    } ; return this._list; },
                    enumerable: false,
                    configurable: true
                });
                ;
                AudioBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new AudioBase();
                        baseData.id = br.readUInt32();
                        baseData.resName = br.readUTFBytes();
                        baseData.audioKey = br.readUTFBytes();
                        baseData.volume = br.readFloat();
                        baseData.isLoop = br.readBoolean();
                        baseData.desc = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                AudioBase.clone = function (old) {
                    var clone = new AudioBase();
                    clone.id = old.id;
                    clone.resName = old.resName;
                    clone.audioKey = old.audioKey;
                    clone.volume = old.volume;
                    clone.isLoop = old.isLoop;
                    clone.desc = old.desc;
                    return clone;
                };
                AudioBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                AudioBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                AudioBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                AudioBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                AudioBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                AudioBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                AudioBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                AudioBase.versition = 0;
                AudioBase.params = ["id", "resName", "audioKey", "volume", "isLoop", "desc",];
                return AudioBase;
            }(ExcelDataBase_2.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(AudioBase);
        }
    };
});
System.register("BattleListBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_3, context_3) {
    "use strict";
    var ExcelDataBase_3, Map_3, BattleListBase;
    var __moduleName = context_3 && context_3.id;
    return {
        setters: [
            function (ExcelDataBase_3_1) {
                ExcelDataBase_3 = ExcelDataBase_3_1;
            },
            function (Map_3_1) {
                Map_3 = Map_3_1;
            }
        ],
        execute: function () {
            exports_3("BattleListBase", BattleListBase = /** @class */ (function (_super) {
                __extends(BattleListBase, _super);
                function BattleListBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(BattleListBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_3.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                BattleListBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new BattleListBase();
                        baseData.id = br.readUTFBytes();
                        baseData.checkpoint = br.readUTFBytes();
                        baseData.checkpointID = br.readUInt32();
                        baseData.total = br.readInt32();
                        baseData.wins = br.readInt32();
                        baseData.userID = br.readUTFBytes();
                        baseData.bestAchievement = br.readFloat();
                        this.list.set(baseData.id, baseData);
                    }
                };
                BattleListBase.clone = function (old) {
                    var clone = new BattleListBase();
                    clone.id = old.id;
                    clone.checkpoint = old.checkpoint;
                    clone.checkpointID = old.checkpointID;
                    clone.total = old.total;
                    clone.wins = old.wins;
                    clone.userID = old.userID;
                    clone.bestAchievement = old.bestAchievement;
                    return clone;
                };
                BattleListBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.checkpoint = old.checkpoint;
                    this.checkpointID = old.checkpointID;
                    this.total = old.total;
                    this.wins = old.wins;
                    this.userID = old.userID;
                    this.bestAchievement = old.bestAchievement;
                };
                BattleListBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                BattleListBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                BattleListBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                BattleListBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                BattleListBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                BattleListBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                BattleListBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                BattleListBase.versition = 0;
                BattleListBase.params = ["id", "checkpoint", "checkpointID", "total", "wins", "userID", "bestAchievement",];
                return BattleListBase;
            }(ExcelDataBase_3.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(BattleListBase);
        }
    };
});
System.register("CookieConfigBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_4, context_4) {
    "use strict";
    var ExcelDataBase_4, Map_4, CookieConfigBase;
    var __moduleName = context_4 && context_4.id;
    return {
        setters: [
            function (ExcelDataBase_4_1) {
                ExcelDataBase_4 = ExcelDataBase_4_1;
            },
            function (Map_4_1) {
                Map_4 = Map_4_1;
            }
        ],
        execute: function () {
            exports_4("CookieConfigBase", CookieConfigBase = /** @class */ (function (_super) {
                __extends(CookieConfigBase, _super);
                function CookieConfigBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(CookieConfigBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_4.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                CookieConfigBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new CookieConfigBase();
                        baseData.id = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.players = br.readUTFBytes();
                        baseData.stepDis = br.readFloat();
                        baseData.dropHeigth = br.readFloat();
                        baseData.startArea = br.readUTFBytes();
                        baseData.moveArea = br.readUTFBytes();
                        baseData.npcDis = br.readFloat();
                        baseData.shakeStartTime = br.readFloat();
                        baseData.shakeTime = br.readFloat();
                        baseData.shakeMinValue = br.readFloat();
                        baseData.shakeMaxValue = br.readFloat();
                        baseData.shakeMinFrequency = br.readFloat();
                        baseData.shakeMaxFrequency = br.readFloat();
                        baseData.needleWidth = br.readFloat();
                        baseData.lineCollisionWidth = br.readFloat();
                        baseData.cookLen = (function () { var cache = []; var len = br.readUInt32(); for (var i_1 = 0; i_1 < len; i_1++) {
                            cache.push(br.readInt32());
                        } return cache; })();
                        baseData.advance = br.readInt32();
                        baseData.totleTime = br.readInt32();
                        baseData.countTime = br.readInt32();
                        baseData.gameTime = br.readULong();
                        baseData.gameStatus = br.readByte();
                        baseData.countDown = br.readULong();
                        baseData.nowTime = br.readDouble();
                        baseData.endTime = br.readDouble();
                        baseData.gameScene = br.readUInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                CookieConfigBase.clone = function (old) {
                    var clone = new CookieConfigBase();
                    clone.id = old.id;
                    clone.desc = old.desc;
                    clone.players = old.players;
                    clone.stepDis = old.stepDis;
                    clone.dropHeigth = old.dropHeigth;
                    clone.startArea = old.startArea;
                    clone.moveArea = old.moveArea;
                    clone.npcDis = old.npcDis;
                    clone.shakeStartTime = old.shakeStartTime;
                    clone.shakeTime = old.shakeTime;
                    clone.shakeMinValue = old.shakeMinValue;
                    clone.shakeMaxValue = old.shakeMaxValue;
                    clone.shakeMinFrequency = old.shakeMinFrequency;
                    clone.shakeMaxFrequency = old.shakeMaxFrequency;
                    clone.needleWidth = old.needleWidth;
                    clone.lineCollisionWidth = old.lineCollisionWidth;
                    clone.cookLen = old.cookLen;
                    clone.advance = old.advance;
                    clone.totleTime = old.totleTime;
                    clone.countTime = old.countTime;
                    clone.gameTime = old.gameTime;
                    clone.gameStatus = old.gameStatus;
                    clone.countDown = old.countDown;
                    clone.nowTime = old.nowTime;
                    clone.endTime = old.endTime;
                    clone.gameScene = old.gameScene;
                    return clone;
                };
                CookieConfigBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.desc = old.desc;
                    this.players = old.players;
                    this.stepDis = old.stepDis;
                    this.dropHeigth = old.dropHeigth;
                    this.startArea = old.startArea;
                    this.moveArea = old.moveArea;
                    this.npcDis = old.npcDis;
                    this.shakeStartTime = old.shakeStartTime;
                    this.shakeTime = old.shakeTime;
                    this.shakeMinValue = old.shakeMinValue;
                    this.shakeMaxValue = old.shakeMaxValue;
                    this.shakeMinFrequency = old.shakeMinFrequency;
                    this.shakeMaxFrequency = old.shakeMaxFrequency;
                    this.needleWidth = old.needleWidth;
                    this.lineCollisionWidth = old.lineCollisionWidth;
                    this.cookLen = old.cookLen;
                    this.advance = old.advance;
                    this.totleTime = old.totleTime;
                    this.countTime = old.countTime;
                    this.gameTime = old.gameTime;
                    this.gameStatus = old.gameStatus;
                    this.countDown = old.countDown;
                    this.nowTime = old.nowTime;
                    this.endTime = old.endTime;
                    this.gameScene = old.gameScene;
                };
                CookieConfigBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                CookieConfigBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                CookieConfigBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                CookieConfigBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                CookieConfigBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                CookieConfigBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                CookieConfigBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                CookieConfigBase.versition = 0;
                CookieConfigBase.params = ["id", "desc", "players", "stepDis", "dropHeigth", "startArea", "moveArea", "npcDis", "shakeStartTime", "shakeTime", "shakeMinValue", "shakeMaxValue", "shakeMinFrequency", "shakeMaxFrequency", "needleWidth", "lineCollisionWidth", "cookLen", "advance", "totleTime", "countTime", "gameTime", "gameStatus", "countDown", "nowTime", "endTime", "gameScene",];
                return CookieConfigBase;
            }(ExcelDataBase_4.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(CookieConfigBase);
        }
    };
});
System.register("CookieDailyRank", ["Data/ExcelDataBase", "Data/Map"], function (exports_5, context_5) {
    "use strict";
    var ExcelDataBase_5, Map_5, CookieDailyRank;
    var __moduleName = context_5 && context_5.id;
    return {
        setters: [
            function (ExcelDataBase_5_1) {
                ExcelDataBase_5 = ExcelDataBase_5_1;
            },
            function (Map_5_1) {
                Map_5 = Map_5_1;
            }
        ],
        execute: function () {
            exports_5("CookieDailyRank", CookieDailyRank = /** @class */ (function (_super) {
                __extends(CookieDailyRank, _super);
                function CookieDailyRank() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(CookieDailyRank, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_5.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                CookieDailyRank.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new CookieDailyRank();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.totalPage = br.readInt32();
                        baseData.selfRank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                CookieDailyRank.clone = function (old) {
                    var clone = new CookieDailyRank();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.totalPage = old.totalPage;
                    clone.selfRank = old.selfRank;
                    return clone;
                };
                CookieDailyRank.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.totalPage = old.totalPage;
                    this.selfRank = old.selfRank;
                };
                CookieDailyRank.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                CookieDailyRank.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                CookieDailyRank.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                CookieDailyRank.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                CookieDailyRank.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                CookieDailyRank.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                CookieDailyRank.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                CookieDailyRank.versition = 0;
                CookieDailyRank.params = ["id", "point", "win", "lose", "total", "totalPage", "selfRank",];
                return CookieDailyRank;
            }(ExcelDataBase_5.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(CookieDailyRank);
        }
    };
});
System.register("CookieDailyRankLast", ["Data/ExcelDataBase", "Data/Map"], function (exports_6, context_6) {
    "use strict";
    var ExcelDataBase_6, Map_6, CookieDailyRankLast;
    var __moduleName = context_6 && context_6.id;
    return {
        setters: [
            function (ExcelDataBase_6_1) {
                ExcelDataBase_6 = ExcelDataBase_6_1;
            },
            function (Map_6_1) {
                Map_6 = Map_6_1;
            }
        ],
        execute: function () {
            exports_6("CookieDailyRankLast", CookieDailyRankLast = /** @class */ (function (_super) {
                __extends(CookieDailyRankLast, _super);
                function CookieDailyRankLast() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(CookieDailyRankLast, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_6.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                CookieDailyRankLast.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new CookieDailyRankLast();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.resultTime = br.readDouble();
                        baseData.rank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                CookieDailyRankLast.clone = function (old) {
                    var clone = new CookieDailyRankLast();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.resultTime = old.resultTime;
                    clone.rank = old.rank;
                    return clone;
                };
                CookieDailyRankLast.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.resultTime = old.resultTime;
                    this.rank = old.rank;
                };
                CookieDailyRankLast.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                CookieDailyRankLast.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                CookieDailyRankLast.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                CookieDailyRankLast.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                CookieDailyRankLast.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                CookieDailyRankLast.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                CookieDailyRankLast.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                CookieDailyRankLast.versition = 0;
                CookieDailyRankLast.params = ["id", "point", "win", "lose", "total", "resultTime", "rank",];
                return CookieDailyRankLast;
            }(ExcelDataBase_6.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(CookieDailyRankLast);
        }
    };
});
System.register("CookieDailyRankLog", ["Data/ExcelDataBase", "Data/Map"], function (exports_7, context_7) {
    "use strict";
    var ExcelDataBase_7, Map_7, CookieDailyRankLog;
    var __moduleName = context_7 && context_7.id;
    return {
        setters: [
            function (ExcelDataBase_7_1) {
                ExcelDataBase_7 = ExcelDataBase_7_1;
            },
            function (Map_7_1) {
                Map_7 = Map_7_1;
            }
        ],
        execute: function () {
            exports_7("CookieDailyRankLog", CookieDailyRankLog = /** @class */ (function (_super) {
                __extends(CookieDailyRankLog, _super);
                function CookieDailyRankLog() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(CookieDailyRankLog, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_7.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                CookieDailyRankLog.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new CookieDailyRankLog();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.resultTime = br.readDouble();
                        baseData.rank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                CookieDailyRankLog.clone = function (old) {
                    var clone = new CookieDailyRankLog();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.resultTime = old.resultTime;
                    clone.rank = old.rank;
                    return clone;
                };
                CookieDailyRankLog.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.resultTime = old.resultTime;
                    this.rank = old.rank;
                };
                CookieDailyRankLog.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                CookieDailyRankLog.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                CookieDailyRankLog.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                CookieDailyRankLog.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                CookieDailyRankLog.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                CookieDailyRankLog.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                CookieDailyRankLog.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                CookieDailyRankLog.versition = 0;
                CookieDailyRankLog.params = ["id", "point", "win", "lose", "total", "resultTime", "rank",];
                return CookieDailyRankLog;
            }(ExcelDataBase_7.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(CookieDailyRankLog);
        }
    };
});
System.register("CookieGameData", ["Data/ExcelDataBase", "Data/Map"], function (exports_8, context_8) {
    "use strict";
    var ExcelDataBase_8, Map_8, CookieGameData;
    var __moduleName = context_8 && context_8.id;
    return {
        setters: [
            function (ExcelDataBase_8_1) {
                ExcelDataBase_8 = ExcelDataBase_8_1;
            },
            function (Map_8_1) {
                Map_8 = Map_8_1;
            }
        ],
        execute: function () {
            exports_8("CookieGameData", CookieGameData = /** @class */ (function (_super) {
                __extends(CookieGameData, _super);
                function CookieGameData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(CookieGameData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_8.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                CookieGameData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new CookieGameData();
                        baseData.id = br.readUTFBytes();
                        baseData.cookieID = br.readInt32();
                        baseData.maxHp = br.readUInt32();
                        baseData.hp = br.readUInt32();
                        baseData.scale = br.readFloat();
                        baseData.rot = br.readInt32();
                        baseData.dataJson = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                CookieGameData.clone = function (old) {
                    var clone = new CookieGameData();
                    clone.id = old.id;
                    clone.cookieID = old.cookieID;
                    clone.maxHp = old.maxHp;
                    clone.hp = old.hp;
                    clone.scale = old.scale;
                    clone.rot = old.rot;
                    clone.dataJson = old.dataJson;
                    return clone;
                };
                CookieGameData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.cookieID = old.cookieID;
                    this.maxHp = old.maxHp;
                    this.hp = old.hp;
                    this.scale = old.scale;
                    this.rot = old.rot;
                    this.dataJson = old.dataJson;
                };
                CookieGameData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                CookieGameData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                CookieGameData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                CookieGameData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                CookieGameData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                CookieGameData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                CookieGameData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                CookieGameData.versition = 0;
                CookieGameData.params = ["id", "cookieID", "maxHp", "hp", "scale", "rot", "dataJson",];
                return CookieGameData;
            }(ExcelDataBase_8.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(CookieGameData);
        }
    };
});
System.register("CookieMonthlyRank", ["Data/ExcelDataBase", "Data/Map"], function (exports_9, context_9) {
    "use strict";
    var ExcelDataBase_9, Map_9, CookieMonthlyRank;
    var __moduleName = context_9 && context_9.id;
    return {
        setters: [
            function (ExcelDataBase_9_1) {
                ExcelDataBase_9 = ExcelDataBase_9_1;
            },
            function (Map_9_1) {
                Map_9 = Map_9_1;
            }
        ],
        execute: function () {
            exports_9("CookieMonthlyRank", CookieMonthlyRank = /** @class */ (function (_super) {
                __extends(CookieMonthlyRank, _super);
                function CookieMonthlyRank() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(CookieMonthlyRank, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_9.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                CookieMonthlyRank.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new CookieMonthlyRank();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.totalPage = br.readInt32();
                        baseData.selfRank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                CookieMonthlyRank.clone = function (old) {
                    var clone = new CookieMonthlyRank();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.totalPage = old.totalPage;
                    clone.selfRank = old.selfRank;
                    return clone;
                };
                CookieMonthlyRank.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.totalPage = old.totalPage;
                    this.selfRank = old.selfRank;
                };
                CookieMonthlyRank.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                CookieMonthlyRank.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                CookieMonthlyRank.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                CookieMonthlyRank.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                CookieMonthlyRank.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                CookieMonthlyRank.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                CookieMonthlyRank.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                CookieMonthlyRank.versition = 0;
                CookieMonthlyRank.params = ["id", "point", "win", "lose", "total", "totalPage", "selfRank",];
                return CookieMonthlyRank;
            }(ExcelDataBase_9.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(CookieMonthlyRank);
        }
    };
});
System.register("CookieMonthlyRankLast", ["Data/ExcelDataBase", "Data/Map"], function (exports_10, context_10) {
    "use strict";
    var ExcelDataBase_10, Map_10, CookieMonthlyRankLast;
    var __moduleName = context_10 && context_10.id;
    return {
        setters: [
            function (ExcelDataBase_10_1) {
                ExcelDataBase_10 = ExcelDataBase_10_1;
            },
            function (Map_10_1) {
                Map_10 = Map_10_1;
            }
        ],
        execute: function () {
            exports_10("CookieMonthlyRankLast", CookieMonthlyRankLast = /** @class */ (function (_super) {
                __extends(CookieMonthlyRankLast, _super);
                function CookieMonthlyRankLast() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(CookieMonthlyRankLast, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_10.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                CookieMonthlyRankLast.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new CookieMonthlyRankLast();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.resultTime = br.readDouble();
                        baseData.rank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                CookieMonthlyRankLast.clone = function (old) {
                    var clone = new CookieMonthlyRankLast();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.resultTime = old.resultTime;
                    clone.rank = old.rank;
                    return clone;
                };
                CookieMonthlyRankLast.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.resultTime = old.resultTime;
                    this.rank = old.rank;
                };
                CookieMonthlyRankLast.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                CookieMonthlyRankLast.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                CookieMonthlyRankLast.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                CookieMonthlyRankLast.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                CookieMonthlyRankLast.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                CookieMonthlyRankLast.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                CookieMonthlyRankLast.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                CookieMonthlyRankLast.versition = 0;
                CookieMonthlyRankLast.params = ["id", "point", "win", "lose", "total", "resultTime", "rank",];
                return CookieMonthlyRankLast;
            }(ExcelDataBase_10.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(CookieMonthlyRankLast);
        }
    };
});
System.register("CookieMonthlyRankLog", ["Data/ExcelDataBase", "Data/Map"], function (exports_11, context_11) {
    "use strict";
    var ExcelDataBase_11, Map_11, CookieMonthlyRankLog;
    var __moduleName = context_11 && context_11.id;
    return {
        setters: [
            function (ExcelDataBase_11_1) {
                ExcelDataBase_11 = ExcelDataBase_11_1;
            },
            function (Map_11_1) {
                Map_11 = Map_11_1;
            }
        ],
        execute: function () {
            exports_11("CookieMonthlyRankLog", CookieMonthlyRankLog = /** @class */ (function (_super) {
                __extends(CookieMonthlyRankLog, _super);
                function CookieMonthlyRankLog() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(CookieMonthlyRankLog, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_11.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                CookieMonthlyRankLog.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new CookieMonthlyRankLog();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.resultTime = br.readDouble();
                        baseData.rank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                CookieMonthlyRankLog.clone = function (old) {
                    var clone = new CookieMonthlyRankLog();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.resultTime = old.resultTime;
                    clone.rank = old.rank;
                    return clone;
                };
                CookieMonthlyRankLog.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.resultTime = old.resultTime;
                    this.rank = old.rank;
                };
                CookieMonthlyRankLog.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                CookieMonthlyRankLog.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                CookieMonthlyRankLog.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                CookieMonthlyRankLog.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                CookieMonthlyRankLog.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                CookieMonthlyRankLog.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                CookieMonthlyRankLog.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                CookieMonthlyRankLog.versition = 0;
                CookieMonthlyRankLog.params = ["id", "point", "win", "lose", "total", "resultTime", "rank",];
                return CookieMonthlyRankLog;
            }(ExcelDataBase_11.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(CookieMonthlyRankLog);
        }
    };
});
System.register("CookieTotleRank", ["Data/ExcelDataBase", "Data/Map"], function (exports_12, context_12) {
    "use strict";
    var ExcelDataBase_12, Map_12, CookieTotleRank;
    var __moduleName = context_12 && context_12.id;
    return {
        setters: [
            function (ExcelDataBase_12_1) {
                ExcelDataBase_12 = ExcelDataBase_12_1;
            },
            function (Map_12_1) {
                Map_12 = Map_12_1;
            }
        ],
        execute: function () {
            exports_12("CookieTotleRank", CookieTotleRank = /** @class */ (function (_super) {
                __extends(CookieTotleRank, _super);
                function CookieTotleRank() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(CookieTotleRank, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_12.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                CookieTotleRank.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new CookieTotleRank();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.totalPage = br.readInt32();
                        baseData.selfRank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                CookieTotleRank.clone = function (old) {
                    var clone = new CookieTotleRank();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.totalPage = old.totalPage;
                    clone.selfRank = old.selfRank;
                    return clone;
                };
                CookieTotleRank.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.totalPage = old.totalPage;
                    this.selfRank = old.selfRank;
                };
                CookieTotleRank.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                CookieTotleRank.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                CookieTotleRank.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                CookieTotleRank.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                CookieTotleRank.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                CookieTotleRank.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                CookieTotleRank.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                CookieTotleRank.versition = 0;
                CookieTotleRank.params = ["id", "point", "win", "lose", "total", "totalPage", "selfRank",];
                return CookieTotleRank;
            }(ExcelDataBase_12.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(CookieTotleRank);
        }
    };
});
System.register("CookieWeeklyRank", ["Data/ExcelDataBase", "Data/Map"], function (exports_13, context_13) {
    "use strict";
    var ExcelDataBase_13, Map_13, CookieWeeklyRank;
    var __moduleName = context_13 && context_13.id;
    return {
        setters: [
            function (ExcelDataBase_13_1) {
                ExcelDataBase_13 = ExcelDataBase_13_1;
            },
            function (Map_13_1) {
                Map_13 = Map_13_1;
            }
        ],
        execute: function () {
            exports_13("CookieWeeklyRank", CookieWeeklyRank = /** @class */ (function (_super) {
                __extends(CookieWeeklyRank, _super);
                function CookieWeeklyRank() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(CookieWeeklyRank, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_13.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                CookieWeeklyRank.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new CookieWeeklyRank();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.totalPage = br.readInt32();
                        baseData.selfRank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                CookieWeeklyRank.clone = function (old) {
                    var clone = new CookieWeeklyRank();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.totalPage = old.totalPage;
                    clone.selfRank = old.selfRank;
                    return clone;
                };
                CookieWeeklyRank.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.totalPage = old.totalPage;
                    this.selfRank = old.selfRank;
                };
                CookieWeeklyRank.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                CookieWeeklyRank.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                CookieWeeklyRank.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                CookieWeeklyRank.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                CookieWeeklyRank.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                CookieWeeklyRank.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                CookieWeeklyRank.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                CookieWeeklyRank.versition = 0;
                CookieWeeklyRank.params = ["id", "point", "win", "lose", "total", "totalPage", "selfRank",];
                return CookieWeeklyRank;
            }(ExcelDataBase_13.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(CookieWeeklyRank);
        }
    };
});
System.register("CookieWeeklyRankLast", ["Data/ExcelDataBase", "Data/Map"], function (exports_14, context_14) {
    "use strict";
    var ExcelDataBase_14, Map_14, CookieWeeklyRankLast;
    var __moduleName = context_14 && context_14.id;
    return {
        setters: [
            function (ExcelDataBase_14_1) {
                ExcelDataBase_14 = ExcelDataBase_14_1;
            },
            function (Map_14_1) {
                Map_14 = Map_14_1;
            }
        ],
        execute: function () {
            exports_14("CookieWeeklyRankLast", CookieWeeklyRankLast = /** @class */ (function (_super) {
                __extends(CookieWeeklyRankLast, _super);
                function CookieWeeklyRankLast() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(CookieWeeklyRankLast, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_14.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                CookieWeeklyRankLast.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new CookieWeeklyRankLast();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.resultTime = br.readDouble();
                        baseData.rank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                CookieWeeklyRankLast.clone = function (old) {
                    var clone = new CookieWeeklyRankLast();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.resultTime = old.resultTime;
                    clone.rank = old.rank;
                    return clone;
                };
                CookieWeeklyRankLast.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.resultTime = old.resultTime;
                    this.rank = old.rank;
                };
                CookieWeeklyRankLast.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                CookieWeeklyRankLast.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                CookieWeeklyRankLast.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                CookieWeeklyRankLast.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                CookieWeeklyRankLast.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                CookieWeeklyRankLast.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                CookieWeeklyRankLast.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                CookieWeeklyRankLast.versition = 0;
                CookieWeeklyRankLast.params = ["id", "point", "win", "lose", "total", "resultTime", "rank",];
                return CookieWeeklyRankLast;
            }(ExcelDataBase_14.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(CookieWeeklyRankLast);
        }
    };
});
System.register("CookieWeeklyRankLog", ["Data/ExcelDataBase", "Data/Map"], function (exports_15, context_15) {
    "use strict";
    var ExcelDataBase_15, Map_15, CookieWeeklyRankLog;
    var __moduleName = context_15 && context_15.id;
    return {
        setters: [
            function (ExcelDataBase_15_1) {
                ExcelDataBase_15 = ExcelDataBase_15_1;
            },
            function (Map_15_1) {
                Map_15 = Map_15_1;
            }
        ],
        execute: function () {
            exports_15("CookieWeeklyRankLog", CookieWeeklyRankLog = /** @class */ (function (_super) {
                __extends(CookieWeeklyRankLog, _super);
                function CookieWeeklyRankLog() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(CookieWeeklyRankLog, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_15.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                CookieWeeklyRankLog.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new CookieWeeklyRankLog();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.resultTime = br.readDouble();
                        baseData.rank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                CookieWeeklyRankLog.clone = function (old) {
                    var clone = new CookieWeeklyRankLog();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.resultTime = old.resultTime;
                    clone.rank = old.rank;
                    return clone;
                };
                CookieWeeklyRankLog.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.resultTime = old.resultTime;
                    this.rank = old.rank;
                };
                CookieWeeklyRankLog.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                CookieWeeklyRankLog.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                CookieWeeklyRankLog.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                CookieWeeklyRankLog.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                CookieWeeklyRankLog.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                CookieWeeklyRankLog.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                CookieWeeklyRankLog.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                CookieWeeklyRankLog.versition = 0;
                CookieWeeklyRankLog.params = ["id", "point", "win", "lose", "total", "resultTime", "rank",];
                return CookieWeeklyRankLog;
            }(ExcelDataBase_15.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(CookieWeeklyRankLog);
        }
    };
});
System.register("DailyRank", ["Data/ExcelDataBase", "Data/Map"], function (exports_16, context_16) {
    "use strict";
    var ExcelDataBase_16, Map_16, DailyRank;
    var __moduleName = context_16 && context_16.id;
    return {
        setters: [
            function (ExcelDataBase_16_1) {
                ExcelDataBase_16 = ExcelDataBase_16_1;
            },
            function (Map_16_1) {
                Map_16 = Map_16_1;
            }
        ],
        execute: function () {
            exports_16("DailyRank", DailyRank = /** @class */ (function (_super) {
                __extends(DailyRank, _super);
                function DailyRank() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(DailyRank, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_16.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                DailyRank.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new DailyRank();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.totalPage = br.readInt32();
                        baseData.selfRank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                DailyRank.clone = function (old) {
                    var clone = new DailyRank();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.totalPage = old.totalPage;
                    clone.selfRank = old.selfRank;
                    return clone;
                };
                DailyRank.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.totalPage = old.totalPage;
                    this.selfRank = old.selfRank;
                };
                DailyRank.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                DailyRank.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                DailyRank.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                DailyRank.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                DailyRank.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                DailyRank.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                DailyRank.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                DailyRank.versition = 0;
                DailyRank.params = ["id", "point", "win", "lose", "total", "totalPage", "selfRank",];
                return DailyRank;
            }(ExcelDataBase_16.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(DailyRank);
        }
    };
});
System.register("DailyRankLast", ["Data/ExcelDataBase", "Data/Map"], function (exports_17, context_17) {
    "use strict";
    var ExcelDataBase_17, Map_17, DailyRankLast;
    var __moduleName = context_17 && context_17.id;
    return {
        setters: [
            function (ExcelDataBase_17_1) {
                ExcelDataBase_17 = ExcelDataBase_17_1;
            },
            function (Map_17_1) {
                Map_17 = Map_17_1;
            }
        ],
        execute: function () {
            exports_17("DailyRankLast", DailyRankLast = /** @class */ (function (_super) {
                __extends(DailyRankLast, _super);
                function DailyRankLast() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(DailyRankLast, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_17.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                DailyRankLast.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new DailyRankLast();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.resultTime = br.readDouble();
                        baseData.rank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                DailyRankLast.clone = function (old) {
                    var clone = new DailyRankLast();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.resultTime = old.resultTime;
                    clone.rank = old.rank;
                    return clone;
                };
                DailyRankLast.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.resultTime = old.resultTime;
                    this.rank = old.rank;
                };
                DailyRankLast.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                DailyRankLast.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                DailyRankLast.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                DailyRankLast.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                DailyRankLast.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                DailyRankLast.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                DailyRankLast.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                DailyRankLast.versition = 0;
                DailyRankLast.params = ["id", "point", "win", "lose", "total", "resultTime", "rank",];
                return DailyRankLast;
            }(ExcelDataBase_17.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(DailyRankLast);
        }
    };
});
System.register("DailyRankLog", ["Data/ExcelDataBase", "Data/Map"], function (exports_18, context_18) {
    "use strict";
    var ExcelDataBase_18, Map_18, DailyRankLog;
    var __moduleName = context_18 && context_18.id;
    return {
        setters: [
            function (ExcelDataBase_18_1) {
                ExcelDataBase_18 = ExcelDataBase_18_1;
            },
            function (Map_18_1) {
                Map_18 = Map_18_1;
            }
        ],
        execute: function () {
            exports_18("DailyRankLog", DailyRankLog = /** @class */ (function (_super) {
                __extends(DailyRankLog, _super);
                function DailyRankLog() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(DailyRankLog, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_18.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                DailyRankLog.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new DailyRankLog();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.resultTime = br.readDouble();
                        baseData.rank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                DailyRankLog.clone = function (old) {
                    var clone = new DailyRankLog();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.resultTime = old.resultTime;
                    clone.rank = old.rank;
                    return clone;
                };
                DailyRankLog.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.resultTime = old.resultTime;
                    this.rank = old.rank;
                };
                DailyRankLog.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                DailyRankLog.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                DailyRankLog.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                DailyRankLog.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                DailyRankLog.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                DailyRankLog.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                DailyRankLog.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                DailyRankLog.versition = 0;
                DailyRankLog.params = ["id", "point", "win", "lose", "total", "resultTime", "rank",];
                return DailyRankLog;
            }(ExcelDataBase_18.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(DailyRankLog);
        }
    };
});
System.register("DarkFightConfigBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_19, context_19) {
    "use strict";
    var ExcelDataBase_19, Map_19, DarkFightConfigBase;
    var __moduleName = context_19 && context_19.id;
    return {
        setters: [
            function (ExcelDataBase_19_1) {
                ExcelDataBase_19 = ExcelDataBase_19_1;
            },
            function (Map_19_1) {
                Map_19 = Map_19_1;
            }
        ],
        execute: function () {
            exports_19("DarkFightConfigBase", DarkFightConfigBase = /** @class */ (function (_super) {
                __extends(DarkFightConfigBase, _super);
                function DarkFightConfigBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(DarkFightConfigBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_19.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                DarkFightConfigBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new DarkFightConfigBase();
                        baseData.id = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.players = br.readUTFBytes();
                        baseData.stepDis = br.readFloat();
                        baseData.dropHeigth = br.readFloat();
                        baseData.startHp = br.readInt32();
                        baseData.startArea = br.readUTFBytes();
                        baseData.moveArea = br.readUTFBytes();
                        baseData.easyMode = br.readInt32();
                        baseData.hardMode = br.readInt32();
                        baseData.powerMin = br.readInt32();
                        baseData.powerMax = br.readInt32();
                        baseData.agreeMin = br.readInt32();
                        baseData.agreeMax = br.readInt32();
                        baseData.advance = br.readInt32();
                        baseData.totleTime = br.readInt32();
                        baseData.countTime = br.readInt32();
                        baseData.gameTime = br.readULong();
                        baseData.gameStatus = br.readByte();
                        baseData.countDown = br.readULong();
                        baseData.nowTime = br.readDouble();
                        baseData.endTime = br.readDouble();
                        baseData.gameScene = br.readUInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                DarkFightConfigBase.clone = function (old) {
                    var clone = new DarkFightConfigBase();
                    clone.id = old.id;
                    clone.desc = old.desc;
                    clone.players = old.players;
                    clone.stepDis = old.stepDis;
                    clone.dropHeigth = old.dropHeigth;
                    clone.startHp = old.startHp;
                    clone.startArea = old.startArea;
                    clone.moveArea = old.moveArea;
                    clone.easyMode = old.easyMode;
                    clone.hardMode = old.hardMode;
                    clone.powerMin = old.powerMin;
                    clone.powerMax = old.powerMax;
                    clone.agreeMin = old.agreeMin;
                    clone.agreeMax = old.agreeMax;
                    clone.advance = old.advance;
                    clone.totleTime = old.totleTime;
                    clone.countTime = old.countTime;
                    clone.gameTime = old.gameTime;
                    clone.gameStatus = old.gameStatus;
                    clone.countDown = old.countDown;
                    clone.nowTime = old.nowTime;
                    clone.endTime = old.endTime;
                    clone.gameScene = old.gameScene;
                    return clone;
                };
                DarkFightConfigBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.desc = old.desc;
                    this.players = old.players;
                    this.stepDis = old.stepDis;
                    this.dropHeigth = old.dropHeigth;
                    this.startHp = old.startHp;
                    this.startArea = old.startArea;
                    this.moveArea = old.moveArea;
                    this.easyMode = old.easyMode;
                    this.hardMode = old.hardMode;
                    this.powerMin = old.powerMin;
                    this.powerMax = old.powerMax;
                    this.agreeMin = old.agreeMin;
                    this.agreeMax = old.agreeMax;
                    this.advance = old.advance;
                    this.totleTime = old.totleTime;
                    this.countTime = old.countTime;
                    this.gameTime = old.gameTime;
                    this.gameStatus = old.gameStatus;
                    this.countDown = old.countDown;
                    this.nowTime = old.nowTime;
                    this.endTime = old.endTime;
                    this.gameScene = old.gameScene;
                };
                DarkFightConfigBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                DarkFightConfigBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                DarkFightConfigBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                DarkFightConfigBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                DarkFightConfigBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                DarkFightConfigBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                DarkFightConfigBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                DarkFightConfigBase.versition = 0;
                DarkFightConfigBase.params = ["id", "desc", "players", "stepDis", "dropHeigth", "startHp", "startArea", "moveArea", "easyMode", "hardMode", "powerMin", "powerMax", "agreeMin", "agreeMax", "advance", "totleTime", "countTime", "gameTime", "gameStatus", "countDown", "nowTime", "endTime", "gameScene",];
                return DarkFightConfigBase;
            }(ExcelDataBase_19.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(DarkFightConfigBase);
        }
    };
});
System.register("DialRiverConfigBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_20, context_20) {
    "use strict";
    var ExcelDataBase_20, Map_20, DialRiverConfigBase;
    var __moduleName = context_20 && context_20.id;
    return {
        setters: [
            function (ExcelDataBase_20_1) {
                ExcelDataBase_20 = ExcelDataBase_20_1;
            },
            function (Map_20_1) {
                Map_20 = Map_20_1;
            }
        ],
        execute: function () {
            exports_20("DialRiverConfigBase", DialRiverConfigBase = /** @class */ (function (_super) {
                __extends(DialRiverConfigBase, _super);
                function DialRiverConfigBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(DialRiverConfigBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_20.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                DialRiverConfigBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new DialRiverConfigBase();
                        baseData.id = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.players = br.readUTFBytes();
                        baseData.stepDis = br.readFloat();
                        baseData.dropHeigth = br.readFloat();
                        baseData.startArea = br.readUTFBytes();
                        baseData.moveArea = br.readUTFBytes();
                        baseData.leftTeam = (function () { var cache = []; var len = br.readUInt32(); for (var i_2 = 0; i_2 < len; i_2++) {
                            cache.push(br.readUTFBytes());
                        } return cache; })();
                        baseData.minPoint = br.readInt32();
                        baseData.maxPoint = br.readInt32();
                        baseData.easyMode = br.readInt32();
                        baseData.hardMode = br.readInt32();
                        baseData.checkMin = br.readInt32();
                        baseData.checkMax = br.readInt32();
                        baseData.waitMin = br.readInt32();
                        baseData.waitMax = br.readInt32();
                        baseData.showTimeMax = br.readInt32();
                        baseData.showTimeMin = br.readInt32();
                        baseData.agreeMin = br.readInt32();
                        baseData.agreeMax = br.readInt32();
                        baseData.advance = br.readInt32();
                        baseData.totleTime = br.readInt32();
                        baseData.countTime = br.readInt32();
                        baseData.gameTime = br.readULong();
                        baseData.gameStatus = br.readByte();
                        baseData.countDown = br.readULong();
                        baseData.nowTime = br.readDouble();
                        baseData.endTime = br.readDouble();
                        baseData.gameScene = br.readUInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                DialRiverConfigBase.clone = function (old) {
                    var clone = new DialRiverConfigBase();
                    clone.id = old.id;
                    clone.desc = old.desc;
                    clone.players = old.players;
                    clone.stepDis = old.stepDis;
                    clone.dropHeigth = old.dropHeigth;
                    clone.startArea = old.startArea;
                    clone.moveArea = old.moveArea;
                    clone.leftTeam = old.leftTeam;
                    clone.minPoint = old.minPoint;
                    clone.maxPoint = old.maxPoint;
                    clone.easyMode = old.easyMode;
                    clone.hardMode = old.hardMode;
                    clone.checkMin = old.checkMin;
                    clone.checkMax = old.checkMax;
                    clone.waitMin = old.waitMin;
                    clone.waitMax = old.waitMax;
                    clone.showTimeMax = old.showTimeMax;
                    clone.showTimeMin = old.showTimeMin;
                    clone.agreeMin = old.agreeMin;
                    clone.agreeMax = old.agreeMax;
                    clone.advance = old.advance;
                    clone.totleTime = old.totleTime;
                    clone.countTime = old.countTime;
                    clone.gameTime = old.gameTime;
                    clone.gameStatus = old.gameStatus;
                    clone.countDown = old.countDown;
                    clone.nowTime = old.nowTime;
                    clone.endTime = old.endTime;
                    clone.gameScene = old.gameScene;
                    return clone;
                };
                DialRiverConfigBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.desc = old.desc;
                    this.players = old.players;
                    this.stepDis = old.stepDis;
                    this.dropHeigth = old.dropHeigth;
                    this.startArea = old.startArea;
                    this.moveArea = old.moveArea;
                    this.leftTeam = old.leftTeam;
                    this.minPoint = old.minPoint;
                    this.maxPoint = old.maxPoint;
                    this.easyMode = old.easyMode;
                    this.hardMode = old.hardMode;
                    this.checkMin = old.checkMin;
                    this.checkMax = old.checkMax;
                    this.waitMin = old.waitMin;
                    this.waitMax = old.waitMax;
                    this.showTimeMax = old.showTimeMax;
                    this.showTimeMin = old.showTimeMin;
                    this.agreeMin = old.agreeMin;
                    this.agreeMax = old.agreeMax;
                    this.advance = old.advance;
                    this.totleTime = old.totleTime;
                    this.countTime = old.countTime;
                    this.gameTime = old.gameTime;
                    this.gameStatus = old.gameStatus;
                    this.countDown = old.countDown;
                    this.nowTime = old.nowTime;
                    this.endTime = old.endTime;
                    this.gameScene = old.gameScene;
                };
                DialRiverConfigBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                DialRiverConfigBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                DialRiverConfigBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                DialRiverConfigBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                DialRiverConfigBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                DialRiverConfigBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                DialRiverConfigBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                DialRiverConfigBase.versition = 0;
                DialRiverConfigBase.params = ["id", "desc", "players", "stepDis", "dropHeigth", "startArea", "moveArea", "leftTeam", "minPoint", "maxPoint", "easyMode", "hardMode", "checkMin", "checkMax", "waitMin", "waitMax", "showTimeMax", "showTimeMin", "agreeMin", "agreeMax", "advance", "totleTime", "countTime", "gameTime", "gameStatus", "countDown", "nowTime", "endTime", "gameScene",];
                return DialRiverConfigBase;
            }(ExcelDataBase_20.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(DialRiverConfigBase);
        }
    };
});
System.register("DialRiverData", ["Data/ExcelDataBase", "Data/Map"], function (exports_21, context_21) {
    "use strict";
    var ExcelDataBase_21, Map_21, DialRiverData;
    var __moduleName = context_21 && context_21.id;
    return {
        setters: [
            function (ExcelDataBase_21_1) {
                ExcelDataBase_21 = ExcelDataBase_21_1;
            },
            function (Map_21_1) {
                Map_21 = Map_21_1;
            }
        ],
        execute: function () {
            exports_21("DialRiverData", DialRiverData = /** @class */ (function (_super) {
                __extends(DialRiverData, _super);
                function DialRiverData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(DialRiverData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_21.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                DialRiverData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new DialRiverData();
                        baseData.id = br.readUTFBytes();
                        baseData.clickType = br.readByte();
                        baseData.progress = br.readInt32();
                        baseData.usersPoint = br.readUTFBytes();
                        baseData.agree = br.readInt32();
                        baseData.checkTime = br.readULong();
                        baseData.playTime = br.readULong();
                        this.list.set(baseData.id, baseData);
                    }
                };
                DialRiverData.clone = function (old) {
                    var clone = new DialRiverData();
                    clone.id = old.id;
                    clone.clickType = old.clickType;
                    clone.progress = old.progress;
                    clone.usersPoint = old.usersPoint;
                    clone.agree = old.agree;
                    clone.checkTime = old.checkTime;
                    clone.playTime = old.playTime;
                    return clone;
                };
                DialRiverData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.clickType = old.clickType;
                    this.progress = old.progress;
                    this.usersPoint = old.usersPoint;
                    this.agree = old.agree;
                    this.checkTime = old.checkTime;
                    this.playTime = old.playTime;
                };
                DialRiverData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                DialRiverData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                DialRiverData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                DialRiverData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                DialRiverData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                DialRiverData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                DialRiverData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                DialRiverData.versition = 0;
                DialRiverData.params = ["id", "clickType", "progress", "usersPoint", "agree", "checkTime", "playTime",];
                return DialRiverData;
            }(ExcelDataBase_21.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(DialRiverData);
        }
    };
});
System.register("GameOpenSetting", ["Data/ExcelDataBase", "Data/Map"], function (exports_22, context_22) {
    "use strict";
    var ExcelDataBase_22, Map_22, GameOpenSetting;
    var __moduleName = context_22 && context_22.id;
    return {
        setters: [
            function (ExcelDataBase_22_1) {
                ExcelDataBase_22 = ExcelDataBase_22_1;
            },
            function (Map_22_1) {
                Map_22 = Map_22_1;
            }
        ],
        execute: function () {
            exports_22("GameOpenSetting", GameOpenSetting = /** @class */ (function (_super) {
                __extends(GameOpenSetting, _super);
                function GameOpenSetting() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(GameOpenSetting, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_22.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                GameOpenSetting.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new GameOpenSetting();
                        baseData.id = br.readUTFBytes();
                        baseData.eventName = br.readUTFBytes();
                        baseData.startTime = br.readULong();
                        baseData.EndTime = br.readULong();
                        baseData.nextStartTime = br.readULong();
                        baseData.serverTimeZone = br.readInt32();
                        baseData.enterTime = br.readInt32();
                        baseData.addBotInEnter = br.readFloat();
                        baseData.addBotOverEnter = br.readFloat();
                        baseData.addBotOverEnterMax = br.readFloat();
                        baseData.taskLoopTime = br.readULong();
                        baseData.rankTime = br.readULong();
                        baseData.rankEndTime = br.readULong();
                        this.list.set(baseData.id, baseData);
                    }
                };
                GameOpenSetting.clone = function (old) {
                    var clone = new GameOpenSetting();
                    clone.id = old.id;
                    clone.eventName = old.eventName;
                    clone.startTime = old.startTime;
                    clone.EndTime = old.EndTime;
                    clone.nextStartTime = old.nextStartTime;
                    clone.serverTimeZone = old.serverTimeZone;
                    clone.enterTime = old.enterTime;
                    clone.addBotInEnter = old.addBotInEnter;
                    clone.addBotOverEnter = old.addBotOverEnter;
                    clone.addBotOverEnterMax = old.addBotOverEnterMax;
                    clone.taskLoopTime = old.taskLoopTime;
                    clone.rankTime = old.rankTime;
                    clone.rankEndTime = old.rankEndTime;
                    return clone;
                };
                GameOpenSetting.prototype.clone = function (old) {
                    this.id = old.id;
                    this.eventName = old.eventName;
                    this.startTime = old.startTime;
                    this.EndTime = old.EndTime;
                    this.nextStartTime = old.nextStartTime;
                    this.serverTimeZone = old.serverTimeZone;
                    this.enterTime = old.enterTime;
                    this.addBotInEnter = old.addBotInEnter;
                    this.addBotOverEnter = old.addBotOverEnter;
                    this.addBotOverEnterMax = old.addBotOverEnterMax;
                    this.taskLoopTime = old.taskLoopTime;
                    this.rankTime = old.rankTime;
                    this.rankEndTime = old.rankEndTime;
                };
                GameOpenSetting.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                GameOpenSetting.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                GameOpenSetting.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                GameOpenSetting.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                GameOpenSetting.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                GameOpenSetting.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                GameOpenSetting.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                GameOpenSetting.versition = 0;
                GameOpenSetting.params = ["id", "eventName", "startTime", "EndTime", "nextStartTime", "serverTimeZone", "enterTime", "addBotInEnter", "addBotOverEnter", "addBotOverEnterMax", "taskLoopTime", "rankTime", "rankEndTime",];
                return GameOpenSetting;
            }(ExcelDataBase_22.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(GameOpenSetting);
        }
    };
});
System.register("GamesConfigBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_23, context_23) {
    "use strict";
    var ExcelDataBase_23, Map_23, GamesConfigBase;
    var __moduleName = context_23 && context_23.id;
    return {
        setters: [
            function (ExcelDataBase_23_1) {
                ExcelDataBase_23 = ExcelDataBase_23_1;
            },
            function (Map_23_1) {
                Map_23 = Map_23_1;
            }
        ],
        execute: function () {
            exports_23("GamesConfigBase", GamesConfigBase = /** @class */ (function (_super) {
                __extends(GamesConfigBase, _super);
                function GamesConfigBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(GamesConfigBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_23.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                GamesConfigBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new GamesConfigBase();
                        baseData.id = br.readUInt32();
                        baseData.desc = br.readUTFBytes();
                        baseData.UI = br.readUTFBytes();
                        baseData.gameUrl = br.readUTFBytes();
                        baseData.moveArea = br.readUTFBytes();
                        baseData.maxPlayer = br.readInt32();
                        baseData.gameData = (function () { var cache = []; var len = br.readUInt32(); for (var i_3 = 0; i_3 < len; i_3++) {
                            cache.push(br.readFloat());
                        } return cache; })();
                        baseData.gameClass = br.readUTFBytes();
                        baseData.sceneBase = br.readUInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                GamesConfigBase.clone = function (old) {
                    var clone = new GamesConfigBase();
                    clone.id = old.id;
                    clone.desc = old.desc;
                    clone.UI = old.UI;
                    clone.gameUrl = old.gameUrl;
                    clone.moveArea = old.moveArea;
                    clone.maxPlayer = old.maxPlayer;
                    clone.gameData = old.gameData;
                    clone.gameClass = old.gameClass;
                    clone.sceneBase = old.sceneBase;
                    return clone;
                };
                GamesConfigBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.desc = old.desc;
                    this.UI = old.UI;
                    this.gameUrl = old.gameUrl;
                    this.moveArea = old.moveArea;
                    this.maxPlayer = old.maxPlayer;
                    this.gameData = old.gameData;
                    this.gameClass = old.gameClass;
                    this.sceneBase = old.sceneBase;
                };
                GamesConfigBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                GamesConfigBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                GamesConfigBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                GamesConfigBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                GamesConfigBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                GamesConfigBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                GamesConfigBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                GamesConfigBase.versition = 0;
                GamesConfigBase.params = ["id", "desc", "UI", "gameUrl", "moveArea", "maxPlayer", "gameData", "gameClass", "sceneBase",];
                return GamesConfigBase;
            }(ExcelDataBase_23.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(GamesConfigBase);
        }
    };
});
System.register("GamesTicketBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_24, context_24) {
    "use strict";
    var ExcelDataBase_24, Map_24, GamesTicketBase;
    var __moduleName = context_24 && context_24.id;
    return {
        setters: [
            function (ExcelDataBase_24_1) {
                ExcelDataBase_24 = ExcelDataBase_24_1;
            },
            function (Map_24_1) {
                Map_24 = Map_24_1;
            }
        ],
        execute: function () {
            exports_24("GamesTicketBase", GamesTicketBase = /** @class */ (function (_super) {
                __extends(GamesTicketBase, _super);
                function GamesTicketBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(GamesTicketBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_24.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                GamesTicketBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new GamesTicketBase();
                        baseData.id = br.readUInt32();
                        baseData.desc = br.readUTFBytes();
                        baseData.rawpicture = br.readUTFBytes();
                        baseData.ticketID = br.readUInt32();
                        baseData.ticketUI = br.readUTFBytes();
                        baseData.ticketUse = br.readUInt32();
                        baseData.gameClass = br.readUTFBytes();
                        baseData.sceneBase = br.readUInt32();
                        baseData.visible = br.readBoolean();
                        this.list.set(baseData.id, baseData);
                    }
                };
                GamesTicketBase.clone = function (old) {
                    var clone = new GamesTicketBase();
                    clone.id = old.id;
                    clone.desc = old.desc;
                    clone.rawpicture = old.rawpicture;
                    clone.ticketID = old.ticketID;
                    clone.ticketUI = old.ticketUI;
                    clone.ticketUse = old.ticketUse;
                    clone.gameClass = old.gameClass;
                    clone.sceneBase = old.sceneBase;
                    clone.visible = old.visible;
                    return clone;
                };
                GamesTicketBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.desc = old.desc;
                    this.rawpicture = old.rawpicture;
                    this.ticketID = old.ticketID;
                    this.ticketUI = old.ticketUI;
                    this.ticketUse = old.ticketUse;
                    this.gameClass = old.gameClass;
                    this.sceneBase = old.sceneBase;
                    this.visible = old.visible;
                };
                GamesTicketBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                GamesTicketBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                GamesTicketBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                GamesTicketBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                GamesTicketBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                GamesTicketBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                GamesTicketBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                GamesTicketBase.versition = 0;
                GamesTicketBase.params = ["id", "desc", "rawpicture", "ticketID", "ticketUI", "ticketUse", "gameClass", "sceneBase", "visible",];
                return GamesTicketBase;
            }(ExcelDataBase_24.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(GamesTicketBase);
        }
    };
});
System.register("GlassBridgeData", ["Data/ExcelDataBase", "Data/Map"], function (exports_25, context_25) {
    "use strict";
    var ExcelDataBase_25, Map_25, GlassBridgeData;
    var __moduleName = context_25 && context_25.id;
    return {
        setters: [
            function (ExcelDataBase_25_1) {
                ExcelDataBase_25 = ExcelDataBase_25_1;
            },
            function (Map_25_1) {
                Map_25 = Map_25_1;
            }
        ],
        execute: function () {
            exports_25("GlassBridgeData", GlassBridgeData = /** @class */ (function (_super) {
                __extends(GlassBridgeData, _super);
                function GlassBridgeData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(GlassBridgeData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_25.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                GlassBridgeData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new GlassBridgeData();
                        baseData.id = br.readUTFBytes();
                        baseData.breakGlass = br.readByte();
                        baseData.userToken = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                GlassBridgeData.clone = function (old) {
                    var clone = new GlassBridgeData();
                    clone.id = old.id;
                    clone.breakGlass = old.breakGlass;
                    clone.userToken = old.userToken;
                    clone.point = old.point;
                    return clone;
                };
                GlassBridgeData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.breakGlass = old.breakGlass;
                    this.userToken = old.userToken;
                    this.point = old.point;
                };
                GlassBridgeData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                GlassBridgeData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                GlassBridgeData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                GlassBridgeData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                GlassBridgeData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                GlassBridgeData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                GlassBridgeData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                GlassBridgeData.versition = 0;
                GlassBridgeData.params = ["id", "breakGlass", "userToken", "point",];
                return GlassBridgeData;
            }(ExcelDataBase_25.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(GlassBridgeData);
        }
    };
});
System.register("GlassBridgePos", ["Data/ExcelDataBase", "Data/Map"], function (exports_26, context_26) {
    "use strict";
    var ExcelDataBase_26, Map_26, GlassBridgePos;
    var __moduleName = context_26 && context_26.id;
    return {
        setters: [
            function (ExcelDataBase_26_1) {
                ExcelDataBase_26 = ExcelDataBase_26_1;
            },
            function (Map_26_1) {
                Map_26 = Map_26_1;
            }
        ],
        execute: function () {
            exports_26("GlassBridgePos", GlassBridgePos = /** @class */ (function (_super) {
                __extends(GlassBridgePos, _super);
                function GlassBridgePos() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(GlassBridgePos, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_26.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                GlassBridgePos.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new GlassBridgePos();
                        baseData.id = br.readUTFBytes();
                        baseData.leftGlass = br.readUTFBytes();
                        baseData.rightGlass = br.readUTFBytes();
                        baseData.glassPoint = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                GlassBridgePos.clone = function (old) {
                    var clone = new GlassBridgePos();
                    clone.id = old.id;
                    clone.leftGlass = old.leftGlass;
                    clone.rightGlass = old.rightGlass;
                    clone.glassPoint = old.glassPoint;
                    return clone;
                };
                GlassBridgePos.prototype.clone = function (old) {
                    this.id = old.id;
                    this.leftGlass = old.leftGlass;
                    this.rightGlass = old.rightGlass;
                    this.glassPoint = old.glassPoint;
                };
                GlassBridgePos.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                GlassBridgePos.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                GlassBridgePos.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                GlassBridgePos.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                GlassBridgePos.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                GlassBridgePos.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                GlassBridgePos.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                GlassBridgePos.versition = 0;
                GlassBridgePos.params = ["id", "leftGlass", "rightGlass", "glassPoint",];
                return GlassBridgePos;
            }(ExcelDataBase_26.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(GlassBridgePos);
        }
    };
});
System.register("GlassBridgerConfigBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_27, context_27) {
    "use strict";
    var ExcelDataBase_27, Map_27, GlassBridgerConfigBase;
    var __moduleName = context_27 && context_27.id;
    return {
        setters: [
            function (ExcelDataBase_27_1) {
                ExcelDataBase_27 = ExcelDataBase_27_1;
            },
            function (Map_27_1) {
                Map_27 = Map_27_1;
            }
        ],
        execute: function () {
            exports_27("GlassBridgerConfigBase", GlassBridgerConfigBase = /** @class */ (function (_super) {
                __extends(GlassBridgerConfigBase, _super);
                function GlassBridgerConfigBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(GlassBridgerConfigBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_27.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                GlassBridgerConfigBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new GlassBridgerConfigBase();
                        baseData.id = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.players = br.readUTFBytes();
                        baseData.stepDis = br.readFloat();
                        baseData.dropHeigth = br.readFloat();
                        baseData.startArea = br.readUTFBytes();
                        baseData.moveArea = br.readUTFBytes();
                        baseData.finishArea = br.readUTFBytes();
                        baseData.rankPoint = (function () { var cache = []; var len = br.readUInt32(); for (var i_4 = 0; i_4 < len; i_4++) {
                            cache.push(br.readInt32());
                        } return cache; })();
                        baseData.advance = br.readInt32();
                        baseData.totleTime = br.readInt32();
                        baseData.countTime = br.readInt32();
                        baseData.gameTime = br.readULong();
                        baseData.gameStatus = br.readByte();
                        baseData.countDown = br.readULong();
                        baseData.nowTime = br.readDouble();
                        baseData.endTime = br.readDouble();
                        baseData.gameScene = br.readUInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                GlassBridgerConfigBase.clone = function (old) {
                    var clone = new GlassBridgerConfigBase();
                    clone.id = old.id;
                    clone.desc = old.desc;
                    clone.players = old.players;
                    clone.stepDis = old.stepDis;
                    clone.dropHeigth = old.dropHeigth;
                    clone.startArea = old.startArea;
                    clone.moveArea = old.moveArea;
                    clone.finishArea = old.finishArea;
                    clone.rankPoint = old.rankPoint;
                    clone.advance = old.advance;
                    clone.totleTime = old.totleTime;
                    clone.countTime = old.countTime;
                    clone.gameTime = old.gameTime;
                    clone.gameStatus = old.gameStatus;
                    clone.countDown = old.countDown;
                    clone.nowTime = old.nowTime;
                    clone.endTime = old.endTime;
                    clone.gameScene = old.gameScene;
                    return clone;
                };
                GlassBridgerConfigBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.desc = old.desc;
                    this.players = old.players;
                    this.stepDis = old.stepDis;
                    this.dropHeigth = old.dropHeigth;
                    this.startArea = old.startArea;
                    this.moveArea = old.moveArea;
                    this.finishArea = old.finishArea;
                    this.rankPoint = old.rankPoint;
                    this.advance = old.advance;
                    this.totleTime = old.totleTime;
                    this.countTime = old.countTime;
                    this.gameTime = old.gameTime;
                    this.gameStatus = old.gameStatus;
                    this.countDown = old.countDown;
                    this.nowTime = old.nowTime;
                    this.endTime = old.endTime;
                    this.gameScene = old.gameScene;
                };
                GlassBridgerConfigBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                GlassBridgerConfigBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                GlassBridgerConfigBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                GlassBridgerConfigBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                GlassBridgerConfigBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                GlassBridgerConfigBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                GlassBridgerConfigBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                GlassBridgerConfigBase.versition = 0;
                GlassBridgerConfigBase.params = ["id", "desc", "players", "stepDis", "dropHeigth", "startArea", "moveArea", "finishArea", "rankPoint", "advance", "totleTime", "countTime", "gameTime", "gameStatus", "countDown", "nowTime", "endTime", "gameScene",];
                return GlassBridgerConfigBase;
            }(ExcelDataBase_27.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(GlassBridgerConfigBase);
        }
    };
});
System.register("HallConfigBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_28, context_28) {
    "use strict";
    var ExcelDataBase_28, Map_28, HallConfigBase;
    var __moduleName = context_28 && context_28.id;
    return {
        setters: [
            function (ExcelDataBase_28_1) {
                ExcelDataBase_28 = ExcelDataBase_28_1;
            },
            function (Map_28_1) {
                Map_28 = Map_28_1;
            }
        ],
        execute: function () {
            exports_28("HallConfigBase", HallConfigBase = /** @class */ (function (_super) {
                __extends(HallConfigBase, _super);
                function HallConfigBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(HallConfigBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_28.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                HallConfigBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new HallConfigBase();
                        baseData.id = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.players = br.readUTFBytes();
                        baseData.gameConfig = br.readUTFBytes();
                        baseData.hallStatus = br.readByte();
                        baseData.maxPlayer = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                HallConfigBase.clone = function (old) {
                    var clone = new HallConfigBase();
                    clone.id = old.id;
                    clone.desc = old.desc;
                    clone.players = old.players;
                    clone.gameConfig = old.gameConfig;
                    clone.hallStatus = old.hallStatus;
                    clone.maxPlayer = old.maxPlayer;
                    return clone;
                };
                HallConfigBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.desc = old.desc;
                    this.players = old.players;
                    this.gameConfig = old.gameConfig;
                    this.hallStatus = old.hallStatus;
                    this.maxPlayer = old.maxPlayer;
                };
                HallConfigBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                HallConfigBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                HallConfigBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                HallConfigBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                HallConfigBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                HallConfigBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                HallConfigBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                HallConfigBase.versition = 0;
                HallConfigBase.params = ["id", "desc", "players", "gameConfig", "hallStatus", "maxPlayer",];
                return HallConfigBase;
            }(ExcelDataBase_28.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(HallConfigBase);
        }
    };
});
System.register("ItemBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_29, context_29) {
    "use strict";
    var ExcelDataBase_29, Map_29, ItemBase;
    var __moduleName = context_29 && context_29.id;
    return {
        setters: [
            function (ExcelDataBase_29_1) {
                ExcelDataBase_29 = ExcelDataBase_29_1;
            },
            function (Map_29_1) {
                Map_29 = Map_29_1;
            }
        ],
        execute: function () {
            exports_29("ItemBase", ItemBase = /** @class */ (function (_super) {
                __extends(ItemBase, _super);
                function ItemBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ItemBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_29.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                ItemBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new ItemBase();
                        baseData.id = br.readUInt32();
                        baseData.itemName = br.readUTFBytes();
                        baseData.icon = br.readUTFBytes();
                        baseData.model = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.effect = br.readUTFBytes();
                        baseData.itemType = br.readInt32();
                        baseData.itemSetpos = br.readInt32();
                        baseData.status = br.readUTFBytes();
                        baseData.maxNum = br.readInt32();
                        baseData.lv = br.readInt32();
                        baseData.rera = br.readInt32();
                        baseData.quality = br.readInt32();
                        baseData.currency = br.readUTFBytes();
                        baseData.showCurrency = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                ItemBase.clone = function (old) {
                    var clone = new ItemBase();
                    clone.id = old.id;
                    clone.itemName = old.itemName;
                    clone.icon = old.icon;
                    clone.model = old.model;
                    clone.desc = old.desc;
                    clone.effect = old.effect;
                    clone.itemType = old.itemType;
                    clone.itemSetpos = old.itemSetpos;
                    clone.status = old.status;
                    clone.maxNum = old.maxNum;
                    clone.lv = old.lv;
                    clone.rera = old.rera;
                    clone.quality = old.quality;
                    clone.currency = old.currency;
                    clone.showCurrency = old.showCurrency;
                    return clone;
                };
                ItemBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.itemName = old.itemName;
                    this.icon = old.icon;
                    this.model = old.model;
                    this.desc = old.desc;
                    this.effect = old.effect;
                    this.itemType = old.itemType;
                    this.itemSetpos = old.itemSetpos;
                    this.status = old.status;
                    this.maxNum = old.maxNum;
                    this.lv = old.lv;
                    this.rera = old.rera;
                    this.quality = old.quality;
                    this.currency = old.currency;
                    this.showCurrency = old.showCurrency;
                };
                ItemBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                ItemBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                ItemBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                ItemBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                ItemBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                ItemBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                ItemBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                ItemBase.versition = 0;
                ItemBase.params = ["id", "itemName", "icon", "model", "desc", "effect", "itemType", "itemSetpos", "status", "maxNum", "lv", "rera", "quality", "currency", "showCurrency",];
                return ItemBase;
            }(ExcelDataBase_29.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(ItemBase);
        }
    };
});
System.register("ItemData", ["Data/ExcelDataBase", "Data/Map"], function (exports_30, context_30) {
    "use strict";
    var ExcelDataBase_30, Map_30, ItemData;
    var __moduleName = context_30 && context_30.id;
    return {
        setters: [
            function (ExcelDataBase_30_1) {
                ExcelDataBase_30 = ExcelDataBase_30_1;
            },
            function (Map_30_1) {
                Map_30 = Map_30_1;
            }
        ],
        execute: function () {
            exports_30("ItemData", ItemData = /** @class */ (function (_super) {
                __extends(ItemData, _super);
                function ItemData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ItemData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_30.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                ItemData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new ItemData();
                        baseData.id = br.readUTFBytes();
                        baseData.itemName = br.readUTFBytes();
                        baseData.baseId = br.readUInt32();
                        baseData.count = br.readUInt32();
                        baseData.maxNum = br.readUInt32();
                        baseData.fromWhere = br.readUTFBytes();
                        baseData.buyCurrency = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.icon = br.readUTFBytes();
                        baseData.model = br.readUTFBytes();
                        baseData.itemType = br.readInt32();
                        baseData.itemSetpos = br.readInt32();
                        baseData.effect = br.readUTFBytes();
                        baseData.status = br.readUTFBytes();
                        baseData.lv = br.readInt32();
                        baseData.rera = br.readInt32();
                        baseData.quality = br.readInt32();
                        baseData.playerUuid = br.readUTFBytes();
                        baseData.getTime = br.readDouble();
                        this.list.set(baseData.id, baseData);
                    }
                };
                ItemData.clone = function (old) {
                    var clone = new ItemData();
                    clone.id = old.id;
                    clone.itemName = old.itemName;
                    clone.baseId = old.baseId;
                    clone.count = old.count;
                    clone.maxNum = old.maxNum;
                    clone.fromWhere = old.fromWhere;
                    clone.buyCurrency = old.buyCurrency;
                    clone.desc = old.desc;
                    clone.icon = old.icon;
                    clone.model = old.model;
                    clone.itemType = old.itemType;
                    clone.itemSetpos = old.itemSetpos;
                    clone.effect = old.effect;
                    clone.status = old.status;
                    clone.lv = old.lv;
                    clone.rera = old.rera;
                    clone.quality = old.quality;
                    clone.playerUuid = old.playerUuid;
                    clone.getTime = old.getTime;
                    return clone;
                };
                ItemData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.itemName = old.itemName;
                    this.baseId = old.baseId;
                    this.count = old.count;
                    this.maxNum = old.maxNum;
                    this.fromWhere = old.fromWhere;
                    this.buyCurrency = old.buyCurrency;
                    this.desc = old.desc;
                    this.icon = old.icon;
                    this.model = old.model;
                    this.itemType = old.itemType;
                    this.itemSetpos = old.itemSetpos;
                    this.effect = old.effect;
                    this.status = old.status;
                    this.lv = old.lv;
                    this.rera = old.rera;
                    this.quality = old.quality;
                    this.playerUuid = old.playerUuid;
                    this.getTime = old.getTime;
                };
                ItemData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                ItemData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                ItemData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                ItemData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                ItemData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                ItemData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                ItemData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                ItemData.versition = 0;
                ItemData.params = ["id", "itemName", "baseId", "count", "maxNum", "fromWhere", "buyCurrency", "desc", "icon", "model", "itemType", "itemSetpos", "effect", "status", "lv", "rera", "quality", "playerUuid", "getTime",];
                return ItemData;
            }(ExcelDataBase_30.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(ItemData);
        }
    };
});
System.register("ItemLog", ["Data/ExcelDataBase", "Data/Map"], function (exports_31, context_31) {
    "use strict";
    var ExcelDataBase_31, Map_31, ItemLog;
    var __moduleName = context_31 && context_31.id;
    return {
        setters: [
            function (ExcelDataBase_31_1) {
                ExcelDataBase_31 = ExcelDataBase_31_1;
            },
            function (Map_31_1) {
                Map_31 = Map_31_1;
            }
        ],
        execute: function () {
            exports_31("ItemLog", ItemLog = /** @class */ (function (_super) {
                __extends(ItemLog, _super);
                function ItemLog() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ItemLog, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_31.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                ItemLog.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new ItemLog();
                        baseData.id = br.readUTFBytes();
                        baseData.itemName = br.readUTFBytes();
                        baseData.dataId = br.readUTFBytes();
                        baseData.count = br.readUInt32();
                        baseData.buyCurrency = br.readUTFBytes();
                        baseData.playerUuid = br.readUTFBytes();
                        baseData.useTime = br.readDouble();
                        baseData.useType = br.readByte();
                        this.list.set(baseData.id, baseData);
                    }
                };
                ItemLog.clone = function (old) {
                    var clone = new ItemLog();
                    clone.id = old.id;
                    clone.itemName = old.itemName;
                    clone.dataId = old.dataId;
                    clone.count = old.count;
                    clone.buyCurrency = old.buyCurrency;
                    clone.playerUuid = old.playerUuid;
                    clone.useTime = old.useTime;
                    clone.useType = old.useType;
                    return clone;
                };
                ItemLog.prototype.clone = function (old) {
                    this.id = old.id;
                    this.itemName = old.itemName;
                    this.dataId = old.dataId;
                    this.count = old.count;
                    this.buyCurrency = old.buyCurrency;
                    this.playerUuid = old.playerUuid;
                    this.useTime = old.useTime;
                    this.useType = old.useType;
                };
                ItemLog.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                ItemLog.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                ItemLog.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                ItemLog.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                ItemLog.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                ItemLog.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                ItemLog.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                ItemLog.versition = 0;
                ItemLog.params = ["id", "itemName", "dataId", "count", "buyCurrency", "playerUuid", "useTime", "useType",];
                return ItemLog;
            }(ExcelDataBase_31.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(ItemLog);
        }
    };
});
System.register("LoginLogBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_32, context_32) {
    "use strict";
    var ExcelDataBase_32, Map_32, LoginLogBase;
    var __moduleName = context_32 && context_32.id;
    return {
        setters: [
            function (ExcelDataBase_32_1) {
                ExcelDataBase_32 = ExcelDataBase_32_1;
            },
            function (Map_32_1) {
                Map_32 = Map_32_1;
            }
        ],
        execute: function () {
            exports_32("LoginLogBase", LoginLogBase = /** @class */ (function (_super) {
                __extends(LoginLogBase, _super);
                function LoginLogBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(LoginLogBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_32.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                LoginLogBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new LoginLogBase();
                        baseData.id = br.readUTFBytes();
                        baseData.token = br.readUTFBytes();
                        baseData.loginTime = br.readDouble();
                        baseData.status = br.readByte();
                        this.list.set(baseData.id, baseData);
                    }
                };
                LoginLogBase.clone = function (old) {
                    var clone = new LoginLogBase();
                    clone.id = old.id;
                    clone.token = old.token;
                    clone.loginTime = old.loginTime;
                    clone.status = old.status;
                    return clone;
                };
                LoginLogBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.token = old.token;
                    this.loginTime = old.loginTime;
                    this.status = old.status;
                };
                LoginLogBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                LoginLogBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                LoginLogBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                LoginLogBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                LoginLogBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                LoginLogBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                LoginLogBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                LoginLogBase.versition = 0;
                LoginLogBase.params = ["id", "token", "loginTime", "status",];
                return LoginLogBase;
            }(ExcelDataBase_32.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(LoginLogBase);
        }
    };
});
System.register("MailData", ["Data/ExcelDataBase", "Data/Map"], function (exports_33, context_33) {
    "use strict";
    var ExcelDataBase_33, Map_33, MailData;
    var __moduleName = context_33 && context_33.id;
    return {
        setters: [
            function (ExcelDataBase_33_1) {
                ExcelDataBase_33 = ExcelDataBase_33_1;
            },
            function (Map_33_1) {
                Map_33 = Map_33_1;
            }
        ],
        execute: function () {
            exports_33("MailData", MailData = /** @class */ (function (_super) {
                __extends(MailData, _super);
                function MailData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(MailData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_33.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                MailData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new MailData();
                        baseData.id = br.readUTFBytes();
                        baseData.mailType = br.readUInt32();
                        baseData.mailFrom = br.readUTFBytes();
                        baseData.mailTo = br.readUTFBytes();
                        baseData.mailTitle = br.readUTFBytes();
                        baseData.mailContent = br.readUTFBytes();
                        baseData.items = br.readUTFBytes();
                        baseData.sendTime = br.readDouble();
                        baseData.expires = br.readULong();
                        baseData.visible = br.readBoolean();
                        this.list.set(baseData.id, baseData);
                    }
                };
                MailData.clone = function (old) {
                    var clone = new MailData();
                    clone.id = old.id;
                    clone.mailType = old.mailType;
                    clone.mailFrom = old.mailFrom;
                    clone.mailTo = old.mailTo;
                    clone.mailTitle = old.mailTitle;
                    clone.mailContent = old.mailContent;
                    clone.items = old.items;
                    clone.sendTime = old.sendTime;
                    clone.expires = old.expires;
                    clone.visible = old.visible;
                    return clone;
                };
                MailData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.mailType = old.mailType;
                    this.mailFrom = old.mailFrom;
                    this.mailTo = old.mailTo;
                    this.mailTitle = old.mailTitle;
                    this.mailContent = old.mailContent;
                    this.items = old.items;
                    this.sendTime = old.sendTime;
                    this.expires = old.expires;
                    this.visible = old.visible;
                };
                MailData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                MailData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                MailData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                MailData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                MailData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                MailData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                MailData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                MailData.versition = 0;
                MailData.params = ["id", "mailType", "mailFrom", "mailTo", "mailTitle", "mailContent", "items", "sendTime", "expires", "visible",];
                return MailData;
            }(ExcelDataBase_33.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(MailData);
        }
    };
});
System.register("MarblesConfigBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_34, context_34) {
    "use strict";
    var ExcelDataBase_34, Map_34, MarblesConfigBase;
    var __moduleName = context_34 && context_34.id;
    return {
        setters: [
            function (ExcelDataBase_34_1) {
                ExcelDataBase_34 = ExcelDataBase_34_1;
            },
            function (Map_34_1) {
                Map_34 = Map_34_1;
            }
        ],
        execute: function () {
            exports_34("MarblesConfigBase", MarblesConfigBase = /** @class */ (function (_super) {
                __extends(MarblesConfigBase, _super);
                function MarblesConfigBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(MarblesConfigBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_34.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                MarblesConfigBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new MarblesConfigBase();
                        baseData.id = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.players = br.readUTFBytes();
                        baseData.stepDis = br.readFloat();
                        baseData.dropHeigth = br.readFloat();
                        baseData.startArea = br.readUTFBytes();
                        baseData.moveArea = br.readUTFBytes();
                        baseData.throwArea = br.readUTFBytes();
                        baseData.countArea = br.readUTFBytes();
                        baseData.dropPoint = br.readUTFBytes();
                        baseData.scatter = br.readFloat();
                        baseData.maxPower = br.readInt32();
                        baseData.betTime = br.readInt32();
                        baseData.endTimeMin = br.readInt32();
                        baseData.endTimeMax = br.readInt32();
                        baseData.advance = br.readInt32();
                        baseData.totleTime = br.readInt32();
                        baseData.countTime = br.readInt32();
                        baseData.gameTime = br.readULong();
                        baseData.gameStatus = br.readByte();
                        baseData.countDown = br.readULong();
                        baseData.nowTime = br.readDouble();
                        baseData.endTime = br.readDouble();
                        baseData.gameScene = br.readUInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                MarblesConfigBase.clone = function (old) {
                    var clone = new MarblesConfigBase();
                    clone.id = old.id;
                    clone.desc = old.desc;
                    clone.players = old.players;
                    clone.stepDis = old.stepDis;
                    clone.dropHeigth = old.dropHeigth;
                    clone.startArea = old.startArea;
                    clone.moveArea = old.moveArea;
                    clone.throwArea = old.throwArea;
                    clone.countArea = old.countArea;
                    clone.dropPoint = old.dropPoint;
                    clone.scatter = old.scatter;
                    clone.maxPower = old.maxPower;
                    clone.betTime = old.betTime;
                    clone.endTimeMin = old.endTimeMin;
                    clone.endTimeMax = old.endTimeMax;
                    clone.advance = old.advance;
                    clone.totleTime = old.totleTime;
                    clone.countTime = old.countTime;
                    clone.gameTime = old.gameTime;
                    clone.gameStatus = old.gameStatus;
                    clone.countDown = old.countDown;
                    clone.nowTime = old.nowTime;
                    clone.endTime = old.endTime;
                    clone.gameScene = old.gameScene;
                    return clone;
                };
                MarblesConfigBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.desc = old.desc;
                    this.players = old.players;
                    this.stepDis = old.stepDis;
                    this.dropHeigth = old.dropHeigth;
                    this.startArea = old.startArea;
                    this.moveArea = old.moveArea;
                    this.throwArea = old.throwArea;
                    this.countArea = old.countArea;
                    this.dropPoint = old.dropPoint;
                    this.scatter = old.scatter;
                    this.maxPower = old.maxPower;
                    this.betTime = old.betTime;
                    this.endTimeMin = old.endTimeMin;
                    this.endTimeMax = old.endTimeMax;
                    this.advance = old.advance;
                    this.totleTime = old.totleTime;
                    this.countTime = old.countTime;
                    this.gameTime = old.gameTime;
                    this.gameStatus = old.gameStatus;
                    this.countDown = old.countDown;
                    this.nowTime = old.nowTime;
                    this.endTime = old.endTime;
                    this.gameScene = old.gameScene;
                };
                MarblesConfigBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                MarblesConfigBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                MarblesConfigBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                MarblesConfigBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                MarblesConfigBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                MarblesConfigBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                MarblesConfigBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                MarblesConfigBase.versition = 0;
                MarblesConfigBase.params = ["id", "desc", "players", "stepDis", "dropHeigth", "startArea", "moveArea", "throwArea", "countArea", "dropPoint", "scatter", "maxPower", "betTime", "endTimeMin", "endTimeMax", "advance", "totleTime", "countTime", "gameTime", "gameStatus", "countDown", "nowTime", "endTime", "gameScene",];
                return MarblesConfigBase;
            }(ExcelDataBase_34.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(MarblesConfigBase);
        }
    };
});
System.register("MarblesData", ["Data/ExcelDataBase", "Data/Map"], function (exports_35, context_35) {
    "use strict";
    var ExcelDataBase_35, Map_35, MarblesData;
    var __moduleName = context_35 && context_35.id;
    return {
        setters: [
            function (ExcelDataBase_35_1) {
                ExcelDataBase_35 = ExcelDataBase_35_1;
            },
            function (Map_35_1) {
                Map_35 = Map_35_1;
            }
        ],
        execute: function () {
            exports_35("MarblesData", MarblesData = /** @class */ (function (_super) {
                __extends(MarblesData, _super);
                function MarblesData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(MarblesData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_35.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                MarblesData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new MarblesData();
                        baseData.id = br.readUTFBytes();
                        baseData.OddNumber = br.readInt32();
                        baseData.evenNumber = br.readInt32();
                        baseData.dropPoint = br.readUTFBytes();
                        baseData.dropNum = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                MarblesData.clone = function (old) {
                    var clone = new MarblesData();
                    clone.id = old.id;
                    clone.OddNumber = old.OddNumber;
                    clone.evenNumber = old.evenNumber;
                    clone.dropPoint = old.dropPoint;
                    clone.dropNum = old.dropNum;
                    return clone;
                };
                MarblesData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.OddNumber = old.OddNumber;
                    this.evenNumber = old.evenNumber;
                    this.dropPoint = old.dropPoint;
                    this.dropNum = old.dropNum;
                };
                MarblesData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                MarblesData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                MarblesData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                MarblesData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                MarblesData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                MarblesData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                MarblesData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                MarblesData.versition = 0;
                MarblesData.params = ["id", "OddNumber", "evenNumber", "dropPoint", "dropNum",];
                return MarblesData;
            }(ExcelDataBase_35.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(MarblesData);
        }
    };
});
System.register("MonthlyRank", ["Data/ExcelDataBase", "Data/Map"], function (exports_36, context_36) {
    "use strict";
    var ExcelDataBase_36, Map_36, MonthlyRank;
    var __moduleName = context_36 && context_36.id;
    return {
        setters: [
            function (ExcelDataBase_36_1) {
                ExcelDataBase_36 = ExcelDataBase_36_1;
            },
            function (Map_36_1) {
                Map_36 = Map_36_1;
            }
        ],
        execute: function () {
            exports_36("MonthlyRank", MonthlyRank = /** @class */ (function (_super) {
                __extends(MonthlyRank, _super);
                function MonthlyRank() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(MonthlyRank, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_36.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                MonthlyRank.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new MonthlyRank();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.totalPage = br.readInt32();
                        baseData.selfRank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                MonthlyRank.clone = function (old) {
                    var clone = new MonthlyRank();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.totalPage = old.totalPage;
                    clone.selfRank = old.selfRank;
                    return clone;
                };
                MonthlyRank.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.totalPage = old.totalPage;
                    this.selfRank = old.selfRank;
                };
                MonthlyRank.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                MonthlyRank.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                MonthlyRank.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                MonthlyRank.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                MonthlyRank.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                MonthlyRank.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                MonthlyRank.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                MonthlyRank.versition = 0;
                MonthlyRank.params = ["id", "point", "win", "lose", "total", "totalPage", "selfRank",];
                return MonthlyRank;
            }(ExcelDataBase_36.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(MonthlyRank);
        }
    };
});
System.register("MonthlyRankLast", ["Data/ExcelDataBase", "Data/Map"], function (exports_37, context_37) {
    "use strict";
    var ExcelDataBase_37, Map_37, MonthlyRankLast;
    var __moduleName = context_37 && context_37.id;
    return {
        setters: [
            function (ExcelDataBase_37_1) {
                ExcelDataBase_37 = ExcelDataBase_37_1;
            },
            function (Map_37_1) {
                Map_37 = Map_37_1;
            }
        ],
        execute: function () {
            exports_37("MonthlyRankLast", MonthlyRankLast = /** @class */ (function (_super) {
                __extends(MonthlyRankLast, _super);
                function MonthlyRankLast() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(MonthlyRankLast, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_37.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                MonthlyRankLast.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new MonthlyRankLast();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.resultTime = br.readDouble();
                        baseData.rank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                MonthlyRankLast.clone = function (old) {
                    var clone = new MonthlyRankLast();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.resultTime = old.resultTime;
                    clone.rank = old.rank;
                    return clone;
                };
                MonthlyRankLast.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.resultTime = old.resultTime;
                    this.rank = old.rank;
                };
                MonthlyRankLast.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                MonthlyRankLast.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                MonthlyRankLast.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                MonthlyRankLast.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                MonthlyRankLast.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                MonthlyRankLast.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                MonthlyRankLast.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                MonthlyRankLast.versition = 0;
                MonthlyRankLast.params = ["id", "point", "win", "lose", "total", "resultTime", "rank",];
                return MonthlyRankLast;
            }(ExcelDataBase_37.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(MonthlyRankLast);
        }
    };
});
System.register("MonthlyRankLog", ["Data/ExcelDataBase", "Data/Map"], function (exports_38, context_38) {
    "use strict";
    var ExcelDataBase_38, Map_38, MonthlyRankLog;
    var __moduleName = context_38 && context_38.id;
    return {
        setters: [
            function (ExcelDataBase_38_1) {
                ExcelDataBase_38 = ExcelDataBase_38_1;
            },
            function (Map_38_1) {
                Map_38 = Map_38_1;
            }
        ],
        execute: function () {
            exports_38("MonthlyRankLog", MonthlyRankLog = /** @class */ (function (_super) {
                __extends(MonthlyRankLog, _super);
                function MonthlyRankLog() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(MonthlyRankLog, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_38.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                MonthlyRankLog.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new MonthlyRankLog();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.resultTime = br.readDouble();
                        baseData.rank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                MonthlyRankLog.clone = function (old) {
                    var clone = new MonthlyRankLog();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.resultTime = old.resultTime;
                    clone.rank = old.rank;
                    return clone;
                };
                MonthlyRankLog.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.resultTime = old.resultTime;
                    this.rank = old.rank;
                };
                MonthlyRankLog.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                MonthlyRankLog.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                MonthlyRankLog.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                MonthlyRankLog.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                MonthlyRankLog.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                MonthlyRankLog.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                MonthlyRankLog.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                MonthlyRankLog.versition = 0;
                MonthlyRankLog.params = ["id", "point", "win", "lose", "total", "resultTime", "rank",];
                return MonthlyRankLog;
            }(ExcelDataBase_38.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(MonthlyRankLog);
        }
    };
});
System.register("Notice", ["Data/ExcelDataBase", "Data/Map"], function (exports_39, context_39) {
    "use strict";
    var ExcelDataBase_39, Map_39, Notice;
    var __moduleName = context_39 && context_39.id;
    return {
        setters: [
            function (ExcelDataBase_39_1) {
                ExcelDataBase_39 = ExcelDataBase_39_1;
            },
            function (Map_39_1) {
                Map_39 = Map_39_1;
            }
        ],
        execute: function () {
            exports_39("Notice", Notice = /** @class */ (function (_super) {
                __extends(Notice, _super);
                function Notice() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(Notice, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_39.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                Notice.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new Notice();
                        baseData.id = br.readUTFBytes();
                        baseData.noticeTitle = br.readUTFBytes();
                        baseData.notice = br.readUTFBytes();
                        baseData.DisplayOnceAday = br.readBoolean();
                        baseData.StartTime = br.readULong();
                        baseData.EndTime = br.readULong();
                        baseData.taskPreviousState = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                Notice.clone = function (old) {
                    var clone = new Notice();
                    clone.id = old.id;
                    clone.noticeTitle = old.noticeTitle;
                    clone.notice = old.notice;
                    clone.DisplayOnceAday = old.DisplayOnceAday;
                    clone.StartTime = old.StartTime;
                    clone.EndTime = old.EndTime;
                    clone.taskPreviousState = old.taskPreviousState;
                    return clone;
                };
                Notice.prototype.clone = function (old) {
                    this.id = old.id;
                    this.noticeTitle = old.noticeTitle;
                    this.notice = old.notice;
                    this.DisplayOnceAday = old.DisplayOnceAday;
                    this.StartTime = old.StartTime;
                    this.EndTime = old.EndTime;
                    this.taskPreviousState = old.taskPreviousState;
                };
                Notice.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                Notice.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                Notice.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                Notice.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                Notice.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                Notice.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                Notice.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                Notice.versition = 0;
                Notice.params = ["id", "noticeTitle", "notice", "DisplayOnceAday", "StartTime", "EndTime", "taskPreviousState",];
                return Notice;
            }(ExcelDataBase_39.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(Notice);
        }
    };
});
System.register("PKConfigBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_40, context_40) {
    "use strict";
    var ExcelDataBase_40, Map_40, PKConfigBase;
    var __moduleName = context_40 && context_40.id;
    return {
        setters: [
            function (ExcelDataBase_40_1) {
                ExcelDataBase_40 = ExcelDataBase_40_1;
            },
            function (Map_40_1) {
                Map_40 = Map_40_1;
            }
        ],
        execute: function () {
            exports_40("PKConfigBase", PKConfigBase = /** @class */ (function (_super) {
                __extends(PKConfigBase, _super);
                function PKConfigBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(PKConfigBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_40.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                PKConfigBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new PKConfigBase();
                        baseData.id = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.players = (function () { var cache = []; var len = br.readUInt32(); for (var i_5 = 0; i_5 < len; i_5++) {
                            cache.push(br.readUTFBytes());
                        } return cache; })();
                        baseData.playerPos = (function () { var cache = []; var len = br.readUInt32(); for (var i_6 = 0; i_6 < len; i_6++) {
                            cache.push(br.readFloat());
                        } return cache; })();
                        baseData.items = (function () { var cache = []; var len = br.readUInt32(); for (var i_7 = 0; i_7 < len; i_7++) {
                            cache.push(br.readUTFBytes());
                        } return cache; })();
                        baseData.itemPos = (function () { var cache = []; var len = br.readUInt32(); for (var i_8 = 0; i_8 < len; i_8++) {
                            cache.push(br.readFloat());
                        } return cache; })();
                        baseData.nowTime = br.readDouble();
                        baseData.endTime = br.readDouble();
                        baseData.gameScene = br.readUInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                PKConfigBase.clone = function (old) {
                    var clone = new PKConfigBase();
                    clone.id = old.id;
                    clone.desc = old.desc;
                    clone.players = old.players;
                    clone.playerPos = old.playerPos;
                    clone.items = old.items;
                    clone.itemPos = old.itemPos;
                    clone.nowTime = old.nowTime;
                    clone.endTime = old.endTime;
                    clone.gameScene = old.gameScene;
                    return clone;
                };
                PKConfigBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.desc = old.desc;
                    this.players = old.players;
                    this.playerPos = old.playerPos;
                    this.items = old.items;
                    this.itemPos = old.itemPos;
                    this.nowTime = old.nowTime;
                    this.endTime = old.endTime;
                    this.gameScene = old.gameScene;
                };
                PKConfigBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                PKConfigBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                PKConfigBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                PKConfigBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                PKConfigBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                PKConfigBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                PKConfigBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                PKConfigBase.versition = 0;
                PKConfigBase.params = ["id", "desc", "players", "playerPos", "items", "itemPos", "nowTime", "endTime", "gameScene",];
                return PKConfigBase;
            }(ExcelDataBase_40.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(PKConfigBase);
        }
    };
});
System.register("PlayerIcon", ["Data/ExcelDataBase", "Data/Map"], function (exports_41, context_41) {
    "use strict";
    var ExcelDataBase_41, Map_41, PlayerIcon;
    var __moduleName = context_41 && context_41.id;
    return {
        setters: [
            function (ExcelDataBase_41_1) {
                ExcelDataBase_41 = ExcelDataBase_41_1;
            },
            function (Map_41_1) {
                Map_41 = Map_41_1;
            }
        ],
        execute: function () {
            exports_41("PlayerIcon", PlayerIcon = /** @class */ (function (_super) {
                __extends(PlayerIcon, _super);
                function PlayerIcon() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(PlayerIcon, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_41.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                PlayerIcon.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new PlayerIcon();
                        baseData.id = br.readUTFBytes();
                        baseData.icon = br.readUTFBytes();
                        baseData.visible = br.readBoolean();
                        this.list.set(baseData.id, baseData);
                    }
                };
                PlayerIcon.clone = function (old) {
                    var clone = new PlayerIcon();
                    clone.id = old.id;
                    clone.icon = old.icon;
                    clone.visible = old.visible;
                    return clone;
                };
                PlayerIcon.prototype.clone = function (old) {
                    this.id = old.id;
                    this.icon = old.icon;
                    this.visible = old.visible;
                };
                PlayerIcon.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                PlayerIcon.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                PlayerIcon.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                PlayerIcon.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                PlayerIcon.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                PlayerIcon.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                PlayerIcon.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                PlayerIcon.versition = 0;
                PlayerIcon.params = ["id", "icon", "visible",];
                return PlayerIcon;
            }(ExcelDataBase_41.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(PlayerIcon);
        }
    };
});
System.register("ResultBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_42, context_42) {
    "use strict";
    var ExcelDataBase_42, Map_42, ResultBase;
    var __moduleName = context_42 && context_42.id;
    return {
        setters: [
            function (ExcelDataBase_42_1) {
                ExcelDataBase_42 = ExcelDataBase_42_1;
            },
            function (Map_42_1) {
                Map_42 = Map_42_1;
            }
        ],
        execute: function () {
            exports_42("ResultBase", ResultBase = /** @class */ (function (_super) {
                __extends(ResultBase, _super);
                function ResultBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ResultBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_42.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                ResultBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new ResultBase();
                        baseData.id = br.readUTFBytes();
                        baseData.gameId = br.readUTFBytes();
                        baseData.winers = br.readUTFBytes();
                        baseData.losers = br.readUTFBytes();
                        baseData.resultTime = br.readDouble();
                        this.list.set(baseData.id, baseData);
                    }
                };
                ResultBase.clone = function (old) {
                    var clone = new ResultBase();
                    clone.id = old.id;
                    clone.gameId = old.gameId;
                    clone.winers = old.winers;
                    clone.losers = old.losers;
                    clone.resultTime = old.resultTime;
                    return clone;
                };
                ResultBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.gameId = old.gameId;
                    this.winers = old.winers;
                    this.losers = old.losers;
                    this.resultTime = old.resultTime;
                };
                ResultBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                ResultBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                ResultBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                ResultBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                ResultBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                ResultBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                ResultBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                ResultBase.versition = 0;
                ResultBase.params = ["id", "gameId", "winers", "losers", "resultTime",];
                return ResultBase;
            }(ExcelDataBase_42.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(ResultBase);
        }
    };
});
System.register("RoleBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_43, context_43) {
    "use strict";
    var ExcelDataBase_43, Map_43, RoleBase;
    var __moduleName = context_43 && context_43.id;
    return {
        setters: [
            function (ExcelDataBase_43_1) {
                ExcelDataBase_43 = ExcelDataBase_43_1;
            },
            function (Map_43_1) {
                Map_43 = Map_43_1;
            }
        ],
        execute: function () {
            exports_43("RoleBase", RoleBase = /** @class */ (function (_super) {
                __extends(RoleBase, _super);
                function RoleBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(RoleBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_43.cMap();
                    } ; return this._list; },
                    enumerable: false,
                    configurable: true
                });
                ;
                RoleBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new RoleBase();
                        baseData.id = br.readUInt32();
                        baseData.name = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.bodyScale = br.readFloat();
                        baseData.walkOutDelay = br.readUInt32();
                        baseData.standOutDelay = br.readUInt32();
                        baseData.runOutDelay = br.readUInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                RoleBase.clone = function (old) {
                    var clone = new RoleBase();
                    clone.id = old.id;
                    clone.name = old.name;
                    clone.desc = old.desc;
                    clone.bodyScale = old.bodyScale;
                    clone.walkOutDelay = old.walkOutDelay;
                    clone.standOutDelay = old.standOutDelay;
                    clone.runOutDelay = old.runOutDelay;
                    return clone;
                };
                RoleBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                RoleBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                RoleBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                RoleBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                RoleBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                RoleBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                RoleBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                RoleBase.versition = 0;
                RoleBase.params = ["id", "name", "desc", "bodyScale", "walkOutDelay ", "standOutDelay ", "runOutDelay ",];
                return RoleBase;
            }(ExcelDataBase_43.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(RoleBase);
        }
    };
});
System.register("SceneBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_44, context_44) {
    "use strict";
    var ExcelDataBase_44, Map_44, SceneBase;
    var __moduleName = context_44 && context_44.id;
    return {
        setters: [
            function (ExcelDataBase_44_1) {
                ExcelDataBase_44 = ExcelDataBase_44_1;
            },
            function (Map_44_1) {
                Map_44 = Map_44_1;
            }
        ],
        execute: function () {
            exports_44("SceneBase", SceneBase = /** @class */ (function (_super) {
                __extends(SceneBase, _super);
                function SceneBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(SceneBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_44.cMap();
                    } ; return this._list; },
                    enumerable: false,
                    configurable: true
                });
                ;
                SceneBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new SceneBase();
                        baseData.id = br.readUInt32();
                        baseData.severName = br.readUTFBytes();
                        baseData.name = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.type = br.readByte();
                        baseData.camPos = br.readVector3();
                        baseData.camEuler = br.readVector3();
                        baseData.camFOV = br.readFloat();
                        baseData.camFar = br.readFloat();
                        baseData.camNear = br.readFloat();
                        baseData.tiltAngle = br.readFloat();
                        baseData.panAngle = br.readFloat();
                        baseData.roleAngle = br.readFloat();
                        baseData.enableFog = br.readBoolean();
                        baseData.fogColor = br.readVector3();
                        baseData.fogStart = br.readFloat();
                        baseData.fogEnd = br.readFloat();
                        baseData.obstacleRes = br.readUTFBytes();
                        baseData.sceneScale = br.readVector3();
                        baseData.camDistance = br.readFloat();
                        baseData.camViewOffset = br.readVector3();
                        baseData.camAvoidObs = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                SceneBase.clone = function (old) {
                    var clone = new SceneBase();
                    clone.id = old.id;
                    clone.severName = old.severName;
                    clone.name = old.name;
                    clone.desc = old.desc;
                    clone.type = old.type;
                    clone.camPos = old.camPos;
                    clone.camEuler = old.camEuler;
                    clone.camFOV = old.camFOV;
                    clone.camFar = old.camFar;
                    clone.camNear = old.camNear;
                    clone.tiltAngle = old.tiltAngle;
                    clone.panAngle = old.panAngle;
                    clone.roleAngle = old.roleAngle;
                    clone.enableFog = old.enableFog;
                    clone.fogColor = old.fogColor;
                    clone.fogStart = old.fogStart;
                    clone.fogEnd = old.fogEnd;
                    clone.obstacleRes = old.obstacleRes;
                    clone.sceneScale = old.sceneScale;
                    clone.camDistance = old.camDistance;
                    clone.camViewOffset = old.camViewOffset;
                    clone.camAvoidObs = old.camAvoidObs;
                    return clone;
                };
                SceneBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                SceneBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                SceneBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                SceneBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                SceneBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                SceneBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                SceneBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                SceneBase.versition = 0;
                SceneBase.params = ["id", "severName", "name", "desc", "type", "camPos", "camEuler", "camFOV", "camFar", "camNear", "tiltAngle", "panAngle", "roleAngle", "enableFog", "fogColor", "fogStart", "fogEnd", "obstacleRes", "sceneScale", "camDistance", "camViewOffset", "camAvoidObs",];
                return SceneBase;
            }(ExcelDataBase_44.ExcelDataBase)));
            if (!m4m.__ExcDate__)
                m4m.__ExcDate__ = {};
            if (!m4m.__ExcDate__.__list)
                m4m.__ExcDate__.__list = [];
            m4m.__ExcDate__.__list.push(SceneBase);
        }
    };
});
System.register("SettingBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_45, context_45) {
    "use strict";
    var ExcelDataBase_45, Map_45, SettingBase;
    var __moduleName = context_45 && context_45.id;
    return {
        setters: [
            function (ExcelDataBase_45_1) {
                ExcelDataBase_45 = ExcelDataBase_45_1;
            },
            function (Map_45_1) {
                Map_45 = Map_45_1;
            }
        ],
        execute: function () {
            exports_45("SettingBase", SettingBase = /** @class */ (function (_super) {
                __extends(SettingBase, _super);
                function SettingBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(SettingBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_45.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                SettingBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new SettingBase();
                        baseData.id = br.readUTFBytes();
                        baseData.music = br.readInt32();
                        baseData.soundeffect = br.readInt32();
                        baseData.language = br.readInt32();
                        baseData.picturequality = br.readInt32();
                        baseData.Invitefriends = br.readBoolean();
                        this.list.set(baseData.id, baseData);
                    }
                };
                SettingBase.clone = function (old) {
                    var clone = new SettingBase();
                    clone.id = old.id;
                    clone.music = old.music;
                    clone.soundeffect = old.soundeffect;
                    clone.language = old.language;
                    clone.picturequality = old.picturequality;
                    clone.Invitefriends = old.Invitefriends;
                    return clone;
                };
                SettingBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.music = old.music;
                    this.soundeffect = old.soundeffect;
                    this.language = old.language;
                    this.picturequality = old.picturequality;
                    this.Invitefriends = old.Invitefriends;
                };
                SettingBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                SettingBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                SettingBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                SettingBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                SettingBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                SettingBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                SettingBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                SettingBase.versition = 0;
                SettingBase.params = ["id", "music", "soundeffect", "language", "picturequality", "Invitefriends",];
                return SettingBase;
            }(ExcelDataBase_45.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(SettingBase);
        }
    };
});
System.register("SettingList", ["Data/ExcelDataBase", "Data/Map"], function (exports_46, context_46) {
    "use strict";
    var ExcelDataBase_46, Map_46, SettingList;
    var __moduleName = context_46 && context_46.id;
    return {
        setters: [
            function (ExcelDataBase_46_1) {
                ExcelDataBase_46 = ExcelDataBase_46_1;
            },
            function (Map_46_1) {
                Map_46 = Map_46_1;
            }
        ],
        execute: function () {
            exports_46("SettingList", SettingList = /** @class */ (function (_super) {
                __extends(SettingList, _super);
                function SettingList() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(SettingList, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_46.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                SettingList.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new SettingList();
                        baseData.id = br.readUInt32();
                        baseData.shopId = br.readInt32();
                        baseData.settingType = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.type = br.readInt32();
                        baseData.value = br.readByte();
                        baseData.status = br.readUTFBytes();
                        baseData.visible = br.readBoolean();
                        this.list.set(baseData.id, baseData);
                    }
                };
                SettingList.clone = function (old) {
                    var clone = new SettingList();
                    clone.id = old.id;
                    clone.shopId = old.shopId;
                    clone.settingType = old.settingType;
                    clone.desc = old.desc;
                    clone.type = old.type;
                    clone.value = old.value;
                    clone.status = old.status;
                    clone.visible = old.visible;
                    return clone;
                };
                SettingList.prototype.clone = function (old) {
                    this.id = old.id;
                    this.shopId = old.shopId;
                    this.settingType = old.settingType;
                    this.desc = old.desc;
                    this.type = old.type;
                    this.value = old.value;
                    this.status = old.status;
                    this.visible = old.visible;
                };
                SettingList.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                SettingList.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                SettingList.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                SettingList.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                SettingList.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                SettingList.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                SettingList.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                SettingList.versition = 0;
                SettingList.params = ["id", "shopId", "settingType", "desc", "type", "value", "status", "visible",];
                return SettingList;
            }(ExcelDataBase_46.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(SettingList);
        }
    };
});
System.register("SeverConfigBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_47, context_47) {
    "use strict";
    var ExcelDataBase_47, Map_47, SeverConfigBase;
    var __moduleName = context_47 && context_47.id;
    return {
        setters: [
            function (ExcelDataBase_47_1) {
                ExcelDataBase_47 = ExcelDataBase_47_1;
            },
            function (Map_47_1) {
                Map_47 = Map_47_1;
            }
        ],
        execute: function () {
            exports_47("SeverConfigBase", SeverConfigBase = /** @class */ (function (_super) {
                __extends(SeverConfigBase, _super);
                function SeverConfigBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(SeverConfigBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_47.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                SeverConfigBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new SeverConfigBase();
                        baseData.id = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.ip = br.readUTFBytes();
                        baseData.gateway = br.readUTFBytes();
                        baseData.MAC = br.readUTFBytes();
                        baseData.setupTime = br.readDouble();
                        baseData.status = br.readByte();
                        baseData.playerSum = br.readUInt32();
                        baseData.isGate = br.readBoolean();
                        baseData.descIP = br.readUTFBytes();
                        baseData.heatbeatLimit = br.readUInt32();
                        baseData.dailyRankMax = br.readUInt32();
                        baseData.weeklyRankMax = br.readUInt32();
                        baseData.monthlyRankMax = br.readUInt32();
                        baseData.dailyPage = br.readUInt32();
                        baseData.weeklyPage = br.readUInt32();
                        baseData.monthlyPage = br.readUInt32();
                        baseData.useWallet = br.readBoolean();
                        this.list.set(baseData.id, baseData);
                    }
                };
                SeverConfigBase.clone = function (old) {
                    var clone = new SeverConfigBase();
                    clone.id = old.id;
                    clone.desc = old.desc;
                    clone.ip = old.ip;
                    clone.gateway = old.gateway;
                    clone.MAC = old.MAC;
                    clone.setupTime = old.setupTime;
                    clone.status = old.status;
                    clone.playerSum = old.playerSum;
                    clone.isGate = old.isGate;
                    clone.descIP = old.descIP;
                    clone.heatbeatLimit = old.heatbeatLimit;
                    clone.dailyRankMax = old.dailyRankMax;
                    clone.weeklyRankMax = old.weeklyRankMax;
                    clone.monthlyRankMax = old.monthlyRankMax;
                    clone.dailyPage = old.dailyPage;
                    clone.weeklyPage = old.weeklyPage;
                    clone.monthlyPage = old.monthlyPage;
                    clone.useWallet = old.useWallet;
                    return clone;
                };
                SeverConfigBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.desc = old.desc;
                    this.ip = old.ip;
                    this.gateway = old.gateway;
                    this.MAC = old.MAC;
                    this.setupTime = old.setupTime;
                    this.status = old.status;
                    this.playerSum = old.playerSum;
                    this.isGate = old.isGate;
                    this.descIP = old.descIP;
                    this.heatbeatLimit = old.heatbeatLimit;
                    this.dailyRankMax = old.dailyRankMax;
                    this.weeklyRankMax = old.weeklyRankMax;
                    this.monthlyRankMax = old.monthlyRankMax;
                    this.dailyPage = old.dailyPage;
                    this.weeklyPage = old.weeklyPage;
                    this.monthlyPage = old.monthlyPage;
                    this.useWallet = old.useWallet;
                };
                SeverConfigBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                SeverConfigBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                SeverConfigBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                SeverConfigBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                SeverConfigBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                SeverConfigBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                SeverConfigBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                SeverConfigBase.versition = 0;
                SeverConfigBase.params = ["id", "desc", "ip", "gateway", "MAC", "setupTime", "status", "playerSum", "isGate", "descIP", "heatbeatLimit", "dailyRankMax", "weeklyRankMax", "monthlyRankMax", "dailyPage", "weeklyPage", "monthlyPage", "useWallet",];
                return SeverConfigBase;
            }(ExcelDataBase_47.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(SeverConfigBase);
        }
    };
});
System.register("ShopList", ["Data/ExcelDataBase", "Data/Map"], function (exports_48, context_48) {
    "use strict";
    var ExcelDataBase_48, Map_48, ShopList;
    var __moduleName = context_48 && context_48.id;
    return {
        setters: [
            function (ExcelDataBase_48_1) {
                ExcelDataBase_48 = ExcelDataBase_48_1;
            },
            function (Map_48_1) {
                Map_48 = Map_48_1;
            }
        ],
        execute: function () {
            exports_48("ShopList", ShopList = /** @class */ (function (_super) {
                __extends(ShopList, _super);
                function ShopList() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ShopList, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_48.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                ShopList.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new ShopList();
                        baseData.id = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.itemData = br.readUTFBytes();
                        baseData.shopType = (function () { var cache = []; var len = br.readUInt32(); for (var i_9 = 0; i_9 < len; i_9++) {
                            cache.push(br.readUTFBytes());
                        } return cache; })();
                        baseData.sellPrice = (function () { var cache = []; var len = br.readUInt32(); for (var i_10 = 0; i_10 < len; i_10++) {
                            cache.push(br.readFloat());
                        } return cache; })();
                        baseData.showPrice = (function () { var cache = []; var len = br.readUInt32(); for (var i_11 = 0; i_11 < len; i_11++) {
                            cache.push(br.readFloat());
                        } return cache; })();
                        baseData.onOff = (function () { var cache = []; var len = br.readUInt32(); for (var i_12 = 0; i_12 < len; i_12++) {
                            cache.push(br.readFloat());
                        } return cache; })();
                        this.list.set(baseData.id, baseData);
                    }
                };
                ShopList.clone = function (old) {
                    var clone = new ShopList();
                    clone.id = old.id;
                    clone.desc = old.desc;
                    clone.itemData = old.itemData;
                    clone.shopType = old.shopType;
                    clone.sellPrice = old.sellPrice;
                    clone.showPrice = old.showPrice;
                    clone.onOff = old.onOff;
                    return clone;
                };
                ShopList.prototype.clone = function (old) {
                    this.id = old.id;
                    this.desc = old.desc;
                    this.itemData = old.itemData;
                    this.shopType = old.shopType;
                    this.sellPrice = old.sellPrice;
                    this.showPrice = old.showPrice;
                    this.onOff = old.onOff;
                };
                ShopList.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                ShopList.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                ShopList.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                ShopList.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                ShopList.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                ShopList.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                ShopList.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                ShopList.versition = 0;
                ShopList.params = ["id", "desc", "itemData", "shopType", "sellPrice", "showPrice", "onOff",];
                return ShopList;
            }(ExcelDataBase_48.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(ShopList);
        }
    };
});
System.register("ShopSet", ["Data/ExcelDataBase", "Data/Map"], function (exports_49, context_49) {
    "use strict";
    var ExcelDataBase_49, Map_49, ShopSet;
    var __moduleName = context_49 && context_49.id;
    return {
        setters: [
            function (ExcelDataBase_49_1) {
                ExcelDataBase_49 = ExcelDataBase_49_1;
            },
            function (Map_49_1) {
                Map_49 = Map_49_1;
            }
        ],
        execute: function () {
            exports_49("ShopSet", ShopSet = /** @class */ (function (_super) {
                __extends(ShopSet, _super);
                function ShopSet() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(ShopSet, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_49.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                ShopSet.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new ShopSet();
                        baseData.id = br.readUTFBytes();
                        baseData.shopId = br.readInt32();
                        baseData.desc = br.readUTFBytes();
                        baseData.itemName = br.readUTFBytes();
                        baseData.goodsList = br.readUInt32();
                        baseData.shopType = (function () { var cache = []; var len = br.readUInt32(); for (var i_13 = 0; i_13 < len; i_13++) {
                            cache.push(br.readUTFBytes());
                        } return cache; })();
                        baseData.sellPrice = (function () { var cache = []; var len = br.readUInt32(); for (var i_14 = 0; i_14 < len; i_14++) {
                            cache.push(br.readFloat());
                        } return cache; })();
                        baseData.showPrice = (function () { var cache = []; var len = br.readUInt32(); for (var i_15 = 0; i_15 < len; i_15++) {
                            cache.push(br.readFloat());
                        } return cache; })();
                        baseData.onOff = (function () { var cache = []; var len = br.readUInt32(); for (var i_16 = 0; i_16 < len; i_16++) {
                            cache.push(br.readFloat());
                        } return cache; })();
                        baseData.visible = br.readBoolean();
                        this.list.set(baseData.id, baseData);
                    }
                };
                ShopSet.clone = function (old) {
                    var clone = new ShopSet();
                    clone.id = old.id;
                    clone.shopId = old.shopId;
                    clone.desc = old.desc;
                    clone.itemName = old.itemName;
                    clone.goodsList = old.goodsList;
                    clone.shopType = old.shopType;
                    clone.sellPrice = old.sellPrice;
                    clone.showPrice = old.showPrice;
                    clone.onOff = old.onOff;
                    clone.visible = old.visible;
                    return clone;
                };
                ShopSet.prototype.clone = function (old) {
                    this.id = old.id;
                    this.shopId = old.shopId;
                    this.desc = old.desc;
                    this.itemName = old.itemName;
                    this.goodsList = old.goodsList;
                    this.shopType = old.shopType;
                    this.sellPrice = old.sellPrice;
                    this.showPrice = old.showPrice;
                    this.onOff = old.onOff;
                    this.visible = old.visible;
                };
                ShopSet.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                ShopSet.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                ShopSet.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                ShopSet.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                ShopSet.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                ShopSet.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                ShopSet.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                ShopSet.versition = 0;
                ShopSet.params = ["id", "shopId", "desc", "itemName", "goodsList", "shopType", "sellPrice", "showPrice", "onOff", "visible",];
                return ShopSet;
            }(ExcelDataBase_49.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(ShopSet);
        }
    };
});
System.register("SquidGameConfigBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_50, context_50) {
    "use strict";
    var ExcelDataBase_50, Map_50, SquidGameConfigBase;
    var __moduleName = context_50 && context_50.id;
    return {
        setters: [
            function (ExcelDataBase_50_1) {
                ExcelDataBase_50 = ExcelDataBase_50_1;
            },
            function (Map_50_1) {
                Map_50 = Map_50_1;
            }
        ],
        execute: function () {
            exports_50("SquidGameConfigBase", SquidGameConfigBase = /** @class */ (function (_super) {
                __extends(SquidGameConfigBase, _super);
                function SquidGameConfigBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(SquidGameConfigBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_50.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                SquidGameConfigBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new SquidGameConfigBase();
                        baseData.id = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.players = br.readUTFBytes();
                        baseData.stepDis = br.readFloat();
                        baseData.dropHeigth = br.readFloat();
                        baseData.startArea = br.readUTFBytes();
                        baseData.moveArea = br.readUTFBytes();
                        baseData.safeRect = br.readUTFBytes();
                        baseData.safeTriangle = br.readUTFBytes();
                        baseData.safeCircular = br.readUTFBytes();
                        baseData.tagetCircular = br.readUTFBytes();
                        baseData.smallCircular1 = br.readUTFBytes();
                        baseData.smallCircular2 = br.readUTFBytes();
                        baseData.easyMode = br.readInt32();
                        baseData.hardMode = br.readInt32();
                        baseData.powerMin = br.readInt32();
                        baseData.powerMax = br.readInt32();
                        baseData.agreeMin = br.readInt32();
                        baseData.agreeMax = br.readInt32();
                        baseData.advance = br.readInt32();
                        baseData.totleTime = br.readInt32();
                        baseData.countTime = br.readInt32();
                        baseData.gameTime = br.readULong();
                        baseData.gameStatus = br.readByte();
                        baseData.countDown = br.readULong();
                        baseData.nowTime = br.readDouble();
                        baseData.endTime = br.readDouble();
                        baseData.gameScene = br.readUInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                SquidGameConfigBase.clone = function (old) {
                    var clone = new SquidGameConfigBase();
                    clone.id = old.id;
                    clone.desc = old.desc;
                    clone.players = old.players;
                    clone.stepDis = old.stepDis;
                    clone.dropHeigth = old.dropHeigth;
                    clone.startArea = old.startArea;
                    clone.moveArea = old.moveArea;
                    clone.safeRect = old.safeRect;
                    clone.safeTriangle = old.safeTriangle;
                    clone.safeCircular = old.safeCircular;
                    clone.tagetCircular = old.tagetCircular;
                    clone.smallCircular1 = old.smallCircular1;
                    clone.smallCircular2 = old.smallCircular2;
                    clone.easyMode = old.easyMode;
                    clone.hardMode = old.hardMode;
                    clone.powerMin = old.powerMin;
                    clone.powerMax = old.powerMax;
                    clone.agreeMin = old.agreeMin;
                    clone.agreeMax = old.agreeMax;
                    clone.advance = old.advance;
                    clone.totleTime = old.totleTime;
                    clone.countTime = old.countTime;
                    clone.gameTime = old.gameTime;
                    clone.gameStatus = old.gameStatus;
                    clone.countDown = old.countDown;
                    clone.nowTime = old.nowTime;
                    clone.endTime = old.endTime;
                    clone.gameScene = old.gameScene;
                    return clone;
                };
                SquidGameConfigBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.desc = old.desc;
                    this.players = old.players;
                    this.stepDis = old.stepDis;
                    this.dropHeigth = old.dropHeigth;
                    this.startArea = old.startArea;
                    this.moveArea = old.moveArea;
                    this.safeRect = old.safeRect;
                    this.safeTriangle = old.safeTriangle;
                    this.safeCircular = old.safeCircular;
                    this.tagetCircular = old.tagetCircular;
                    this.smallCircular1 = old.smallCircular1;
                    this.smallCircular2 = old.smallCircular2;
                    this.easyMode = old.easyMode;
                    this.hardMode = old.hardMode;
                    this.powerMin = old.powerMin;
                    this.powerMax = old.powerMax;
                    this.agreeMin = old.agreeMin;
                    this.agreeMax = old.agreeMax;
                    this.advance = old.advance;
                    this.totleTime = old.totleTime;
                    this.countTime = old.countTime;
                    this.gameTime = old.gameTime;
                    this.gameStatus = old.gameStatus;
                    this.countDown = old.countDown;
                    this.nowTime = old.nowTime;
                    this.endTime = old.endTime;
                    this.gameScene = old.gameScene;
                };
                SquidGameConfigBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                SquidGameConfigBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                SquidGameConfigBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                SquidGameConfigBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                SquidGameConfigBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                SquidGameConfigBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                SquidGameConfigBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                SquidGameConfigBase.versition = 0;
                SquidGameConfigBase.params = ["id", "desc", "players", "stepDis", "dropHeigth", "startArea", "moveArea", "safeRect", "safeTriangle", "safeCircular", "tagetCircular", "smallCircular1", "smallCircular2", "easyMode", "hardMode", "powerMin", "powerMax", "agreeMin", "agreeMax", "advance", "totleTime", "countTime", "gameTime", "gameStatus", "countDown", "nowTime", "endTime", "gameScene",];
                return SquidGameConfigBase;
            }(ExcelDataBase_50.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(SquidGameConfigBase);
        }
    };
});
System.register("SugarCakeBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_51, context_51) {
    "use strict";
    var ExcelDataBase_51, Map_51, SugarCakeBase;
    var __moduleName = context_51 && context_51.id;
    return {
        setters: [
            function (ExcelDataBase_51_1) {
                ExcelDataBase_51 = ExcelDataBase_51_1;
            },
            function (Map_51_1) {
                Map_51 = Map_51_1;
            }
        ],
        execute: function () {
            exports_51("SugarCakeBase", SugarCakeBase = /** @class */ (function (_super) {
                __extends(SugarCakeBase, _super);
                function SugarCakeBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(SugarCakeBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_51.cMap();
                    } ; return this._list; },
                    enumerable: false,
                    configurable: true
                });
                ;
                SugarCakeBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new SugarCakeBase();
                        baseData.id = br.readUInt32();
                        baseData.platformType = br.readUTFBytes();
                        baseData.shapePolygon = br.readUTFBytes();
                        baseData.needleAngle = br.readFloat();
                        baseData.needleScale = br.readFloat();
                        baseData.shakeStartTime = br.readFloat();
                        baseData.shakeTime = br.readFloat();
                        baseData.shakeMinValue = br.readFloat();
                        baseData.shakeMaxValue = br.readFloat();
                        baseData.shakeMinFrequency = br.readFloat();
                        baseData.shakeMaxFrequency = br.readFloat();
                        baseData.needleWidth = br.readInt32();
                        baseData.lineColor = br.readInt32();
                        baseData.lineDrawWidth = br.readInt32();
                        baseData.lineCollisionWidth = br.readInt32();
                        baseData.enableDrawLine = br.readBoolean();
                        baseData.enableDrawPoint = br.readBoolean();
                        baseData.enableDrawBrokenlyPoint = br.readBoolean();
                        baseData.winSchedule = br.readFloat();
                        baseData.maxBrokenlyWidth = br.readFloat();
                        baseData.maxHp = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                SugarCakeBase.clone = function (old) {
                    var clone = new SugarCakeBase();
                    clone.id = old.id;
                    clone.platformType = old.platformType;
                    clone.shapePolygon = old.shapePolygon;
                    clone.needleAngle = old.needleAngle;
                    clone.needleScale = old.needleScale;
                    clone.shakeStartTime = old.shakeStartTime;
                    clone.shakeTime = old.shakeTime;
                    clone.shakeMinValue = old.shakeMinValue;
                    clone.shakeMaxValue = old.shakeMaxValue;
                    clone.shakeMinFrequency = old.shakeMinFrequency;
                    clone.shakeMaxFrequency = old.shakeMaxFrequency;
                    clone.needleWidth = old.needleWidth;
                    clone.lineColor = old.lineColor;
                    clone.lineDrawWidth = old.lineDrawWidth;
                    clone.lineCollisionWidth = old.lineCollisionWidth;
                    clone.enableDrawLine = old.enableDrawLine;
                    clone.enableDrawPoint = old.enableDrawPoint;
                    clone.enableDrawBrokenlyPoint = old.enableDrawBrokenlyPoint;
                    clone.winSchedule = old.winSchedule;
                    clone.maxBrokenlyWidth = old.maxBrokenlyWidth;
                    clone.maxHp = old.maxHp;
                    return clone;
                };
                SugarCakeBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                SugarCakeBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                SugarCakeBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                SugarCakeBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                SugarCakeBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                SugarCakeBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                SugarCakeBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                SugarCakeBase.versition = 0;
                SugarCakeBase.params = ["id", "platformType", "shapePolygon", "needleAngle", "needleScale", "shakeStartTime", "shakeTime", "shakeMinValue", "shakeMaxValue", "shakeMinFrequency", "shakeMaxFrequency", "needleWidth", "lineColor", "lineDrawWidth", "lineCollisionWidth", "enableDrawLine", "enableDrawPoint", "enableDrawBrokenlyPoint", "winSchedule", "maxBrokenlyWidth", "maxHp",];
                return SugarCakeBase;
            }(ExcelDataBase_51.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(SugarCakeBase);
        }
    };
});
System.register("TestList", ["Data/ExcelDataBase", "Data/Map"], function (exports_52, context_52) {
    "use strict";
    var ExcelDataBase_52, Map_52, TestList;
    var __moduleName = context_52 && context_52.id;
    return {
        setters: [
            function (ExcelDataBase_52_1) {
                ExcelDataBase_52 = ExcelDataBase_52_1;
            },
            function (Map_52_1) {
                Map_52 = Map_52_1;
            }
        ],
        execute: function () {
            exports_52("TestList", TestList = /** @class */ (function (_super) {
                __extends(TestList, _super);
                function TestList() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(TestList, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_52.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                TestList.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new TestList();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.resultTime = br.readDouble();
                        baseData.rank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                TestList.clone = function (old) {
                    var clone = new TestList();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.resultTime = old.resultTime;
                    clone.rank = old.rank;
                    return clone;
                };
                TestList.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.resultTime = old.resultTime;
                    this.rank = old.rank;
                };
                TestList.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                TestList.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                TestList.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                TestList.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                TestList.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                TestList.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                TestList.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                TestList.versition = 0;
                TestList.params = ["id", "point", "win", "lose", "total", "resultTime", "rank",];
                return TestList;
            }(ExcelDataBase_52.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(TestList);
        }
    };
});
System.register("TimeEvent", ["Data/ExcelDataBase", "Data/Map"], function (exports_53, context_53) {
    "use strict";
    var ExcelDataBase_53, Map_53, TimeEvent;
    var __moduleName = context_53 && context_53.id;
    return {
        setters: [
            function (ExcelDataBase_53_1) {
                ExcelDataBase_53 = ExcelDataBase_53_1;
            },
            function (Map_53_1) {
                Map_53 = Map_53_1;
            }
        ],
        execute: function () {
            exports_53("TimeEvent", TimeEvent = /** @class */ (function (_super) {
                __extends(TimeEvent, _super);
                function TimeEvent() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(TimeEvent, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_53.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                TimeEvent.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new TimeEvent();
                        baseData.id = br.readUTFBytes();
                        baseData.eventName = br.readUTFBytes();
                        baseData.taskstartTime = br.readULong();
                        baseData.taskEndTime = br.readULong();
                        baseData.lastStartTime = br.readULong();
                        baseData.lastEndTime = br.readULong();
                        baseData.serverTimeZone = br.readInt32();
                        baseData.LoopCount = br.readInt32();
                        baseData.LoopTimers = br.readInt32();
                        baseData.isFristNoCD = br.readBoolean();
                        baseData.taskLoopTime = br.readULong();
                        baseData.startTime = br.readULong();
                        baseData.startLimitTime = br.readULong();
                        baseData.predecessorTaskID = br.readUTFBytes();
                        baseData.taskEventString = br.readUTFBytes();
                        baseData.taskEventLog = br.readUTFBytes();
                        baseData.taskState = br.readInt32();
                        baseData.taskPreviousState = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                TimeEvent.clone = function (old) {
                    var clone = new TimeEvent();
                    clone.id = old.id;
                    clone.eventName = old.eventName;
                    clone.taskstartTime = old.taskstartTime;
                    clone.taskEndTime = old.taskEndTime;
                    clone.lastStartTime = old.lastStartTime;
                    clone.lastEndTime = old.lastEndTime;
                    clone.serverTimeZone = old.serverTimeZone;
                    clone.LoopCount = old.LoopCount;
                    clone.LoopTimers = old.LoopTimers;
                    clone.isFristNoCD = old.isFristNoCD;
                    clone.taskLoopTime = old.taskLoopTime;
                    clone.startTime = old.startTime;
                    clone.startLimitTime = old.startLimitTime;
                    clone.predecessorTaskID = old.predecessorTaskID;
                    clone.taskEventString = old.taskEventString;
                    clone.taskEventLog = old.taskEventLog;
                    clone.taskState = old.taskState;
                    clone.taskPreviousState = old.taskPreviousState;
                    return clone;
                };
                TimeEvent.prototype.clone = function (old) {
                    this.id = old.id;
                    this.eventName = old.eventName;
                    this.taskstartTime = old.taskstartTime;
                    this.taskEndTime = old.taskEndTime;
                    this.lastStartTime = old.lastStartTime;
                    this.lastEndTime = old.lastEndTime;
                    this.serverTimeZone = old.serverTimeZone;
                    this.LoopCount = old.LoopCount;
                    this.LoopTimers = old.LoopTimers;
                    this.isFristNoCD = old.isFristNoCD;
                    this.taskLoopTime = old.taskLoopTime;
                    this.startTime = old.startTime;
                    this.startLimitTime = old.startLimitTime;
                    this.predecessorTaskID = old.predecessorTaskID;
                    this.taskEventString = old.taskEventString;
                    this.taskEventLog = old.taskEventLog;
                    this.taskState = old.taskState;
                    this.taskPreviousState = old.taskPreviousState;
                };
                TimeEvent.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                TimeEvent.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                TimeEvent.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                TimeEvent.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                TimeEvent.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                TimeEvent.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                TimeEvent.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                TimeEvent.versition = 0;
                TimeEvent.params = ["id", "eventName", "taskstartTime", "taskEndTime", "lastStartTime", "lastEndTime", "serverTimeZone", "LoopCount", "LoopTimers", "isFristNoCD", "taskLoopTime", "startTime", "startLimitTime", "predecessorTaskID", "taskEventString", "taskEventLog", "taskState", "taskPreviousState",];
                return TimeEvent;
            }(ExcelDataBase_53.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(TimeEvent);
        }
    };
});
System.register("TotleRank", ["Data/ExcelDataBase", "Data/Map"], function (exports_54, context_54) {
    "use strict";
    var ExcelDataBase_54, Map_54, TotleRank;
    var __moduleName = context_54 && context_54.id;
    return {
        setters: [
            function (ExcelDataBase_54_1) {
                ExcelDataBase_54 = ExcelDataBase_54_1;
            },
            function (Map_54_1) {
                Map_54 = Map_54_1;
            }
        ],
        execute: function () {
            exports_54("TotleRank", TotleRank = /** @class */ (function (_super) {
                __extends(TotleRank, _super);
                function TotleRank() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(TotleRank, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_54.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                TotleRank.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new TotleRank();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.totalPage = br.readInt32();
                        baseData.selfRank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                TotleRank.clone = function (old) {
                    var clone = new TotleRank();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.totalPage = old.totalPage;
                    clone.selfRank = old.selfRank;
                    return clone;
                };
                TotleRank.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.totalPage = old.totalPage;
                    this.selfRank = old.selfRank;
                };
                TotleRank.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                TotleRank.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                TotleRank.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                TotleRank.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                TotleRank.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                TotleRank.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                TotleRank.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                TotleRank.versition = 0;
                TotleRank.params = ["id", "point", "win", "lose", "total", "totalPage", "selfRank",];
                return TotleRank;
            }(ExcelDataBase_54.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(TotleRank);
        }
    };
});
System.register("UserVarBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_55, context_55) {
    "use strict";
    var ExcelDataBase_55, Map_55, UserVarBase;
    var __moduleName = context_55 && context_55.id;
    return {
        setters: [
            function (ExcelDataBase_55_1) {
                ExcelDataBase_55 = ExcelDataBase_55_1;
            },
            function (Map_55_1) {
                Map_55 = Map_55_1;
            }
        ],
        execute: function () {
            exports_55("UserVarBase", UserVarBase = /** @class */ (function (_super) {
                __extends(UserVarBase, _super);
                function UserVarBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(UserVarBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_55.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                UserVarBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new UserVarBase();
                        baseData.id = br.readUTFBytes();
                        baseData.playerName = br.readUTFBytes();
                        baseData.token = br.readUTFBytes();
                        baseData.passWord = br.readUTFBytes();
                        baseData.status = br.readByte();
                        baseData.inGameStatus = br.readByte();
                        baseData.roleStatus = br.readUTFBytes();
                        baseData.currency = br.readUTFBytes();
                        baseData.equip = br.readUTFBytes();
                        baseData.items = br.readUTFBytes();
                        baseData.mailItem = br.readUTFBytes();
                        baseData.isBlock = br.readBoolean();
                        baseData.isLogUser = br.readBoolean();
                        baseData.loginTime = br.readULong();
                        baseData.experience = br.readBoolean();
                        baseData.Battlelist = br.readUTFBytes();
                        baseData.playerIcon = br.readUTFBytes();
                        baseData.headPortrait = br.readUTFBytes();
                        this.list.set(baseData.id, baseData);
                    }
                };
                UserVarBase.clone = function (old) {
                    var clone = new UserVarBase();
                    clone.id = old.id;
                    clone.playerName = old.playerName;
                    clone.token = old.token;
                    clone.passWord = old.passWord;
                    clone.status = old.status;
                    clone.inGameStatus = old.inGameStatus;
                    clone.roleStatus = old.roleStatus;
                    clone.currency = old.currency;
                    clone.equip = old.equip;
                    clone.items = old.items;
                    clone.mailItem = old.mailItem;
                    clone.isBlock = old.isBlock;
                    clone.isLogUser = old.isLogUser;
                    clone.loginTime = old.loginTime;
                    clone.experience = old.experience;
                    clone.Battlelist = old.Battlelist;
                    clone.playerIcon = old.playerIcon;
                    clone.headPortrait = old.headPortrait;
                    return clone;
                };
                UserVarBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.playerName = old.playerName;
                    this.token = old.token;
                    this.passWord = old.passWord;
                    this.status = old.status;
                    this.inGameStatus = old.inGameStatus;
                    this.roleStatus = old.roleStatus;
                    this.currency = old.currency;
                    this.equip = old.equip;
                    this.items = old.items;
                    this.mailItem = old.mailItem;
                    this.isBlock = old.isBlock;
                    this.isLogUser = old.isLogUser;
                    this.loginTime = old.loginTime;
                    this.experience = old.experience;
                    this.Battlelist = old.Battlelist;
                    this.playerIcon = old.playerIcon;
                    this.headPortrait = old.headPortrait;
                };
                UserVarBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                UserVarBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                UserVarBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                UserVarBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                UserVarBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                UserVarBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                UserVarBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                UserVarBase.versition = 0;
                UserVarBase.params = ["id", "playerName", "token", "passWord", "status", "inGameStatus", "roleStatus", "currency", "equip", "items", "mailItem", "isBlock", "isLogUser", "loginTime", "experience", "Battlelist", "playerIcon", "headPortrait",];
                return UserVarBase;
            }(ExcelDataBase_55.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(UserVarBase);
        }
    };
});
System.register("WalletErrLog", ["Data/ExcelDataBase", "Data/Map"], function (exports_56, context_56) {
    "use strict";
    var ExcelDataBase_56, Map_56, WalletErrLog;
    var __moduleName = context_56 && context_56.id;
    return {
        setters: [
            function (ExcelDataBase_56_1) {
                ExcelDataBase_56 = ExcelDataBase_56_1;
            },
            function (Map_56_1) {
                Map_56 = Map_56_1;
            }
        ],
        execute: function () {
            exports_56("WalletErrLog", WalletErrLog = /** @class */ (function (_super) {
                __extends(WalletErrLog, _super);
                function WalletErrLog() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(WalletErrLog, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_56.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                WalletErrLog.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new WalletErrLog();
                        baseData.id = br.readUTFBytes();
                        baseData.className = br.readUTFBytes();
                        baseData.methodName = br.readUTFBytes();
                        baseData.userToken = br.readUTFBytes();
                        baseData.logMessage = br.readUTFBytes();
                        baseData.resultTime = br.readDouble();
                        this.list.set(baseData.id, baseData);
                    }
                };
                WalletErrLog.clone = function (old) {
                    var clone = new WalletErrLog();
                    clone.id = old.id;
                    clone.className = old.className;
                    clone.methodName = old.methodName;
                    clone.userToken = old.userToken;
                    clone.logMessage = old.logMessage;
                    clone.resultTime = old.resultTime;
                    return clone;
                };
                WalletErrLog.prototype.clone = function (old) {
                    this.id = old.id;
                    this.className = old.className;
                    this.methodName = old.methodName;
                    this.userToken = old.userToken;
                    this.logMessage = old.logMessage;
                    this.resultTime = old.resultTime;
                };
                WalletErrLog.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                WalletErrLog.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                WalletErrLog.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                WalletErrLog.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                WalletErrLog.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                WalletErrLog.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                WalletErrLog.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                WalletErrLog.versition = 0;
                WalletErrLog.params = ["id", "className", "methodName", "userToken", "logMessage", "resultTime",];
                return WalletErrLog;
            }(ExcelDataBase_56.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(WalletErrLog);
        }
    };
});
System.register("WalletLog", ["Data/ExcelDataBase", "Data/Map"], function (exports_57, context_57) {
    "use strict";
    var ExcelDataBase_57, Map_57, WalletLog;
    var __moduleName = context_57 && context_57.id;
    return {
        setters: [
            function (ExcelDataBase_57_1) {
                ExcelDataBase_57 = ExcelDataBase_57_1;
            },
            function (Map_57_1) {
                Map_57 = Map_57_1;
            }
        ],
        execute: function () {
            exports_57("WalletLog", WalletLog = /** @class */ (function (_super) {
                __extends(WalletLog, _super);
                function WalletLog() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(WalletLog, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_57.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                WalletLog.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new WalletLog();
                        baseData.id = br.readUTFBytes();
                        baseData.className = br.readUTFBytes();
                        baseData.methodName = br.readUTFBytes();
                        baseData.userToken = br.readUTFBytes();
                        baseData.logMessage = br.readUTFBytes();
                        baseData.resultTime = br.readDouble();
                        this.list.set(baseData.id, baseData);
                    }
                };
                WalletLog.clone = function (old) {
                    var clone = new WalletLog();
                    clone.id = old.id;
                    clone.className = old.className;
                    clone.methodName = old.methodName;
                    clone.userToken = old.userToken;
                    clone.logMessage = old.logMessage;
                    clone.resultTime = old.resultTime;
                    return clone;
                };
                WalletLog.prototype.clone = function (old) {
                    this.id = old.id;
                    this.className = old.className;
                    this.methodName = old.methodName;
                    this.userToken = old.userToken;
                    this.logMessage = old.logMessage;
                    this.resultTime = old.resultTime;
                };
                WalletLog.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                WalletLog.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                WalletLog.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                WalletLog.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                WalletLog.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                WalletLog.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                WalletLog.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                WalletLog.versition = 0;
                WalletLog.params = ["id", "className", "methodName", "userToken", "logMessage", "resultTime",];
                return WalletLog;
            }(ExcelDataBase_57.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(WalletLog);
        }
    };
});
System.register("WeeklyRank", ["Data/ExcelDataBase", "Data/Map"], function (exports_58, context_58) {
    "use strict";
    var ExcelDataBase_58, Map_58, WeeklyRank;
    var __moduleName = context_58 && context_58.id;
    return {
        setters: [
            function (ExcelDataBase_58_1) {
                ExcelDataBase_58 = ExcelDataBase_58_1;
            },
            function (Map_58_1) {
                Map_58 = Map_58_1;
            }
        ],
        execute: function () {
            exports_58("WeeklyRank", WeeklyRank = /** @class */ (function (_super) {
                __extends(WeeklyRank, _super);
                function WeeklyRank() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(WeeklyRank, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_58.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                WeeklyRank.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new WeeklyRank();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.totalPage = br.readInt32();
                        baseData.selfRank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                WeeklyRank.clone = function (old) {
                    var clone = new WeeklyRank();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.totalPage = old.totalPage;
                    clone.selfRank = old.selfRank;
                    return clone;
                };
                WeeklyRank.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.totalPage = old.totalPage;
                    this.selfRank = old.selfRank;
                };
                WeeklyRank.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                WeeklyRank.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                WeeklyRank.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                WeeklyRank.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                WeeklyRank.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                WeeklyRank.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                WeeklyRank.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                WeeklyRank.versition = 0;
                WeeklyRank.params = ["id", "point", "win", "lose", "total", "totalPage", "selfRank",];
                return WeeklyRank;
            }(ExcelDataBase_58.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(WeeklyRank);
        }
    };
});
System.register("WeeklyRankLast", ["Data/ExcelDataBase", "Data/Map"], function (exports_59, context_59) {
    "use strict";
    var ExcelDataBase_59, Map_59, WeeklyRankLast;
    var __moduleName = context_59 && context_59.id;
    return {
        setters: [
            function (ExcelDataBase_59_1) {
                ExcelDataBase_59 = ExcelDataBase_59_1;
            },
            function (Map_59_1) {
                Map_59 = Map_59_1;
            }
        ],
        execute: function () {
            exports_59("WeeklyRankLast", WeeklyRankLast = /** @class */ (function (_super) {
                __extends(WeeklyRankLast, _super);
                function WeeklyRankLast() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(WeeklyRankLast, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_59.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                WeeklyRankLast.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new WeeklyRankLast();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.resultTime = br.readDouble();
                        baseData.rank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                WeeklyRankLast.clone = function (old) {
                    var clone = new WeeklyRankLast();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.resultTime = old.resultTime;
                    clone.rank = old.rank;
                    return clone;
                };
                WeeklyRankLast.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.resultTime = old.resultTime;
                    this.rank = old.rank;
                };
                WeeklyRankLast.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                WeeklyRankLast.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                WeeklyRankLast.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                WeeklyRankLast.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                WeeklyRankLast.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                WeeklyRankLast.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                WeeklyRankLast.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                WeeklyRankLast.versition = 0;
                WeeklyRankLast.params = ["id", "point", "win", "lose", "total", "resultTime", "rank",];
                return WeeklyRankLast;
            }(ExcelDataBase_59.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(WeeklyRankLast);
        }
    };
});
System.register("WeeklyRankLog", ["Data/ExcelDataBase", "Data/Map"], function (exports_60, context_60) {
    "use strict";
    var ExcelDataBase_60, Map_60, WeeklyRankLog;
    var __moduleName = context_60 && context_60.id;
    return {
        setters: [
            function (ExcelDataBase_60_1) {
                ExcelDataBase_60 = ExcelDataBase_60_1;
            },
            function (Map_60_1) {
                Map_60 = Map_60_1;
            }
        ],
        execute: function () {
            exports_60("WeeklyRankLog", WeeklyRankLog = /** @class */ (function (_super) {
                __extends(WeeklyRankLog, _super);
                function WeeklyRankLog() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(WeeklyRankLog, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_60.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                WeeklyRankLog.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new WeeklyRankLog();
                        baseData.id = br.readUTFBytes();
                        baseData.point = br.readInt32();
                        baseData.win = br.readInt32();
                        baseData.lose = br.readInt32();
                        baseData.total = br.readInt32();
                        baseData.resultTime = br.readDouble();
                        baseData.rank = br.readInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                WeeklyRankLog.clone = function (old) {
                    var clone = new WeeklyRankLog();
                    clone.id = old.id;
                    clone.point = old.point;
                    clone.win = old.win;
                    clone.lose = old.lose;
                    clone.total = old.total;
                    clone.resultTime = old.resultTime;
                    clone.rank = old.rank;
                    return clone;
                };
                WeeklyRankLog.prototype.clone = function (old) {
                    this.id = old.id;
                    this.point = old.point;
                    this.win = old.win;
                    this.lose = old.lose;
                    this.total = old.total;
                    this.resultTime = old.resultTime;
                    this.rank = old.rank;
                };
                WeeklyRankLog.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                WeeklyRankLog.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                WeeklyRankLog.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                WeeklyRankLog.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                WeeklyRankLog.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                WeeklyRankLog.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                WeeklyRankLog.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                WeeklyRankLog.versition = 0;
                WeeklyRankLog.params = ["id", "point", "win", "lose", "total", "resultTime", "rank",];
                return WeeklyRankLog;
            }(ExcelDataBase_60.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(WeeklyRankLog);
        }
    };
});
System.register("WoodConfigBase", ["Data/ExcelDataBase", "Data/Map"], function (exports_61, context_61) {
    "use strict";
    var ExcelDataBase_61, Map_61, WoodConfigBase;
    var __moduleName = context_61 && context_61.id;
    return {
        setters: [
            function (ExcelDataBase_61_1) {
                ExcelDataBase_61 = ExcelDataBase_61_1;
            },
            function (Map_61_1) {
                Map_61 = Map_61_1;
            }
        ],
        execute: function () {
            exports_61("WoodConfigBase", WoodConfigBase = /** @class */ (function (_super) {
                __extends(WoodConfigBase, _super);
                function WoodConfigBase() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(WoodConfigBase, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_61.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                WoodConfigBase.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new WoodConfigBase();
                        baseData.id = br.readUTFBytes();
                        baseData.desc = br.readUTFBytes();
                        baseData.players = br.readUTFBytes();
                        baseData.stepDis = br.readFloat();
                        baseData.dropHeigth = br.readFloat();
                        baseData.startArea = br.readUTFBytes();
                        baseData.finishArea = br.readUTFBytes();
                        baseData.moveArea = br.readUTFBytes();
                        baseData.npcPos = br.readUTFBytes();
                        baseData.npcRot = br.readInt32();
                        baseData.soundLen = (function () { var cache = []; var len = br.readUInt32(); for (var i_17 = 0; i_17 < len; i_17++) {
                            cache.push(br.readInt32());
                        } return cache; })();
                        baseData.headTime = br.readInt32();
                        baseData.minInterval = br.readInt32();
                        baseData.intervalPlus = br.readInt32();
                        baseData.advance = br.readInt32();
                        baseData.totleTime = br.readInt32();
                        baseData.countTime = br.readInt32();
                        baseData.gameTime = br.readULong();
                        baseData.gameStatus = br.readByte();
                        baseData.countDown = br.readULong();
                        baseData.nowTime = br.readDouble();
                        baseData.endTime = br.readDouble();
                        baseData.gameScene = br.readUInt32();
                        this.list.set(baseData.id, baseData);
                    }
                };
                WoodConfigBase.clone = function (old) {
                    var clone = new WoodConfigBase();
                    clone.id = old.id;
                    clone.desc = old.desc;
                    clone.players = old.players;
                    clone.stepDis = old.stepDis;
                    clone.dropHeigth = old.dropHeigth;
                    clone.startArea = old.startArea;
                    clone.finishArea = old.finishArea;
                    clone.moveArea = old.moveArea;
                    clone.npcPos = old.npcPos;
                    clone.npcRot = old.npcRot;
                    clone.soundLen = old.soundLen;
                    clone.headTime = old.headTime;
                    clone.minInterval = old.minInterval;
                    clone.intervalPlus = old.intervalPlus;
                    clone.advance = old.advance;
                    clone.totleTime = old.totleTime;
                    clone.countTime = old.countTime;
                    clone.gameTime = old.gameTime;
                    clone.gameStatus = old.gameStatus;
                    clone.countDown = old.countDown;
                    clone.nowTime = old.nowTime;
                    clone.endTime = old.endTime;
                    clone.gameScene = old.gameScene;
                    return clone;
                };
                WoodConfigBase.prototype.clone = function (old) {
                    this.id = old.id;
                    this.desc = old.desc;
                    this.players = old.players;
                    this.stepDis = old.stepDis;
                    this.dropHeigth = old.dropHeigth;
                    this.startArea = old.startArea;
                    this.finishArea = old.finishArea;
                    this.moveArea = old.moveArea;
                    this.npcPos = old.npcPos;
                    this.npcRot = old.npcRot;
                    this.soundLen = old.soundLen;
                    this.headTime = old.headTime;
                    this.minInterval = old.minInterval;
                    this.intervalPlus = old.intervalPlus;
                    this.advance = old.advance;
                    this.totleTime = old.totleTime;
                    this.countTime = old.countTime;
                    this.gameTime = old.gameTime;
                    this.gameStatus = old.gameStatus;
                    this.countDown = old.countDown;
                    this.nowTime = old.nowTime;
                    this.endTime = old.endTime;
                    this.gameScene = old.gameScene;
                };
                WoodConfigBase.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                WoodConfigBase.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                WoodConfigBase.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                WoodConfigBase.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                WoodConfigBase.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                WoodConfigBase.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                WoodConfigBase.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                WoodConfigBase.versition = 0;
                WoodConfigBase.params = ["id", "desc", "players", "stepDis", "dropHeigth", "startArea", "finishArea", "moveArea", "npcPos", "npcRot", "soundLen", "headTime", "minInterval", "intervalPlus", "advance", "totleTime", "countTime", "gameTime", "gameStatus", "countDown", "nowTime", "endTime", "gameScene",];
                return WoodConfigBase;
            }(ExcelDataBase_61.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(WoodConfigBase);
        }
    };
});
System.register("WoodSongData", ["Data/ExcelDataBase", "Data/Map"], function (exports_62, context_62) {
    "use strict";
    var ExcelDataBase_62, Map_62, WoodSongData;
    var __moduleName = context_62 && context_62.id;
    return {
        setters: [
            function (ExcelDataBase_62_1) {
                ExcelDataBase_62 = ExcelDataBase_62_1;
            },
            function (Map_62_1) {
                Map_62 = Map_62_1;
            }
        ],
        execute: function () {
            exports_62("WoodSongData", WoodSongData = /** @class */ (function (_super) {
                __extends(WoodSongData, _super);
                function WoodSongData() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                Object.defineProperty(WoodSongData, "list", {
                    get: function () { if (!this._list) {
                        this._list = new Map_62.cMap();
                    } ; return this._list; },
                    set: function (v) { this._list = v; },
                    enumerable: false,
                    configurable: true
                });
                ;
                ;
                WoodSongData.parseData = function (br) {
                    var length = br.readInt32();
                    for (var i = 0; i < length; i++) {
                        var b = br.readUTFBytes();
                        var bb = br.readUTFBytes();
                    }
                    var row = br.readInt32();
                    var length2 = br.readInt32();
                    for (var i = 0; i < row; i++) {
                        var baseData = new WoodSongData();
                        baseData.id = br.readUTFBytes();
                        baseData.playSound = br.readInt32();
                        baseData.playSoundTime = br.readULong();
                        baseData.stopSoundTime = br.readULong();
                        this.list.set(baseData.id, baseData);
                    }
                };
                WoodSongData.clone = function (old) {
                    var clone = new WoodSongData();
                    clone.id = old.id;
                    clone.playSound = old.playSound;
                    clone.playSoundTime = old.playSoundTime;
                    clone.stopSoundTime = old.stopSoundTime;
                    return clone;
                };
                WoodSongData.prototype.clone = function (old) {
                    this.id = old.id;
                    this.playSound = old.playSound;
                    this.playSoundTime = old.playSoundTime;
                    this.stopSoundTime = old.stopSoundTime;
                };
                WoodSongData.add = function (a, b, start, end, limit) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] += b[par];
                        if (limit && result[par] > limit[par])
                            result[par] = limit[par];
                    }
                    return result;
                };
                WoodSongData.sub = function (a, b, start, end) {
                    if (start === void 0) { start = 0; }
                    if (!a || !b)
                        return null;
                    var result = this.clone(a);
                    for (var i = Math.max(start, 0), e = Math.min(end, this.params.length); i < e; i++) {
                        var par = this.params[i];
                        result[par] -= b[par];
                    }
                    return result;
                };
                WoodSongData.random = function (src, i) {
                    if (i === void 0) { i = 0; }
                    if (src[this.params[i]] == 0) // NOTE:
                        src[this.params[i]] = Math.random();
                    return JSON.stringify(src);
                };
                WoodSongData.large = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    return a[this.params[i]] > b[this.params[i]];
                };
                WoodSongData.max = function (a, b, i) {
                    if (i === void 0) { i = 0; }
                    if (a[this.params[i]] > b[this.params[i]])
                        return a;
                    return b;
                };
                WoodSongData.json = function (a, data) {
                    data = JSON.parse(data);
                    for (var k in data) {
                        a[k] = data[k];
                    }
                    ;
                    return a;
                };
                WoodSongData.setProperty = function (a, p, value) {
                    a[this.params[p]] = value;
                    return a;
                };
                WoodSongData.versition = 0;
                WoodSongData.params = ["id", "playSound", "playSoundTime", "stopSoundTime",];
                return WoodSongData;
            }(ExcelDataBase_62.ExcelDataBase)));
            if (!gd3d.__ExcDate__)
                gd3d.__ExcDate__ = {};
            if (!gd3d.__ExcDate__.__list)
                gd3d.__ExcDate__.__list = [];
            gd3d.__ExcDate__.__list.push(WoodSongData);
        }
    };
});
//# sourceMappingURL=ExcelData.js.map