var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
System.register("countdown", ["PSDUI/newUiBase"], function (exports_1, context_1) {
    "use strict";
    var newUiBase_1, countdown, bg, bg1, bg00_img, title_lab, textbg, point_lab, rank_lab, buttonbg, button1_btn, btntext1_lab, button2_btn, btntext2_lab;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (newUiBase_1_1) {
                newUiBase_1 = newUiBase_1_1;
            }
        ],
        execute: function () {
            countdown = /** @class */ (function (_super) {
                __extends(countdown, _super);
                function countdown() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.uiName = "countdown";
                    _this.bg = new bg();
                    _this.bg1 = new bg1();
                    _this.bg00_img = new bg00_img();
                    return _this;
                }
                countdown.prototype.onInit = function () {
                    if (this.onInite) {
                        this.onInite();
                    }
                    //添加按钮事件
                    this.bg00_img.buttonbg.button1_btn.button.addListener(m4m.event.UIEventEnum.PointerClick, this.button1_btn_event, this);
                    this.bg00_img.buttonbg.button2_btn.button.addListener(m4m.event.UIEventEnum.PointerClick, this.button2_btn_event, this);
                };
                //按钮事件
                countdown.prototype.button1_btn_event = function () { if (this.button1_btn_btnEvent)
                    this.button1_btn_btnEvent(); };
                ;
                countdown.prototype.button2_btn_event = function () { if (this.button2_btn_btnEvent)
                    this.button2_btn_btnEvent(); };
                ;
                //文字修改方法
                /**修改label 修改label文字方法*/
                countdown.prototype.title_lab_text = function (text) { this.bg00_img.title_lab.label.text = text; };
                /**修改label 修改label文字方法*/
                countdown.prototype.point_lab_text = function (text) { this.bg00_img.textbg.point_lab.label.text = text; };
                /**修改label 修改label文字方法*/
                countdown.prototype.rank_lab_text = function (text) { this.bg00_img.textbg.rank_lab.label.text = text; };
                /**修改label 修改label文字方法*/
                countdown.prototype.btntext1_lab_text = function (text) { this.bg00_img.buttonbg.button1_btn.btntext1_lab.label.text = text; };
                /**修改label 修改label文字方法*/
                countdown.prototype.btntext2_lab_text = function (text) { this.bg00_img.buttonbg.button2_btn.btntext2_lab.label.text = text; };
                return countdown;
            }(newUiBase_1.newUiBase));
            exports_1("countdown", countdown);
            bg = /** @class */ (function () {
                function bg() {
                }
                return bg;
            }());
            exports_1("bg", bg);
            bg1 = /** @class */ (function () {
                function bg1() {
                }
                return bg1;
            }());
            exports_1("bg1", bg1);
            bg00_img = /** @class */ (function () {
                function bg00_img() {
                    /***/
                    this.title_lab = new title_lab();
                    this.textbg = new textbg();
                    this.buttonbg = new buttonbg();
                }
                return bg00_img;
            }());
            exports_1("bg00_img", bg00_img);
            title_lab = /** @class */ (function () {
                function title_lab() {
                }
                return title_lab;
            }());
            exports_1("title_lab", title_lab);
            textbg = /** @class */ (function () {
                function textbg() {
                    /***/
                    this.point_lab = new point_lab();
                    /***/
                    this.rank_lab = new rank_lab();
                }
                return textbg;
            }());
            exports_1("textbg", textbg);
            point_lab = /** @class */ (function () {
                function point_lab() {
                }
                return point_lab;
            }());
            exports_1("point_lab", point_lab);
            rank_lab = /** @class */ (function () {
                function rank_lab() {
                }
                return rank_lab;
            }());
            exports_1("rank_lab", rank_lab);
            buttonbg = /** @class */ (function () {
                function buttonbg() {
                    this.button1_btn = new button1_btn();
                    /***/
                    this.button2_btn = new button2_btn();
                }
                return buttonbg;
            }());
            exports_1("buttonbg", buttonbg);
            button1_btn = /** @class */ (function () {
                function button1_btn() {
                    /***/
                    this.btntext1_lab = new btntext1_lab();
                }
                return button1_btn;
            }());
            exports_1("button1_btn", button1_btn);
            btntext1_lab = /** @class */ (function () {
                function btntext1_lab() {
                }
                return btntext1_lab;
            }());
            exports_1("btntext1_lab", btntext1_lab);
            button2_btn = /** @class */ (function () {
                function button2_btn() {
                    /***/
                    this.btntext2_lab = new btntext2_lab();
                }
                return button2_btn;
            }());
            exports_1("button2_btn", button2_btn);
            btntext2_lab = /** @class */ (function () {
                function btntext2_lab() {
                }
                return btntext2_lab;
            }());
            exports_1("btntext2_lab", btntext2_lab);
        }
    };
});
System.register("countdownView", ["Manager/ScoreboardManager", "Tools/commTool", "GameEnum", "gamePlays/GamePlayMgr", "Manager/UIOpenOrHideManager", "countdown", "Net/WebsocketTool", "Core/EffectMgr", "Tools/Over3dModelMgr", "Core/GameLogic", "PSDUI/UiDataManager", "Data/BindKeyName", "eventMgr", "gamePlays/PlayGameType", "Core/blockchain/ConnectWalletTonkeeper"], function (exports_2, context_2) {
    "use strict";
    var ScoreboardManager_1, commTool_1, GameEnum_1, GamePlayMgr_1, UIOpenOrHideManager_1, countdown_1, WebsocketTool_1, EffectMgr_1, Over3dModelMgr_1, GameLogic_1, UiDataManager_1, BindKeyName_1, eventMgr_1, PlayGameType_1, ConnectWalletTonkeeper_1, countdownView;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [
            function (ScoreboardManager_1_1) {
                ScoreboardManager_1 = ScoreboardManager_1_1;
            },
            function (commTool_1_1) {
                commTool_1 = commTool_1_1;
            },
            function (GameEnum_1_1) {
                GameEnum_1 = GameEnum_1_1;
            },
            function (GamePlayMgr_1_1) {
                GamePlayMgr_1 = GamePlayMgr_1_1;
            },
            function (UIOpenOrHideManager_1_1) {
                UIOpenOrHideManager_1 = UIOpenOrHideManager_1_1;
            },
            function (countdown_1_1) {
                countdown_1 = countdown_1_1;
            },
            function (WebsocketTool_1_1) {
                WebsocketTool_1 = WebsocketTool_1_1;
            },
            function (EffectMgr_1_1) {
                EffectMgr_1 = EffectMgr_1_1;
            },
            function (Over3dModelMgr_1_1) {
                Over3dModelMgr_1 = Over3dModelMgr_1_1;
            },
            function (GameLogic_1_1) {
                GameLogic_1 = GameLogic_1_1;
            },
            function (UiDataManager_1_1) {
                UiDataManager_1 = UiDataManager_1_1;
            },
            function (BindKeyName_1_1) {
                BindKeyName_1 = BindKeyName_1_1;
            },
            function (eventMgr_1_1) {
                eventMgr_1 = eventMgr_1_1;
            },
            function (PlayGameType_1_1) {
                PlayGameType_1 = PlayGameType_1_1;
            },
            function (ConnectWalletTonkeeper_1_1) {
                ConnectWalletTonkeeper_1 = ConnectWalletTonkeeper_1_1;
            }
        ],
        execute: function () {
            /*结算弹窗*/
            countdownView = /** @class */ (function (_super) {
                __extends(countdownView, _super);
                function countdownView() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.noAffected = true;
                    _this.uiLayer = 1;
                    /** 当前UI是否会影响场景玩家操作 */
                    _this.influenceSceneAction = true;
                    _this.isWin = false;
                    _this.yanhuaEff = null;
                    _this.jinbiEff = null;
                    return _this;
                }
                countdownView.prototype.onInit = function () {
                    _super.prototype.onInit.call(this);
                    this.onShow = this.onShowFunc.bind(this);
                    this.onDispose = this.onDisposeFunc.bind(this);
                    this.onHide = this.onHideFunc.bind(this);
                    this.button1_btn_btnEvent = this.closeClickFunc.bind(this);
                    this.button2_btn_btnEvent = this.buttonFun.bind(this);
                    this.btntext1_lab_text("CLOSE");
                    this.btntext2_lab_text("PLAY AGAIN");
                    //先不显示面板
                    this.bg00_img.transform.visible = false;
                    //红色边框
                    //屏蔽ui事件
                    commTool_1.commTool.makeUIEventDiscard(this.bg00_img.transform);
                };
                //关闭按钮点击
                countdownView.prototype.closeClickFunc = function () {
                    // console.error("回单人大厅");
                    //回到单人大厅场景
                    UIOpenOrHideManager_1.UIOpenOrHideManager.Instance.OpenSteerView();
                    GamePlayMgr_1.GamePlayMgr.RunGame(GameEnum_1.GamePlayType.singleHall);
                    WebsocketTool_1.WebsocketTool.Instance.GameManager_outGame();
                    //关闭面板
                    ScoreboardManager_1.ScoreboardManager.Instance.closeBoard();
                };
                countdownView.prototype.buttonFun = function () {
                    ConnectWalletTonkeeper_1.ConnectWalletTonkeeper.Instance.send()
                        .then(function (res) {
                        console.error("res", res);
                        if (res) {
                            //关闭面板
                            GamePlayMgr_1.GamePlayMgr.RunGame(GameEnum_1.GamePlayType.singleHall);
                            WebsocketTool_1.WebsocketTool.Instance.GameManager_outGame();
                            ScoreboardManager_1.ScoreboardManager.Instance.closeBoard();
                            setTimeout(function () {
                                WebsocketTool_1.WebsocketTool.Instance.TicketManager_getTicketWithOutWallet(1, PlayGameType_1.PlayGameType.GreatChampionship);
                                WebsocketTool_1.WebsocketTool.Instance.TicketManager_useTickToGameRoom(PlayGameType_1.PlayGameType.GreatChampionship);
                            }, 100);
                        }
                    });
                };
                countdownView.prototype.onShowFunc = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var rank, score;
                        return __generator(this, function (_a) {
                            //禁用摇杆和触摸
                            eventMgr_1.EventMgr.dispatchEvent("rocker_View_TouchEnable", new eventMgr_1.EventGeneric(false));
                            //隐藏玩家头顶名称
                            UiDataManager_1.UiDataManager.changeFunctionData(BindKeyName_1.BindKeyName.setTopBarVisible, false);
                            this.isWin = ScoreboardManager_1.ScoreboardManager.Instance.isWin;
                            rank = ScoreboardManager_1.ScoreboardManager.Instance.rank;
                            if (this.isWin) {
                                score = Math.max(1, 4 - rank);
                                Over3dModelMgr_1.Over3dModelMgr["tryInit"]();
                                //胜利
                                this.title_lab_text("VICTORY");
                                this.rank_lab_text("CONGRATULATIONS");
                                this.point_lab_text("");
                                // await this.showJinbiEffect();
                                // await this.showYanhuaEffect();
                                this.bg00_img.transform.visible = true;
                            }
                            else {
                                //失败
                                this.bg00_img.transform.visible = true;
                                this.title_lab_text("DEFEAT");
                                this.rank_lab_text("GAME OVER");
                                this.point_lab_text("");
                            }
                            return [2 /*return*/];
                        });
                    });
                };
                //烟花特效
                countdownView.prototype.showYanhuaEffect = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var v3Pos, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    v3Pos = new m4m.math.vector3(0, 0, 10);
                                    //UI 上显示特效
                                    _a = this;
                                    return [4 /*yield*/, EffectMgr_1.EffectMgr.setPlay("fx_ui_yanhua", v3Pos, 3)];
                                case 1:
                                    //UI 上显示特效
                                    _a.yanhuaEff = _b.sent();
                                    //设置layer ，跳转到第二个相机去渲染
                                    EffectMgr_1.EffectMgr.effectLayerChange(this.yanhuaEff, GameLogic_1.GameLogic.layerIndexOverUI3d);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                //金币特效
                countdownView.prototype.showJinbiEffect = function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var v3Pos, _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    v3Pos = new m4m.math.vector3(0, 10, 10);
                                    //UI 上显示特效
                                    _a = this;
                                    return [4 /*yield*/, EffectMgr_1.EffectMgr.setPlay("fx_ui_jinbi", v3Pos, 4, null, null, null, true)];
                                case 1:
                                    //UI 上显示特效
                                    _a.jinbiEff = _b.sent();
                                    EffectMgr_1.EffectMgr.effectLayerChange(this.jinbiEff, GameLogic_1.GameLogic.layerIndexOverUI3d);
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                countdownView.prototype.clearAllEffect = function () {
                    if (this.jinbiEff != null) {
                        //清理改回 默认层级
                        EffectMgr_1.EffectMgr.effectLayerChange(this.jinbiEff, GameLogic_1.GameLogic.layerIndexDefault);
                        EffectMgr_1.EffectMgr.setStop(this.jinbiEff);
                    }
                    if (this.yanhuaEff != null) {
                        //清理改回 默认层级
                        EffectMgr_1.EffectMgr.effectLayerChange(this.yanhuaEff, GameLogic_1.GameLogic.layerIndexDefault);
                        EffectMgr_1.EffectMgr.setStop(this.yanhuaEff);
                    }
                };
                countdownView.prototype.onDisposeFunc = function () {
                };
                countdownView.prototype.onHideFunc = function () {
                    eventMgr_1.EventMgr.dispatchEvent("rocker_View_TouchEnable", new eventMgr_1.EventGeneric(true));
                    //显示玩家头顶名称
                    UiDataManager_1.UiDataManager.changeFunctionData(BindKeyName_1.BindKeyName.setTopBarVisible, true);
                    this.clearAllEffect();
                };
                return countdownView;
            }(countdown_1.countdown));
            exports_2("countdownView", countdownView);
        }
    };
});
//# sourceMappingURL=countdown.js.map