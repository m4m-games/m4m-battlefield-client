var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
System.register("tips", ["PSDUI/newUiBase"], function (exports_1, context_1) {
    "use strict";
    var newUiBase_1, tips, heroallbg_btn, gamebg1_img, text2_lab, gamebg2_img, text1_lab;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (newUiBase_1_1) {
                newUiBase_1 = newUiBase_1_1;
            }
        ],
        execute: function () {
            tips = /** @class */ (function (_super) {
                __extends(tips, _super);
                function tips() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.uiName = "tips";
                    _this.heroallbg_btn = new heroallbg_btn();
                    /***/
                    _this.gamebg1_img = new gamebg1_img();
                    /***/
                    _this.gamebg2_img = new gamebg2_img();
                    return _this;
                }
                tips.prototype.onInit = function () {
                    if (this.onInite) {
                        this.onInite();
                    }
                    //添加按钮事件
                    this.heroallbg_btn.button.addListener(m4m.event.UIEventEnum.PointerClick, this.heroallbg_btn_event, this);
                };
                //按钮事件
                tips.prototype.heroallbg_btn_event = function () { if (this.heroallbg_btn_btnEvent)
                    this.heroallbg_btn_btnEvent(); };
                ;
                //文字修改方法
                /**修改label 文字显示修改label文字方法*/
                tips.prototype.text2_lab_text = function (text) { this.gamebg1_img.text2_lab.label.text = text; };
                /**修改label 文字显示修改label文字方法*/
                tips.prototype.text1_lab_text = function (text) { this.gamebg2_img.text1_lab.label.text = text; };
                return tips;
            }(newUiBase_1.newUiBase));
            exports_1("tips", tips);
            heroallbg_btn = /** @class */ (function () {
                function heroallbg_btn() {
                }
                return heroallbg_btn;
            }());
            exports_1("heroallbg_btn", heroallbg_btn);
            gamebg1_img = /** @class */ (function () {
                function gamebg1_img() {
                    /**文字显示*/
                    this.text2_lab = new text2_lab();
                }
                return gamebg1_img;
            }());
            exports_1("gamebg1_img", gamebg1_img);
            text2_lab = /** @class */ (function () {
                function text2_lab() {
                }
                return text2_lab;
            }());
            exports_1("text2_lab", text2_lab);
            gamebg2_img = /** @class */ (function () {
                function gamebg2_img() {
                    /**文字显示*/
                    this.text1_lab = new text1_lab();
                }
                return gamebg2_img;
            }());
            exports_1("gamebg2_img", gamebg2_img);
            text1_lab = /** @class */ (function () {
                function text1_lab() {
                }
                return text1_lab;
            }());
            exports_1("text1_lab", text1_lab);
        }
    };
});
System.register("tipsView", ["Manager/UIOpenOrHideManager", "Manager/UITipManager", "PSDUI/UiManager", "Time/CTimer", "Tools/commTool", "tips"], function (exports_2, context_2) {
    "use strict";
    var UIOpenOrHideManager_1, UITipManager_1, UiManager_1, CTimer_1, commTool_1, tips_1, tipsView;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [
            function (UIOpenOrHideManager_1_1) {
                UIOpenOrHideManager_1 = UIOpenOrHideManager_1_1;
            },
            function (UITipManager_1_1) {
                UITipManager_1 = UITipManager_1_1;
            },
            function (UiManager_1_1) {
                UiManager_1 = UiManager_1_1;
            },
            function (CTimer_1_1) {
                CTimer_1 = CTimer_1_1;
            },
            function (commTool_1_1) {
                commTool_1 = commTool_1_1;
            },
            function (tips_1_1) {
                tips_1 = tips_1_1;
            }
        ],
        execute: function () {
            tipsView = /** @class */ (function (_super) {
                __extends(tipsView, _super);
                function tipsView() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.uiLayer = UiManager_1.uiLayerType.highlayer;
                    _this.startTimeID = -1;
                    return _this;
                }
                // private ViewData: tloadingViewData;
                tipsView.prototype.onInit = function () {
                    _super.prototype.onInit.call(this);
                    // //打开当前界面不影响其他界面 TipPanel
                    this.noAffected = true;
                    //屏蔽UI事件
                    commTool_1.commTool.makeUIEventDiscard(this.heroallbg_btn.transform);
                    // this.ViewData = new tloadingViewData();
                    //多语言版本
                    this.heroallbg_btn_btnEvent = this.heroallbg.bind(this);
                    //this.heroallbg_btn.button.addListener(m4m.event.UIEventEnum.PointerDown, this.heroallbg, this);
                    // this.gamebg2_img.text1_lab.label.horizontalOverflow = false;
                    // this.gamebg2_img.text1_lab.label.verticalOverflow = true;//说明支持换行
                    // this.gamebg2_img.text1_lab.label.verticalType = m4m.framework.VerticalType.Top;
                    // this.gamebg2_img.text1_lab.label.linespace = 1.2;
                    this.onShow = this.onShowFun.bind(this);
                    this.onHide = this.onHideFun.bind(this);
                    this.onDispose = this.onDisposeFun.bind(this);
                };
                //设置tips 文本
                tipsView.prototype.setTipsText = function () {
                    //粉色弹窗可以关闭
                    if (UITipManager_1.UITipManager.Instance.type == null) {
                        this.gamebg2_img.transform.visible = false;
                        this.gamebg1_img.transform.visible = true;
                        this.gamebg1_img.text2_lab.label.text = UITipManager_1.UITipManager.Instance.tipPanelText;
                    }
                    else {
                        switch (UITipManager_1.UITipManager.Instance.type) {
                            //黑色弹窗可以关闭
                            case UITipManager_1.TipPanelType.rest:
                                this.gamebg2_img.transform.visible = true;
                                this.gamebg1_img.transform.visible = false;
                                this.gamebg2_img.text1_lab.label.text = UITipManager_1.UITipManager.Instance.tipPanelText;
                                break;
                            //黑色弹窗不可以关闭
                            case UITipManager_1.TipPanelType.mistake:
                                this.gamebg2_img.transform.visible = true;
                                this.gamebg1_img.transform.visible = false;
                                if (UITipManager_1.UITipManager.Instance.tipsData == 1) {
                                    this.RefreshResetTime(5);
                                    UITipManager_1.UITipManager.Instance.tipsData = null;
                                }
                                else {
                                    this.gamebg2_img.text1_lab.label.text = UITipManager_1.UITipManager.Instance.tipPanelText;
                                }
                                break;
                        }
                    }
                };
                tipsView.prototype.heroallbg = function () {
                    console.error("关闭tips");
                    if (UITipManager_1.UITipManager.Instance.type == null) {
                        UIOpenOrHideManager_1.UIOpenOrHideManager.Instance.HideTipsTCView();
                    }
                    else {
                        switch (UITipManager_1.UITipManager.Instance.type) {
                            case UITipManager_1.TipPanelType.rest:
                                UIOpenOrHideManager_1.UIOpenOrHideManager.Instance.HideTipsTCView();
                                break;
                            case UITipManager_1.TipPanelType.mistake:
                                break;
                        }
                    }
                };
                tipsView.prototype.onShowFun = function () {
                    // this.gamebg1_img.text2_lab.label.fontsize = 16;
                    this.setTipsText();
                };
                tipsView.prototype.onHideFun = function () {
                    UITipManager_1.UITipManager.Instance.type = null;
                    this.StopTime();
                };
                tipsView.prototype.onDisposeFun = function () {
                };
                //重置
                tipsView.prototype.RefreshResetTime = function (leftTime) {
                    if (leftTime != null) {
                        this.leftTime = leftTime;
                        this.starCDTime();
                    }
                };
                //定时器
                tipsView.prototype.starCDTime = function () {
                    this.StopTime();
                    this.startTimeID = CTimer_1.CTimer.Instance.loopTimeUpdate(1000, this.cdUpdateFun.bind(this));
                    this.Act_Settime();
                };
                //停掉定时器
                tipsView.prototype.StopTime = function () {
                    if (this.startTimeID != -1) {
                        CTimer_1.CTimer.Instance.stop(this.startTimeID);
                    }
                };
                //定时器回调
                tipsView.prototype.cdUpdateFun = function () {
                    if (--this.leftTime > 0) {
                        // tslint:disable-next-line: no-parameter-reassignment
                        this.Act_Settime();
                    }
                    else {
                        this.StopTime();
                        location.reload();
                    }
                };
                //显示
                tipsView.prototype.Act_Settime = function () {
                    this.gamebg2_img.text1_lab.label.text = UITipManager_1.UITipManager.Instance.tipPanelText + "\t" + "".concat("(" + this.leftTime + ")");
                };
                return tipsView;
            }(tips_1.tips));
            exports_2("tipsView", tipsView);
        }
    };
});
//# sourceMappingURL=tips.js.map