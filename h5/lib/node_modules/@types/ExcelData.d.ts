/// <reference types="../../../lib/node_modules/@types/gameUtil" />
/// <reference types="../../../lib/node_modules/@types/engine" />
declare module "ActionBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class ActionBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<ActionBase>;
        /**动作名称*/
        actionName: string;
        /**备注*/
        des: string;
        /**播放速度*/
        speed: number;
        /**是否倒放*/
        mirror: boolean;
        static get list(): cMap<any>;
        static parseData(br: any): void;
        static clone(old: ActionBase): ActionBase;
        private static params;
        static add(a: ActionBase, b: ActionBase, start: number | undefined, end: number, limit: ActionBase): ActionBase | null;
        static sub(a: ActionBase, b: ActionBase, start: number | undefined, end: number): ActionBase | null;
        static random(src: ActionBase, i?: number): string;
        static large(a: ActionBase, b: ActionBase, i?: number): boolean;
        static max(a: ActionBase, b: ActionBase, i?: number): ActionBase;
        static json(a: ActionBase, data: any): ActionBase;
        static setProperty(a: ActionBase, p: number, value: any): ActionBase;
    }
}
declare module "AudioBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class AudioBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<AudioBase>;
        /**音频ID*/
        id: number;
        /**资源名*/
        resName: string;
        /**音频key*/
        audioKey: string;
        /**音量（0-1）*/
        volume: number;
        /**是否循环播放*/
        isLoop: boolean;
        /**备注*/
        desc: string;
        static get list(): cMap<any>;
        static parseData(br: any): void;
        static clone(old: AudioBase): AudioBase;
        private static params;
        static add(a: AudioBase, b: AudioBase, start: number | undefined, end: number, limit: AudioBase): AudioBase | null;
        static sub(a: AudioBase, b: AudioBase, start: number | undefined, end: number): AudioBase | null;
        static random(src: AudioBase, i?: number): string;
        static large(a: AudioBase, b: AudioBase, i?: number): boolean;
        static max(a: AudioBase, b: AudioBase, i?: number): AudioBase;
        static json(a: AudioBase, data: any): AudioBase;
        static setProperty(a: AudioBase, p: number, value: any): AudioBase;
    }
}
declare module "BattleListBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class BattleListBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<BattleListBase>;
        /**配置ID*/
        id: string;
        /**关卡*/
        checkpoint: string;
        /**关卡ID*/
        checkpointID: number;
        /**场数*/
        total: number;
        /**胜场*/
        wins: number;
        /**玩家ID*/
        userID: string;
        /**最佳战绩*/
        bestAchievement: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: BattleListBase): BattleListBase;
        clone(old: BattleListBase): void;
        private static params;
        static add(a: BattleListBase, b: BattleListBase, start: number | undefined, end: number, limit: BattleListBase): BattleListBase | null;
        static sub(a: BattleListBase, b: BattleListBase, start: number | undefined, end: number): BattleListBase | null;
        static random(src: BattleListBase, i?: number): string;
        static large(a: BattleListBase, b: BattleListBase, i?: number): boolean;
        static max(a: BattleListBase, b: BattleListBase, i?: number): BattleListBase;
        static json(a: BattleListBase, data: any): BattleListBase;
        static setProperty(a: BattleListBase, p: number, value: any): BattleListBase;
    }
}
declare module "CookieConfigBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class CookieConfigBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<CookieConfigBase>;
        /**配置ID*/
        id: string;
        /**备注*/
        desc: string;
        /**用户列表*/
        players: string;
        /**每一步距离*/
        stepDis: number;
        /**下落高度*/
        dropHeigth: number;
        /**初始位置*/
        startArea: string;
        /**活动区域*/
        moveArea: string;
        /**NPC举例*/
        npcDis: number;
        /**开始抖动的起始时间*/
        shakeStartTime: number;
        /**抖动过渡时间(从开始到最大值的时间)*/
        shakeTime: number;
        /**最低抖动值*/
        shakeMinValue: number;
        /**抖动的最大值*/
        shakeMaxValue: number;
        /**最小抖动频率*/
        shakeMinFrequency: number;
        /**最大抖动频率*/
        shakeMaxFrequency: number;
        /**针头宽度*/
        needleWidth: number;
        /**线条碰撞宽度*/
        lineCollisionWidth: number;
        /**长度*/
        cookLen: number[];
        /**提前发送时间*/
        advance: number;
        /**游戏总时间*/
        totleTime: number;
        /**倒计时时长*/
        countTime: number;
        /**游戏开始时间*/
        gameTime: number;
        /**游戏状态*/
        gameStatus: number;
        /**倒计时开始时间*/
        countDown: number;
        /**当前时间*/
        nowTime: number;
        /**结束时间*/
        endTime: number;
        /**游戏场景ID*/
        gameScene: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: CookieConfigBase): CookieConfigBase;
        clone(old: CookieConfigBase): void;
        private static params;
        static add(a: CookieConfigBase, b: CookieConfigBase, start: number | undefined, end: number, limit: CookieConfigBase): CookieConfigBase | null;
        static sub(a: CookieConfigBase, b: CookieConfigBase, start: number | undefined, end: number): CookieConfigBase | null;
        static random(src: CookieConfigBase, i?: number): string;
        static large(a: CookieConfigBase, b: CookieConfigBase, i?: number): boolean;
        static max(a: CookieConfigBase, b: CookieConfigBase, i?: number): CookieConfigBase;
        static json(a: CookieConfigBase, data: any): CookieConfigBase;
        static setProperty(a: CookieConfigBase, p: number, value: any): CookieConfigBase;
    }
}
declare module "CookieDailyRank" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class CookieDailyRank extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<CookieDailyRank>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**总页数*/
        totalPage: number;
        /**自身名次*/
        selfRank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: CookieDailyRank): CookieDailyRank;
        clone(old: CookieDailyRank): void;
        private static params;
        static add(a: CookieDailyRank, b: CookieDailyRank, start: number | undefined, end: number, limit: CookieDailyRank): CookieDailyRank | null;
        static sub(a: CookieDailyRank, b: CookieDailyRank, start: number | undefined, end: number): CookieDailyRank | null;
        static random(src: CookieDailyRank, i?: number): string;
        static large(a: CookieDailyRank, b: CookieDailyRank, i?: number): boolean;
        static max(a: CookieDailyRank, b: CookieDailyRank, i?: number): CookieDailyRank;
        static json(a: CookieDailyRank, data: any): CookieDailyRank;
        static setProperty(a: CookieDailyRank, p: number, value: any): CookieDailyRank;
    }
}
declare module "CookieDailyRankLast" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class CookieDailyRankLast extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<CookieDailyRankLast>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**结算时间*/
        resultTime: number;
        /**名次*/
        rank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: CookieDailyRankLast): CookieDailyRankLast;
        clone(old: CookieDailyRankLast): void;
        private static params;
        static add(a: CookieDailyRankLast, b: CookieDailyRankLast, start: number | undefined, end: number, limit: CookieDailyRankLast): CookieDailyRankLast | null;
        static sub(a: CookieDailyRankLast, b: CookieDailyRankLast, start: number | undefined, end: number): CookieDailyRankLast | null;
        static random(src: CookieDailyRankLast, i?: number): string;
        static large(a: CookieDailyRankLast, b: CookieDailyRankLast, i?: number): boolean;
        static max(a: CookieDailyRankLast, b: CookieDailyRankLast, i?: number): CookieDailyRankLast;
        static json(a: CookieDailyRankLast, data: any): CookieDailyRankLast;
        static setProperty(a: CookieDailyRankLast, p: number, value: any): CookieDailyRankLast;
    }
}
declare module "CookieDailyRankLog" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class CookieDailyRankLog extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<CookieDailyRankLog>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**结算时间*/
        resultTime: number;
        /**名次*/
        rank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: CookieDailyRankLog): CookieDailyRankLog;
        clone(old: CookieDailyRankLog): void;
        private static params;
        static add(a: CookieDailyRankLog, b: CookieDailyRankLog, start: number | undefined, end: number, limit: CookieDailyRankLog): CookieDailyRankLog | null;
        static sub(a: CookieDailyRankLog, b: CookieDailyRankLog, start: number | undefined, end: number): CookieDailyRankLog | null;
        static random(src: CookieDailyRankLog, i?: number): string;
        static large(a: CookieDailyRankLog, b: CookieDailyRankLog, i?: number): boolean;
        static max(a: CookieDailyRankLog, b: CookieDailyRankLog, i?: number): CookieDailyRankLog;
        static json(a: CookieDailyRankLog, data: any): CookieDailyRankLog;
        static setProperty(a: CookieDailyRankLog, p: number, value: any): CookieDailyRankLog;
    }
}
declare module "CookieGameData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class CookieGameData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<CookieGameData>;
        /**配置ID*/
        id: string;
        /**糖饼ID*/
        cookieID: number;
        /**最大血量*/
        maxHp: number;
        /**当前血量*/
        hp: number;
        /**缩放*/
        scale: number;
        /**旋转*/
        rot: number;
        /**游戏数据*/
        dataJson: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: CookieGameData): CookieGameData;
        clone(old: CookieGameData): void;
        private static params;
        static add(a: CookieGameData, b: CookieGameData, start: number | undefined, end: number, limit: CookieGameData): CookieGameData | null;
        static sub(a: CookieGameData, b: CookieGameData, start: number | undefined, end: number): CookieGameData | null;
        static random(src: CookieGameData, i?: number): string;
        static large(a: CookieGameData, b: CookieGameData, i?: number): boolean;
        static max(a: CookieGameData, b: CookieGameData, i?: number): CookieGameData;
        static json(a: CookieGameData, data: any): CookieGameData;
        static setProperty(a: CookieGameData, p: number, value: any): CookieGameData;
    }
}
declare module "CookieMonthlyRank" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class CookieMonthlyRank extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<CookieMonthlyRank>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**总页数*/
        totalPage: number;
        /**自身名次*/
        selfRank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: CookieMonthlyRank): CookieMonthlyRank;
        clone(old: CookieMonthlyRank): void;
        private static params;
        static add(a: CookieMonthlyRank, b: CookieMonthlyRank, start: number | undefined, end: number, limit: CookieMonthlyRank): CookieMonthlyRank | null;
        static sub(a: CookieMonthlyRank, b: CookieMonthlyRank, start: number | undefined, end: number): CookieMonthlyRank | null;
        static random(src: CookieMonthlyRank, i?: number): string;
        static large(a: CookieMonthlyRank, b: CookieMonthlyRank, i?: number): boolean;
        static max(a: CookieMonthlyRank, b: CookieMonthlyRank, i?: number): CookieMonthlyRank;
        static json(a: CookieMonthlyRank, data: any): CookieMonthlyRank;
        static setProperty(a: CookieMonthlyRank, p: number, value: any): CookieMonthlyRank;
    }
}
declare module "CookieMonthlyRankLast" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class CookieMonthlyRankLast extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<CookieMonthlyRankLast>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**结算时间*/
        resultTime: number;
        /**名次*/
        rank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: CookieMonthlyRankLast): CookieMonthlyRankLast;
        clone(old: CookieMonthlyRankLast): void;
        private static params;
        static add(a: CookieMonthlyRankLast, b: CookieMonthlyRankLast, start: number | undefined, end: number, limit: CookieMonthlyRankLast): CookieMonthlyRankLast | null;
        static sub(a: CookieMonthlyRankLast, b: CookieMonthlyRankLast, start: number | undefined, end: number): CookieMonthlyRankLast | null;
        static random(src: CookieMonthlyRankLast, i?: number): string;
        static large(a: CookieMonthlyRankLast, b: CookieMonthlyRankLast, i?: number): boolean;
        static max(a: CookieMonthlyRankLast, b: CookieMonthlyRankLast, i?: number): CookieMonthlyRankLast;
        static json(a: CookieMonthlyRankLast, data: any): CookieMonthlyRankLast;
        static setProperty(a: CookieMonthlyRankLast, p: number, value: any): CookieMonthlyRankLast;
    }
}
declare module "CookieMonthlyRankLog" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class CookieMonthlyRankLog extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<CookieMonthlyRankLog>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**结算时间*/
        resultTime: number;
        /**名次*/
        rank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: CookieMonthlyRankLog): CookieMonthlyRankLog;
        clone(old: CookieMonthlyRankLog): void;
        private static params;
        static add(a: CookieMonthlyRankLog, b: CookieMonthlyRankLog, start: number | undefined, end: number, limit: CookieMonthlyRankLog): CookieMonthlyRankLog | null;
        static sub(a: CookieMonthlyRankLog, b: CookieMonthlyRankLog, start: number | undefined, end: number): CookieMonthlyRankLog | null;
        static random(src: CookieMonthlyRankLog, i?: number): string;
        static large(a: CookieMonthlyRankLog, b: CookieMonthlyRankLog, i?: number): boolean;
        static max(a: CookieMonthlyRankLog, b: CookieMonthlyRankLog, i?: number): CookieMonthlyRankLog;
        static json(a: CookieMonthlyRankLog, data: any): CookieMonthlyRankLog;
        static setProperty(a: CookieMonthlyRankLog, p: number, value: any): CookieMonthlyRankLog;
    }
}
declare module "CookieTotleRank" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class CookieTotleRank extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<CookieTotleRank>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**总页数*/
        totalPage: number;
        /**自身名次*/
        selfRank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: CookieTotleRank): CookieTotleRank;
        clone(old: CookieTotleRank): void;
        private static params;
        static add(a: CookieTotleRank, b: CookieTotleRank, start: number | undefined, end: number, limit: CookieTotleRank): CookieTotleRank | null;
        static sub(a: CookieTotleRank, b: CookieTotleRank, start: number | undefined, end: number): CookieTotleRank | null;
        static random(src: CookieTotleRank, i?: number): string;
        static large(a: CookieTotleRank, b: CookieTotleRank, i?: number): boolean;
        static max(a: CookieTotleRank, b: CookieTotleRank, i?: number): CookieTotleRank;
        static json(a: CookieTotleRank, data: any): CookieTotleRank;
        static setProperty(a: CookieTotleRank, p: number, value: any): CookieTotleRank;
    }
}
declare module "CookieWeeklyRank" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class CookieWeeklyRank extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<CookieWeeklyRank>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**总页数*/
        totalPage: number;
        /**自身名次*/
        selfRank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: CookieWeeklyRank): CookieWeeklyRank;
        clone(old: CookieWeeklyRank): void;
        private static params;
        static add(a: CookieWeeklyRank, b: CookieWeeklyRank, start: number | undefined, end: number, limit: CookieWeeklyRank): CookieWeeklyRank | null;
        static sub(a: CookieWeeklyRank, b: CookieWeeklyRank, start: number | undefined, end: number): CookieWeeklyRank | null;
        static random(src: CookieWeeklyRank, i?: number): string;
        static large(a: CookieWeeklyRank, b: CookieWeeklyRank, i?: number): boolean;
        static max(a: CookieWeeklyRank, b: CookieWeeklyRank, i?: number): CookieWeeklyRank;
        static json(a: CookieWeeklyRank, data: any): CookieWeeklyRank;
        static setProperty(a: CookieWeeklyRank, p: number, value: any): CookieWeeklyRank;
    }
}
declare module "CookieWeeklyRankLast" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class CookieWeeklyRankLast extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<CookieWeeklyRankLast>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**结算时间*/
        resultTime: number;
        /**名次*/
        rank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: CookieWeeklyRankLast): CookieWeeklyRankLast;
        clone(old: CookieWeeklyRankLast): void;
        private static params;
        static add(a: CookieWeeklyRankLast, b: CookieWeeklyRankLast, start: number | undefined, end: number, limit: CookieWeeklyRankLast): CookieWeeklyRankLast | null;
        static sub(a: CookieWeeklyRankLast, b: CookieWeeklyRankLast, start: number | undefined, end: number): CookieWeeklyRankLast | null;
        static random(src: CookieWeeklyRankLast, i?: number): string;
        static large(a: CookieWeeklyRankLast, b: CookieWeeklyRankLast, i?: number): boolean;
        static max(a: CookieWeeklyRankLast, b: CookieWeeklyRankLast, i?: number): CookieWeeklyRankLast;
        static json(a: CookieWeeklyRankLast, data: any): CookieWeeklyRankLast;
        static setProperty(a: CookieWeeklyRankLast, p: number, value: any): CookieWeeklyRankLast;
    }
}
declare module "CookieWeeklyRankLog" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class CookieWeeklyRankLog extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<CookieWeeklyRankLog>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**结算时间*/
        resultTime: number;
        /**名次*/
        rank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: CookieWeeklyRankLog): CookieWeeklyRankLog;
        clone(old: CookieWeeklyRankLog): void;
        private static params;
        static add(a: CookieWeeklyRankLog, b: CookieWeeklyRankLog, start: number | undefined, end: number, limit: CookieWeeklyRankLog): CookieWeeklyRankLog | null;
        static sub(a: CookieWeeklyRankLog, b: CookieWeeklyRankLog, start: number | undefined, end: number): CookieWeeklyRankLog | null;
        static random(src: CookieWeeklyRankLog, i?: number): string;
        static large(a: CookieWeeklyRankLog, b: CookieWeeklyRankLog, i?: number): boolean;
        static max(a: CookieWeeklyRankLog, b: CookieWeeklyRankLog, i?: number): CookieWeeklyRankLog;
        static json(a: CookieWeeklyRankLog, data: any): CookieWeeklyRankLog;
        static setProperty(a: CookieWeeklyRankLog, p: number, value: any): CookieWeeklyRankLog;
    }
}
declare module "DailyRank" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class DailyRank extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<DailyRank>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**总页数*/
        totalPage: number;
        /**自身名次*/
        selfRank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: DailyRank): DailyRank;
        clone(old: DailyRank): void;
        private static params;
        static add(a: DailyRank, b: DailyRank, start: number | undefined, end: number, limit: DailyRank): DailyRank | null;
        static sub(a: DailyRank, b: DailyRank, start: number | undefined, end: number): DailyRank | null;
        static random(src: DailyRank, i?: number): string;
        static large(a: DailyRank, b: DailyRank, i?: number): boolean;
        static max(a: DailyRank, b: DailyRank, i?: number): DailyRank;
        static json(a: DailyRank, data: any): DailyRank;
        static setProperty(a: DailyRank, p: number, value: any): DailyRank;
    }
}
declare module "DailyRankLast" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class DailyRankLast extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<DailyRankLast>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**结算时间*/
        resultTime: number;
        /**名次*/
        rank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: DailyRankLast): DailyRankLast;
        clone(old: DailyRankLast): void;
        private static params;
        static add(a: DailyRankLast, b: DailyRankLast, start: number | undefined, end: number, limit: DailyRankLast): DailyRankLast | null;
        static sub(a: DailyRankLast, b: DailyRankLast, start: number | undefined, end: number): DailyRankLast | null;
        static random(src: DailyRankLast, i?: number): string;
        static large(a: DailyRankLast, b: DailyRankLast, i?: number): boolean;
        static max(a: DailyRankLast, b: DailyRankLast, i?: number): DailyRankLast;
        static json(a: DailyRankLast, data: any): DailyRankLast;
        static setProperty(a: DailyRankLast, p: number, value: any): DailyRankLast;
    }
}
declare module "DailyRankLog" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class DailyRankLog extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<DailyRankLog>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**结算时间*/
        resultTime: number;
        /**名次*/
        rank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: DailyRankLog): DailyRankLog;
        clone(old: DailyRankLog): void;
        private static params;
        static add(a: DailyRankLog, b: DailyRankLog, start: number | undefined, end: number, limit: DailyRankLog): DailyRankLog | null;
        static sub(a: DailyRankLog, b: DailyRankLog, start: number | undefined, end: number): DailyRankLog | null;
        static random(src: DailyRankLog, i?: number): string;
        static large(a: DailyRankLog, b: DailyRankLog, i?: number): boolean;
        static max(a: DailyRankLog, b: DailyRankLog, i?: number): DailyRankLog;
        static json(a: DailyRankLog, data: any): DailyRankLog;
        static setProperty(a: DailyRankLog, p: number, value: any): DailyRankLog;
    }
}
declare module "DarkFightConfigBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class DarkFightConfigBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<DarkFightConfigBase>;
        /**配置ID*/
        id: string;
        /**备注*/
        desc: string;
        /**用户列表*/
        players: string;
        /**每一步距离*/
        stepDis: number;
        /**下落高度*/
        dropHeigth: number;
        /**玩家初始HP*/
        startHp: number;
        /**初始位置*/
        startArea: string;
        /**活动区域*/
        moveArea: string;
        /**简单难度持续时间*/
        easyMode: number;
        /**困难难度开始时间*/
        hardMode: number;
        /**最小力度*/
        powerMin: number;
        /**最大力度*/
        powerMax: number;
        /**最小判定角度*/
        agreeMin: number;
        /**最大判定角度*/
        agreeMax: number;
        /**提前发送时间*/
        advance: number;
        /**游戏总时间*/
        totleTime: number;
        /**倒计时时长*/
        countTime: number;
        /**游戏开始时间*/
        gameTime: number;
        /**游戏状态*/
        gameStatus: number;
        /**倒计时开始时间*/
        countDown: number;
        /**当前时间*/
        nowTime: number;
        /**结束时间*/
        endTime: number;
        /**游戏场景ID*/
        gameScene: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: DarkFightConfigBase): DarkFightConfigBase;
        clone(old: DarkFightConfigBase): void;
        private static params;
        static add(a: DarkFightConfigBase, b: DarkFightConfigBase, start: number | undefined, end: number, limit: DarkFightConfigBase): DarkFightConfigBase | null;
        static sub(a: DarkFightConfigBase, b: DarkFightConfigBase, start: number | undefined, end: number): DarkFightConfigBase | null;
        static random(src: DarkFightConfigBase, i?: number): string;
        static large(a: DarkFightConfigBase, b: DarkFightConfigBase, i?: number): boolean;
        static max(a: DarkFightConfigBase, b: DarkFightConfigBase, i?: number): DarkFightConfigBase;
        static json(a: DarkFightConfigBase, data: any): DarkFightConfigBase;
        static setProperty(a: DarkFightConfigBase, p: number, value: any): DarkFightConfigBase;
    }
}
declare module "DialRiverConfigBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class DialRiverConfigBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<DialRiverConfigBase>;
        /**配置ID*/
        id: string;
        /**备注*/
        desc: string;
        /**用户列表*/
        players: string;
        /**每一步距离*/
        stepDis: number;
        /**下落高度*/
        dropHeigth: number;
        /**初始位置*/
        startArea: string;
        /**活动区域*/
        moveArea: string;
        /**左边分组人员*/
        leftTeam: string[];
        /**最小的分*/
        minPoint: number;
        /**最大得分*/
        maxPoint: number;
        /**简单难度持续时间*/
        easyMode: number;
        /**困难难度开始时间*/
        hardMode: number;
        /**最小判定时间*/
        checkMin: number;
        /**最大判定时间*/
        checkMax: number;
        /**最小等待时间*/
        waitMin: number;
        /**最大等待时间*/
        waitMax: number;
        /**演出时长*/
        showTimeMax: number;
        /**演出最小时长*/
        showTimeMin: number;
        /**最小判定角度*/
        agreeMin: number;
        /**最大判定角度*/
        agreeMax: number;
        /**提前发送时间*/
        advance: number;
        /**游戏总时间*/
        totleTime: number;
        /**倒计时时长*/
        countTime: number;
        /**游戏开始时间*/
        gameTime: number;
        /**游戏状态*/
        gameStatus: number;
        /**倒计时开始时间*/
        countDown: number;
        /**当前时间*/
        nowTime: number;
        /**结束时间*/
        endTime: number;
        /**游戏场景ID*/
        gameScene: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: DialRiverConfigBase): DialRiverConfigBase;
        clone(old: DialRiverConfigBase): void;
        private static params;
        static add(a: DialRiverConfigBase, b: DialRiverConfigBase, start: number | undefined, end: number, limit: DialRiverConfigBase): DialRiverConfigBase | null;
        static sub(a: DialRiverConfigBase, b: DialRiverConfigBase, start: number | undefined, end: number): DialRiverConfigBase | null;
        static random(src: DialRiverConfigBase, i?: number): string;
        static large(a: DialRiverConfigBase, b: DialRiverConfigBase, i?: number): boolean;
        static max(a: DialRiverConfigBase, b: DialRiverConfigBase, i?: number): DialRiverConfigBase;
        static json(a: DialRiverConfigBase, data: any): DialRiverConfigBase;
        static setProperty(a: DialRiverConfigBase, p: number, value: any): DialRiverConfigBase;
    }
}
declare module "DialRiverData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class DialRiverData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<DialRiverData>;
        /**配置ID*/
        id: string;
        /**点击方向*/
        clickType: number;
        /**胜负进度（0-10000）*/
        progress: number;
        /**玩家分数*/
        usersPoint: string;
        /**判定角度*/
        agree: number;
        /**判定持续时间*/
        checkTime: number;
        /**播放时间*/
        playTime: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: DialRiverData): DialRiverData;
        clone(old: DialRiverData): void;
        private static params;
        static add(a: DialRiverData, b: DialRiverData, start: number | undefined, end: number, limit: DialRiverData): DialRiverData | null;
        static sub(a: DialRiverData, b: DialRiverData, start: number | undefined, end: number): DialRiverData | null;
        static random(src: DialRiverData, i?: number): string;
        static large(a: DialRiverData, b: DialRiverData, i?: number): boolean;
        static max(a: DialRiverData, b: DialRiverData, i?: number): DialRiverData;
        static json(a: DialRiverData, data: any): DialRiverData;
        static setProperty(a: DialRiverData, p: number, value: any): DialRiverData;
    }
}
declare module "GameOpenSetting" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class GameOpenSetting extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<GameOpenSetting>;
        /**配置ID*/
        id: string;
        /**任务名称*/
        eventName: string;
        /**开始加入时间*/
        startTime: number;
        /**加入结束时间*/
        EndTime: number;
        /**下次开始时间*/
        nextStartTime: number;
        /**默认时间是0也就是utc时间*/
        serverTimeZone: number;
        /**可加入时长*/
        enterTime: number;
        /**可加人时加入BOT的时间间隔*/
        addBotInEnter: number;
        /**停止加人后加入BOT的时间间隔*/
        addBotOverEnter: number;
        /**停止加人后加入BOT的时间间隔最大间隔*/
        addBotOverEnterMax: number;
        /**任务间隔执行时间*/
        taskLoopTime: number;
        /**每天结算开始的时间，和loopTime共同执行*/
        rankTime: number;
        /**结算结束时间*/
        rankEndTime: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: GameOpenSetting): GameOpenSetting;
        clone(old: GameOpenSetting): void;
        private static params;
        static add(a: GameOpenSetting, b: GameOpenSetting, start: number | undefined, end: number, limit: GameOpenSetting): GameOpenSetting | null;
        static sub(a: GameOpenSetting, b: GameOpenSetting, start: number | undefined, end: number): GameOpenSetting | null;
        static random(src: GameOpenSetting, i?: number): string;
        static large(a: GameOpenSetting, b: GameOpenSetting, i?: number): boolean;
        static max(a: GameOpenSetting, b: GameOpenSetting, i?: number): GameOpenSetting;
        static json(a: GameOpenSetting, data: any): GameOpenSetting;
        static setProperty(a: GameOpenSetting, p: number, value: any): GameOpenSetting;
    }
}
declare module "GamesConfigBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class GamesConfigBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<GamesConfigBase>;
        /**配置ID*/
        id: number;
        /**备注*/
        desc: string;
        /**绑定UI面板ID*/
        UI: string;
        /**链接游戏*/
        gameUrl: string;
        /**大厅活动区域*/
        moveArea: string;
        /**最大人数*/
        maxPlayer: number;
        /**传递参数*/
        gameData: number[];
        /**游戏类名*/
        gameClass: string;
        /**场景id*/
        sceneBase: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: GamesConfigBase): GamesConfigBase;
        clone(old: GamesConfigBase): void;
        private static params;
        static add(a: GamesConfigBase, b: GamesConfigBase, start: number | undefined, end: number, limit: GamesConfigBase): GamesConfigBase | null;
        static sub(a: GamesConfigBase, b: GamesConfigBase, start: number | undefined, end: number): GamesConfigBase | null;
        static random(src: GamesConfigBase, i?: number): string;
        static large(a: GamesConfigBase, b: GamesConfigBase, i?: number): boolean;
        static max(a: GamesConfigBase, b: GamesConfigBase, i?: number): GamesConfigBase;
        static json(a: GamesConfigBase, data: any): GamesConfigBase;
        static setProperty(a: GamesConfigBase, p: number, value: any): GamesConfigBase;
    }
}
declare module "GamesTicketBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class GamesTicketBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<GamesTicketBase>;
        /**配置ID*/
        id: number;
        /**备注*/
        desc: string;
        /**对应关卡显示大图*/
        rawpicture: string;
        /**门票ID*/
        ticketID: number;
        /**门票UI*/
        ticketUI: string;
        /**使用门票*/
        ticketUse: number;
        /**游戏类名*/
        gameClass: string;
        /**场景id*/
        sceneBase: number;
        /**是否显示*/
        visible: boolean;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: GamesTicketBase): GamesTicketBase;
        clone(old: GamesTicketBase): void;
        private static params;
        static add(a: GamesTicketBase, b: GamesTicketBase, start: number | undefined, end: number, limit: GamesTicketBase): GamesTicketBase | null;
        static sub(a: GamesTicketBase, b: GamesTicketBase, start: number | undefined, end: number): GamesTicketBase | null;
        static random(src: GamesTicketBase, i?: number): string;
        static large(a: GamesTicketBase, b: GamesTicketBase, i?: number): boolean;
        static max(a: GamesTicketBase, b: GamesTicketBase, i?: number): GamesTicketBase;
        static json(a: GamesTicketBase, data: any): GamesTicketBase;
        static setProperty(a: GamesTicketBase, p: number, value: any): GamesTicketBase;
    }
}
declare module "GlassBridgeData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class GlassBridgeData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<GlassBridgeData>;
        /**配置ID*/
        id: string;
        /**玻璃破碎*/
        breakGlass: number;
        /**玩家token*/
        userToken: string;
        /**得分*/
        point: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: GlassBridgeData): GlassBridgeData;
        clone(old: GlassBridgeData): void;
        private static params;
        static add(a: GlassBridgeData, b: GlassBridgeData, start: number | undefined, end: number, limit: GlassBridgeData): GlassBridgeData | null;
        static sub(a: GlassBridgeData, b: GlassBridgeData, start: number | undefined, end: number): GlassBridgeData | null;
        static random(src: GlassBridgeData, i?: number): string;
        static large(a: GlassBridgeData, b: GlassBridgeData, i?: number): boolean;
        static max(a: GlassBridgeData, b: GlassBridgeData, i?: number): GlassBridgeData;
        static json(a: GlassBridgeData, data: any): GlassBridgeData;
        static setProperty(a: GlassBridgeData, p: number, value: any): GlassBridgeData;
    }
}
declare module "GlassBridgePos" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class GlassBridgePos extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<GlassBridgePos>;
        /**配置ID*/
        id: string;
        /**左边玻璃位置*/
        leftGlass: string;
        /**右边玻璃位置*/
        rightGlass: string;
        /**玻璃得分*/
        glassPoint: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: GlassBridgePos): GlassBridgePos;
        clone(old: GlassBridgePos): void;
        private static params;
        static add(a: GlassBridgePos, b: GlassBridgePos, start: number | undefined, end: number, limit: GlassBridgePos): GlassBridgePos | null;
        static sub(a: GlassBridgePos, b: GlassBridgePos, start: number | undefined, end: number): GlassBridgePos | null;
        static random(src: GlassBridgePos, i?: number): string;
        static large(a: GlassBridgePos, b: GlassBridgePos, i?: number): boolean;
        static max(a: GlassBridgePos, b: GlassBridgePos, i?: number): GlassBridgePos;
        static json(a: GlassBridgePos, data: any): GlassBridgePos;
        static setProperty(a: GlassBridgePos, p: number, value: any): GlassBridgePos;
    }
}
declare module "GlassBridgerConfigBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class GlassBridgerConfigBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<GlassBridgerConfigBase>;
        /**配置ID*/
        id: string;
        /**备注*/
        desc: string;
        /**用户列表*/
        players: string;
        /**每一步距离*/
        stepDis: number;
        /**下落高度*/
        dropHeigth: number;
        /**初始位置*/
        startArea: string;
        /**活动区域*/
        moveArea: string;
        /**结束区域*/
        finishArea: string;
        /**排名分数*/
        rankPoint: number[];
        /**提前发送时间*/
        advance: number;
        /**游戏总时间*/
        totleTime: number;
        /**倒计时时长*/
        countTime: number;
        /**游戏开始时间*/
        gameTime: number;
        /**游戏状态*/
        gameStatus: number;
        /**倒计时开始时间*/
        countDown: number;
        /**当前时间*/
        nowTime: number;
        /**结束时间*/
        endTime: number;
        /**游戏场景ID*/
        gameScene: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: GlassBridgerConfigBase): GlassBridgerConfigBase;
        clone(old: GlassBridgerConfigBase): void;
        private static params;
        static add(a: GlassBridgerConfigBase, b: GlassBridgerConfigBase, start: number | undefined, end: number, limit: GlassBridgerConfigBase): GlassBridgerConfigBase | null;
        static sub(a: GlassBridgerConfigBase, b: GlassBridgerConfigBase, start: number | undefined, end: number): GlassBridgerConfigBase | null;
        static random(src: GlassBridgerConfigBase, i?: number): string;
        static large(a: GlassBridgerConfigBase, b: GlassBridgerConfigBase, i?: number): boolean;
        static max(a: GlassBridgerConfigBase, b: GlassBridgerConfigBase, i?: number): GlassBridgerConfigBase;
        static json(a: GlassBridgerConfigBase, data: any): GlassBridgerConfigBase;
        static setProperty(a: GlassBridgerConfigBase, p: number, value: any): GlassBridgerConfigBase;
    }
}
declare module "HallConfigBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class HallConfigBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<HallConfigBase>;
        /**大厅ID*/
        id: string;
        /**备注*/
        desc: string;
        /**玩家列表*/
        players: string;
        /**游戏配置*/
        gameConfig: string;
        /**大厅状态*/
        hallStatus: number;
        /**房间最大人数*/
        maxPlayer: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: HallConfigBase): HallConfigBase;
        clone(old: HallConfigBase): void;
        private static params;
        static add(a: HallConfigBase, b: HallConfigBase, start: number | undefined, end: number, limit: HallConfigBase): HallConfigBase | null;
        static sub(a: HallConfigBase, b: HallConfigBase, start: number | undefined, end: number): HallConfigBase | null;
        static random(src: HallConfigBase, i?: number): string;
        static large(a: HallConfigBase, b: HallConfigBase, i?: number): boolean;
        static max(a: HallConfigBase, b: HallConfigBase, i?: number): HallConfigBase;
        static json(a: HallConfigBase, data: any): HallConfigBase;
        static setProperty(a: HallConfigBase, p: number, value: any): HallConfigBase;
    }
}
declare module "ItemBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class ItemBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<ItemBase>;
        /**配置ID*/
        id: number;
        /**道具名字*/
        itemName: string;
        /**图标*/
        icon: string;
        /**模型*/
        model: string;
        /**描述*/
        desc: string;
        /**特效*/
        effect: string;
        /**道具类型*/
        itemType: number;
        /**道具部位*/
        itemSetpos: number;
        /**属性*/
        status: string;
        /**最大数量*/
        maxNum: number;
        /**等级*/
        lv: number;
        /**稀有度*/
        rera: number;
        /**品质*/
        quality: number;
        /**货币相关配置*/
        currency: string;
        /**显示货币配置*/
        showCurrency: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: ItemBase): ItemBase;
        clone(old: ItemBase): void;
        private static params;
        static add(a: ItemBase, b: ItemBase, start: number | undefined, end: number, limit: ItemBase): ItemBase | null;
        static sub(a: ItemBase, b: ItemBase, start: number | undefined, end: number): ItemBase | null;
        static random(src: ItemBase, i?: number): string;
        static large(a: ItemBase, b: ItemBase, i?: number): boolean;
        static max(a: ItemBase, b: ItemBase, i?: number): ItemBase;
        static json(a: ItemBase, data: any): ItemBase;
        static setProperty(a: ItemBase, p: number, value: any): ItemBase;
    }
}
declare module "ItemData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class ItemData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<ItemData>;
        /**ID*/
        id: string;
        /**道具名字*/
        itemName: string;
        /**配置ID*/
        baseId: number;
        /**数量*/
        count: number;
        /**最大数量*/
        maxNum: number;
        /**来源*/
        fromWhere: string;
        /**获取使用货币*/
        buyCurrency: string;
        /**描述*/
        desc: string;
        /**图标*/
        icon: string;
        /**模型*/
        model: string;
        /**道具类型*/
        itemType: number;
        /**道具部位*/
        itemSetpos: number;
        /**特效*/
        effect: string;
        /**属性*/
        status: string;
        /**等级*/
        lv: number;
        /**稀有度*/
        rera: number;
        /**品质*/
        quality: number;
        /**持有者*/
        playerUuid: string;
        /**获取时间*/
        getTime: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: ItemData): ItemData;
        clone(old: ItemData): void;
        private static params;
        static add(a: ItemData, b: ItemData, start: number | undefined, end: number, limit: ItemData): ItemData | null;
        static sub(a: ItemData, b: ItemData, start: number | undefined, end: number): ItemData | null;
        static random(src: ItemData, i?: number): string;
        static large(a: ItemData, b: ItemData, i?: number): boolean;
        static max(a: ItemData, b: ItemData, i?: number): ItemData;
        static json(a: ItemData, data: any): ItemData;
        static setProperty(a: ItemData, p: number, value: any): ItemData;
    }
}
declare module "ItemLog" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class ItemLog extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<ItemLog>;
        /**ID*/
        id: string;
        /**道具名字*/
        itemName: string;
        /**数据ID*/
        dataId: string;
        /**数量*/
        count: number;
        /**获取使用货币*/
        buyCurrency: string;
        /**持有者*/
        playerUuid: string;
        /**消耗时间*/
        useTime: number;
        /**消耗方式*/
        useType: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: ItemLog): ItemLog;
        clone(old: ItemLog): void;
        private static params;
        static add(a: ItemLog, b: ItemLog, start: number | undefined, end: number, limit: ItemLog): ItemLog | null;
        static sub(a: ItemLog, b: ItemLog, start: number | undefined, end: number): ItemLog | null;
        static random(src: ItemLog, i?: number): string;
        static large(a: ItemLog, b: ItemLog, i?: number): boolean;
        static max(a: ItemLog, b: ItemLog, i?: number): ItemLog;
        static json(a: ItemLog, data: any): ItemLog;
        static setProperty(a: ItemLog, p: number, value: any): ItemLog;
    }
}
declare module "LoginLogBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class LoginLogBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<LoginLogBase>;
        /**配置ID*/
        id: string;
        /**token*/
        token: string;
        /**登陆时间*/
        loginTime: number;
        /**状态*/
        status: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: LoginLogBase): LoginLogBase;
        clone(old: LoginLogBase): void;
        private static params;
        static add(a: LoginLogBase, b: LoginLogBase, start: number | undefined, end: number, limit: LoginLogBase): LoginLogBase | null;
        static sub(a: LoginLogBase, b: LoginLogBase, start: number | undefined, end: number): LoginLogBase | null;
        static random(src: LoginLogBase, i?: number): string;
        static large(a: LoginLogBase, b: LoginLogBase, i?: number): boolean;
        static max(a: LoginLogBase, b: LoginLogBase, i?: number): LoginLogBase;
        static json(a: LoginLogBase, data: any): LoginLogBase;
        static setProperty(a: LoginLogBase, p: number, value: any): LoginLogBase;
    }
}
declare module "MailData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class MailData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<MailData>;
        /**邮件ID*/
        id: string;
        /**邮件类型*/
        mailType: number;
        /**邮件来源*/
        mailFrom: string;
        /**邮件接收者*/
        mailTo: string;
        /**邮件标题*/
        mailTitle: string;
        /**邮件内容*/
        mailContent: string;
        /**附带道具*/
        items: string;
        /**发送时间*/
        sendTime: number;
        /**过期时间*/
        expires: number;
        /**是否领取*/
        visible: boolean;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: MailData): MailData;
        clone(old: MailData): void;
        private static params;
        static add(a: MailData, b: MailData, start: number | undefined, end: number, limit: MailData): MailData | null;
        static sub(a: MailData, b: MailData, start: number | undefined, end: number): MailData | null;
        static random(src: MailData, i?: number): string;
        static large(a: MailData, b: MailData, i?: number): boolean;
        static max(a: MailData, b: MailData, i?: number): MailData;
        static json(a: MailData, data: any): MailData;
        static setProperty(a: MailData, p: number, value: any): MailData;
    }
}
declare module "MarblesConfigBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class MarblesConfigBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<MarblesConfigBase>;
        /**配置ID*/
        id: string;
        /**备注*/
        desc: string;
        /**用户列表*/
        players: string;
        /**每一步距离*/
        stepDis: number;
        /**下落高度*/
        dropHeigth: number;
        /**初始位置*/
        startArea: string;
        /**活动区域*/
        moveArea: string;
        /**投掷区域*/
        throwArea: string;
        /**计数区域*/
        countArea: string;
        /**起丢地点*/
        dropPoint: string;
        /**散布半径*/
        scatter: number;
        /**最大力度*/
        maxPower: number;
        /**押注时间*/
        betTime: number;
        /**最小结算时间*/
        endTimeMin: number;
        /**最大结算时间*/
        endTimeMax: number;
        /**提前发送时间*/
        advance: number;
        /**游戏总时间*/
        totleTime: number;
        /**倒计时时长*/
        countTime: number;
        /**游戏开始时间*/
        gameTime: number;
        /**游戏状态*/
        gameStatus: number;
        /**倒计时开始时间*/
        countDown: number;
        /**当前时间*/
        nowTime: number;
        /**结束时间*/
        endTime: number;
        /**游戏场景ID*/
        gameScene: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: MarblesConfigBase): MarblesConfigBase;
        clone(old: MarblesConfigBase): void;
        private static params;
        static add(a: MarblesConfigBase, b: MarblesConfigBase, start: number | undefined, end: number, limit: MarblesConfigBase): MarblesConfigBase | null;
        static sub(a: MarblesConfigBase, b: MarblesConfigBase, start: number | undefined, end: number): MarblesConfigBase | null;
        static random(src: MarblesConfigBase, i?: number): string;
        static large(a: MarblesConfigBase, b: MarblesConfigBase, i?: number): boolean;
        static max(a: MarblesConfigBase, b: MarblesConfigBase, i?: number): MarblesConfigBase;
        static json(a: MarblesConfigBase, data: any): MarblesConfigBase;
        static setProperty(a: MarblesConfigBase, p: number, value: any): MarblesConfigBase;
    }
}
declare module "MarblesData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class MarblesData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<MarblesData>;
        /**配置ID*/
        id: string;
        /**奇数数量*/
        OddNumber: number;
        /**偶数数量*/
        evenNumber: number;
        /**弹珠落点*/
        dropPoint: string;
        /**扔出者号码*/
        dropNum: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: MarblesData): MarblesData;
        clone(old: MarblesData): void;
        private static params;
        static add(a: MarblesData, b: MarblesData, start: number | undefined, end: number, limit: MarblesData): MarblesData | null;
        static sub(a: MarblesData, b: MarblesData, start: number | undefined, end: number): MarblesData | null;
        static random(src: MarblesData, i?: number): string;
        static large(a: MarblesData, b: MarblesData, i?: number): boolean;
        static max(a: MarblesData, b: MarblesData, i?: number): MarblesData;
        static json(a: MarblesData, data: any): MarblesData;
        static setProperty(a: MarblesData, p: number, value: any): MarblesData;
    }
}
declare module "MonthlyRank" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class MonthlyRank extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<MonthlyRank>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**总页数*/
        totalPage: number;
        /**自身名次*/
        selfRank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: MonthlyRank): MonthlyRank;
        clone(old: MonthlyRank): void;
        private static params;
        static add(a: MonthlyRank, b: MonthlyRank, start: number | undefined, end: number, limit: MonthlyRank): MonthlyRank | null;
        static sub(a: MonthlyRank, b: MonthlyRank, start: number | undefined, end: number): MonthlyRank | null;
        static random(src: MonthlyRank, i?: number): string;
        static large(a: MonthlyRank, b: MonthlyRank, i?: number): boolean;
        static max(a: MonthlyRank, b: MonthlyRank, i?: number): MonthlyRank;
        static json(a: MonthlyRank, data: any): MonthlyRank;
        static setProperty(a: MonthlyRank, p: number, value: any): MonthlyRank;
    }
}
declare module "MonthlyRankLast" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class MonthlyRankLast extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<MonthlyRankLast>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**结算时间*/
        resultTime: number;
        /**名次*/
        rank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: MonthlyRankLast): MonthlyRankLast;
        clone(old: MonthlyRankLast): void;
        private static params;
        static add(a: MonthlyRankLast, b: MonthlyRankLast, start: number | undefined, end: number, limit: MonthlyRankLast): MonthlyRankLast | null;
        static sub(a: MonthlyRankLast, b: MonthlyRankLast, start: number | undefined, end: number): MonthlyRankLast | null;
        static random(src: MonthlyRankLast, i?: number): string;
        static large(a: MonthlyRankLast, b: MonthlyRankLast, i?: number): boolean;
        static max(a: MonthlyRankLast, b: MonthlyRankLast, i?: number): MonthlyRankLast;
        static json(a: MonthlyRankLast, data: any): MonthlyRankLast;
        static setProperty(a: MonthlyRankLast, p: number, value: any): MonthlyRankLast;
    }
}
declare module "MonthlyRankLog" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class MonthlyRankLog extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<MonthlyRankLog>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**结算时间*/
        resultTime: number;
        /**名次*/
        rank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: MonthlyRankLog): MonthlyRankLog;
        clone(old: MonthlyRankLog): void;
        private static params;
        static add(a: MonthlyRankLog, b: MonthlyRankLog, start: number | undefined, end: number, limit: MonthlyRankLog): MonthlyRankLog | null;
        static sub(a: MonthlyRankLog, b: MonthlyRankLog, start: number | undefined, end: number): MonthlyRankLog | null;
        static random(src: MonthlyRankLog, i?: number): string;
        static large(a: MonthlyRankLog, b: MonthlyRankLog, i?: number): boolean;
        static max(a: MonthlyRankLog, b: MonthlyRankLog, i?: number): MonthlyRankLog;
        static json(a: MonthlyRankLog, data: any): MonthlyRankLog;
        static setProperty(a: MonthlyRankLog, p: number, value: any): MonthlyRankLog;
    }
}
declare module "Notice" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class Notice extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<Notice>;
        /**配置ID*/
        id: string;
        /**公告的标题*/
        noticeTitle: string;
        /**任务实际开始时间*/
        notice: string;
        /**每次只显示一次，根据上一次登录时间来客户端自行判断是否要去被动获取公告。*/
        DisplayOnceAday: boolean;
        /**公告开始时间*/
        StartTime: number;
        /**公告结束时间*/
        EndTime: number;
        /**任务之前的执行状态，1正在执行，2执行错误，3执行成功，注意写任务的一定要注意可能服务器被中断的情况*/
        taskPreviousState: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: Notice): Notice;
        clone(old: Notice): void;
        private static params;
        static add(a: Notice, b: Notice, start: number | undefined, end: number, limit: Notice): Notice | null;
        static sub(a: Notice, b: Notice, start: number | undefined, end: number): Notice | null;
        static random(src: Notice, i?: number): string;
        static large(a: Notice, b: Notice, i?: number): boolean;
        static max(a: Notice, b: Notice, i?: number): Notice;
        static json(a: Notice, data: any): Notice;
        static setProperty(a: Notice, p: number, value: any): Notice;
    }
}
declare module "PKConfigBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class PKConfigBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<PKConfigBase>;
        /**配置ID*/
        id: string;
        /**备注*/
        desc: string;
        /**用户列表*/
        players: string[];
        /**用户位置*/
        playerPos: number[];
        /**道具*/
        items: string[];
        /**道具位置*/
        itemPos: number[];
        /**当前时间*/
        nowTime: number;
        /**结束时间*/
        endTime: number;
        /**游戏场景ID*/
        gameScene: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: PKConfigBase): PKConfigBase;
        clone(old: PKConfigBase): void;
        private static params;
        static add(a: PKConfigBase, b: PKConfigBase, start: number | undefined, end: number, limit: PKConfigBase): PKConfigBase | null;
        static sub(a: PKConfigBase, b: PKConfigBase, start: number | undefined, end: number): PKConfigBase | null;
        static random(src: PKConfigBase, i?: number): string;
        static large(a: PKConfigBase, b: PKConfigBase, i?: number): boolean;
        static max(a: PKConfigBase, b: PKConfigBase, i?: number): PKConfigBase;
        static json(a: PKConfigBase, data: any): PKConfigBase;
        static setProperty(a: PKConfigBase, p: number, value: any): PKConfigBase;
    }
}
declare module "PlayerIcon" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class PlayerIcon extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<PlayerIcon>;
        /**配置ID*/
        id: string;
        /**图片名称*/
        icon: string;
        /**是否显示*/
        visible: boolean;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: PlayerIcon): PlayerIcon;
        clone(old: PlayerIcon): void;
        private static params;
        static add(a: PlayerIcon, b: PlayerIcon, start: number | undefined, end: number, limit: PlayerIcon): PlayerIcon | null;
        static sub(a: PlayerIcon, b: PlayerIcon, start: number | undefined, end: number): PlayerIcon | null;
        static random(src: PlayerIcon, i?: number): string;
        static large(a: PlayerIcon, b: PlayerIcon, i?: number): boolean;
        static max(a: PlayerIcon, b: PlayerIcon, i?: number): PlayerIcon;
        static json(a: PlayerIcon, data: any): PlayerIcon;
        static setProperty(a: PlayerIcon, p: number, value: any): PlayerIcon;
    }
}
declare module "ResultBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class ResultBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<ResultBase>;
        /**配置ID*/
        id: string;
        /**游戏ID*/
        gameId: string;
        /**胜利用户列表*/
        winers: string;
        /**失败用户列表*/
        losers: string;
        /**结算时间*/
        resultTime: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: ResultBase): ResultBase;
        clone(old: ResultBase): void;
        private static params;
        static add(a: ResultBase, b: ResultBase, start: number | undefined, end: number, limit: ResultBase): ResultBase | null;
        static sub(a: ResultBase, b: ResultBase, start: number | undefined, end: number): ResultBase | null;
        static random(src: ResultBase, i?: number): string;
        static large(a: ResultBase, b: ResultBase, i?: number): boolean;
        static max(a: ResultBase, b: ResultBase, i?: number): ResultBase;
        static json(a: ResultBase, data: any): ResultBase;
        static setProperty(a: ResultBase, p: number, value: any): ResultBase;
    }
}
declare module "RoleBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class RoleBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<RoleBase>;
        /**ID*/
        id: number;
        /**资源名称*/
        name: string;
        /**备注*/
        desc: string;
        /**模型缩放*/
        bodyScale: number;
        /**行走退出延迟(毫秒)*/
        walkOutDelay: number;
        /**站立退出延迟(毫秒)*/
        standOutDelay: number;
        /**站立退出延迟(毫秒)*/
        runOutDelay: number;
        static get list(): cMap<any>;
        static parseData(br: any): void;
        static clone(old: RoleBase): RoleBase;
        private static params;
        static add(a: RoleBase, b: RoleBase, start: number | undefined, end: number, limit: RoleBase): RoleBase | null;
        static sub(a: RoleBase, b: RoleBase, start: number | undefined, end: number): RoleBase | null;
        static random(src: RoleBase, i?: number): string;
        static large(a: RoleBase, b: RoleBase, i?: number): boolean;
        static max(a: RoleBase, b: RoleBase, i?: number): RoleBase;
        static json(a: RoleBase, data: any): RoleBase;
        static setProperty(a: RoleBase, p: number, value: any): RoleBase;
    }
}
declare module "SceneBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class SceneBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<SceneBase>;
        /**ID*/
        id: number;
        /**服务器名称*/
        severName: string;
        /**名称*/
        name: string;
        /**备注*/
        desc: string;
        /**类型*/
        type: number;
        /**相机位置*/
        camPos: m4m.math.vector3;
        /**相机旋转*/
        camEuler: m4m.math.vector3;
        /**相机FOV*/
        camFOV: number;
        /**相机远面*/
        camFar: number;
        /**相机近面*/
        camNear: number;
        /**相机斜角*/
        tiltAngle: number;
        /**相机环绕角*/
        panAngle: number;
        /**主角在场景默认角度*/
        roleAngle: number;
        /**是否开雾*/
        enableFog: boolean;
        /**雾颜色*/
        fogColor: m4m.math.vector3;
        /**雾开始距离*/
        fogStart: number;
        /**雾结束距离*/
        fogEnd: number;
        /**障碍配置json资源*/
        obstacleRes: string;
        /**场景缩放*/
        sceneScale: m4m.math.vector3;
        /**相机观察目标距离*/
        camDistance: number;
        /**相机观察目标偏移量*/
        camViewOffset: m4m.math.vector3;
        /**相机避让的障碍物列表(josn 数组)*/
        camAvoidObs: string;
        static get list(): cMap<any>;
        static parseData(br: any): void;
        static clone(old: SceneBase): SceneBase;
        private static params;
        static add(a: SceneBase, b: SceneBase, start: number | undefined, end: number, limit: SceneBase): SceneBase | null;
        static sub(a: SceneBase, b: SceneBase, start: number | undefined, end: number): SceneBase | null;
        static random(src: SceneBase, i?: number): string;
        static large(a: SceneBase, b: SceneBase, i?: number): boolean;
        static max(a: SceneBase, b: SceneBase, i?: number): SceneBase;
        static json(a: SceneBase, data: any): SceneBase;
        static setProperty(a: SceneBase, p: number, value: any): SceneBase;
    }
}
declare module "SettingBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class SettingBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<SettingBase>;
        /**配置ID*/
        id: string;
        /**音乐*/
        music: number;
        /**音效*/
        soundeffect: number;
        /**语言*/
        language: number;
        /**画质*/
        picturequality: number;
        /**是否接受好友邀请*/
        Invitefriends: boolean;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: SettingBase): SettingBase;
        clone(old: SettingBase): void;
        private static params;
        static add(a: SettingBase, b: SettingBase, start: number | undefined, end: number, limit: SettingBase): SettingBase | null;
        static sub(a: SettingBase, b: SettingBase, start: number | undefined, end: number): SettingBase | null;
        static random(src: SettingBase, i?: number): string;
        static large(a: SettingBase, b: SettingBase, i?: number): boolean;
        static max(a: SettingBase, b: SettingBase, i?: number): SettingBase;
        static json(a: SettingBase, data: any): SettingBase;
        static setProperty(a: SettingBase, p: number, value: any): SettingBase;
    }
}
declare module "SettingList" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class SettingList extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<SettingList>;
        /**配置类型ID*/
        id: number;
        /**配置类别ID*/
        shopId: number;
        /**设置类型*/
        settingType: string;
        /**描述*/
        desc: string;
        /**类型*/
        type: number;
        /**数值*/
        value: number;
        /**属性*/
        status: string;
        /**是否显示*/
        visible: boolean;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: SettingList): SettingList;
        clone(old: SettingList): void;
        private static params;
        static add(a: SettingList, b: SettingList, start: number | undefined, end: number, limit: SettingList): SettingList | null;
        static sub(a: SettingList, b: SettingList, start: number | undefined, end: number): SettingList | null;
        static random(src: SettingList, i?: number): string;
        static large(a: SettingList, b: SettingList, i?: number): boolean;
        static max(a: SettingList, b: SettingList, i?: number): SettingList;
        static json(a: SettingList, data: any): SettingList;
        static setProperty(a: SettingList, p: number, value: any): SettingList;
    }
}
declare module "SeverConfigBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class SeverConfigBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<SeverConfigBase>;
        /**配置ID*/
        id: string;
        /**备注*/
        desc: string;
        /**ip*/
        ip: string;
        /**网关地址*/
        gateway: string;
        /**MAC地址*/
        MAC: string;
        /**启动时间*/
        setupTime: number;
        /**状态*/
        status: number;
        /**当前人数*/
        playerSum: number;
        /**是否为网关*/
        isGate: boolean;
        /**备注IP*/
        descIP: string;
        /**心跳断开限制*/
        heatbeatLimit: number;
        /**日排名人数*/
        dailyRankMax: number;
        /**周排名人数*/
        weeklyRankMax: number;
        /**月排名人数*/
        monthlyRankMax: number;
        /**日排名一页显示*/
        dailyPage: number;
        /**周排名一页显示*/
        weeklyPage: number;
        /**月排名一页显示*/
        monthlyPage: number;
        /**是否使用钱包*/
        useWallet: boolean;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: SeverConfigBase): SeverConfigBase;
        clone(old: SeverConfigBase): void;
        private static params;
        static add(a: SeverConfigBase, b: SeverConfigBase, start: number | undefined, end: number, limit: SeverConfigBase): SeverConfigBase | null;
        static sub(a: SeverConfigBase, b: SeverConfigBase, start: number | undefined, end: number): SeverConfigBase | null;
        static random(src: SeverConfigBase, i?: number): string;
        static large(a: SeverConfigBase, b: SeverConfigBase, i?: number): boolean;
        static max(a: SeverConfigBase, b: SeverConfigBase, i?: number): SeverConfigBase;
        static json(a: SeverConfigBase, data: any): SeverConfigBase;
        static setProperty(a: SeverConfigBase, p: number, value: any): SeverConfigBase;
    }
}
declare module "ShopList" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class ShopList extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<ShopList>;
        /**配置ID*/
        id: string;
        /**备注*/
        desc: string;
        /**道具配置*/
        itemData: string;
        /**货币类型*/
        shopType: string[];
        /**实际售价*/
        sellPrice: number[];
        /**显示原价*/
        showPrice: number[];
        /**折扣*/
        onOff: number[];
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: ShopList): ShopList;
        clone(old: ShopList): void;
        private static params;
        static add(a: ShopList, b: ShopList, start: number | undefined, end: number, limit: ShopList): ShopList | null;
        static sub(a: ShopList, b: ShopList, start: number | undefined, end: number): ShopList | null;
        static random(src: ShopList, i?: number): string;
        static large(a: ShopList, b: ShopList, i?: number): boolean;
        static max(a: ShopList, b: ShopList, i?: number): ShopList;
        static json(a: ShopList, data: any): ShopList;
        static setProperty(a: ShopList, p: number, value: any): ShopList;
    }
}
declare module "ShopSet" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class ShopSet extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<ShopSet>;
        /**配置ID*/
        id: string;
        /**商店ID*/
        shopId: number;
        /**备注*/
        desc: string;
        /**道具名字*/
        itemName: string;
        /**商品列表*/
        goodsList: number;
        /**货币类型*/
        shopType: string[];
        /**实际售价*/
        sellPrice: number[];
        /**显示原价*/
        showPrice: number[];
        /**折扣*/
        onOff: number[];
        /**是否显示*/
        visible: boolean;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: ShopSet): ShopSet;
        clone(old: ShopSet): void;
        private static params;
        static add(a: ShopSet, b: ShopSet, start: number | undefined, end: number, limit: ShopSet): ShopSet | null;
        static sub(a: ShopSet, b: ShopSet, start: number | undefined, end: number): ShopSet | null;
        static random(src: ShopSet, i?: number): string;
        static large(a: ShopSet, b: ShopSet, i?: number): boolean;
        static max(a: ShopSet, b: ShopSet, i?: number): ShopSet;
        static json(a: ShopSet, data: any): ShopSet;
        static setProperty(a: ShopSet, p: number, value: any): ShopSet;
    }
}
declare module "SquidGameConfigBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class SquidGameConfigBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<SquidGameConfigBase>;
        /**配置ID*/
        id: string;
        /**备注*/
        desc: string;
        /**用户列表*/
        players: string;
        /**每一步距离*/
        stepDis: number;
        /**下落高度*/
        dropHeigth: number;
        /**初始位置*/
        startArea: string;
        /**活动区域*/
        moveArea: string;
        /**正方形安全区*/
        safeRect: string;
        /**三角安全区*/
        safeTriangle: string;
        /**圆形安全区*/
        safeCircular: string;
        /**目标安全区*/
        tagetCircular: string;
        /**小圆安全区1*/
        smallCircular1: string;
        /**小圆安全区2*/
        smallCircular2: string;
        /**简单难度持续时间*/
        easyMode: number;
        /**困难难度开始时间*/
        hardMode: number;
        /**最小力度*/
        powerMin: number;
        /**最大力度*/
        powerMax: number;
        /**最小判定角度*/
        agreeMin: number;
        /**最大判定角度*/
        agreeMax: number;
        /**提前发送时间*/
        advance: number;
        /**游戏总时间*/
        totleTime: number;
        /**倒计时时长*/
        countTime: number;
        /**游戏开始时间*/
        gameTime: number;
        /**游戏状态*/
        gameStatus: number;
        /**倒计时开始时间*/
        countDown: number;
        /**当前时间*/
        nowTime: number;
        /**结束时间*/
        endTime: number;
        /**游戏场景ID*/
        gameScene: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: SquidGameConfigBase): SquidGameConfigBase;
        clone(old: SquidGameConfigBase): void;
        private static params;
        static add(a: SquidGameConfigBase, b: SquidGameConfigBase, start: number | undefined, end: number, limit: SquidGameConfigBase): SquidGameConfigBase | null;
        static sub(a: SquidGameConfigBase, b: SquidGameConfigBase, start: number | undefined, end: number): SquidGameConfigBase | null;
        static random(src: SquidGameConfigBase, i?: number): string;
        static large(a: SquidGameConfigBase, b: SquidGameConfigBase, i?: number): boolean;
        static max(a: SquidGameConfigBase, b: SquidGameConfigBase, i?: number): SquidGameConfigBase;
        static json(a: SquidGameConfigBase, data: any): SquidGameConfigBase;
        static setProperty(a: SquidGameConfigBase, p: number, value: any): SquidGameConfigBase;
    }
}
declare module "SugarCakeBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class SugarCakeBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<SugarCakeBase>;
        /**id*/
        id: number;
        /**配置对应平台*/
        platformType: string;
        /**扣糖饼形状配置*/
        shapePolygon: string;
        /**针角度(角度制)*/
        needleAngle: number;
        /**针缩放*/
        needleScale: number;
        /**开始抖动的起始时间*/
        shakeStartTime: number;
        /**抖动过渡时间(从开始到最大值的时间)*/
        shakeTime: number;
        /**最低抖动值*/
        shakeMinValue: number;
        /**抖动的最大值*/
        shakeMaxValue: number;
        /**最小抖动频率*/
        shakeMinFrequency: number;
        /**最大抖动频率*/
        shakeMaxFrequency: number;
        /**针头宽度(就是划线的最小长度)*/
        needleWidth: number;
        /**线段颜色*/
        lineColor: number;
        /**线条绘制宽度*/
        lineDrawWidth: number;
        /**线条碰撞宽度*/
        lineCollisionWidth: number;
        /**是否绘制线*/
        enableDrawLine: boolean;
        /**是否绘制顶点*/
        enableDrawPoint: boolean;
        /**是否绘制零碎线段的端点*/
        enableDrawBrokenlyPoint: boolean;
        /**需要画多少线才算成功 (0 - 1)*/
        winSchedule: number;
        /**允许断连线段的最大宽度 (像素)*/
        maxBrokenlyWidth: number;
        /**糖饼血量(每次减1*/
        maxHp: number;
        static get list(): cMap<any>;
        static parseData(br: any): void;
        static clone(old: SugarCakeBase): SugarCakeBase;
        private static params;
        static add(a: SugarCakeBase, b: SugarCakeBase, start: number | undefined, end: number, limit: SugarCakeBase): SugarCakeBase | null;
        static sub(a: SugarCakeBase, b: SugarCakeBase, start: number | undefined, end: number): SugarCakeBase | null;
        static random(src: SugarCakeBase, i?: number): string;
        static large(a: SugarCakeBase, b: SugarCakeBase, i?: number): boolean;
        static max(a: SugarCakeBase, b: SugarCakeBase, i?: number): SugarCakeBase;
        static json(a: SugarCakeBase, data: any): SugarCakeBase;
        static setProperty(a: SugarCakeBase, p: number, value: any): SugarCakeBase;
    }
}
declare module "TestList" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class TestList extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<TestList>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**结算时间*/
        resultTime: number;
        /**名次*/
        rank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: TestList): TestList;
        clone(old: TestList): void;
        private static params;
        static add(a: TestList, b: TestList, start: number | undefined, end: number, limit: TestList): TestList | null;
        static sub(a: TestList, b: TestList, start: number | undefined, end: number): TestList | null;
        static random(src: TestList, i?: number): string;
        static large(a: TestList, b: TestList, i?: number): boolean;
        static max(a: TestList, b: TestList, i?: number): TestList;
        static json(a: TestList, data: any): TestList;
        static setProperty(a: TestList, p: number, value: any): TestList;
    }
}
declare module "TimeEvent" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class TimeEvent extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<TimeEvent>;
        /**配置ID*/
        id: string;
        /**任务名称*/
        eventName: string;
        /**任务实际开始时间*/
        taskstartTime: number;
        /**任务结束时间*/
        taskEndTime: number;
        /**上次开始时间*/
        lastStartTime: number;
        /**上次结束时间*/
        lastEndTime: number;
        /**默认时间是0也就是utc时间*/
        serverTimeZone: number;
        /**重复循环次数，0就是无限次循环*/
        LoopCount: number;
        /**已经重复的次数*/
        LoopTimers: number;
        /**第一次是否有cd*/
        isFristNoCD: boolean;
        /**任务间隔执行时间*/
        taskLoopTime: number;
        /**每天任务开始的时间，和loopTime共同执行*/
        startTime: number;
        /**每天任务开始的时间的结束时间*/
        startLimitTime: number;
        /**前置任务id，可以组成任务集合*/
        predecessorTaskID: string;
        /**任务的回调事件名字*/
        taskEventString: string;
        /**任务执行日志列表*/
        taskEventLog: string;
        /**任务目前状态，0等待执行，1正在执行，2执行错误，3执行成功*/
        taskState: number;
        /**任务之前的执行状态，1正在执行，2执行错误，3执行成功，注意写任务的一定要注意可能服务器被中断的情况*/
        taskPreviousState: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: TimeEvent): TimeEvent;
        clone(old: TimeEvent): void;
        private static params;
        static add(a: TimeEvent, b: TimeEvent, start: number | undefined, end: number, limit: TimeEvent): TimeEvent | null;
        static sub(a: TimeEvent, b: TimeEvent, start: number | undefined, end: number): TimeEvent | null;
        static random(src: TimeEvent, i?: number): string;
        static large(a: TimeEvent, b: TimeEvent, i?: number): boolean;
        static max(a: TimeEvent, b: TimeEvent, i?: number): TimeEvent;
        static json(a: TimeEvent, data: any): TimeEvent;
        static setProperty(a: TimeEvent, p: number, value: any): TimeEvent;
    }
}
declare module "TotleRank" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class TotleRank extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<TotleRank>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**总页数*/
        totalPage: number;
        /**自身名次*/
        selfRank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: TotleRank): TotleRank;
        clone(old: TotleRank): void;
        private static params;
        static add(a: TotleRank, b: TotleRank, start: number | undefined, end: number, limit: TotleRank): TotleRank | null;
        static sub(a: TotleRank, b: TotleRank, start: number | undefined, end: number): TotleRank | null;
        static random(src: TotleRank, i?: number): string;
        static large(a: TotleRank, b: TotleRank, i?: number): boolean;
        static max(a: TotleRank, b: TotleRank, i?: number): TotleRank;
        static json(a: TotleRank, data: any): TotleRank;
        static setProperty(a: TotleRank, p: number, value: any): TotleRank;
    }
}
declare module "UserVarBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class UserVarBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<UserVarBase>;
        /**用户uuid*/
        id: string;
        /**用户名*/
        playerName: string;
        /**token*/
        token: string;
        /**密码*/
        passWord: string;
        /**账号状态*/
        status: number;
        /**游戏中账号状态*/
        inGameStatus: number;
        /**人物属性*/
        roleStatus: string;
        /**持有货币*/
        currency: string;
        /**装备道具*/
        equip: string;
        /**持有道具*/
        items: string;
        /**邮箱道具*/
        mailItem: string;
        /**是否屏蔽*/
        isBlock: boolean;
        /**是否记录*/
        isLogUser: boolean;
        /**登录时间*/
        loginTime: number;
        /**游戏经历是否打开*/
        experience: boolean;
        /**游戏经历*/
        Battlelist: string;
        /**玩家头像*/
        playerIcon: string;
        /**持有头像*/
        headPortrait: string;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: UserVarBase): UserVarBase;
        clone(old: UserVarBase): void;
        private static params;
        static add(a: UserVarBase, b: UserVarBase, start: number | undefined, end: number, limit: UserVarBase): UserVarBase | null;
        static sub(a: UserVarBase, b: UserVarBase, start: number | undefined, end: number): UserVarBase | null;
        static random(src: UserVarBase, i?: number): string;
        static large(a: UserVarBase, b: UserVarBase, i?: number): boolean;
        static max(a: UserVarBase, b: UserVarBase, i?: number): UserVarBase;
        static json(a: UserVarBase, data: any): UserVarBase;
        static setProperty(a: UserVarBase, p: number, value: any): UserVarBase;
    }
}
declare module "WalletErrLog" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class WalletErrLog extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<WalletErrLog>;
        /**记录ID*/
        id: string;
        /**类名*/
        className: string;
        /**方法名*/
        methodName: string;
        /**玩家ID*/
        userToken: string;
        /**log信息*/
        logMessage: string;
        /**记录时间*/
        resultTime: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: WalletErrLog): WalletErrLog;
        clone(old: WalletErrLog): void;
        private static params;
        static add(a: WalletErrLog, b: WalletErrLog, start: number | undefined, end: number, limit: WalletErrLog): WalletErrLog | null;
        static sub(a: WalletErrLog, b: WalletErrLog, start: number | undefined, end: number): WalletErrLog | null;
        static random(src: WalletErrLog, i?: number): string;
        static large(a: WalletErrLog, b: WalletErrLog, i?: number): boolean;
        static max(a: WalletErrLog, b: WalletErrLog, i?: number): WalletErrLog;
        static json(a: WalletErrLog, data: any): WalletErrLog;
        static setProperty(a: WalletErrLog, p: number, value: any): WalletErrLog;
    }
}
declare module "WalletLog" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class WalletLog extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<WalletLog>;
        /**记录ID*/
        id: string;
        /**类名*/
        className: string;
        /**方法名*/
        methodName: string;
        /**玩家ID*/
        userToken: string;
        /**log信息*/
        logMessage: string;
        /**记录时间*/
        resultTime: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: WalletLog): WalletLog;
        clone(old: WalletLog): void;
        private static params;
        static add(a: WalletLog, b: WalletLog, start: number | undefined, end: number, limit: WalletLog): WalletLog | null;
        static sub(a: WalletLog, b: WalletLog, start: number | undefined, end: number): WalletLog | null;
        static random(src: WalletLog, i?: number): string;
        static large(a: WalletLog, b: WalletLog, i?: number): boolean;
        static max(a: WalletLog, b: WalletLog, i?: number): WalletLog;
        static json(a: WalletLog, data: any): WalletLog;
        static setProperty(a: WalletLog, p: number, value: any): WalletLog;
    }
}
declare module "WeeklyRank" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class WeeklyRank extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<WeeklyRank>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**总页数*/
        totalPage: number;
        /**自身名次*/
        selfRank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: WeeklyRank): WeeklyRank;
        clone(old: WeeklyRank): void;
        private static params;
        static add(a: WeeklyRank, b: WeeklyRank, start: number | undefined, end: number, limit: WeeklyRank): WeeklyRank | null;
        static sub(a: WeeklyRank, b: WeeklyRank, start: number | undefined, end: number): WeeklyRank | null;
        static random(src: WeeklyRank, i?: number): string;
        static large(a: WeeklyRank, b: WeeklyRank, i?: number): boolean;
        static max(a: WeeklyRank, b: WeeklyRank, i?: number): WeeklyRank;
        static json(a: WeeklyRank, data: any): WeeklyRank;
        static setProperty(a: WeeklyRank, p: number, value: any): WeeklyRank;
    }
}
declare module "WeeklyRankLast" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class WeeklyRankLast extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<WeeklyRankLast>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**结算时间*/
        resultTime: number;
        /**名次*/
        rank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: WeeklyRankLast): WeeklyRankLast;
        clone(old: WeeklyRankLast): void;
        private static params;
        static add(a: WeeklyRankLast, b: WeeklyRankLast, start: number | undefined, end: number, limit: WeeklyRankLast): WeeklyRankLast | null;
        static sub(a: WeeklyRankLast, b: WeeklyRankLast, start: number | undefined, end: number): WeeklyRankLast | null;
        static random(src: WeeklyRankLast, i?: number): string;
        static large(a: WeeklyRankLast, b: WeeklyRankLast, i?: number): boolean;
        static max(a: WeeklyRankLast, b: WeeklyRankLast, i?: number): WeeklyRankLast;
        static json(a: WeeklyRankLast, data: any): WeeklyRankLast;
        static setProperty(a: WeeklyRankLast, p: number, value: any): WeeklyRankLast;
    }
}
declare module "WeeklyRankLog" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class WeeklyRankLog extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<WeeklyRankLog>;
        /**玩家token*/
        id: string;
        /**积分*/
        point: number;
        /**胜场*/
        win: number;
        /**败场*/
        lose: number;
        /**总场次*/
        total: number;
        /**结算时间*/
        resultTime: number;
        /**名次*/
        rank: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: WeeklyRankLog): WeeklyRankLog;
        clone(old: WeeklyRankLog): void;
        private static params;
        static add(a: WeeklyRankLog, b: WeeklyRankLog, start: number | undefined, end: number, limit: WeeklyRankLog): WeeklyRankLog | null;
        static sub(a: WeeklyRankLog, b: WeeklyRankLog, start: number | undefined, end: number): WeeklyRankLog | null;
        static random(src: WeeklyRankLog, i?: number): string;
        static large(a: WeeklyRankLog, b: WeeklyRankLog, i?: number): boolean;
        static max(a: WeeklyRankLog, b: WeeklyRankLog, i?: number): WeeklyRankLog;
        static json(a: WeeklyRankLog, data: any): WeeklyRankLog;
        static setProperty(a: WeeklyRankLog, p: number, value: any): WeeklyRankLog;
    }
}
declare module "WoodConfigBase" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class WoodConfigBase extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<WoodConfigBase>;
        /**配置ID*/
        id: string;
        /**备注*/
        desc: string;
        /**用户列表*/
        players: string;
        /**每一步距离*/
        stepDis: number;
        /**下落高度*/
        dropHeigth: number;
        /**初始位置*/
        startArea: string;
        /**结束位置*/
        finishArea: string;
        /**活动区域*/
        moveArea: string;
        /**NPC位置*/
        npcPos: string;
        /**NPC旋转*/
        npcRot: number;
        /**长度*/
        soundLen: number[];
        /**长度*/
        headTime: number;
        /**最小间隔*/
        minInterval: number;
        /**间隔浮动范围*/
        intervalPlus: number;
        /**提前发送时间*/
        advance: number;
        /**游戏总时间*/
        totleTime: number;
        /**倒计时时长*/
        countTime: number;
        /**游戏开始时间*/
        gameTime: number;
        /**游戏状态*/
        gameStatus: number;
        /**倒计时开始时间*/
        countDown: number;
        /**当前时间*/
        nowTime: number;
        /**结束时间*/
        endTime: number;
        /**游戏场景ID*/
        gameScene: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: WoodConfigBase): WoodConfigBase;
        clone(old: WoodConfigBase): void;
        private static params;
        static add(a: WoodConfigBase, b: WoodConfigBase, start: number | undefined, end: number, limit: WoodConfigBase): WoodConfigBase | null;
        static sub(a: WoodConfigBase, b: WoodConfigBase, start: number | undefined, end: number): WoodConfigBase | null;
        static random(src: WoodConfigBase, i?: number): string;
        static large(a: WoodConfigBase, b: WoodConfigBase, i?: number): boolean;
        static max(a: WoodConfigBase, b: WoodConfigBase, i?: number): WoodConfigBase;
        static json(a: WoodConfigBase, data: any): WoodConfigBase;
        static setProperty(a: WoodConfigBase, p: number, value: any): WoodConfigBase;
    }
}
declare module "WoodSongData" {
    import { ExcelDataBase } from "Data/ExcelDataBase";
    import { cMap } from "Data/Map";
    export class WoodSongData extends ExcelDataBase {
        static versition: number;
        /**
        * 从服务器同步数据到本地
        * @param fields 指定需要同步的字段 例如["name","desc"]
        */
        sync: (fields?: string[]) => Promise<void>;
        /**
        * 保存数据到服务器
        * @param fields 指定需要保存的字段 例如["name","desc"]
        */
        save: (fields?: string[]) => Promise<void>;
        /**
        * 获取数据数量
        */
        static getlistCount: () => Promise<number>;
        /**
        * 获取列表数据
        * @param offset 从什么位置获取 默认值:0
        * @param count 指定需要保存的字段 例如["name","desc"]
        */
        static getlist: (offset?: number, count?: number) => Promise<WoodSongData>;
        /**配置ID*/
        id: string;
        /**播放歌曲ID*/
        playSound: number;
        /**播放时间*/
        playSoundTime: number;
        /**停止时间*/
        stopSoundTime: number;
        static get list(): cMap<any>;
        static set list(v: cMap<any>);
        static parseData(br: any): void;
        static clone(old: WoodSongData): WoodSongData;
        clone(old: WoodSongData): void;
        private static params;
        static add(a: WoodSongData, b: WoodSongData, start: number | undefined, end: number, limit: WoodSongData): WoodSongData | null;
        static sub(a: WoodSongData, b: WoodSongData, start: number | undefined, end: number): WoodSongData | null;
        static random(src: WoodSongData, i?: number): string;
        static large(a: WoodSongData, b: WoodSongData, i?: number): boolean;
        static max(a: WoodSongData, b: WoodSongData, i?: number): WoodSongData;
        static json(a: WoodSongData, data: any): WoodSongData;
        static setProperty(a: WoodSongData, p: number, value: any): WoodSongData;
    }
}
//# sourceMappingURL=ExcelData.d.ts.map