var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
System.register("events/uiEvent", ["eventMgr"], function (exports_1, context_1) {
    "use strict";
    var eventMgr_1, UiEvent;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (eventMgr_1_1) {
                eventMgr_1 = eventMgr_1_1;
            }
        ],
        execute: function () {
            UiEvent = /** @class */ (function (_super) {
                __extends(UiEvent, _super);
                function UiEvent() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return UiEvent;
            }(eventMgr_1.EventBase));
            exports_1("UiEvent", UiEvent);
        }
    };
});
System.register("eventType/eventMapByAutoGen", [], function (exports_2, context_2) {
    "use strict";
    var EventMapByAutoGen;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [],
        execute: function () {
            /** 工具 自动生成该文件
             * 用于按配置预绑定 特定事件（例如 UI 头事件 、xxx 、xxxx）
            */
            EventMapByAutoGen = /** @class */ (function () {
                function EventMapByAutoGen() {
                    //-------------------UI 头事件---------------------------
                    /**
                     * 面板固定格式
                     * UI_xxx_Show  //面板显示
                     * UI_xxx_Hide  //面板隐藏
                     */
                    this["UI_loadPage_Show"] = null;
                    this["UI_loadPage_Hide"] = null;
                    this["UI_mainPage_Show"] = null;
                    this["UI_mainPage_Hide"] = null;
                    //------------------------------------------------------
                }
                return EventMapByAutoGen;
            }());
            exports_2("EventMapByAutoGen", EventMapByAutoGen);
        }
    };
});
System.register("events/BattleRoleTopEvent", ["eventMgr"], function (exports_3, context_3) {
    "use strict";
    var eventMgr_2, BattleRoleTopPosEvent;
    var __moduleName = context_3 && context_3.id;
    return {
        setters: [
            function (eventMgr_2_1) {
                eventMgr_2 = eventMgr_2_1;
            }
        ],
        execute: function () {
            /**
             * * 角色 头顶 UI同步坐标 事件
             */
            BattleRoleTopPosEvent = /** @class */ (function (_super) {
                __extends(BattleRoleTopPosEvent, _super);
                function BattleRoleTopPosEvent() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return BattleRoleTopPosEvent;
            }(eventMgr_2.EventBase));
            exports_3("BattleRoleTopPosEvent", BattleRoleTopPosEvent);
        }
    };
});
// import { gameMathUtil } from "Tools/gameMathUtil";
System.register("eventData/joyData", [], function (exports_4, context_4) {
    "use strict";
    var JoyData;
    var __moduleName = context_4 && context_4.id;
    return {
        setters: [],
        execute: function () {// import { gameMathUtil } from "Tools/gameMathUtil";
            // import { gameMathUtil } from "../../Tool/gameMathUtil";
            /** 遥感数据 */
            JoyData = /** @class */ (function () {
                function JoyData() {
                    this.direction = new m4m.math.vector2();
                    this.angle = 0;
                    this.length = 0;
                }
                return JoyData;
            }());
            exports_4("JoyData", JoyData);
        }
    };
});
System.register("events/joyEvent", ["eventData/joyData", "eventMgr"], function (exports_5, context_5) {
    "use strict";
    var joyData_1, eventMgr_3, JoyEvent;
    var __moduleName = context_5 && context_5.id;
    return {
        setters: [
            function (joyData_1_1) {
                joyData_1 = joyData_1_1;
            },
            function (eventMgr_3_1) {
                eventMgr_3 = eventMgr_3_1;
            }
        ],
        execute: function () {
            /**
             * 子弹事件
             */
            JoyEvent = /** @class */ (function (_super) {
                __extends(JoyEvent, _super);
                function JoyEvent() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.joyData = new joyData_1.JoyData();
                    return _this;
                }
                return JoyEvent;
            }(eventMgr_3.EventBase));
            exports_5("JoyEvent", JoyEvent);
        }
    };
});
System.register("events/PickModeEvent", [], function (exports_6, context_6) {
    "use strict";
    var PickMode, PickModeEvent;
    var __moduleName = context_6 && context_6.id;
    return {
        setters: [],
        execute: function () {
            (function (PickMode) {
                /** 点选 角色 Down*/
                PickMode[PickMode["pick_role_down"] = 0] = "pick_role_down";
                /** 点选 角色 UP */
                PickMode[PickMode["pick_role_up"] = 1] = "pick_role_up";
                /** 选角站位 拖拽角色 */
                PickMode[PickMode["prepare_Role_drag"] = 2] = "prepare_Role_drag";
            })(PickMode || (PickMode = {}));
            exports_6("PickMode", PickMode);
            /** 拣选 模式事件 */
            PickModeEvent = /** @class */ (function () {
                function PickModeEvent() {
                }
                return PickModeEvent;
            }());
            exports_6("PickModeEvent", PickModeEvent);
        }
    };
});
System.register("events/sceneHideEvent", ["eventMgr"], function (exports_7, context_7) {
    "use strict";
    var eventMgr_4, SceneHideEvent;
    var __moduleName = context_7 && context_7.id;
    return {
        setters: [
            function (eventMgr_4_1) {
                eventMgr_4 = eventMgr_4_1;
            }
        ],
        execute: function () {
            /**
             * 场景 可视事件
             */
            SceneHideEvent = /** @class */ (function (_super) {
                __extends(SceneHideEvent, _super);
                function SceneHideEvent() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return SceneHideEvent;
            }(eventMgr_4.EventBase));
            exports_7("SceneHideEvent", SceneHideEvent);
        }
    };
});
System.register("events/sceneShowEvent", ["eventMgr"], function (exports_8, context_8) {
    "use strict";
    var eventMgr_5, SceneShowEvent;
    var __moduleName = context_8 && context_8.id;
    return {
        setters: [
            function (eventMgr_5_1) {
                eventMgr_5 = eventMgr_5_1;
            }
        ],
        execute: function () {
            /**
             * 场景 可视事件
             */
            SceneShowEvent = /** @class */ (function (_super) {
                __extends(SceneShowEvent, _super);
                function SceneShowEvent() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return SceneShowEvent;
            }(eventMgr_5.EventBase));
            exports_8("SceneShowEvent", SceneShowEvent);
        }
    };
});
System.register("events/sceneVisualEvent", ["eventMgr"], function (exports_9, context_9) {
    "use strict";
    var eventMgr_6, SceneType, SceneVisualEvent;
    var __moduleName = context_9 && context_9.id;
    return {
        setters: [
            function (eventMgr_6_1) {
                eventMgr_6 = eventMgr_6_1;
            }
        ],
        execute: function () {
            (function (SceneType) {
                /** 主页菜单地图场景 */
                SceneType[SceneType["HomeMap"] = 0] = "HomeMap";
                /** 战斗场景 */
                SceneType[SceneType["Battle"] = 1] = "Battle";
                /** 角色陈列场景 */
                SceneType[SceneType["Showroom"] = 2] = "Showroom";
                /** 角色预备调整场景 */
                SceneType[SceneType["RolePrepare"] = 3] = "RolePrepare";
                /** UI之上 模型角色 */
                SceneType[SceneType["AboveUI"] = 4] = "AboveUI";
            })(SceneType || (SceneType = {}));
            exports_9("SceneType", SceneType);
            /**
             * 场景 可视事件
             */
            SceneVisualEvent = /** @class */ (function (_super) {
                __extends(SceneVisualEvent, _super);
                function SceneVisualEvent() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return SceneVisualEvent;
            }(eventMgr_6.EventBase));
            exports_9("SceneVisualEvent", SceneVisualEvent);
        }
    };
});
System.register("eventType/eventMapScene", [], function (exports_10, context_10) {
    "use strict";
    var EventMapScene;
    var __moduleName = context_10 && context_10.id;
    return {
        setters: [],
        execute: function () {
            /** 游戏 scene 事件定义接口
             *
            */
            EventMapScene = /** @class */ (function () {
                function EventMapScene() {
                    //-------------------场景战斗事件---------------------------
                    //joy Event
                    /** 摇杆摇晃 */
                    this["joy_shake"] = null;
                    /** 释放摇杆 */
                    this["joy_release"] = null;
                    //role Event
                    //scene Event
                    /** 初始资源加载完毕 */
                    this["res_dependent_loaded"] = null;
                    /** 初始完毕 */
                    this["stage_Inited"] = null;
                    /** 游戏暂停 */
                    this["game_pause"] = null;
                    /** 游戏取消暂停 */
                    this["game_unpause"] = null;
                    /** 场景显示 */
                    this["scene_show"] = null;
                    /** 场景隐藏 */
                    this["scene_hide"] = null;
                    /** 场景 可视化改变（显示 或 隐藏） */
                    this["scene_visual_change"] = null;
                    //
                    /** 开启指定的 拣选模式 */
                    this["pick_mode_enable"] = null;
                    /** 关闭所有 拣选功能 */
                    this["pick_mode_disable"] = null;
                    /** 拣选到了 角色 按下 */
                    this["picked_role_Down"] = null;
                    /** 拣选到了 角色 弹起*/
                    this["picked_role_Up"] = null;
                    /** 拣选到了 角色 ,指定平面滑动 */
                    this["pick_Plane_move"] = null;
                    //----------
                    /** 创建 玩家角色  */
                    // public "player_make": EventGeneric<{ roleInfo: any }> = null;
                    /** 创建 角色  */
                    this["role_make"] = null;
                    /** 移除 角色  */
                    this["role_remove"] = null;
                    /** 角色 创建完毕  */
                    this["role_makeSuccess"] = null;
                    /** 设置主角视角  */
                    this["role_view"] = null;
                    /** 设置主角视角 完成  */
                    this["camera_View_Success"] = null;
                    /** 角色 输入 方向移动  */
                    this["role_Direction"] = null;
                    /** 角色 输入 方向移动释放  */
                    this["role_DirRelease"] = null;
                    /** 角色 输入 加速  */
                    this["role_speedUp"] = null;
                    /** 角色 输入 加速释放  */
                    this["role_speedUpRel"] = null;
                    /** 角色 输入 跳跃  */
                    this["role_jump"] = null;
                    /** 角色 输入 攻击  */
                    this["role_attack"] = null;
                    /** 角色 设置 位置  */
                    this["role_setPos"] = null;
                    /** 角色 设置 Y 轴的旋转角度  */
                    this["role_setYRotate"] = null;
                    /** 角色 设置 AI     */
                    this["role_setAI"] = null;
                    /** 游戏玩家死亡 */
                    this["game_Player_Dead"] = null;
                    /** 游戏中同步配置 */
                    this["game_config"] = null;
                    /** 游戏结算 */
                    this["game_result"] = null;
                    /** 木头人发出音效 */
                    this["game_wooden_audioTime"] = null;
                    /** 木头人停止音效 */
                    this["game_wooden_audioStopTime"] = null;
                    /** 角色 信息更新 */
                    this["role_Data_upDate"] = null;
                    /** 清除其他角色  */
                    this["role_clear_Other"] = null;
                    /** 游戏状态*/
                    this["game_state"] = null;
                    /** 收集当前场景能 替换贴图的模型 */
                    this["replaceTex_Collect_Care"] = null;
                    /** 指定屏幕位置的场景模型替换贴图 */
                    this["replaceTex_By_Point"] = null;
                    /** 指定节点名模型替换贴图 */
                    this["replaceTex_By_Name"] = null;
                    /** 替换贴图的模型 清理 */
                    this["replaceTex_Clear"] = null;
                    /** 替换贴图 成功回调 */
                    this["replaceTex_success_cb"] = null;
                    /** 替换贴图 点击 */
                    this["replaceTex_Point_Down"] = null;
                    /** 替换贴图 点中回调 */
                    this["replaceTex_On_Down"] = null;
                    /** 角色部件替换 目标角色 */
                    this["role_parts_target"] = null;
                    /** 角色部件替换*/
                    this["role_parts_replace"] = null;
                    /** 拣选3D展示 加载模型 */
                    this["pick_display_load"] = null;
                    /** 拣选3D展示 移动模型到指定位置 2D 屏幕 */
                    this["pick_display_move"] = null;
                    /** 拣选3D展示 删除模型 */
                    this["pick_display_remove"] = null;
                    /** 拣选3D展示 屏幕坐标点击拣选模型 */
                    this["pick_display_tryPick"] = null;
                    /** 拣选3D展示 模型加载完毕 */
                    this["pick_display_loaded"] = null;
                    /** 拣选3D展示 模型点击拣选成功 */
                    this["pick_display_picked"] = null;
                    /** 拣选3D展示 移动模型到指定位置 回调 */
                    this["pick_display_onMove"] = null;
                    /** 拣选3D展示 移动模型到指定位置 3D */
                    this["pick_display_Position"] = null;
                    /** 角色doll替换*/
                    this["role_Doll_replace"] = null;
                    /** 角色doll替换 完成回调 */
                    this["role_Doll_replace_cb"] = null;
                }
                return EventMapScene;
            }());
            exports_10("EventMapScene", EventMapScene);
        }
    };
});
System.register("eventType/eventMapUI", [], function (exports_11, context_11) {
    "use strict";
    var EventMapUI;
    var __moduleName = context_11 && context_11.id;
    return {
        setters: [],
        execute: function () {
            /** 游戏 UI 相关事件定义接口
             *
            */
            EventMapUI = /** @class */ (function () {
                function EventMapUI() {
                    //-------------------UI 事件---------------------------
                    /** 摇杆方向 */
                    this["rocker_Direction"] = null;
                    /** 摇杆释放 */
                    this["rocker_Release"] = null;
                    /** 跳跃 按钮点击 */
                    this["rocker_JumpBtn_click"] = null;
                    /** 攻击 按钮点击 */
                    this["rocker_AttackBtn_click"] = null;
                    /** 奔跑 点下 */
                    this["rocker_RunBtn_Down"] = null;
                    /** 奔跑 松开 */
                    this["rocker_RunBtn_Up"] = null;
                    /** 视角转动触摸 */
                    this["rocker_View_move"] = null;
                    /** 视角触摸点下 */
                    this["rocker_View_down"] = null;
                    /** 触摸input UI 释放 */
                    this["rocker_View_FocusResetState"] = null;
                    /** 触摸input UI 是否开启  */
                    this["rocker_View_TouchEnable"] = null;
                }
                return EventMapUI;
            }());
            exports_11("EventMapUI", EventMapUI);
        }
    };
});
System.register("eventMgr", [], function (exports_12, context_12) {
    "use strict";
    var EventBase, EventGeneric, EventDispatcher, EventMgr;
    var __moduleName = context_12 && context_12.id;
    return {
        setters: [],
        execute: function () {
            /** 基础事件对象 */
            EventBase = /** @class */ (function () {
                function EventBase(_data) {
                    if (_data === void 0) { _data = null; }
                    this.data = _data;
                }
                return EventBase;
            }());
            exports_12("EventBase", EventBase);
            /** 泛型参数 事件 */
            EventGeneric = /** @class */ (function (_super) {
                __extends(EventGeneric, _super);
                function EventGeneric(_data) {
                    if (_data === void 0) { _data = null; }
                    return _super.call(this, _data) || this;
                }
                return EventGeneric;
            }(EventBase));
            exports_12("EventGeneric", EventGeneric);
            EventDispatcher = /** @class */ (function (_super) {
                __extends(EventDispatcher, _super);
                function EventDispatcher() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                return EventDispatcher;
            }(m4m.AEvent));
            EventMgr = /** @class */ (function () {
                /** 游戏事件管理类 */
                function EventMgr() {
                }
                /**
                 * 派发事件
                 * @param eventType
                 * @param ev
                 */
                EventMgr.dispatchEvent = function (eventType, ev) {
                    this.eventDisp.Emit(eventType, ev);
                };
                /**
                 * 添加事件监听
                 * @param eventType
                 * @param listener
                 * @param thisArg
                 */
                EventMgr.addListener = function (eventType, listener, thisArg) {
                    this.eventDisp.On(eventType, listener, thisArg);
                };
                /**
                 * 移除事件监听
                 * @param eventType
                 * @param listener
                 * @param thisArg
                 */
                EventMgr.removeListener = function (eventType, listener, thisArg) {
                    this.eventDisp.RemoveListener(eventType, listener, thisArg);
                };
                EventMgr.eventDisp = new EventDispatcher();
                return EventMgr;
            }());
            exports_12("EventMgr", EventMgr);
        }
    };
});
System.register("uiLink", ["Loader/LoaderLibManager", "Tools/miniGame", "eventMgr", "eventType/eventMapByAutoGen"], function (exports_13, context_13) {
    "use strict";
    var LoaderLibManager_1, miniGame_1, eventMgr_7, eventMapByAutoGen_1, UiLink;
    var __moduleName = context_13 && context_13.id;
    return {
        setters: [
            function (LoaderLibManager_1_1) {
                LoaderLibManager_1 = LoaderLibManager_1_1;
            },
            function (miniGame_1_1) {
                miniGame_1 = miniGame_1_1;
            },
            function (eventMgr_7_1) {
                eventMgr_7 = eventMgr_7_1;
            },
            function (eventMapByAutoGen_1_1) {
                eventMapByAutoGen_1 = eventMapByAutoGen_1_1;
            }
        ],
        execute: function () {
            UiLink = /** @class */ (function () {
                /** 连接 UI 初始化 事件 */
                function UiLink() {
                }
                UiLink.getEventKey = function (UIName) {
                    return "UI_".concat(UIName, "_Show");
                };
                /** 检查UI 事件 初始化 */
                UiLink.ckUIShowEventExit = function () {
                    var arr = this.UIList;
                    var temp = new eventMapByAutoGen_1.EventMapByAutoGen(); //方便遍历 定义的事件字段
                    for (var i = 0, len = arr.length; i < len; i++) {
                        var eventKey = this.getEventKey(arr[i]);
                        if (!(eventKey in temp)) {
                            console.error("UI ".concat(arr[i], " \u6CA1\u6709\u5728 eventMap \u4E2D\u5B9A\u4E49 ").concat(eventKey, " \u4E8B\u4EF6\uFF01"));
                        }
                    }
                };
                // /** 微信处理方法 */
                // private static wxFun() {
                //     let arr = this.UIList;
                //     for (let i = 0, len = arr.length; i < len; i++) {
                //         let uiName = arr[i];
                //         let eventKey = this.getEventKey(uiName);
                //         let temp = {
                //             loadJsFun() {
                //                 //取消监听
                //                 EventMgr.removeListener(eventKey as any, temp.loadJsFun, temp);
                //                 //加载JS
                //                 console.log(`开始加载 分包代码 ${uiName}.js`);
                //                 //加载UI JS分包
                //                 let loadTask = m4m["__wx__"].loadSubpackage({
                //                     name: uiName, // name 可以填 name 或者 root
                //                     success(res) {
                //                         // 分包加载成功后通过 success 回调
                //                         window["System"].init();
                //                         //再次派事件
                //                         EventMgr.dispatchEvent(eventKey as any, null);
                //                     },
                //                     fail(res) {
                //                         // 分包加载失败通过 fail 回调
                //                         console.error(`UI Subpackage load fail ${uiName}`);
                //                     },
                //                 });
                //             },
                //         };
                //         EventMgr.addListener(eventKey as any, temp.loadJsFun, temp);
                //     }
                // }
                // /** qq处理方法 */
                // public static qqFun() {
                // }
                /** h5处理方法 */
                UiLink.h5Fun = function () {
                    var arr = this.UIList;
                    var _loop_1 = function (i, len) {
                        var uiName = arr[i];
                        var eventKey = this_1.getEventKey(uiName);
                        var temp = {
                            loadJsFun: function () {
                                //取消监听
                                eventMgr_7.EventMgr.removeListener(eventKey, temp.loadJsFun, temp);
                                //加载JS
                                console.log("\u5F00\u59CB\u52A0\u8F7D \u5206\u5305\u4EE3\u7801 ".concat(uiName, ".js"));
                                //加载UI JS分包
                                var libStr = miniGame_1.miniGame.miniType == miniGame_1.miniAPIType.none ? "lib/node_modules/@types/".concat(uiName, ".js") : uiName;
                                var loadFun = miniGame_1.miniGame.miniType == miniGame_1.miniAPIType.none ? LoaderLibManager_1.LoaderLibManager.Instance.addLib : LoaderLibManager_1.LoaderLibManager.Instance.addSubpackage;
                                loadFun = loadFun.bind(LoaderLibManager_1.LoaderLibManager.Instance);
                                loadFun(libStr, function (isSucc) {
                                    if (!isSucc) {
                                        console.error("UI Subpackage load fail ".concat(uiName));
                                        return;
                                    }
                                    // 分包加载成功后通过 success 回调
                                    window["System"].init();
                                    //再次派事件
                                    eventMgr_7.EventMgr.dispatchEvent(eventKey, null);
                                });
                            },
                        };
                        eventMgr_7.EventMgr.addListener(eventKey, temp.loadJsFun, temp);
                    };
                    var this_1 = this;
                    for (var i = 0, len = arr.length; i < len; i++) {
                        _loop_1(i, len);
                    }
                };
                UiLink.init = function () {
                    var prefixLen = 4;
                    var len = this.UIListStr.length;
                    var str = this.UIListStr.substring(prefixLen, len - prefixLen);
                    this.UIList = JSON.parse(str);
                    //
                    this.ckUIShowEventExit();
                    this.h5Fun();
                    // //------------------
                    // if (m4m["__wx__"]) {
                    //     this.wxFun();
                    // } else if (m4m["__qq__"]) {
                    //     this.qqFun();
                    // } else {
                    //     this.h5Fun();
                    // }
                };
                /** 处理 UI 的列表 */
                UiLink.UIListStr = "__>#[\"loadPage\"]#<__";
                UiLink.UIList = [];
                return UiLink;
            }());
            //初始化
            UiLink.init();
        }
    };
});
System.register("eventData/TransformData", [], function (exports_14, context_14) {
    "use strict";
    var TransformData;
    var __moduleName = context_14 && context_14.id;
    return {
        setters: [],
        execute: function () {
            /**
             * 变换信息 数据
             */
            TransformData = /** @class */ (function () {
                function TransformData() {
                    /** 位置 */
                    this.positon = new m4m.math.vector3();
                    /** 旋转（各轴欧拉角，角度值） */
                    this.euler = new m4m.math.vector3();
                    /** 缩放 */
                    this.scale = new m4m.math.vector3();
                }
                return TransformData;
            }());
            exports_14("TransformData", TransformData);
        }
    };
});
System.register("events/ArrayTypeEvent", ["eventMgr"], function (exports_15, context_15) {
    "use strict";
    var eventMgr_8, ArrayTypeEvent;
    var __moduleName = context_15 && context_15.id;
    return {
        setters: [
            function (eventMgr_8_1) {
                eventMgr_8 = eventMgr_8_1;
            }
        ],
        execute: function () {
            /**
             * 自定义类型的数组数据事件
             */
            ArrayTypeEvent = /** @class */ (function (_super) {
                __extends(ArrayTypeEvent, _super);
                function ArrayTypeEvent() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.array = [];
                    return _this;
                }
                return ArrayTypeEvent;
            }(eventMgr_8.EventBase));
            exports_15("ArrayTypeEvent", ArrayTypeEvent);
        }
    };
});
