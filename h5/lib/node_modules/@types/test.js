var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
System.register("test", ["PSDUI/newUiBase"], function (exports_1, context_1) {
    "use strict";
    var newUiBase_1, test, gamebg_img, button1_btn, rect1_inp, inputbg_img, text1_lab, text2_lab;
    var __moduleName = context_1 && context_1.id;
    return {
        setters: [
            function (newUiBase_1_1) {
                newUiBase_1 = newUiBase_1_1;
            }
        ],
        execute: function () {
            test = /** @class */ (function (_super) {
                __extends(test, _super);
                function test() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.uiName = "test";
                    /***/
                    _this.gamebg_img = new gamebg_img();
                    /***/
                    _this.button1_btn = new button1_btn();
                    /**竖向滑动*/
                    _this.rect1_inp = new rect1_inp();
                    return _this;
                }
                test.prototype.onInit = function () {
                    if (this.onInite) {
                        this.onInite();
                    }
                    //添加按钮事件
                    this.button1_btn.button.addListener(m4m.event.UIEventEnum.PointerClick, this.button1_btn_event, this);
                };
                //按钮事件
                test.prototype.button1_btn_event = function () { if (this.button1_btn_btnEvent)
                    this.button1_btn_btnEvent(); };
                ;
                //文字修改方法
                /**修改label 正在输入文字修改label文字方法*/
                test.prototype.text1_lab_text = function (text) { this.rect1_inp.text1_lab.label.text = text; };
                /**修改label 输入文字修改label文字方法*/
                test.prototype.text2_lab_text = function (text) { this.rect1_inp.text2_lab.label.text = text; };
                return test;
            }(newUiBase_1.newUiBase));
            exports_1("test", test);
            gamebg_img = /** @class */ (function () {
                function gamebg_img() {
                }
                return gamebg_img;
            }());
            exports_1("gamebg_img", gamebg_img);
            button1_btn = /** @class */ (function () {
                function button1_btn() {
                }
                return button1_btn;
            }());
            exports_1("button1_btn", button1_btn);
            rect1_inp = /** @class */ (function () {
                function rect1_inp() {
                    /***/
                    this.inputbg_img = new inputbg_img();
                    /**正在输入文字*/
                    this.text1_lab = new text1_lab();
                    /**输入文字*/
                    this.text2_lab = new text2_lab();
                }
                return rect1_inp;
            }());
            exports_1("rect1_inp", rect1_inp);
            inputbg_img = /** @class */ (function () {
                function inputbg_img() {
                }
                return inputbg_img;
            }());
            exports_1("inputbg_img", inputbg_img);
            text1_lab = /** @class */ (function () {
                function text1_lab() {
                }
                return text1_lab;
            }());
            exports_1("text1_lab", text1_lab);
            text2_lab = /** @class */ (function () {
                function text2_lab() {
                }
                return text2_lab;
            }());
            exports_1("text2_lab", text2_lab);
        }
    };
});
System.register("testView", ["Core/StageMgr", "Manager/UIOpenOrHideManager", "Net/WebsocketTool", "Tools/gameMathUtil", "test"], function (exports_2, context_2) {
    "use strict";
    var StageMgr_1, UIOpenOrHideManager_1, WebsocketTool_1, gameMathUtil_1, test_1, testView;
    var __moduleName = context_2 && context_2.id;
    return {
        setters: [
            function (StageMgr_1_1) {
                StageMgr_1 = StageMgr_1_1;
            },
            function (UIOpenOrHideManager_1_1) {
                UIOpenOrHideManager_1 = UIOpenOrHideManager_1_1;
            },
            function (WebsocketTool_1_1) {
                WebsocketTool_1 = WebsocketTool_1_1;
            },
            function (gameMathUtil_1_1) {
                gameMathUtil_1 = gameMathUtil_1_1;
            },
            function (test_1_1) {
                test_1 = test_1_1;
            }
        ],
        execute: function () {
            testView = /** @class */ (function (_super) {
                __extends(testView, _super);
                function testView() {
                    var _this = _super !== null && _super.apply(this, arguments) || this;
                    _this.noAffected = true;
                    return _this;
                }
                testView.prototype.onInit = function () {
                    _super.prototype.onInit.call(this);
                    this.onShow = this.onShowFunc.bind(this);
                    this.onDispose = this.onDisposeFunc.bind(this);
                    this.onHide = this.onHideFunc.bind(this);
                    //点击登录
                    this.button1_btn_btnEvent = this.loginBtnClick.bind(this);
                    //this.button1_btn.button.addListener(m4m.event.UIEventEnum.PointerDown, this.loginBtnClick, this);
                    var placeholderLabel = this.rect1_inp.inputField.PlaceholderLabel;
                    placeholderLabel.color = new m4m.math.color(0.5, 0.5, 0.5, 1);
                    placeholderLabel.text = "请输入名称";
                    placeholderLabel.transform.markDirty();
                    //ScoreboardManager.Instance.rank = 100;
                    //ScoreboardManager.Instance.score = 200;
                    //ScoreboardManager.Instance.showWinBoard();
                };
                //登录按钮点击
                testView.prototype.loginBtnClick = function () {
                    var text = this.rect1_inp.inputField.TextLabel.text;
                    console.error("点击登录: " + text);
                    if (text == "") {
                        console.error("请输入账号信息！ ");
                        return;
                    }
                    StageMgr_1.StageMgr.playerID = text;
                    WebsocketTool_1.WebsocketTool.Instance.LoginManager_loginWithOutWallet(text, "123");
                    UIOpenOrHideManager_1.UIOpenOrHideManager.Instance.HideTestView();
                    // WebsocketTool.Instance.LoginManager_loginWithOutWallet(text,"123");
                    //UIOpenOrHideManager.Instance.OpenstageselectView();
                    // StageMgr.onLoginServerSuccess();
                    // UIOpenOrHideManager.Instance.HideTestView();
                };
                testView.prototype.onShowFunc = function () {
                    //this.text1_lab_text("");
                    this.text2_lab_text("");
                    this.rect1_inp.inputField.TextLabel.text = this.randomAccount();
                    //隐藏loading
                    // UIOpenOrHideManager.Instance.HideLoadingView();
                    UIOpenOrHideManager_1.UIOpenOrHideManager.Instance.HideTloadingView();
                };
                testView.prototype.onDisposeFunc = function () {
                };
                testView.prototype.onHideFunc = function () {
                };
                //测试用,随机账号
                testView.prototype.randomAccount = function () {
                    var str = "";
                    var length = gameMathUtil_1.gameMathUtil.RandRange(5, 10, true);
                    for (var i = 0; i < length; i++) {
                        str += gameMathUtil_1.gameMathUtil.RandRange(0, 10, true);
                    }
                    console.error("随机账号:", str);
                    return str;
                };
                return testView;
            }(test_1.test));
            exports_2("testView", testView);
        }
    };
});
//# sourceMappingURL=test.js.map