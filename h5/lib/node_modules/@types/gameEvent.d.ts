declare module "events/uiEvent" {
    import { EventBase } from "eventMgr";
    export class UiEvent extends EventBase {
    }
}
declare module "eventType/eventMapByAutoGen" {
    import { UiEvent } from "events/uiEvent";
    /** 工具 自动生成该文件
     * 用于按配置预绑定 特定事件（例如 UI 头事件 、xxx 、xxxx）
    */
    export class EventMapByAutoGen {
        /**
         * 面板固定格式
         * UI_xxx_Show  //面板显示
         * UI_xxx_Hide  //面板隐藏
         */
        "UI_loadPage_Show": UiEvent;
        "UI_loadPage_Hide": UiEvent;
        "UI_mainPage_Show": UiEvent;
        "UI_mainPage_Hide": UiEvent;
    }
}
declare module "events/BattleRoleTopEvent" {
    import { EventBase } from "eventMgr";
    /**
     * * 角色 头顶 UI同步坐标 事件
     */
    export class BattleRoleTopPosEvent extends EventBase {
        /** 角色 头顶 UI同步坐标 */
        topPosMap: {
            [slotID: number]: {
                active: boolean;
                pos: m4m.math.vector2;
            };
        };
    }
}
declare module "eventData/joyData" {
    /** 遥感数据 */
    export class JoyData {
        direction: m4m.math.vector2;
        angle: number;
        length: number;
    }
}
declare module "events/joyEvent" {
    import { JoyData } from "eventData/joyData";
    import { EventBase } from "eventMgr";
    /**
     * 子弹事件
     */
    export class JoyEvent extends EventBase {
        joyData: JoyData;
    }
}
declare module "events/PickModeEvent" {
    export enum PickMode {
        /** 点选 角色 Down*/
        pick_role_down = 0,
        /** 点选 角色 UP */
        pick_role_up = 1,
        /** 选角站位 拖拽角色 */
        prepare_Role_drag = 2
    }
    /** 拣选 模式事件 */
    export class PickModeEvent {
        mode: PickMode;
    }
}
declare module "events/sceneHideEvent" {
    import { EventBase } from "eventMgr";
    /**
     * 场景 可视事件
     */
    export class SceneHideEvent extends EventBase {
        /** 场景ID */
        sceneID: number;
        /** 是否销毁（卸载场景资源） */
        dispose: boolean;
    }
}
declare module "events/sceneShowEvent" {
    import { EventBase } from "eventMgr";
    /**
     * 场景 可视事件
     */
    export class SceneShowEvent extends EventBase {
        /** 场景ID */
        sceneID: number;
        uiName: string;
    }
}
declare module "events/sceneVisualEvent" {
    import { EventBase } from "eventMgr";
    export enum SceneType {
        /** 主页菜单地图场景 */
        HomeMap = 0,
        /** 战斗场景 */
        Battle = 1,
        /** 角色陈列场景 */
        Showroom = 2,
        /** 角色预备调整场景 */
        RolePrepare = 3,
        /** UI之上 模型角色 */
        AboveUI = 4
    }
    /**
     * 场景 可视事件
     */
    export class SceneVisualEvent extends EventBase {
        isShow: boolean;
        sceneID: number;
        sceneType: SceneType;
        uiName: string;
    }
}
declare module "eventType/eventMapScene" {
    import { EventBase, EventGeneric } from "eventMgr";
    import { JoyEvent } from "events/joyEvent";
    import { PickModeEvent } from "events/PickModeEvent";
    import { SceneHideEvent } from "events/sceneHideEvent";
    import { SceneShowEvent } from "events/sceneShowEvent";
    import { SceneVisualEvent } from "events/sceneVisualEvent";
    /** 游戏 scene 事件定义接口
     *
    */
    export class EventMapScene {
        /** 摇杆摇晃 */
        "joy_shake": JoyEvent;
        /** 释放摇杆 */
        "joy_release": JoyEvent;
        /** 初始资源加载完毕 */
        "res_dependent_loaded": EventBase;
        /** 初始完毕 */
        "stage_Inited": EventBase;
        /** 游戏暂停 */
        "game_pause": EventBase;
        /** 游戏取消暂停 */
        "game_unpause": EventBase;
        /** 场景显示 */
        "scene_show": SceneShowEvent;
        /** 场景隐藏 */
        "scene_hide": SceneHideEvent;
        /** 场景 可视化改变（显示 或 隐藏） */
        "scene_visual_change": SceneVisualEvent;
        /** 开启指定的 拣选模式 */
        "pick_mode_enable": PickModeEvent;
        /** 关闭所有 拣选功能 */
        "pick_mode_disable": EventBase;
        /** 拣选到了 角色 按下 */
        "picked_role_Down": EventGeneric<{
            pos: m4m.math.vector2;
            GoId: number;
        }>;
        /** 拣选到了 角色 弹起*/
        "picked_role_Up": EventGeneric<{
            pos: m4m.math.vector2;
            GoId: number;
        }>;
        /** 拣选到了 角色 ,指定平面滑动 */
        "pick_Plane_move": EventGeneric<m4m.math.vector3>;
        /** 创建 玩家角色  */
        /** 创建 角色  */
        "role_make": EventGeneric<{
            roleInfo: any;
        }>;
        /** 移除 角色  */
        "role_remove": EventGeneric<string>;
        /** 角色 创建完毕  */
        "role_makeSuccess": EventGeneric<string>;
        /** 设置主角视角  */
        "role_view": EventGeneric<{
            info: any;
        }>;
        /** 设置主角视角 完成  */
        "camera_View_Success": EventGeneric<string>;
        /** 角色 输入 方向移动  */
        "role_Direction": EventGeneric<{
            GUID: string; /** 移动方向 */
            dir: m4m.math.vector2;
        }>;
        /** 角色 输入 方向移动释放  */
        "role_DirRelease": EventGeneric<{
            GUID: string;
        }>;
        /** 角色 输入 加速  */
        "role_speedUp": EventGeneric<{
            GUID: string;
        }>;
        /** 角色 输入 加速释放  */
        "role_speedUpRel": EventGeneric<{
            GUID: string;
        }>;
        /** 角色 输入 跳跃  */
        "role_jump": EventGeneric<{
            GUID: string;
        }>;
        /** 角色 输入 攻击  */
        "role_attack": EventGeneric<{
            GUID: string;
        }>;
        /** 角色 设置 位置  */
        "role_setPos": EventGeneric<{
            GUID: string;
            pos: m4m.math.vector3;
        }>;
        /** 角色 设置 Y 轴的旋转角度  */
        "role_setYRotate": EventGeneric<{
            GUID: string; /**Y 旋转角度*/
            yAngle: number;
        }>;
        /** 角色 设置 AI     */
        "role_setAI": EventGeneric<{
            GUID: string;
            aiType: number;
        }>;
        /** 游戏玩家死亡 */
        "game_Player_Dead": EventGeneric<{
            GUIDS: string[];
        }>;
        /** 游戏中同步配置 */
        "game_config": EventGeneric<{
            config: any;
        }>;
        /** 游戏结算 */
        "game_result": EventGeneric<{
            resultData: any;
        }>;
        /** 木头人发出音效 */
        "game_wooden_audioTime": EventGeneric<{
            playSound: number;
            playSoundTime: number;
        }>;
        /** 木头人停止音效 */
        "game_wooden_audioStopTime": EventGeneric<{
            stopSoundTime: number;
        }>;
        /** 角色 信息更新 */
        "role_Data_upDate": EventGeneric<{
            data: any;
        }>;
        /** 清除其他角色  */
        "role_clear_Other": EventGeneric<string>;
        /** 游戏状态*/
        "game_state": EventGeneric<{
            gameState: any;
        }>;
        /** 收集当前场景能 替换贴图的模型 */
        "replaceTex_Collect_Care": EventGeneric<{
            carekey: string;
        }>;
        /** 指定屏幕位置的场景模型替换贴图 */
        "replaceTex_By_Point": EventGeneric<{
            x: number;
            y: number;
            textureURL: string;
        }>;
        /** 指定节点名模型替换贴图 */
        "replaceTex_By_Name": EventGeneric<{
            nodeName: string;
            textureURL: string;
        }>;
        /** 替换贴图的模型 清理 */
        "replaceTex_Clear": EventBase;
        /** 替换贴图 成功回调 */
        "replaceTex_success_cb": EventGeneric<string>;
        /** 替换贴图 点击 */
        "replaceTex_Point_Down": EventGeneric<{
            x: number;
            y: number;
        }>;
        /** 替换贴图 点中回调 */
        "replaceTex_On_Down": EventGeneric<string>;
        /** 角色部件替换 目标角色 */
        "role_parts_target": EventGeneric<string>;
        /** 角色部件替换*/
        "role_parts_replace": EventGeneric<{
            partKey: string;
            model: string;
            appointTargetRoleID: string;
        }>;
        /** 拣选3D展示 加载模型 */
        "pick_display_load": EventGeneric<{
            modelName: string;
            scale: number;
            offset: m4m.math.vector3;
            rotate: m4m.math.vector3;
        }>;
        /** 拣选3D展示 移动模型到指定位置 2D 屏幕 */
        "pick_display_move": EventGeneric<{
            name: string;
            x: number;
            y: number;
        }>;
        /** 拣选3D展示 删除模型 */
        "pick_display_remove": EventGeneric<string>;
        /** 拣选3D展示 屏幕坐标点击拣选模型 */
        "pick_display_tryPick": EventGeneric<{
            x: number;
            y: number;
        }>;
        /** 拣选3D展示 模型加载完毕 */
        "pick_display_loaded": EventGeneric<string>;
        /** 拣选3D展示 模型点击拣选成功 */
        "pick_display_picked": EventGeneric<string>;
        /** 拣选3D展示 移动模型到指定位置 回调 */
        "pick_display_onMove": EventGeneric<{
            name: string;
            x: number;
            y: number;
            z: number;
        }>;
        /** 拣选3D展示 移动模型到指定位置 3D */
        "pick_display_Position": EventGeneric<{
            name: string;
            pos: m4m.math.vector3;
            rotate: m4m.math.vector3;
            scale: m4m.math.vector3;
        }>;
        /** 角色doll替换*/
        "role_Doll_replace": EventGeneric<{
            roleguid: string;
            dollID: number;
        }>;
        /** 角色doll替换 完成回调 */
        "role_Doll_replace_cb": EventGeneric<string>;
    }
}
declare module "eventType/eventMapUI" {
    import { EventGeneric } from "eventMgr";
    /** 游戏 UI 相关事件定义接口
     *
    */
    export class EventMapUI {
        /** 摇杆方向 */
        "rocker_Direction": EventGeneric<m4m.math.vector2>;
        /** 摇杆释放 */
        "rocker_Release": EventGeneric<null>;
        /** 跳跃 按钮点击 */
        "rocker_JumpBtn_click": EventGeneric<null>;
        /** 攻击 按钮点击 */
        "rocker_AttackBtn_click": EventGeneric<null>;
        /** 奔跑 点下 */
        "rocker_RunBtn_Down": EventGeneric<null>;
        /** 奔跑 松开 */
        "rocker_RunBtn_Up": EventGeneric<null>;
        /** 视角转动触摸 */
        "rocker_View_move": EventGeneric<m4m.math.vector2>;
        /** 视角触摸点下 */
        "rocker_View_down": EventGeneric<null>;
        /** 触摸input UI 释放 */
        "rocker_View_FocusResetState": EventGeneric<null>;
        /** 触摸input UI 是否开启  */
        "rocker_View_TouchEnable": EventGeneric<boolean>;
    }
}
declare module "eventMgr" {
    import { EventMapByAutoGen } from "eventType/eventMapByAutoGen";
    import { EventMapScene } from "eventType/eventMapScene";
    import { EventMapUI } from "eventType/eventMapUI";
    export type eventTypes = EventMapScene & EventMapUI & EventMapByAutoGen;
    /** 基础事件对象 */
    export class EventBase {
        /** 数据 */
        data: any;
        constructor(_data?: any);
    }
    /** 泛型参数 事件 */
    export class EventGeneric<T> extends EventBase {
        data: T;
        constructor(_data?: T);
    }
    /** 游戏事件管理类 */
    export class EventMgr {
        private static eventDisp;
        /**
         * 派发事件
         * @param eventType
         * @param ev
         */
        static dispatchEvent<K extends keyof eventTypes>(eventType: K, ev: eventTypes[K]): void;
        /**
         * 添加事件监听
         * @param eventType
         * @param listener
         * @param thisArg
         */
        static addListener<K extends keyof eventTypes>(eventType: K, listener: (ev: eventTypes[K]) => any, thisArg: any): void;
        /**
         * 移除事件监听
         * @param eventType
         * @param listener
         * @param thisArg
         */
        static removeListener<K extends keyof eventTypes>(eventType: K, listener: Function, thisArg: any): void;
    }
}
declare module "uiLink" { }
declare module "eventData/TransformData" {
    /**
     * 变换信息 数据
     */
    export class TransformData {
        /** 位置 */
        positon: m4m.math.vector3;
        /** 旋转（各轴欧拉角，角度值） */
        euler: m4m.math.vector3;
        /** 缩放 */
        scale: m4m.math.vector3;
    }
}
declare module "events/ArrayTypeEvent" {
    import { EventBase } from "eventMgr";
    /**
     * 自定义类型的数组数据事件
     */
    export class ArrayTypeEvent<T> extends EventBase {
        array: T[];
    }
}
